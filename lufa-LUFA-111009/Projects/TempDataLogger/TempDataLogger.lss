
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00004d00  00004db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d00  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  008001ca  008001ca  00004e7e  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00004e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00004e7f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e90  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c0  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c13f  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002eaf  00000000  00000000  000114cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005d8b  00000000  00000000  0001437e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001398  00000000  00000000  0001a10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003515  00000000  00000000  0001b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000085d1  00000000  00000000  0001e9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000778  00000000  00000000  00026f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c1       	rjmp	.+596    	; 0x256 <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__vector_10>
      2c:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__vector_11>
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c1       	rjmp	.+600    	; 0x29e <__vector_17>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 1d       	adc	r18, r5
      9a:	47 1d       	adc	r20, r7
      9c:	34 1e       	adc	r3, r20
      9e:	47 1d       	adc	r20, r7
      a0:	34 1e       	adc	r3, r20
      a2:	8c 1d       	adc	r24, r12
      a4:	ae 1d       	adc	r26, r14
      a6:	34 1e       	adc	r3, r20
      a8:	01 1e       	adc	r0, r17
      aa:	13 1e       	adc	r1, r19

000000ac <ProductString>:
      ac:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
      bc:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
      cc:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
     10a:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
     11a:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     12a:	20 00 07 05 81 03 10 00 01                           ........

00000133 <DeviceDescriptor>:
     133:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
     143:	dc 01                                               ..

00000145 <GenericReport>:
     145:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     155:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

00000165 <Temperature_Lookup>:
     165:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     175:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     185:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     195:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     1a5:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1b5:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1c5:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1d5:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1e5:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1f5:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     205:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     215:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     225:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     235:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     245:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     255:	00                                                  .

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	d0 e2       	ldi	r29, 0x20	; 32
     25e:	de bf       	out	0x3e, r29	; 62
     260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_copy_data>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	fd e4       	ldi	r31, 0x4D	; 77
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	0b bf       	out	0x3b, r16	; 59
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x14>
     272:	07 90       	elpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	aa 3c       	cpi	r26, 0xCA	; 202
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0x10>

0000027c <__do_clear_bss>:
     27c:	24 e0       	ldi	r18, 0x04	; 4
     27e:	aa ec       	ldi	r26, 0xCA	; 202
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a2 33       	cpi	r26, 0x32	; 50
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	53 d1       	rcall	.+678    	; 0x534 <main>
     28e:	0c 94 7e 26 	jmp	0x4cfc	; 0x4cfc <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     294:	9b b1       	in	r25, 0x0b	; 11
     296:	9f 70       	andi	r25, 0x0F	; 15
     298:	89 2b       	or	r24, r25
     29a:	8b b9       	out	0x0b, r24	; 11
     29c:	08 95       	ret

0000029e <__vector_17>:
static FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     29e:	1f 92       	push	r1
     2a0:	0f 92       	push	r0
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	0f 92       	push	r0
     2a6:	11 24       	eor	r1, r1
     2a8:	0b b6       	in	r0, 0x3b	; 59
     2aa:	0f 92       	push	r0
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	cc 56       	subi	r28, 0x6C	; 108
     2d4:	d1 09       	sbc	r29, r1
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     2da:	fb b0       	in	r15, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (++CurrentLoggingTicks < LoggingInterval500MS_SRAM)
     2dc:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <CurrentLoggingTicks>
     2e0:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <CurrentLoggingTicks+0x1>
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <CurrentLoggingTicks+0x1>
     2ea:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <CurrentLoggingTicks>
     2ee:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <LoggingInterval500MS_SRAM>
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	82 17       	cp	r24, r18
     2f6:	93 07       	cpc	r25, r19
     2f8:	08 f4       	brcc	.+2      	; 0x2fc <__vector_17+0x5e>
     2fa:	58 c0       	rjmp	.+176    	; 0x3ac <__vector_17+0x10e>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     2fc:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <CurrentLoggingTicks+0x1>
     300:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <CurrentLoggingTicks>

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     304:	80 e2       	ldi	r24, 0x20	; 32
     306:	c6 df       	rcall	.-116    	; 0x294 <LEDs_SetAllLEDs>

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     308:	8e b3       	in	r24, 0x1e	; 30
     30a:	81 11       	cpse	r24, r1
     30c:	4c c0       	rjmp	.+152    	; 0x3a6 <__vector_17+0x108>
	{
		TimeDate_t CurrentTimeDate;
		DS1307_GetTimeDate(&CurrentTimeDate);
     30e:	ce 01       	movw	r24, r28
     310:	8b 59       	subi	r24, 0x9B	; 155
     312:	9f 4f       	sbci	r25, 0xFF	; 255
     314:	0e 94 99 09 	call	0x1332	; 0x1332 <DS1307_GetTimeDate>
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());
     318:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <Temperature_GetTemperature>
		DS1307_GetTimeDate(&CurrentTimeDate);

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     31c:	28 2f       	mov	r18, r24
     31e:	08 2e       	mov	r0, r24
     320:	00 0c       	add	r0, r0
     322:	33 0b       	sbc	r19, r19
     324:	3f 93       	push	r19
     326:	8f 93       	push	r24
     328:	a8 96       	adiw	r28, 0x28	; 40
     32a:	8f ad       	ldd	r24, Y+63	; 0x3f
     32c:	a8 97       	sbiw	r28, 0x28	; 40
     32e:	1f 92       	push	r1
     330:	8f 93       	push	r24
     332:	a7 96       	adiw	r28, 0x27	; 39
     334:	8f ad       	ldd	r24, Y+63	; 0x3f
     336:	a7 97       	sbiw	r28, 0x27	; 39
     338:	1f 92       	push	r1
     33a:	8f 93       	push	r24
     33c:	a6 96       	adiw	r28, 0x26	; 38
     33e:	8f ad       	ldd	r24, Y+63	; 0x3f
     340:	a6 97       	sbiw	r28, 0x26	; 38
     342:	1f 92       	push	r1
     344:	8f 93       	push	r24
     346:	ab 96       	adiw	r28, 0x2b	; 43
     348:	8f ad       	ldd	r24, Y+63	; 0x3f
     34a:	ab 97       	sbiw	r28, 0x2b	; 43
     34c:	1f 92       	push	r1
     34e:	8f 93       	push	r24
     350:	aa 96       	adiw	r28, 0x2a	; 42
     352:	8f ad       	ldd	r24, Y+63	; 0x3f
     354:	aa 97       	sbiw	r28, 0x2a	; 42
     356:	1f 92       	push	r1
     358:	8f 93       	push	r24
     35a:	a9 96       	adiw	r28, 0x29	; 41
     35c:	8f ad       	ldd	r24, Y+63	; 0x3f
     35e:	a9 97       	sbiw	r28, 0x29	; 41
     360:	1f 92       	push	r1
     362:	8f 93       	push	r24
     364:	8a e7       	ldi	r24, 0x7A	; 122
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	9f 93       	push	r25
     36a:	8f 93       	push	r24
     36c:	8e 01       	movw	r16, r28
     36e:	0f 5f       	subi	r16, 0xFF	; 255
     370:	1f 4f       	sbci	r17, 0xFF	; 255
     372:	1f 93       	push	r17
     374:	0f 93       	push	r16
     376:	0e 94 89 23 	call	0x4712	; 0x4712 <sprintf>
     37a:	ad 96       	adiw	r28, 0x2d	; 45
     37c:	9f af       	std	Y+63, r25	; 0x3f
     37e:	8e af       	std	Y+62, r24	; 0x3e
     380:	ad 97       	sbiw	r28, 0x2d	; 45
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     382:	9e 01       	movw	r18, r28
     384:	25 59       	subi	r18, 0x95	; 149
     386:	3f 4f       	sbci	r19, 0xFF	; 255
     388:	ac 01       	movw	r20, r24
     38a:	b8 01       	movw	r22, r16
     38c:	8a ec       	ldi	r24, 0xCA	; 202
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 02 15 	call	0x2a04	; 0x2a04 <f_write>
		f_sync(&TempLogFile);
     394:	8a ec       	ldi	r24, 0xCA	; 202
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <f_sync>
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
	}

	LEDs_SetAllLEDs(LEDMask);
     3a6:	8f 2d       	mov	r24, r15
     3a8:	80 7f       	andi	r24, 0xF0	; 240
     3aa:	74 df       	rcall	.-280    	; 0x294 <LEDs_SetAllLEDs>
}
     3ac:	c4 59       	subi	r28, 0x94	; 148
     3ae:	df 4f       	sbci	r29, 0xFF	; 255
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	0f 90       	pop	r0
     3de:	0b be       	out	0x3b, r0	; 59
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	62 97       	sbiw	r28, 0x12	; 18
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	TimeDate_t CurrentTimeDate;
	DS1307_GetTimeDate(&CurrentTimeDate);
     402:	ce 01       	movw	r24, r28
     404:	0d 96       	adiw	r24, 0x0d	; 13
     406:	95 d7       	rcall	.+3882   	; 0x1332 <DS1307_GetTimeDate>
	sprintf(LogFileName, "%02d%02d%02d.csv", CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year);
     408:	8a 89       	ldd	r24, Y+18	; 0x12
     40a:	1f 92       	push	r1
     40c:	8f 93       	push	r24
     40e:	89 89       	ldd	r24, Y+17	; 0x11
     410:	1f 92       	push	r1
     412:	8f 93       	push	r24
     414:	88 89       	ldd	r24, Y+16	; 0x10
     416:	1f 92       	push	r1
     418:	8f 93       	push	r24
     41a:	89 ea       	ldi	r24, 0xA9	; 169
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	8e 01       	movw	r16, r28
     424:	0f 5f       	subi	r16, 0xFF	; 255
     426:	1f 4f       	sbci	r17, 0xFF	; 255
     428:	1f 93       	push	r17
     42a:	0f 93       	push	r16
     42c:	0e 94 89 23 	call	0x4712	; 0x4712 <sprintf>

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     430:	6a ee       	ldi	r22, 0xEA	; 234
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     43a:	42 e1       	ldi	r20, 0x12	; 18
     43c:	b8 01       	movw	r22, r16
     43e:	8a ec       	ldi	r24, 0xCA	; 202
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     446:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <__data_end+0xa>
     44a:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <__data_end+0xb>
     44e:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <__data_end+0xc>
     452:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <__data_end+0xd>
     456:	8a ec       	ldi	r24, 0xCA	; 202
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <f_lseek>
}
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	62 96       	adiw	r28, 0x12	; 18
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <CloseLogFile>:

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     47e:	8a ec       	ldi	r24, 0xCA	; 202
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <f_sync>
	f_close(&TempLogFile);
     486:	8a ec       	ldi	r24, 0xCA	; 202
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <f_close>

0000048e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     48e:	84 b7       	in	r24, 0x34	; 52
     490:	87 7f       	andi	r24, 0xF7	; 247
     492:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	a8 95       	wdr
     49a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     49e:	88 61       	ori	r24, 0x18	; 24
     4a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4a8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	80 e8       	ldi	r24, 0x80	; 128
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4ba:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4bc:	8a b1       	in	r24, 0x0a	; 10
     4be:	80 6f       	ori	r24, 0xF0	; 240
     4c0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4c2:	8b b1       	in	r24, 0x0b	; 11
     4c4:	8f 70       	andi	r24, 0x0F	; 15
     4c6:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     4c8:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     4ca:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     4cc:	84 b1       	in	r24, 0x04	; 4
     4ce:	86 60       	ori	r24, 0x06	; 6
     4d0:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     4d2:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     4d4:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     4d6:	8d b5       	in	r24, 0x2d	; 45
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     4dc:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     4de:	8c e5       	ldi	r24, 0x5C	; 92
     4e0:	8c bd       	out	0x2c, r24	; 44
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     4e2:	87 ea       	ldi	r24, 0xA7	; 167
     4e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     4e8:	80 98       	cbi	0x10, 0	; 16
				DIDR0 |=  (1 << ChannelIndex);
     4ea:	ee e7       	ldi	r30, 0x7E	; 126
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     4f4:	8d b1       	in	r24, 0x0d	; 13
     4f6:	83 60       	ori	r24, 0x03	; 3
     4f8:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     4fa:	8e b1       	in	r24, 0x0e	; 14
     4fc:	83 60       	ori	r24, 0x03	; 3
     4fe:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     500:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <USB_Init>
			 *  \param[in] BitLength  Length of the bits sent on the bus.
			 */
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     504:	ec eb       	ldi	r30, 0xBC	; 188
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	84 60       	ori	r24, 0x04	; 4
     50c:	80 83       	st	Z, r24
				TWSR  = Prescale;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
				TWBR  = BitLength;
     514:	8c e0       	ldi	r24, 0x0C	; 12
     516:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     51a:	81 e4       	ldi	r24, 0x41	; 65
     51c:	9f e0       	ldi	r25, 0x0F	; 15
     51e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     522:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     526:	8d e0       	ldi	r24, 0x0D	; 13
     528:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1  = (1 << OCIE1A);
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     532:	ac c4       	rjmp	.+2392   	; 0xe8c <DataflashManager_ResetDataflashProtections>

00000534 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     534:	ac df       	rcall	.-168    	; 0x48e <SetupHardware>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <eeprom_read_byte>
     53e:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <LoggingInterval500MS_SRAM>

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     542:	8f 3f       	cpi	r24, 0xFF	; 255
     544:	19 f4       	brne	.+6      	; 0x54c <main+0x18>
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <LoggingInterval500MS_SRAM>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     54c:	4e df       	rcall	.-356    	; 0x3ea <OpenLogFile>
     54e:	80 e1       	ldi	r24, 0x10	; 16
     550:	a1 de       	rcall	.-702    	; 0x294 <LEDs_SetAllLEDs>
	sei();
     552:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     554:	8d e0       	ldi	r24, 0x0D	; 13
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HID_Device_USBTask>
		USB_USBTask();
     564:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <USB_USBTask>
     568:	f5 cf       	rjmp	.-22     	; 0x554 <main+0x20>

0000056a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	93 de       	rcall	.-730    	; 0x294 <LEDs_SetAllLEDs>

	/* Close the log file so that the host has exclusive filesystem access */
	CloseLogFile();
     56e:	87 cf       	rjmp	.-242    	; 0x47e <CloseLogFile>

00000570 <EVENT_USB_Device_Disconnect>:
     570:	80 e1       	ldi	r24, 0x10	; 16
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     572:	90 de       	rcall	.-736    	; 0x294 <LEDs_SetAllLEDs>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     574:	3a cf       	rjmp	.-396    	; 0x3ea <OpenLogFile>

00000576 <EVENT_USB_Device_ConfigurationChanged>:
     576:	cf 93       	push	r28
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <HID_Device_ConfigureEndpoints>
     580:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     582:	8d e0       	ldi	r24, 0x0D	; 13
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 96 20 	call	0x412c	; 0x412c <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     58a:	cc 23       	and	r28, r28
     58c:	11 f0       	breq	.+4      	; 0x592 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     58e:	81 11       	cpse	r24, r1
     590:	02 c0       	rjmp	.+4      	; 0x596 <EVENT_USB_Device_ConfigurationChanged+0x20>
     592:	80 e9       	ldi	r24, 0x90	; 144
     594:	01 c0       	rjmp	.+2      	; 0x598 <EVENT_USB_Device_ConfigurationChanged+0x22>
     596:	80 e6       	ldi	r24, 0x60	; 96
}
     598:	cf 91       	pop	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     59a:	7c ce       	rjmp	.-776    	; 0x294 <LEDs_SetAllLEDs>

0000059c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     59c:	8d e0       	ldi	r24, 0x0D	; 13
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <HID_Device_ProcessControlRequest>

000005ac <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     5b2:	80 e2       	ldi	r24, 0x20	; 32
     5b4:	6f de       	rcall	.-802    	; 0x294 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     5b6:	ce 01       	movw	r24, r28
     5b8:	28 d5       	rcall	.+2640   	; 0x100a <SCSI_DecodeSCSICommand>
     5ba:	c8 2f       	mov	r28, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5bc:	80 e6       	ldi	r24, 0x60	; 96
     5be:	6a de       	rcall	.-812    	; 0x294 <LEDs_SetAllLEDs>
     5c0:	8c 2f       	mov	r24, r28

	return CommandSuccess;
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <CALLBACK_HID_Device_CreateHIDReport>:
     5c8:	0f 93       	push	r16
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	e9 01       	movw	r28, r18
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

	DS1307_GetTimeDate(&ReportParams->TimeDate);
     5d2:	c9 01       	movw	r24, r18
     5d4:	ae d6       	rcall	.+3420   	; 0x1332 <DS1307_GetTimeDate>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     5d6:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <LoggingInterval500MS_SRAM>
     5da:	8e 83       	std	Y+6, r24	; 0x06

	*ReportSize = sizeof(Device_Report_t);
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	f8 01       	movw	r30, r16
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	80 83       	st	Z, r24
	return true;
}
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	e9 01       	movw	r28, r18
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
	
	DS1307_SetTimeDate(&ReportParams->TimeDate);
     5f8:	c9 01       	movw	r24, r18
     5fa:	29 d6       	rcall	.+3154   	; 0x124e <DS1307_SetTimeDate>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     5fc:	6e 81       	ldd	r22, Y+6	; 0x06
     5fe:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <LoggingInterval500MS_SRAM>
     602:	68 17       	cp	r22, r24
     604:	41 f0       	breq	.+16     	; 0x616 <CALLBACK_HID_Device_ProcessHIDReport+0x24>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     606:	60 93 1a 04 	sts	0x041A, r22	; 0x80041a <LoggingInterval500MS_SRAM>
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     612:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <eeprom_update_byte>
	}
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     61c:	29 2f       	mov	r18, r25
     61e:	33 27       	eor	r19, r19
     620:	23 30       	cpi	r18, 0x03	; 3
     622:	31 05       	cpc	r19, r1
     624:	e1 f0       	breq	.+56     	; 0x65e <CALLBACK_USB_GetDescriptor+0x42>
     626:	58 f4       	brcc	.+22     	; 0x63e <CALLBACK_USB_GetDescriptor+0x22>
     628:	21 30       	cpi	r18, 0x01	; 1
     62a:	31 05       	cpc	r19, r1
     62c:	99 f0       	breq	.+38     	; 0x654 <CALLBACK_USB_GetDescriptor+0x38>
     62e:	22 30       	cpi	r18, 0x02	; 2
     630:	31 05       	cpc	r19, r1
     632:	69 f5       	brne	.+90     	; 0x68e <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     634:	89 e3       	ldi	r24, 0x39	; 57
     636:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     638:	2a ef       	ldi	r18, 0xFA	; 250
     63a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     63c:	2c c0       	rjmp	.+88     	; 0x696 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     63e:	21 32       	cpi	r18, 0x21	; 33
     640:	31 05       	cpc	r19, r1
     642:	01 f1       	breq	.+64     	; 0x684 <CALLBACK_USB_GetDescriptor+0x68>
     644:	22 32       	cpi	r18, 0x22	; 34
     646:	31 05       	cpc	r19, r1
     648:	11 f5       	brne	.+68     	; 0x68e <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     64a:	80 e2       	ldi	r24, 0x20	; 32
     64c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     64e:	25 e4       	ldi	r18, 0x45	; 69
     650:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     652:	21 c0       	rjmp	.+66     	; 0x696 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     654:	82 e1       	ldi	r24, 0x12	; 18
     656:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     658:	23 e3       	ldi	r18, 0x33	; 51
     65a:	31 e0       	ldi	r19, 0x01	; 1
     65c:	1c c0       	rjmp	.+56     	; 0x696 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     65e:	99 27       	eor	r25, r25
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	91 05       	cpc	r25, r1
     664:	49 f0       	breq	.+18     	; 0x678 <CALLBACK_USB_GetDescriptor+0x5c>
     666:	28 f0       	brcs	.+10     	; 0x672 <CALLBACK_USB_GetDescriptor+0x56>
     668:	02 97       	sbiw	r24, 0x02	; 2
     66a:	89 f4       	brne	.+34     	; 0x68e <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     66c:	ec ea       	ldi	r30, 0xAC	; 172
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	05 c0       	rjmp	.+10     	; 0x67c <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     672:	e6 ef       	ldi	r30, 0xF6	; 246
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     678:	ec ed       	ldi	r30, 0xDC	; 220
     67a:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     67c:	84 91       	lpm	r24, Z
     67e:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     680:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     682:	09 c0       	rjmp	.+18     	; 0x696 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     684:	89 e0       	ldi	r24, 0x09	; 9
     686:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     688:	23 e2       	ldi	r18, 0x23	; 35
     68a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     68c:	04 c0       	rjmp	.+8      	; 0x696 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     696:	fa 01       	movw	r30, r20
     698:	31 83       	std	Z+1, r19	; 0x01
     69a:	20 83       	st	Z, r18
	return Size;
}
     69c:	08 95       	ret

0000069e <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     69e:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     6a0:	9e b1       	in	r25, 0x0e	; 14
     6a2:	93 60       	ori	r25, 0x03	; 3
     6a4:	9e b9       	out	0x0e, r25	; 14
     6a6:	9e b1       	in	r25, 0x0e	; 14
     6a8:	9c 7f       	andi	r25, 0xFC	; 252
     6aa:	83 70       	andi	r24, 0x03	; 3
     6ac:	89 2b       	or	r24, r25
     6ae:	8e b9       	out	0x0e, r24	; 14
     6b0:	08 95       	ret

000006b2 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     6b2:	f5 df       	rcall	.-22     	; 0x69e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6b4:	87 ed       	ldi	r24, 0xD7	; 215
     6b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6b8:	0d b4       	in	r0, 0x2d	; 45
     6ba:	07 fe       	sbrs	r0, 7
     6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     6c6:	0e b4       	in	r0, 0x2e	; 46
     6c8:	07 fe       	sbrs	r0, 7
				Dataflash_ToggleSelectedChipCS();
     6ca:	f9 cf       	rjmp	.-14     	; 0x6be <Dataflash_WaitWhileBusy+0xc>
     6cc:	e8 cf       	rjmp	.-48     	; 0x69e <Dataflash_ToggleSelectedChipCS>

000006ce <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     6ce:	9c 01       	movw	r18, r24
     6d0:	36 95       	lsr	r19
     6d2:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     6d4:	56 e0       	ldi	r21, 0x06	; 6
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	5a 95       	dec	r21
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     6e6:	22 0f       	add	r18, r18
     6e8:	22 0f       	add	r18, r18
     6ea:	22 0f       	add	r18, r18
     6ec:	72 2b       	or	r23, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ee:	7e bd       	out	0x2e, r23	; 46
				while (!(SPSR & (1 << SPIF)));
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f6:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     6fe:	08 95       	ret

00000700 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     700:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     702:	9e b1       	in	r25, 0x0e	; 14
     704:	93 60       	ori	r25, 0x03	; 3
     706:	9e b9       	out	0x0e, r25	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     708:	21 15       	cp	r18, r1
     70a:	80 e4       	ldi	r24, 0x40	; 64
     70c:	38 07       	cpc	r19, r24
     70e:	40 f4       	brcc	.+16     	; 0x720 <Dataflash_SelectChipFromPage+0x20>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     710:	8e b1       	in	r24, 0x0e	; 14
     712:	8c 7f       	andi	r24, 0xFC	; 252
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
				  return;

				if (PageAddress & 0x01)
     714:	20 ff       	sbrs	r18, 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     718:	81 60       	ori	r24, 0x01	; 1
     71a:	01 c0       	rjmp	.+2      	; 0x71e <Dataflash_SelectChipFromPage+0x1e>
     71c:	82 60       	ori	r24, 0x02	; 2
     71e:	8e b9       	out	0x0e, r24	; 14
     720:	08 95       	ret

00000722 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     722:	4f 92       	push	r4
     724:	5f 92       	push	r5
     726:	6f 92       	push	r6
     728:	7f 92       	push	r7
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	4c 01       	movw	r8, r24
     744:	89 01       	movw	r16, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     746:	2a 01       	movw	r4, r20
     748:	3b 01       	movw	r6, r22
     74a:	39 e0       	ldi	r19, 0x09	; 9
     74c:	44 0c       	add	r4, r4
     74e:	55 1c       	adc	r5, r5
     750:	66 1c       	adc	r6, r6
     752:	77 1c       	adc	r7, r7
     754:	3a 95       	dec	r19
     756:	d1 f7       	brne	.-12     	; 0x74c <DataflashManager_WriteBlocks+0x2a>
     758:	6a e0       	ldi	r22, 0x0A	; 10
     75a:	76 94       	lsr	r7
     75c:	67 94       	ror	r6
     75e:	57 94       	ror	r5
     760:	47 94       	ror	r4
     762:	6a 95       	dec	r22
     764:	d1 f7       	brne	.-12     	; 0x75a <DataflashManager_WriteBlocks+0x38>
     766:	e2 01       	movw	r28, r4
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     768:	54 2f       	mov	r21, r20
     76a:	44 27       	eor	r20, r20
     76c:	55 0f       	add	r21, r21
     76e:	7a 01       	movw	r14, r20
     770:	ee 24       	eor	r14, r14
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	f8 22       	and	r15, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     776:	c2 01       	movw	r24, r4
     778:	c3 df       	rcall	.-122    	; 0x700 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77a:	83 e5       	ldi	r24, 0x53	; 83
     77c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_WriteBlocks+0x5c>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	c2 01       	movw	r24, r4
	Dataflash_WaitWhileBusy();
     78a:	a1 df       	rcall	.-190    	; 0x6ce <Dataflash_SendAddressBytes>
     78c:	92 df       	rcall	.-220    	; 0x6b2 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     78e:	84 e8       	ldi	r24, 0x84	; 132
     790:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     792:	0d b4       	in	r0, 0x2d	; 45
     794:	07 fe       	sbrs	r0, 7
     796:	fd cf       	rjmp	.-6      	; 0x792 <DataflashManager_WriteBlocks+0x70>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     798:	b7 01       	movw	r22, r14
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	97 df       	rcall	.-210    	; 0x6ce <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Endpoint_WaitUntilReady>
     7a4:	81 11       	cpse	r24, r1
     7a6:	eb c0       	rjmp	.+470    	; 0x97e <DataflashManager_WriteBlocks+0x25c>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	f6 94       	lsr	r15
     7ac:	e7 94       	ror	r14
     7ae:	9a 95       	dec	r25
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <DataflashManager_WriteBlocks+0x88>
     7b2:	7e 2c       	mov	r7, r14
     7b4:	58 01       	movw	r10, r16
     7b6:	25 e0       	ldi	r18, 0x05	; 5
     7b8:	aa 0c       	add	r10, r10
     7ba:	bb 1c       	adc	r11, r11
     7bc:	2a 95       	dec	r18
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <DataflashManager_WriteBlocks+0x96>
     7c0:	e1 2c       	mov	r14, r1
     7c2:	f1 2c       	mov	r15, r1
     7c4:	61 2c       	mov	r6, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     7c6:	01 15       	cp	r16, r1
     7c8:	11 05       	cpc	r17, r1
     7ca:	09 f4       	brne	.+2      	; 0x7ce <DataflashManager_WriteBlocks+0xac>
     7cc:	bd c0       	rjmp	.+378    	; 0x948 <DataflashManager_WriteBlocks+0x226>
     7ce:	65 01       	movw	r12, r10
     7d0:	ce 0c       	add	r12, r14
     7d2:	df 1c       	adc	r13, r15
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	58 2e       	mov	r5, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     7dc:	85 ff       	sbrs	r24, 5
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <DataflashManager_WriteBlocks+0xc6>
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7e0:	e0 e4       	ldi	r30, 0x40	; 64
     7e2:	7e 12       	cpse	r7, r30
     7e4:	43 c0       	rjmp	.+134    	; 0x86c <DataflashManager_WriteBlocks+0x14a>
     7e6:	0a c0       	rjmp	.+20     	; 0x7fc <DataflashManager_WriteBlocks+0xda>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7ec:	8b 77       	andi	r24, 0x7B	; 123
     7ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     7f2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Endpoint_WaitUntilReady>
     7f6:	88 23       	and	r24, r24
     7f8:	99 f3       	breq	.-26     	; 0x7e0 <DataflashManager_WriteBlocks+0xbe>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     7fa:	c1 c0       	rjmp	.+386    	; 0x97e <DataflashManager_WriteBlocks+0x25c>
     7fc:	5a df       	rcall	.-332    	; 0x6b2 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     7fe:	61 10       	cpse	r6, r1
     800:	02 c0       	rjmp	.+4      	; 0x806 <DataflashManager_WriteBlocks+0xe4>
     802:	83 e8       	ldi	r24, 0x83	; 131
     804:	01 c0       	rjmp	.+2      	; 0x808 <DataflashManager_WriteBlocks+0xe6>
     806:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     808:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80a:	0d b4       	in	r0, 0x2d	; 45
     80c:	07 fe       	sbrs	r0, 7
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     80e:	fd cf       	rjmp	.-6      	; 0x80a <DataflashManager_WriteBlocks+0xe8>
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	ce 01       	movw	r24, r28
     816:	5b df       	rcall	.-330    	; 0x6ce <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     818:	21 96       	adiw	r28, 0x01	; 1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     81a:	8e b1       	in	r24, 0x0e	; 14
     81c:	83 70       	andi	r24, 0x03	; 3
     81e:	81 30       	cpi	r24, 0x01	; 1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     820:	09 f4       	brne	.+2      	; 0x824 <DataflashManager_WriteBlocks+0x102>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     822:	68 26       	eor	r6, r24
     824:	ce 01       	movw	r24, r28

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     826:	6c df       	rcall	.-296    	; 0x700 <Dataflash_SelectChipFromPage>
     828:	f0 e4       	ldi	r31, 0x40	; 64
     82a:	cf 16       	cp	r12, r31
     82c:	d1 04       	cpc	r13, r1
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     82e:	78 f4       	brcc	.+30     	; 0x84e <DataflashManager_WriteBlocks+0x12c>
     830:	40 df       	rcall	.-384    	; 0x6b2 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     832:	61 10       	cpse	r6, r1
     834:	02 c0       	rjmp	.+4      	; 0x83a <DataflashManager_WriteBlocks+0x118>
     836:	83 e5       	ldi	r24, 0x53	; 83
     838:	01 c0       	rjmp	.+2      	; 0x83c <DataflashManager_WriteBlocks+0x11a>
     83a:	85 e5       	ldi	r24, 0x55	; 85
     83c:	8e bd       	out	0x2e, r24	; 46
     83e:	0d b4       	in	r0, 0x2d	; 45
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     840:	07 fe       	sbrs	r0, 7
     842:	fd cf       	rjmp	.-6      	; 0x83e <DataflashManager_WriteBlocks+0x11c>
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	ce 01       	movw	r24, r28
					Dataflash_WaitWhileBusy();
     84a:	41 df       	rcall	.-382    	; 0x6ce <Dataflash_SendAddressBytes>
     84c:	32 df       	rcall	.-412    	; 0x6b2 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     84e:	61 10       	cpse	r6, r1
     850:	02 c0       	rjmp	.+4      	; 0x856 <DataflashManager_WriteBlocks+0x134>
     852:	84 e8       	ldi	r24, 0x84	; 132
     854:	01 c0       	rjmp	.+2      	; 0x858 <DataflashManager_WriteBlocks+0x136>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     856:	87 e8       	ldi	r24, 0x87	; 135
				while (!(SPSR & (1 << SPIF)));
     858:	8e bd       	out	0x2e, r24	; 46
     85a:	0d b4       	in	r0, 0x2d	; 45
     85c:	07 fe       	sbrs	r0, 7
				Dataflash_SendAddressBytes(0, 0);
     85e:	fd cf       	rjmp	.-6      	; 0x85a <DataflashManager_WriteBlocks+0x138>
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	32 df       	rcall	.-412    	; 0x6ce <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     86a:	71 2c       	mov	r7, r1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     86c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     870:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <DataflashManager_WriteBlocks+0x150>
     878:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     87c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
     882:	fd cf       	rjmp	.-6      	; 0x87e <DataflashManager_WriteBlocks+0x15c>
     884:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     888:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_WriteBlocks+0x168>
     890:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     894:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     896:	0d b4       	in	r0, 0x2d	; 45
     898:	07 fe       	sbrs	r0, 7
     89a:	fd cf       	rjmp	.-6      	; 0x896 <DataflashManager_WriteBlocks+0x174>
     89c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_WriteBlocks+0x180>
     8a8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ae:	0d b4       	in	r0, 0x2d	; 45
     8b0:	07 fe       	sbrs	r0, 7
     8b2:	fd cf       	rjmp	.-6      	; 0x8ae <DataflashManager_WriteBlocks+0x18c>
     8b4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ba:	0d b4       	in	r0, 0x2d	; 45
     8bc:	07 fe       	sbrs	r0, 7
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <DataflashManager_WriteBlocks+0x198>
     8c0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c6:	0d b4       	in	r0, 0x2d	; 45
     8c8:	07 fe       	sbrs	r0, 7
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <DataflashManager_WriteBlocks+0x1a4>
     8cc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d2:	0d b4       	in	r0, 0x2d	; 45
     8d4:	07 fe       	sbrs	r0, 7
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <DataflashManager_WriteBlocks+0x1b0>
     8d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8de:	0d b4       	in	r0, 0x2d	; 45
     8e0:	07 fe       	sbrs	r0, 7
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <DataflashManager_WriteBlocks+0x1bc>
     8e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <DataflashManager_WriteBlocks+0x1c8>
     8f0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f6:	0d b4       	in	r0, 0x2d	; 45
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <DataflashManager_WriteBlocks+0x1d4>
     8fc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     900:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_WriteBlocks+0x1e0>
     908:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90e:	0d b4       	in	r0, 0x2d	; 45
     910:	07 fe       	sbrs	r0, 7
     912:	fd cf       	rjmp	.-6      	; 0x90e <DataflashManager_WriteBlocks+0x1ec>
     914:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     918:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     91a:	0d b4       	in	r0, 0x2d	; 45
     91c:	07 fe       	sbrs	r0, 7
     91e:	fd cf       	rjmp	.-6      	; 0x91a <DataflashManager_WriteBlocks+0x1f8>
     920:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     924:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     926:	0d b4       	in	r0, 0x2d	; 45
     928:	07 fe       	sbrs	r0, 7
     92a:	fd cf       	rjmp	.-6      	; 0x926 <DataflashManager_WriteBlocks+0x204>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     92c:	73 94       	inc	r7

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     92e:	f4 01       	movw	r30, r8
     930:	86 a9       	ldd	r24, Z+54	; 0x36
     932:	81 11       	cpse	r24, r1
     934:	24 c0       	rjmp	.+72     	; 0x97e <DataflashManager_WriteBlocks+0x25c>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     936:	5a 94       	dec	r5
     938:	51 10       	cpse	r5, r1
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     93a:	4e cf       	rjmp	.-356    	; 0x7d8 <DataflashManager_WriteBlocks+0xb6>
     93c:	01 50       	subi	r16, 0x01	; 1
     93e:	11 09       	sbc	r17, r1
     940:	f0 e2       	ldi	r31, 0x20	; 32
     942:	ef 1a       	sub	r14, r31
     944:	f1 08       	sbc	r15, r1
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     946:	3f cf       	rjmp	.-386    	; 0x7c6 <DataflashManager_WriteBlocks+0xa4>
     948:	b4 de       	rcall	.-664    	; 0x6b2 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     94a:	61 10       	cpse	r6, r1
     94c:	02 c0       	rjmp	.+4      	; 0x952 <DataflashManager_WriteBlocks+0x230>
     94e:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     950:	01 c0       	rjmp	.+2      	; 0x954 <DataflashManager_WriteBlocks+0x232>
				while (!(SPSR & (1 << SPIF)));
     952:	86 e8       	ldi	r24, 0x86	; 134
     954:	8e bd       	out	0x2e, r24	; 46
     956:	0d b4       	in	r0, 0x2d	; 45
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <DataflashManager_WriteBlocks+0x234>
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	ce 01       	movw	r24, r28
	Dataflash_WaitWhileBusy();
     962:	b5 de       	rcall	.-662    	; 0x6ce <Dataflash_SendAddressBytes>
     964:	a6 de       	rcall	.-692    	; 0x6b2 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     96a:	85 fd       	sbrc	r24, 5
     96c:	05 c0       	rjmp	.+10     	; 0x978 <DataflashManager_WriteBlocks+0x256>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     972:	8b 77       	andi	r24, 0x7B	; 123
     974:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     978:	8e b1       	in	r24, 0x0e	; 14
     97a:	83 60       	ori	r24, 0x03	; 3
     97c:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	7f 90       	pop	r7
     998:	6f 90       	pop	r6
     99a:	5f 90       	pop	r5
     99c:	4f 90       	pop	r4
     99e:	08 95       	ret

000009a0 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	6c 01       	movw	r12, r24
     9ba:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     9bc:	4a 01       	movw	r8, r20
     9be:	5b 01       	movw	r10, r22
     9c0:	29 e0       	ldi	r18, 0x09	; 9
     9c2:	88 0c       	add	r8, r8
     9c4:	99 1c       	adc	r9, r9
     9c6:	aa 1c       	adc	r10, r10
     9c8:	bb 1c       	adc	r11, r11
     9ca:	2a 95       	dec	r18
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <DataflashManager_ReadBlocks+0x22>
     9ce:	3a e0       	ldi	r19, 0x0A	; 10
     9d0:	b6 94       	lsr	r11
     9d2:	a7 94       	ror	r10
     9d4:	97 94       	ror	r9
     9d6:	87 94       	ror	r8
     9d8:	3a 95       	dec	r19
     9da:	d1 f7       	brne	.-12     	; 0x9d0 <DataflashManager_ReadBlocks+0x30>
     9dc:	84 01       	movw	r16, r8
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     9de:	ea 01       	movw	r28, r20
     9e0:	dc 2f       	mov	r29, r28
     9e2:	cc 27       	eor	r28, r28
     9e4:	dd 0f       	add	r29, r29
     9e6:	cc 27       	eor	r28, r28
     9e8:	d2 70       	andi	r29, 0x02	; 2
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     9ea:	c4 01       	movw	r24, r8
     9ec:	89 de       	rcall	.-750    	; 0x700 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ee:	82 ed       	ldi	r24, 0xD2	; 210
     9f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9f2:	0d b4       	in	r0, 0x2d	; 45
     9f4:	07 fe       	sbrs	r0, 7
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     9f8:	be 01       	movw	r22, r28
     9fa:	c4 01       	movw	r24, r8
     9fc:	68 de       	rcall	.-816    	; 0x6ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9fe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a00:	0d b4       	in	r0, 0x2d	; 45
     a02:	07 fe       	sbrs	r0, 7
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a06:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a08:	0d b4       	in	r0, 0x2d	; 45
     a0a:	07 fe       	sbrs	r0, 7
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a0e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a10:	0d b4       	in	r0, 0x2d	; 45
     a12:	07 fe       	sbrs	r0, 7
     a14:	fd cf       	rjmp	.-6      	; 0xa10 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a16:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     a1e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Endpoint_WaitUntilReady>
     a22:	81 11       	cpse	r24, r1
     a24:	c2 c0       	rjmp	.+388    	; 0xbaa <DataflashManager_ReadBlocks+0x20a>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	d6 95       	lsr	r29
     a2a:	c7 95       	ror	r28
     a2c:	8a 95       	dec	r24
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <DataflashManager_ReadBlocks+0x88>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a30:	92 ed       	ldi	r25, 0xD2	; 210
     a32:	b9 2e       	mov	r11, r25

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     a34:	e1 14       	cp	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	09 f4       	brne	.+2      	; 0xa3c <DataflashManager_ReadBlocks+0x9c>
     a3a:	ab c0       	rjmp	.+342    	; 0xb92 <DataflashManager_ReadBlocks+0x1f2>
     a3c:	d0 e2       	ldi	r29, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     a42:	85 ff       	sbrs	r24, 5
     a44:	08 c0       	rjmp	.+16     	; 0xa56 <DataflashManager_ReadBlocks+0xb6>
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     a46:	c0 34       	cpi	r28, 0x40	; 64
     a48:	41 f5       	brne	.+80     	; 0xa9a <DataflashManager_ReadBlocks+0xfa>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     a4a:	0f 5f       	subi	r16, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	c8 01       	movw	r24, r16
     a50:	57 de       	rcall	.-850    	; 0x700 <Dataflash_SelectChipFromPage>
     a52:	be bc       	out	0x2e, r11	; 46
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <DataflashManager_ReadBlocks+0xca>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a5a:	8e 77       	andi	r24, 0x7E	; 126
     a5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     a60:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <Endpoint_WaitUntilReady>
     a64:	88 23       	and	r24, r24
     a66:	79 f3       	breq	.-34     	; 0xa46 <DataflashManager_ReadBlocks+0xa6>
     a68:	a0 c0       	rjmp	.+320    	; 0xbaa <DataflashManager_ReadBlocks+0x20a>
				while (!(SPSR & (1 << SPIF)));
     a6a:	0d b4       	in	r0, 0x2d	; 45
     a6c:	07 fe       	sbrs	r0, 7
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <DataflashManager_ReadBlocks+0xca>
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	c8 01       	movw	r24, r16
     a76:	2b de       	rcall	.-938    	; 0x6ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a78:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a7a:	0d b4       	in	r0, 0x2d	; 45
     a7c:	07 fe       	sbrs	r0, 7
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a80:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a88:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a8a:	0d b4       	in	r0, 0x2d	; 45
     a8c:	07 fe       	sbrs	r0, 7
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <DataflashManager_ReadBlocks+0xea>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a90:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a92:	0d b4       	in	r0, 0x2d	; 45
     a94:	07 fe       	sbrs	r0, 7
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <DataflashManager_ReadBlocks+0xf2>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     a98:	c0 e0       	ldi	r28, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a9a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <DataflashManager_ReadBlocks+0xfc>
				return SPDR;
     aa2:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aa4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aa8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     aaa:	0d b4       	in	r0, 0x2d	; 45
     aac:	07 fe       	sbrs	r0, 7
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <DataflashManager_ReadBlocks+0x10a>
				return SPDR;
     ab0:	8e b5       	in	r24, 0x2e	; 46
     ab2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ab6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ab8:	0d b4       	in	r0, 0x2d	; 45
     aba:	07 fe       	sbrs	r0, 7
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <DataflashManager_ReadBlocks+0x118>
				return SPDR;
     abe:	8e b5       	in	r24, 0x2e	; 46
     ac0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ac4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ac6:	0d b4       	in	r0, 0x2d	; 45
     ac8:	07 fe       	sbrs	r0, 7
     aca:	fd cf       	rjmp	.-6      	; 0xac6 <DataflashManager_ReadBlocks+0x126>
				return SPDR;
     acc:	8e b5       	in	r24, 0x2e	; 46
     ace:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ad2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <DataflashManager_ReadBlocks+0x134>
				return SPDR;
     ada:	8e b5       	in	r24, 0x2e	; 46
     adc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ae0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ae2:	0d b4       	in	r0, 0x2d	; 45
     ae4:	07 fe       	sbrs	r0, 7
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <DataflashManager_ReadBlocks+0x142>
				return SPDR;
     ae8:	8e b5       	in	r24, 0x2e	; 46
     aea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     af0:	0d b4       	in	r0, 0x2d	; 45
     af2:	07 fe       	sbrs	r0, 7
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <DataflashManager_ReadBlocks+0x150>
				return SPDR;
     af6:	8e b5       	in	r24, 0x2e	; 46
     af8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     afc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     afe:	0d b4       	in	r0, 0x2d	; 45
     b00:	07 fe       	sbrs	r0, 7
     b02:	fd cf       	rjmp	.-6      	; 0xafe <DataflashManager_ReadBlocks+0x15e>
				return SPDR;
     b04:	8e b5       	in	r24, 0x2e	; 46
     b06:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b0a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b0c:	0d b4       	in	r0, 0x2d	; 45
     b0e:	07 fe       	sbrs	r0, 7
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <DataflashManager_ReadBlocks+0x16c>
				return SPDR;
     b12:	8e b5       	in	r24, 0x2e	; 46
     b14:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b18:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b1a:	0d b4       	in	r0, 0x2d	; 45
     b1c:	07 fe       	sbrs	r0, 7
     b1e:	fd cf       	rjmp	.-6      	; 0xb1a <DataflashManager_ReadBlocks+0x17a>
				return SPDR;
     b20:	8e b5       	in	r24, 0x2e	; 46
     b22:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b26:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b28:	0d b4       	in	r0, 0x2d	; 45
     b2a:	07 fe       	sbrs	r0, 7
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <DataflashManager_ReadBlocks+0x188>
				return SPDR;
     b2e:	8e b5       	in	r24, 0x2e	; 46
     b30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b34:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b36:	0d b4       	in	r0, 0x2d	; 45
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <DataflashManager_ReadBlocks+0x196>
				return SPDR;
     b3c:	8e b5       	in	r24, 0x2e	; 46
     b3e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b42:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b44:	0d b4       	in	r0, 0x2d	; 45
     b46:	07 fe       	sbrs	r0, 7
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <DataflashManager_ReadBlocks+0x1a4>
				return SPDR;
     b4a:	8e b5       	in	r24, 0x2e	; 46
     b4c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b50:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <DataflashManager_ReadBlocks+0x1b2>
				return SPDR;
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b5e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b60:	0d b4       	in	r0, 0x2d	; 45
     b62:	07 fe       	sbrs	r0, 7
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <DataflashManager_ReadBlocks+0x1c0>
				return SPDR;
     b66:	8e b5       	in	r24, 0x2e	; 46
     b68:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b6c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b6e:	0d b4       	in	r0, 0x2d	; 45
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <DataflashManager_ReadBlocks+0x1ce>
				return SPDR;
     b74:	8e b5       	in	r24, 0x2e	; 46
     b76:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     b7a:	cf 5f       	subi	r28, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     b7c:	f6 01       	movw	r30, r12
     b7e:	86 a9       	ldd	r24, Z+54	; 0x36
     b80:	81 11       	cpse	r24, r1
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <DataflashManager_ReadBlocks+0x20a>
     b84:	d1 50       	subi	r29, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     b86:	09 f0       	breq	.+2      	; 0xb8a <DataflashManager_ReadBlocks+0x1ea>
     b88:	5a cf       	rjmp	.-332    	; 0xa3e <DataflashManager_ReadBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     b8a:	f1 e0       	ldi	r31, 0x01	; 1
     b8c:	ef 1a       	sub	r14, r31
     b8e:	f1 08       	sbc	r15, r1
     b90:	51 cf       	rjmp	.-350    	; 0xa34 <DataflashManager_ReadBlocks+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     b96:	85 fd       	sbrc	r24, 5
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <DataflashManager_ReadBlocks+0x204>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b9e:	8e 77       	andi	r24, 0x7E	; 126
     ba0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ba4:	8e b1       	in	r24, 0x0e	; 14
     ba6:	83 60       	ori	r24, 0x03	; 3
     ba8:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	08 95       	ret

00000bc4 <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     bc4:	4f 92       	push	r4
     bc6:	5f 92       	push	r5
     bc8:	6f 92       	push	r6
     bca:	7f 92       	push	r7
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	4a 01       	movw	r8, r20
     be6:	89 01       	movw	r16, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     be8:	6b 01       	movw	r12, r22
     bea:	7c 01       	movw	r14, r24
     bec:	99 e0       	ldi	r25, 0x09	; 9
     bee:	cc 0c       	add	r12, r12
     bf0:	dd 1c       	adc	r13, r13
     bf2:	ee 1c       	adc	r14, r14
     bf4:	ff 1c       	adc	r15, r15
     bf6:	9a 95       	dec	r25
     bf8:	d1 f7       	brne	.-12     	; 0xbee <DataflashManager_WriteBlocks_RAM+0x2a>
     bfa:	56 01       	movw	r10, r12
     bfc:	67 01       	movw	r12, r14
     bfe:	2a e0       	ldi	r18, 0x0A	; 10
     c00:	d6 94       	lsr	r13
     c02:	c7 94       	ror	r12
     c04:	b7 94       	ror	r11
     c06:	a7 94       	ror	r10
     c08:	2a 95       	dec	r18
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <DataflashManager_WriteBlocks_RAM+0x3c>
     c0c:	e5 01       	movw	r28, r10
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     c0e:	76 2f       	mov	r23, r22
     c10:	66 27       	eor	r22, r22
     c12:	77 0f       	add	r23, r23
     c14:	7b 01       	movw	r14, r22
     c16:	ee 24       	eor	r14, r14
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	f8 22       	and	r15, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     c1c:	27 01       	movw	r4, r14
     c1e:	44 e0       	ldi	r20, 0x04	; 4
     c20:	56 94       	lsr	r5
     c22:	47 94       	ror	r4
     c24:	4a 95       	dec	r20
     c26:	e1 f7       	brne	.-8      	; 0xc20 <DataflashManager_WriteBlocks_RAM+0x5c>
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     c28:	c5 01       	movw	r24, r10
     c2a:	6a dd       	rcall	.-1324   	; 0x700 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c2c:	83 e5       	ldi	r24, 0x53	; 83
     c2e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c30:	0d b4       	in	r0, 0x2d	; 45
     c32:	07 fe       	sbrs	r0, 7
     c34:	fd cf       	rjmp	.-6      	; 0xc30 <DataflashManager_WriteBlocks_RAM+0x6c>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	c5 01       	movw	r24, r10
	Dataflash_WaitWhileBusy();
     c3c:	48 dd       	rcall	.-1392   	; 0x6ce <Dataflash_SendAddressBytes>
     c3e:	39 dd       	rcall	.-1422   	; 0x6b2 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c40:	84 e8       	ldi	r24, 0x84	; 132
     c42:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c44:	0d b4       	in	r0, 0x2d	; 45
     c46:	07 fe       	sbrs	r0, 7
     c48:	fd cf       	rjmp	.-6      	; 0xc44 <DataflashManager_WriteBlocks_RAM+0x80>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     c4a:	b7 01       	movw	r22, r14
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	3e dd       	rcall	.-1412   	; 0x6ce <Dataflash_SendAddressBytes>
     c52:	64 01       	movw	r12, r8
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	cc 0c       	add	r12, r12
     c58:	dd 1c       	adc	r13, r13
     c5a:	8a 95       	dec	r24
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <DataflashManager_WriteBlocks_RAM+0x92>

	while (TotalBlocks)
     c5e:	e1 2c       	mov	r14, r1
     c60:	f1 2c       	mov	r15, r1
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;
     c62:	51 2c       	mov	r5, r1

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     c64:	81 14       	cp	r8, r1
     c66:	91 04       	cpc	r9, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <DataflashManager_WriteBlocks_RAM+0xa8>
     c6a:	59 c0       	rjmp	.+178    	; 0xd1e <DataflashManager_WriteBlocks_RAM+0x15a>
     c6c:	58 01       	movw	r10, r16
     c6e:	8e ef       	ldi	r24, 0xFE	; 254
     c70:	b8 1a       	sub	r11, r24
     c72:	37 01       	movw	r6, r14
     c74:	6c 0c       	add	r6, r12

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     c76:	7d 1c       	adc	r7, r13
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	48 12       	cpse	r4, r24
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     c7c:	39 c0       	rjmp	.+114    	; 0xcf0 <DataflashManager_WriteBlocks_RAM+0x12c>
     c7e:	19 dd       	rcall	.-1486   	; 0x6b2 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     c80:	51 10       	cpse	r5, r1
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DataflashManager_WriteBlocks_RAM+0xc4>
     c84:	83 e8       	ldi	r24, 0x83	; 131
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <DataflashManager_WriteBlocks_RAM+0xc6>
     c88:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c8a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c8c:	0d b4       	in	r0, 0x2d	; 45
     c8e:	07 fe       	sbrs	r0, 7
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <DataflashManager_WriteBlocks_RAM+0xc8>
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	ce 01       	movw	r24, r28
     c98:	1a dd       	rcall	.-1484   	; 0x6ce <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     c9a:	21 96       	adiw	r28, 0x01	; 1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     c9c:	8e b1       	in	r24, 0x0e	; 14
     c9e:	83 70       	andi	r24, 0x03	; 3
     ca0:	81 30       	cpi	r24, 0x01	; 1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     ca2:	09 f4       	brne	.+2      	; 0xca6 <DataflashManager_WriteBlocks_RAM+0xe2>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     ca4:	58 26       	eor	r5, r24
     ca6:	ce 01       	movw	r24, r28

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     ca8:	2b dd       	rcall	.-1450   	; 0x700 <Dataflash_SelectChipFromPage>
     caa:	80 e4       	ldi	r24, 0x40	; 64
     cac:	68 16       	cp	r6, r24
     cae:	71 04       	cpc	r7, r1
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     cb0:	78 f4       	brcc	.+30     	; 0xcd0 <DataflashManager_WriteBlocks_RAM+0x10c>
     cb2:	ff dc       	rcall	.-1538   	; 0x6b2 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     cb4:	51 10       	cpse	r5, r1
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DataflashManager_WriteBlocks_RAM+0xf8>
     cb8:	83 e5       	ldi	r24, 0x53	; 83
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <DataflashManager_WriteBlocks_RAM+0xfa>
     cbc:	85 e5       	ldi	r24, 0x55	; 85
     cbe:	8e bd       	out	0x2e, r24	; 46
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     cc0:	0d b4       	in	r0, 0x2d	; 45
     cc2:	07 fe       	sbrs	r0, 7
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <DataflashManager_WriteBlocks_RAM+0xfc>
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
					Dataflash_WaitWhileBusy();
     cca:	ce 01       	movw	r24, r28
     ccc:	00 dd       	rcall	.-1536   	; 0x6ce <Dataflash_SendAddressBytes>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     cce:	f1 dc       	rcall	.-1566   	; 0x6b2 <Dataflash_WaitWhileBusy>
     cd0:	e6 dc       	rcall	.-1588   	; 0x69e <Dataflash_ToggleSelectedChipCS>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     cd2:	51 10       	cpse	r5, r1
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DataflashManager_WriteBlocks_RAM+0x116>
     cd6:	84 e8       	ldi	r24, 0x84	; 132
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <DataflashManager_WriteBlocks_RAM+0x118>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cda:	87 e8       	ldi	r24, 0x87	; 135
				while (!(SPSR & (1 << SPIF)));
     cdc:	8e bd       	out	0x2e, r24	; 46
     cde:	0d b4       	in	r0, 0x2d	; 45
     ce0:	07 fe       	sbrs	r0, 7
				Dataflash_SendAddressBytes(0, 0);
     ce2:	fd cf       	rjmp	.-6      	; 0xcde <DataflashManager_WriteBlocks_RAM+0x11a>
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	f0 dc       	rcall	.-1568   	; 0x6ce <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     cee:	41 2c       	mov	r4, r1
     cf0:	f8 01       	movw	r30, r16
     cf2:	00 5f       	subi	r16, 0xF0	; 240
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     cf6:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cf8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     cfa:	0d b4       	in	r0, 0x2d	; 45
     cfc:	07 fe       	sbrs	r0, 7
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <DataflashManager_WriteBlocks_RAM+0x136>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     d00:	0e 17       	cp	r16, r30
     d02:	1f 07       	cpc	r17, r31
     d04:	c1 f7       	brne	.-16     	; 0xcf6 <DataflashManager_WriteBlocks_RAM+0x132>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     d06:	43 94       	inc	r4
     d08:	a0 16       	cp	r10, r16
     d0a:	b1 06       	cpc	r11, r17
     d0c:	09 f0       	breq	.+2      	; 0xd10 <DataflashManager_WriteBlocks_RAM+0x14c>
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     d0e:	b4 cf       	rjmp	.-152    	; 0xc78 <DataflashManager_WriteBlocks_RAM+0xb4>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	88 1a       	sub	r8, r24
     d14:	91 08       	sbc	r9, r1
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	e8 1a       	sub	r14, r24
     d1a:	f1 08       	sbc	r15, r1
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     d1c:	a3 cf       	rjmp	.-186    	; 0xc64 <DataflashManager_WriteBlocks_RAM+0xa0>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     d1e:	c9 dc       	rcall	.-1646   	; 0x6b2 <Dataflash_WaitWhileBusy>
     d20:	51 10       	cpse	r5, r1
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DataflashManager_WriteBlocks_RAM+0x164>
     d24:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <DataflashManager_WriteBlocks_RAM+0x166>
				while (!(SPSR & (1 << SPIF)));
     d28:	86 e8       	ldi	r24, 0x86	; 134
     d2a:	8e bd       	out	0x2e, r24	; 46
     d2c:	0d b4       	in	r0, 0x2d	; 45
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     d2e:	07 fe       	sbrs	r0, 7
     d30:	fd cf       	rjmp	.-6      	; 0xd2c <DataflashManager_WriteBlocks_RAM+0x168>
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	ce 01       	movw	r24, r28
	Dataflash_WaitWhileBusy();
     d38:	ca dc       	rcall	.-1644   	; 0x6ce <Dataflash_SendAddressBytes>
     d3a:	bb dc       	rcall	.-1674   	; 0x6b2 <Dataflash_WaitWhileBusy>
     d3c:	8e b1       	in	r24, 0x0e	; 14
     d3e:	83 60       	ori	r24, 0x03	; 3
     d40:	8e b9       	out	0x0e, r24	; 14

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	7f 90       	pop	r7
     d5c:	6f 90       	pop	r6
     d5e:	5f 90       	pop	r5
     d60:	4f 90       	pop	r4
     d62:	08 95       	ret

00000d64 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     d64:	4f 92       	push	r4
     d66:	5f 92       	push	r5
     d68:	6f 92       	push	r6
     d6a:	7f 92       	push	r7
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	5a 01       	movw	r10, r20
     d80:	89 01       	movw	r16, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     d82:	2b 01       	movw	r4, r22
     d84:	3c 01       	movw	r6, r24
     d86:	99 e0       	ldi	r25, 0x09	; 9
     d88:	44 0c       	add	r4, r4
     d8a:	55 1c       	adc	r5, r5
     d8c:	66 1c       	adc	r6, r6
     d8e:	77 1c       	adc	r7, r7
     d90:	9a 95       	dec	r25
     d92:	d1 f7       	brne	.-12     	; 0xd88 <DataflashManager_ReadBlocks_RAM+0x24>
     d94:	2a e0       	ldi	r18, 0x0A	; 10
     d96:	76 94       	lsr	r7
     d98:	67 94       	ror	r6
     d9a:	57 94       	ror	r5
     d9c:	47 94       	ror	r4
     d9e:	2a 95       	dec	r18
     da0:	d1 f7       	brne	.-12     	; 0xd96 <DataflashManager_ReadBlocks_RAM+0x32>
     da2:	62 01       	movw	r12, r4
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     da4:	eb 01       	movw	r28, r22
     da6:	dc 2f       	mov	r29, r28
     da8:	cc 27       	eor	r28, r28
     daa:	dd 0f       	add	r29, r29
     dac:	cc 27       	eor	r28, r28
     dae:	d2 70       	andi	r29, 0x02	; 2
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     db0:	ce 01       	movw	r24, r28
     db2:	44 e0       	ldi	r20, 0x04	; 4
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	4a 95       	dec	r20
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <DataflashManager_ReadBlocks_RAM+0x50>
     dbc:	f8 2e       	mov	r15, r24

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     dbe:	c2 01       	movw	r24, r4
     dc0:	9f dc       	rcall	.-1730   	; 0x700 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dc2:	82 ed       	ldi	r24, 0xD2	; 210
     dc4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     dc6:	0d b4       	in	r0, 0x2d	; 45
     dc8:	07 fe       	sbrs	r0, 7
     dca:	fd cf       	rjmp	.-6      	; 0xdc6 <DataflashManager_ReadBlocks_RAM+0x62>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     dcc:	be 01       	movw	r22, r28
     dce:	c2 01       	movw	r24, r4
     dd0:	7e dc       	rcall	.-1796   	; 0x6ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dd2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     dd4:	0d b4       	in	r0, 0x2d	; 45
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <DataflashManager_ReadBlocks_RAM+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dda:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <DataflashManager_ReadBlocks_RAM+0x78>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     de2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     de4:	0d b4       	in	r0, 0x2d	; 45
     de6:	07 fe       	sbrs	r0, 7
     de8:	fd cf       	rjmp	.-6      	; 0xde4 <DataflashManager_ReadBlocks_RAM+0x80>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <DataflashManager_ReadBlocks_RAM+0x88>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     df2:	82 ed       	ldi	r24, 0xD2	; 210
     df4:	78 2e       	mov	r7, r24
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     df6:	a1 14       	cp	r10, r1
     df8:	b1 04       	cpc	r11, r1
     dfa:	b9 f1       	breq	.+110    	; 0xe6a <DataflashManager_ReadBlocks_RAM+0x106>
     dfc:	e8 01       	movw	r28, r16
     dfe:	de 5f       	subi	r29, 0xFE	; 254

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     e00:	80 e4       	ldi	r24, 0x40	; 64
     e02:	f8 12       	cpse	r15, r24
     e04:	1e c0       	rjmp	.+60     	; 0xe42 <DataflashManager_ReadBlocks_RAM+0xde>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	c8 1a       	sub	r12, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e0a:	d8 0a       	sbc	r13, r24
     e0c:	c6 01       	movw	r24, r12
     e0e:	78 dc       	rcall	.-1808   	; 0x700 <Dataflash_SelectChipFromPage>
     e10:	7e bc       	out	0x2e, r7	; 46
				while (!(SPSR & (1 << SPIF)));
     e12:	0d b4       	in	r0, 0x2d	; 45
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <DataflashManager_ReadBlocks_RAM+0xae>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	c6 01       	movw	r24, r12
     e1e:	57 dc       	rcall	.-1874   	; 0x6ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e20:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e22:	0d b4       	in	r0, 0x2d	; 45
     e24:	07 fe       	sbrs	r0, 7
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <DataflashManager_ReadBlocks_RAM+0xbe>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e28:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e2a:	0d b4       	in	r0, 0x2d	; 45
     e2c:	07 fe       	sbrs	r0, 7
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <DataflashManager_ReadBlocks_RAM+0xc6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e30:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e32:	0d b4       	in	r0, 0x2d	; 45
     e34:	07 fe       	sbrs	r0, 7
     e36:	fd cf       	rjmp	.-6      	; 0xe32 <DataflashManager_ReadBlocks_RAM+0xce>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e38:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e3a:	0d b4       	in	r0, 0x2d	; 45
     e3c:	07 fe       	sbrs	r0, 7
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <DataflashManager_ReadBlocks_RAM+0xd6>
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     e40:	f1 2c       	mov	r15, r1
     e42:	f8 01       	movw	r30, r16
     e44:	00 5f       	subi	r16, 0xF0	; 240
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     e48:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <DataflashManager_ReadBlocks_RAM+0xe6>
				return SPDR;
     e50:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     e52:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     e54:	e0 17       	cp	r30, r16
     e56:	f1 07       	cpc	r31, r17
     e58:	b9 f7       	brne	.-18     	; 0xe48 <DataflashManager_ReadBlocks_RAM+0xe4>
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     e5a:	f3 94       	inc	r15
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     e5c:	c0 17       	cp	r28, r16
     e5e:	d1 07       	cpc	r29, r17
     e60:	79 f6       	brne	.-98     	; 0xe00 <DataflashManager_ReadBlocks_RAM+0x9c>
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	a8 1a       	sub	r10, r24
     e66:	b1 08       	sbc	r11, r1
     e68:	c6 cf       	rjmp	.-116    	; 0xdf6 <DataflashManager_ReadBlocks_RAM+0x92>
     e6a:	8e b1       	in	r24, 0x0e	; 14
     e6c:	83 60       	ori	r24, 0x03	; 3
     e6e:	8e b9       	out	0x0e, r24	; 14
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	08 95       	ret

00000e8c <DataflashManager_ResetDataflashProtections>:
     e8c:	8e b1       	in	r24, 0x0e	; 14
     e8e:	8c 7f       	andi	r24, 0xFC	; 252
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e94:	87 ed       	ldi	r24, 0xD7	; 215
     e96:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e98:	0d b4       	in	r0, 0x2d	; 45
     e9a:	07 fe       	sbrs	r0, 7
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     e9e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ea0:	0d b4       	in	r0, 0x2d	; 45
     ea2:	07 fe       	sbrs	r0, 7
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     ea6:	0e b4       	in	r0, 0x2e	; 46
     ea8:	01 fc       	sbrc	r0, 1
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <DataflashManager_ResetDataflashProtections+0x2e>
     eac:	8e b1       	in	r24, 0x0e	; 14
     eae:	8c 7f       	andi	r24, 0xFC	; 252
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eb4:	87 ed       	ldi	r24, 0xD7	; 215
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	16 c0       	rjmp	.+44     	; 0xee6 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     eba:	f1 db       	rcall	.-2078   	; 0x69e <Dataflash_ToggleSelectedChipCS>
     ebc:	8d e3       	ldi	r24, 0x3D	; 61
     ebe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ec0:	0d b4       	in	r0, 0x2d	; 45
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ec6:	8a e2       	ldi	r24, 0x2A	; 42
     ec8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eca:	0d b4       	in	r0, 0x2d	; 45
     ecc:	07 fe       	sbrs	r0, 7
     ece:	fd cf       	rjmp	.-6      	; 0xeca <DataflashManager_ResetDataflashProtections+0x3e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ed0:	8f e7       	ldi	r24, 0x7F	; 127
     ed2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ed4:	0d b4       	in	r0, 0x2d	; 45
     ed6:	07 fe       	sbrs	r0, 7
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <DataflashManager_ResetDataflashProtections+0x48>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eda:	8a e9       	ldi	r24, 0x9A	; 154
     edc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ede:	0d b4       	in	r0, 0x2d	; 45
     ee0:	07 fe       	sbrs	r0, 7
     ee2:	fd cf       	rjmp	.-6      	; 0xede <DataflashManager_ResetDataflashProtections+0x52>
     ee4:	e3 cf       	rjmp	.-58     	; 0xeac <DataflashManager_ResetDataflashProtections+0x20>
     ee6:	0d b4       	in	r0, 0x2d	; 45
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <DataflashManager_ResetDataflashProtections+0x5a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     eec:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     eee:	0d b4       	in	r0, 0x2d	; 45
     ef0:	07 fe       	sbrs	r0, 7
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <DataflashManager_ResetDataflashProtections+0x62>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     ef4:	0e b4       	in	r0, 0x2e	; 46
     ef6:	01 fc       	sbrc	r0, 1
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <DataflashManager_ResetDataflashProtections+0x76>
     efa:	8e b1       	in	r24, 0x0e	; 14
     efc:	83 60       	ori	r24, 0x03	; 3
     efe:	8e b9       	out	0x0e, r24	; 14
	{
		Dataflash_ToggleSelectedChipCS();
     f00:	08 95       	ret
     f02:	cd db       	rcall	.-2150   	; 0x69e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f04:	8d e3       	ldi	r24, 0x3D	; 61
     f06:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f08:	0d b4       	in	r0, 0x2d	; 45
     f0a:	07 fe       	sbrs	r0, 7
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <DataflashManager_ResetDataflashProtections+0x7c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f0e:	8a e2       	ldi	r24, 0x2A	; 42
     f10:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f12:	0d b4       	in	r0, 0x2d	; 45
     f14:	07 fe       	sbrs	r0, 7
     f16:	fd cf       	rjmp	.-6      	; 0xf12 <DataflashManager_ResetDataflashProtections+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f18:	8f e7       	ldi	r24, 0x7F	; 127
     f1a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f1c:	0d b4       	in	r0, 0x2d	; 45
     f1e:	07 fe       	sbrs	r0, 7
     f20:	fd cf       	rjmp	.-6      	; 0xf1c <DataflashManager_ResetDataflashProtections+0x90>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f22:	8a e9       	ldi	r24, 0x9A	; 154
     f24:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f26:	0d b4       	in	r0, 0x2d	; 45
     f28:	07 fe       	sbrs	r0, 7
     f2a:	fd cf       	rjmp	.-6      	; 0xf26 <DataflashManager_ResetDataflashProtections+0x9a>
     f2c:	e6 cf       	rjmp	.-52     	; 0xefa <DataflashManager_ResetDataflashProtections+0x6e>

00000f2e <DataflashManager_CheckDataflashOperation>:
     f2e:	8e b1       	in	r24, 0x0e	; 14
     f30:	8c 7f       	andi	r24, 0xFC	; 252
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f36:	8f e9       	ldi	r24, 0x9F	; 159
     f38:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f40:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f42:	0d b4       	in	r0, 0x2d	; 45
     f44:	07 fe       	sbrs	r0, 7
     f46:	fd cf       	rjmp	.-6      	; 0xf42 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     f48:	9e b5       	in	r25, 0x2e	; 46
     f4a:	8e b1       	in	r24, 0x0e	; 14
     f4c:	83 60       	ori	r24, 0x03	; 3
     f4e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     f50:	9f 31       	cpi	r25, 0x1F	; 31
     f52:	a1 f4       	brne	.+40     	; 0xf7c <DataflashManager_CheckDataflashOperation+0x4e>
     f54:	8e b1       	in	r24, 0x0e	; 14
     f56:	8c 7f       	andi	r24, 0xFC	; 252
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f5c:	8f e9       	ldi	r24, 0x9F	; 159
     f5e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f60:	0d b4       	in	r0, 0x2d	; 45
     f62:	07 fe       	sbrs	r0, 7
     f64:	fd cf       	rjmp	.-6      	; 0xf60 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f66:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f68:	0d b4       	in	r0, 0x2d	; 45
     f6a:	07 fe       	sbrs	r0, 7
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     f6e:	9e b5       	in	r25, 0x2e	; 46
     f70:	8e b1       	in	r24, 0x0e	; 14
     f72:	83 60       	ori	r24, 0x03	; 3
     f74:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	9f 31       	cpi	r25, 0x1F	; 31
     f7a:	09 f0       	breq	.+2      	; 0xf7e <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     f7e:	08 95       	ret

00000f80 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     f8c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f8e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     f90:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f92:	7b 8d       	ldd	r23, Y+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     f94:	09 a1       	ldd	r16, Y+33	; 0x21
     f96:	18 a1       	ldd	r17, Y+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
     f98:	41 15       	cp	r20, r1
     f9a:	20 e8       	ldi	r18, 0x80	; 128
     f9c:	52 07       	cpc	r21, r18
     f9e:	61 05       	cpc	r22, r1
     fa0:	71 05       	cpc	r23, r1
     fa2:	68 f0       	brcs	.+26     	; 0xfbe <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     fa4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     fa8:	80 7f       	andi	r24, 0xF0	; 240
     faa:	85 60       	ori	r24, 0x05	; 5
     fac:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     fb0:	81 e2       	ldi	r24, 0x21	; 33
     fb2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SenseData+0xc>
     fb6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	21 c0       	rjmp	.+66     	; 0x1000 <__EEPROM_REGION_LENGTH__>
	}
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     fbe:	98 01       	movw	r18, r16

		return false;
	}
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     fc0:	88 23       	and	r24, r24
     fc2:	19 f0       	breq	.+6      	; 0xfca <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     fc4:	ce 01       	movw	r24, r28
     fc6:	ec dc       	rcall	.-1576   	; 0x9a0 <DataflashManager_ReadBlocks>
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <SCSI_Command_ReadWrite_10+0x4e>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     fca:	ce 01       	movw	r24, r28
     fcc:	aa db       	rcall	.-2220   	; 0x722 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     fce:	c8 01       	movw	r24, r16
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	29 e0       	ldi	r18, 0x09	; 9
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	2a 95       	dec	r18
     fe0:	d1 f7       	brne	.-12     	; 0xfd6 <SCSI_Command_ReadWrite_10+0x56>
     fe2:	4a 89       	ldd	r20, Y+18	; 0x12
     fe4:	5b 89       	ldd	r21, Y+19	; 0x13
     fe6:	6c 89       	ldd	r22, Y+20	; 0x14
     fe8:	7d 89       	ldd	r23, Y+21	; 0x15
     fea:	8a 01       	movw	r16, r20
     fec:	9b 01       	movw	r18, r22
     fee:	08 1b       	sub	r16, r24
     ff0:	19 0b       	sbc	r17, r25
     ff2:	2a 0b       	sbc	r18, r26
     ff4:	3b 0b       	sbc	r19, r27
     ff6:	0a 8b       	std	Y+18, r16	; 0x12
     ff8:	1b 8b       	std	Y+19, r17	; 0x13
     ffa:	2c 8b       	std	Y+20, r18	; 0x14
     ffc:	3d 8b       	std	Y+21, r19	; 0x15

	return true;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	28 97       	sbiw	r28, 0x08	; 8
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    102c:	fc 01       	movw	r30, r24
    102e:	81 8d       	ldd	r24, Z+25	; 0x19
    1030:	8d 31       	cpi	r24, 0x1D	; 29
    1032:	09 f4       	brne	.+2      	; 0x1036 <SCSI_DecodeSCSICommand+0x2c>
    1034:	c2 c0       	rjmp	.+388    	; 0x11ba <SCSI_DecodeSCSICommand+0x1b0>
    1036:	20 f5       	brcc	.+72     	; 0x1080 <SCSI_DecodeSCSICommand+0x76>
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	09 f4       	brne	.+2      	; 0x103e <SCSI_DecodeSCSICommand+0x34>
    103c:	96 c0       	rjmp	.+300    	; 0x116a <SCSI_DecodeSCSICommand+0x160>
    103e:	20 f4       	brcc	.+8      	; 0x1048 <SCSI_DecodeSCSICommand+0x3e>
    1040:	88 23       	and	r24, r24
    1042:	09 f4       	brne	.+2      	; 0x1046 <SCSI_DecodeSCSICommand+0x3c>
    1044:	d9 c0       	rjmp	.+434    	; 0x11f8 <SCSI_DecodeSCSICommand+0x1ee>
    1046:	de c0       	rjmp	.+444    	; 0x1204 <SCSI_DecodeSCSICommand+0x1fa>
    1048:	82 31       	cpi	r24, 0x12	; 18
    104a:	09 f4       	brne	.+2      	; 0x104e <SCSI_DecodeSCSICommand+0x44>
    104c:	58 c0       	rjmp	.+176    	; 0x10fe <SCSI_DecodeSCSICommand+0xf4>
    104e:	8a 31       	cpi	r24, 0x1A	; 26
    1050:	09 f0       	breq	.+2      	; 0x1054 <SCSI_DecodeSCSICommand+0x4a>
    1052:	d8 c0       	rjmp	.+432    	; 0x1204 <SCSI_DecodeSCSICommand+0x1fa>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1054:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1058:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    105c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1060:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1064:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1068:	8e 77       	andi	r24, 0x7E	; 126
    106a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    106e:	f8 01       	movw	r30, r16
    1070:	82 89       	ldd	r24, Z+18	; 0x12
    1072:	93 89       	ldd	r25, Z+19	; 0x13
    1074:	a4 89       	ldd	r26, Z+20	; 0x14
    1076:	b5 89       	ldd	r27, Z+21	; 0x15
    1078:	04 97       	sbiw	r24, 0x04	; 4
    107a:	a1 09       	sbc	r26, r1
    107c:	b1 09       	sbc	r27, r1
    107e:	b7 c0       	rjmp	.+366    	; 0x11ee <SCSI_DecodeSCSICommand+0x1e4>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1080:	88 32       	cpi	r24, 0x28	; 40
    1082:	09 f4       	brne	.+2      	; 0x1086 <SCSI_DecodeSCSICommand+0x7c>
    1084:	ae c0       	rjmp	.+348    	; 0x11e2 <SCSI_DecodeSCSICommand+0x1d8>
    1086:	a0 f5       	brcc	.+104    	; 0x10f0 <SCSI_DecodeSCSICommand+0xe6>
    1088:	8e 31       	cpi	r24, 0x1E	; 30
    108a:	09 f4       	brne	.+2      	; 0x108e <SCSI_DecodeSCSICommand+0x84>
    108c:	b5 c0       	rjmp	.+362    	; 0x11f8 <SCSI_DecodeSCSICommand+0x1ee>
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	09 f0       	breq	.+2      	; 0x1094 <SCSI_DecodeSCSICommand+0x8a>
    1092:	b8 c0       	rjmp	.+368    	; 0x1204 <SCSI_DecodeSCSICommand+0x1fa>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	9f e7       	ldi	r25, 0x7F	; 127
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	af 83       	std	Y+7, r26	; 0x07
    10a2:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	ab 83       	std	Y+3, r26	; 0x03
    10b2:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	64 e0       	ldi	r22, 0x04	; 4
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	ce 01       	movw	r24, r28
    10be:	05 96       	adiw	r24, 0x05	; 5
    10c0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	64 e0       	ldi	r22, 0x04	; 4
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <Endpoint_Write_Stream_BE>
    10d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10d8:	8e 77       	andi	r24, 0x7E	; 126
    10da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    10de:	f8 01       	movw	r30, r16
    10e0:	82 89       	ldd	r24, Z+18	; 0x12
    10e2:	93 89       	ldd	r25, Z+19	; 0x13
    10e4:	a4 89       	ldd	r26, Z+20	; 0x14
    10e6:	b5 89       	ldd	r27, Z+21	; 0x15
    10e8:	08 97       	sbiw	r24, 0x08	; 8
    10ea:	a1 09       	sbc	r26, r1
    10ec:	b1 09       	sbc	r27, r1
    10ee:	7f c0       	rjmp	.+254    	; 0x11ee <SCSI_DecodeSCSICommand+0x1e4>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    10f0:	8a 32       	cpi	r24, 0x2A	; 42
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <SCSI_DecodeSCSICommand+0xec>
    10f4:	74 c0       	rjmp	.+232    	; 0x11de <SCSI_DecodeSCSICommand+0x1d4>
    10f6:	8f 32       	cpi	r24, 0x2F	; 47
    10f8:	09 f4       	brne	.+2      	; 0x10fc <SCSI_DecodeSCSICommand+0xf2>
    10fa:	7e c0       	rjmp	.+252    	; 0x11f8 <SCSI_DecodeSCSICommand+0x1ee>
    10fc:	83 c0       	rjmp	.+262    	; 0x1204 <SCSI_DecodeSCSICommand+0x1fa>
    10fe:	f8 01       	movw	r30, r16
    1100:	e5 8c       	ldd	r14, Z+29	; 0x1d
    1102:	f4 8c       	ldd	r15, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    1104:	82 8d       	ldd	r24, Z+26	; 0x1a
    1106:	83 70       	andi	r24, 0x03	; 3
    1108:	19 f4       	brne	.+6      	; 0x1110 <SCSI_DecodeSCSICommand+0x106>
    110a:	83 8d       	ldd	r24, Z+27	; 0x1b
    110c:	88 23       	and	r24, r24
    110e:	41 f0       	breq	.+16     	; 0x1120 <SCSI_DecodeSCSICommand+0x116>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1110:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
    1114:	80 7f       	andi	r24, 0xF0	; 240
    1116:	85 60       	ori	r24, 0x05	; 5
    1118:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
    111c:	84 e2       	ldi	r24, 0x24	; 36
    111e:	79 c0       	rjmp	.+242    	; 0x1212 <SCSI_DecodeSCSICommand+0x208>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    1120:	67 01       	movw	r12, r14
    1122:	f5 e2       	ldi	r31, 0x25	; 37
    1124:	ef 16       	cp	r14, r31
    1126:	f1 04       	cpc	r15, r1
    1128:	18 f0       	brcs	.+6      	; 0x1130 <SCSI_DecodeSCSICommand+0x126>
    112a:	94 e2       	ldi	r25, 0x24	; 36
    112c:	c9 2e       	mov	r12, r25
    112e:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	b6 01       	movw	r22, r12
    1136:	86 e5       	ldi	r24, 0x56	; 86
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 33 1b 	call	0x3666	; 0x3666 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	c7 01       	movw	r24, r14
    1144:	8c 19       	sub	r24, r12
    1146:	9d 09       	sbc	r25, r13
    1148:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <Endpoint_Null_Stream>
    114c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1150:	8e 77       	andi	r24, 0x7E	; 126
    1152:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1156:	f8 01       	movw	r30, r16
    1158:	82 89       	ldd	r24, Z+18	; 0x12
    115a:	93 89       	ldd	r25, Z+19	; 0x13
    115c:	a4 89       	ldd	r26, Z+20	; 0x14
    115e:	b5 89       	ldd	r27, Z+21	; 0x15
    1160:	8c 19       	sub	r24, r12
    1162:	9d 09       	sbc	r25, r13
    1164:	a1 09       	sbc	r26, r1
    1166:	b1 09       	sbc	r27, r1
    1168:	42 c0       	rjmp	.+132    	; 0x11ee <SCSI_DecodeSCSICommand+0x1e4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    116a:	f8 01       	movw	r30, r16
    116c:	f5 8c       	ldd	r15, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    116e:	ef 2c       	mov	r14, r15
    1170:	f2 e1       	ldi	r31, 0x12	; 18
    1172:	ff 15       	cp	r31, r15
    1174:	10 f4       	brcc	.+4      	; 0x117a <SCSI_DecodeSCSICommand+0x170>
    1176:	82 e1       	ldi	r24, 0x12	; 18
    1178:	e8 2e       	mov	r14, r24

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    117a:	ce 2c       	mov	r12, r14
    117c:	d1 2c       	mov	r13, r1
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	b6 01       	movw	r22, r12
    1184:	84 e4       	ldi	r24, 0x44	; 68
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 33 1b 	call	0x3666	; 0x3666 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    118c:	8f 2d       	mov	r24, r15
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	8c 19       	sub	r24, r12
    1196:	9d 09       	sbc	r25, r13
    1198:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <Endpoint_Null_Stream>
    119c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11a0:	8e 77       	andi	r24, 0x7E	; 126
    11a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    11a6:	f8 01       	movw	r30, r16
    11a8:	82 89       	ldd	r24, Z+18	; 0x12
    11aa:	93 89       	ldd	r25, Z+19	; 0x13
    11ac:	a4 89       	ldd	r26, Z+20	; 0x14
    11ae:	b5 89       	ldd	r27, Z+21	; 0x15
    11b0:	8e 19       	sub	r24, r14
    11b2:	91 09       	sbc	r25, r1
    11b4:	a1 09       	sbc	r26, r1
    11b6:	b1 09       	sbc	r27, r1
    11b8:	1a c0       	rjmp	.+52     	; 0x11ee <SCSI_DecodeSCSICommand+0x1e4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    11ba:	f8 01       	movw	r30, r16
    11bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    11be:	82 ff       	sbrs	r24, 2
    11c0:	a7 cf       	rjmp	.-178    	; 0x1110 <SCSI_DecodeSCSICommand+0x106>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    11c2:	b5 de       	rcall	.-662    	; 0xf2e <DataflashManager_CheckDataflashOperation>
    11c4:	81 11       	cpse	r24, r1
    11c6:	18 c0       	rjmp	.+48     	; 0x11f8 <SCSI_DecodeSCSICommand+0x1ee>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    11c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
    11cc:	80 7f       	andi	r24, 0xF0	; 240
    11ce:	84 60       	ori	r24, 0x04	; 4
    11d0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
    11d4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SenseData+0xc>
    11d8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
    11dc:	28 c0       	rjmp	.+80     	; 0x122e <SCSI_DecodeSCSICommand+0x224>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <SCSI_DecodeSCSICommand+0x1da>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	c8 01       	movw	r24, r16
    11e6:	cc de       	rcall	.-616    	; 0xf80 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    11e8:	81 11       	cpse	r24, r1
    11ea:	16 c0       	rjmp	.+44     	; 0x1218 <SCSI_DecodeSCSICommand+0x20e>
    11ec:	20 c0       	rjmp	.+64     	; 0x122e <SCSI_DecodeSCSICommand+0x224>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    11ee:	82 8b       	std	Z+18, r24	; 0x12
    11f0:	93 8b       	std	Z+19, r25	; 0x13
    11f2:	a4 8b       	std	Z+20, r26	; 0x14
    11f4:	b5 8b       	std	Z+21, r27	; 0x15
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    11f6:	10 c0       	rjmp	.+32     	; 0x1218 <SCSI_DecodeSCSICommand+0x20e>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    11f8:	f8 01       	movw	r30, r16
    11fa:	12 8a       	std	Z+18, r1	; 0x12
    11fc:	13 8a       	std	Z+19, r1	; 0x13
    11fe:	14 8a       	std	Z+20, r1	; 0x14
    1200:	15 8a       	std	Z+21, r1	; 0x15
			break;
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <SCSI_DecodeSCSICommand+0x20e>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1204:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
    1208:	80 7f       	andi	r24, 0xF0	; 240
    120a:	85 60       	ori	r24, 0x05	; 5
    120c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SenseData+0xc>
    1216:	e0 cf       	rjmp	.-64     	; 0x11d8 <SCSI_DecodeSCSICommand+0x1ce>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1218:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
    121c:	80 7f       	andi	r24, 0xF0	; 240
    121e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
    1222:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SenseData+0xc>
    1226:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <SCSI_DecodeSCSICommand+0x226>
	}

	return false;
    122e:	80 e0       	ldi	r24, 0x00	; 0
}
    1230:	28 96       	adiw	r28, 0x08	; 8
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	08 95       	ret

0000124e <DS1307_SetTimeDate>:
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
{
    124e:	ef 92       	push	r14
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	28 97       	sbiw	r28, 0x08	; 8
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	fc 01       	movw	r30, r24
#if defined(DUMMY_RTC)
	return true;
#endif

	DS1307_DateTimeRegs_t NewRegValues;
	const uint8_t         WriteAddress = 0;
    126a:	18 86       	std	Y+8, r1	; 0x08

	// Convert new time data to the DS1307's time register layout
	NewRegValues.Byte1.Fields.TenSec    = (NewTimeDate->Second / 10);
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	3a e0       	ldi	r19, 0x0A	; 10
    1270:	63 2f       	mov	r22, r19
    1272:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
    1276:	87 70       	andi	r24, 0x07	; 7
    1278:	28 2f       	mov	r18, r24
    127a:	22 95       	swap	r18
    127c:	20 7f       	andi	r18, 0xF0	; 240
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	80 78       	andi	r24, 0x80	; 128
	NewRegValues.Byte1.Fields.Sec       = (NewTimeDate->Second % 10);
    1282:	82 2b       	or	r24, r18
	NewRegValues.Byte1.Fields.CH        = false;
    1284:	89 2b       	or	r24, r25
    1286:	8f 77       	andi	r24, 0x7F	; 127
    1288:	89 83       	std	Y+1, r24	; 0x01
	NewRegValues.Byte2.Fields.TenMin    = (NewTimeDate->Minute / 10);
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
    1290:	87 70       	andi	r24, 0x07	; 7
    1292:	28 2f       	mov	r18, r24
    1294:	22 95       	swap	r18
    1296:	20 7f       	andi	r18, 0xF0	; 240
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 78       	andi	r24, 0x80	; 128
	NewRegValues.Byte2.Fields.Min       = (NewTimeDate->Minute % 10);
    129c:	82 2b       	or	r24, r18
    129e:	89 2b       	or	r24, r25
    12a0:	8a 83       	std	Y+2, r24	; 0x02
	NewRegValues.Byte3.Fields.TenHour   = (NewTimeDate->Hour / 10);
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
    12a8:	83 70       	andi	r24, 0x03	; 3
    12aa:	28 2f       	mov	r18, r24
    12ac:	22 95       	swap	r18
    12ae:	20 7f       	andi	r18, 0xF0	; 240
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	80 7c       	andi	r24, 0xC0	; 192
	NewRegValues.Byte3.Fields.Hour      = (NewTimeDate->Hour % 10);
    12b4:	82 2b       	or	r24, r18
	NewRegValues.Byte3.Fields.TwelveHourMode = false;
    12b6:	89 2b       	or	r24, r25
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8b 83       	std	Y+3, r24	; 0x03

	// Convert new date data to the DS1307's date register layout
	NewRegValues.Byte4.Fields.DayOfWeek = 0;
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	8c 83       	std	Y+4, r24	; 0x04
	NewRegValues.Byte5.Fields.TenDay    = (NewTimeDate->Day / 10);
    12c2:	83 81       	ldd	r24, Z+3	; 0x03
    12c4:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
    12c8:	83 70       	andi	r24, 0x03	; 3
    12ca:	28 2f       	mov	r18, r24
    12cc:	22 95       	swap	r18
    12ce:	20 7f       	andi	r18, 0xF0	; 240
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	80 7c       	andi	r24, 0xC0	; 192
	NewRegValues.Byte5.Fields.Day       = (NewTimeDate->Day % 10);
    12d4:	82 2b       	or	r24, r18
    12d6:	89 2b       	or	r24, r25
    12d8:	8d 83       	std	Y+5, r24	; 0x05
	NewRegValues.Byte6.Fields.TenMonth  = (NewTimeDate->Month / 10);
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
    12e0:	2e 81       	ldd	r18, Y+6	; 0x06
    12e2:	80 fb       	bst	r24, 0
    12e4:	24 f9       	bld	r18, 4
	NewRegValues.Byte6.Fields.Month     = (NewTimeDate->Month % 10);
    12e6:	20 7f       	andi	r18, 0xF0	; 240
    12e8:	29 2b       	or	r18, r25
    12ea:	2e 83       	std	Y+6, r18	; 0x06
	NewRegValues.Byte7.Fields.TenYear   = (NewTimeDate->Year / 10);
    12ec:	85 81       	ldd	r24, Z+5	; 0x05
    12ee:	0e 94 1c 23 	call	0x4638	; 0x4638 <__udivmodqi4>
	NewRegValues.Byte7.Fields.Year      = (NewTimeDate->Year % 10);
    12f2:	82 95       	swap	r24
    12f4:	80 7f       	andi	r24, 0xF0	; 240
    12f6:	98 2b       	or	r25, r24
    12f8:	9f 83       	std	Y+7, r25	; 0x07
	
	// Write the new Time and Date into the DS1307
	if (TWI_WritePacket(DS1307_ADDRESS, 10, &WriteAddress, sizeof(WriteAddress),
    12fa:	87 e0       	ldi	r24, 0x07	; 7
    12fc:	e8 2e       	mov	r14, r24
    12fe:	8e 01       	movw	r16, r28
    1300:	0f 5f       	subi	r16, 0xFF	; 255
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	ae 01       	movw	r20, r28
    1308:	48 5f       	subi	r20, 0xF8	; 248
    130a:	5f 4f       	sbci	r21, 0xFF	; 255
    130c:	80 ed       	ldi	r24, 0xD0	; 208
    130e:	0e 94 e6 22 	call	0x45cc	; 0x45cc <TWI_WritePacket>
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	81 11       	cpse	r24, r1
    1316:	90 e0       	ldi	r25, 0x00	; 0
	{
		return false;
	}

	return true;
}
    1318:	89 2f       	mov	r24, r25
    131a:	28 96       	adiw	r28, 0x08	; 8
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ef 90       	pop	r14
    1330:	08 95       	ret

00001332 <DS1307_GetTimeDate>:

bool DS1307_GetTimeDate(TimeDate_t* const TimeDate)
{
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	28 97       	sbiw	r28, 0x08	; 8
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	6c 01       	movw	r12, r24
	
	return true;
#endif

	DS1307_DateTimeRegs_t CurrentRegValues;
	const uint8_t         ReadAddress = 0;
    1352:	18 86       	std	Y+8, r1	; 0x08
	
	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	e8 2e       	mov	r14, r24
    1358:	8e 01       	movw	r16, r28
    135a:	0f 5f       	subi	r16, 0xFF	; 255
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	ae 01       	movw	r20, r28
    1362:	48 5f       	subi	r20, 0xF8	; 248
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	6a e0       	ldi	r22, 0x0A	; 10
    1368:	80 ed       	ldi	r24, 0xD0	; 208
    136a:	0e 94 9c 22 	call	0x4538	; 0x4538 <TWI_ReadPacket>
    136e:	81 11       	cpse	r24, r1
    1370:	4e c0       	rjmp	.+156    	; 0x140e <DS1307_GetTimeDate+0xdc>
	{
		return false;
	}
	
	// Convert stored time value into decimal
	TimeDate->Second  = (CurrentRegValues.Byte1.Fields.TenSec  * 10) + CurrentRegValues.Byte1.Fields.Sec;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	98 2f       	mov	r25, r24
    1376:	96 95       	lsr	r25
    1378:	96 95       	lsr	r25
    137a:	96 95       	lsr	r25
    137c:	9e 70       	andi	r25, 0x0E	; 14
    137e:	29 2f       	mov	r18, r25
    1380:	22 0f       	add	r18, r18
    1382:	22 0f       	add	r18, r18
    1384:	92 0f       	add	r25, r18
    1386:	8f 70       	andi	r24, 0x0F	; 15
    1388:	89 0f       	add	r24, r25
    138a:	f6 01       	movw	r30, r12
    138c:	82 83       	std	Z+2, r24	; 0x02
	TimeDate->Minute  = (CurrentRegValues.Byte2.Fields.TenMin  * 10) + CurrentRegValues.Byte2.Fields.Min;
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	98 2f       	mov	r25, r24
    1392:	96 95       	lsr	r25
    1394:	96 95       	lsr	r25
    1396:	96 95       	lsr	r25
    1398:	9e 70       	andi	r25, 0x0E	; 14
    139a:	29 2f       	mov	r18, r25
    139c:	22 0f       	add	r18, r18
    139e:	22 0f       	add	r18, r18
    13a0:	92 0f       	add	r25, r18
    13a2:	8f 70       	andi	r24, 0x0F	; 15
    13a4:	89 0f       	add	r24, r25
    13a6:	81 83       	std	Z+1, r24	; 0x01
	TimeDate->Hour    = (CurrentRegValues.Byte3.Fields.TenHour * 10) + CurrentRegValues.Byte3.Fields.Hour;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	98 2f       	mov	r25, r24
    13ac:	96 95       	lsr	r25
    13ae:	96 95       	lsr	r25
    13b0:	96 95       	lsr	r25
    13b2:	96 70       	andi	r25, 0x06	; 6
    13b4:	29 2f       	mov	r18, r25
    13b6:	22 0f       	add	r18, r18
    13b8:	22 0f       	add	r18, r18
    13ba:	92 0f       	add	r25, r18
    13bc:	8f 70       	andi	r24, 0x0F	; 15
    13be:	89 0f       	add	r24, r25
    13c0:	80 83       	st	Z, r24

	// Convert stored date value into decimal
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	98 2f       	mov	r25, r24
    13c6:	96 95       	lsr	r25
    13c8:	96 95       	lsr	r25
    13ca:	96 95       	lsr	r25
    13cc:	96 70       	andi	r25, 0x06	; 6
    13ce:	29 2f       	mov	r18, r25
    13d0:	22 0f       	add	r18, r18
    13d2:	22 0f       	add	r18, r18
    13d4:	92 0f       	add	r25, r18
    13d6:	8f 70       	andi	r24, 0x0F	; 15
    13d8:	89 0f       	add	r24, r25
    13da:	83 83       	std	Z+3, r24	; 0x03
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
    13dc:	8e 81       	ldd	r24, Y+6	; 0x06
    13de:	84 fb       	bst	r24, 4
    13e0:	99 27       	eor	r25, r25
    13e2:	90 f9       	bld	r25, 0
    13e4:	99 0f       	add	r25, r25
    13e6:	29 2f       	mov	r18, r25
    13e8:	22 0f       	add	r18, r18
    13ea:	22 0f       	add	r18, r18
    13ec:	92 0f       	add	r25, r18
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	89 0f       	add	r24, r25
    13f2:	84 83       	std	Z+4, r24	; 0x04
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 2f       	mov	r25, r24
    13f8:	92 95       	swap	r25
    13fa:	9f 70       	andi	r25, 0x0F	; 15
    13fc:	8f 70       	andi	r24, 0x0F	; 15
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	9f 9f       	mul	r25, r31
    1402:	80 0d       	add	r24, r0
    1404:	11 24       	eor	r1, r1
    1406:	f6 01       	movw	r30, r12
    1408:	85 83       	std	Z+5, r24	; 0x05

	return true;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <DS1307_GetTimeDate+0xde>
	
	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
	                   (uint8_t*)&CurrentRegValues, sizeof(DS1307_DateTimeRegs_t)) != TWI_ERROR_NoError)
	{
		return false;
    140e:	80 e0       	ldi	r24, 0x00	; 0
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;

	return true;
}
    1410:	28 96       	adiw	r28, 0x08	; 8
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	08 95       	ret

0000142c <disk_initialize>:
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret

00001430 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret

00001434 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
    1434:	0f 93       	push	r16
    1436:	fb 01       	movw	r30, r22
    1438:	ca 01       	movw	r24, r20
    143a:	b9 01       	movw	r22, r18
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    143c:	40 2f       	mov	r20, r16
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	9f 01       	movw	r18, r30
    1442:	90 dc       	rcall	.-1760   	; 0xd64 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
    144a:	0f 93       	push	r16
    144c:	fb 01       	movw	r30, r22
    144e:	ca 01       	movw	r24, r20
    1450:	b9 01       	movw	r22, r18
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    1452:	40 2f       	mov	r20, r16
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	9f 01       	movw	r18, r30
    1458:	b5 db       	rcall	.-2198   	; 0xbc4 <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    1460:	66 23       	and	r22, r22
    1462:	11 f0       	breq	.+4      	; 0x1468 <disk_ioctl+0x8>
	  return RES_OK;
	else
	  return RES_PARERR;
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	08 95       	ret
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
	  return RES_OK;
    1468:	80 e0       	ldi	r24, 0x00	; 0
	else
	  return RES_PARERR;
}
    146a:	08 95       	ret

0000146c <get_fattime>:


DWORD get_fattime (void)
{
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	00 d0       	rcall	.+0      	; 0x1476 <get_fattime+0xa>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <get_fattime+0xc>
    1478:	00 d0       	rcall	.+0      	; 0x147a <get_fattime+0xe>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	57 df       	rcall	.-338    	; 0x1332 <DS1307_GetTimeDate>


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    1484:	4d 81       	ldd	r20, Y+5	; 0x05
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	85 e1       	ldi	r24, 0x15	; 21
    148e:	44 0f       	add	r20, r20
    1490:	55 1f       	adc	r21, r21
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	8a 95       	dec	r24
    1498:	d1 f7       	brne	.-12     	; 0x148e <get_fattime+0x22>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	68 2b       	or	r22, r24
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	2b e0       	ldi	r18, 0x0B	; 11
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	aa 1f       	adc	r26, r26
    14ae:	bb 1f       	adc	r27, r27
    14b0:	2a 95       	dec	r18
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <get_fattime+0x3c>
    14b4:	48 2b       	or	r20, r24
    14b6:	59 2b       	or	r21, r25
    14b8:	6a 2b       	or	r22, r26
    14ba:	7b 2b       	or	r23, r27
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	35 e0       	ldi	r19, 0x05	; 5
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	aa 1f       	adc	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	3a 95       	dec	r19
    14d0:	d1 f7       	brne	.-12     	; 0x14c6 <get_fattime+0x5a>
    14d2:	84 2b       	or	r24, r20
    14d4:	95 2b       	or	r25, r21
    14d6:	a6 2b       	or	r26, r22
    14d8:	b7 2b       	or	r27, r23
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	26 95       	lsr	r18
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	42 2b       	or	r20, r18
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	44 96       	adiw	r24, 0x14	; 20
    14ea:	09 2e       	mov	r0, r25
    14ec:	00 0c       	add	r0, r0
    14ee:	aa 0b       	sbc	r26, r26
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	e9 e1       	ldi	r30, 0x19	; 25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	aa 1f       	adc	r26, r26
    14fa:	bb 1f       	adc	r27, r27
    14fc:	ea 95       	dec	r30
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <get_fattime+0x88>
    1500:	8a 01       	movw	r16, r20
    1502:	9b 01       	movw	r18, r22
    1504:	08 2b       	or	r16, r24
    1506:	19 2b       	or	r17, r25
    1508:	2a 2b       	or	r18, r26
    150a:	3b 2b       	or	r19, r27
    150c:	c9 01       	movw	r24, r18
    150e:	b8 01       	movw	r22, r16
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    1510:	26 96       	adiw	r28, 0x06	; 6
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	db 01       	movw	r26, r22
    152c:	fc 01       	movw	r30, r24
    152e:	9a 01       	movw	r18, r20
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	38 f0       	brcs	.+14     	; 0x1544 <mem_cpy+0x1e>
    1536:	cd 91       	ld	r28, X+
    1538:	dd 91       	ld	r29, X+
    153a:	c1 93       	st	Z+, r28
    153c:	d1 93       	st	Z+, r29
    153e:	22 50       	subi	r18, 0x02	; 2
    1540:	31 09       	sbc	r19, r1
    1542:	f6 cf       	rjmp	.-20     	; 0x1530 <mem_cpy+0xa>
    1544:	9a 01       	movw	r18, r20
    1546:	2e 7f       	andi	r18, 0xFE	; 254
    1548:	fc 01       	movw	r30, r24
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	db 01       	movw	r26, r22
    1550:	a2 0f       	add	r26, r18
    1552:	b3 1f       	adc	r27, r19
    1554:	42 17       	cp	r20, r18
    1556:	53 07       	cpc	r21, r19
    1558:	11 f0       	breq	.+4      	; 0x155e <mem_cpy+0x38>
    155a:	2c 91       	ld	r18, X
    155c:	20 83       	st	Z, r18
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <move_window>:
    1564:	4f 92       	push	r4
    1566:	5f 92       	push	r5
    1568:	6f 92       	push	r6
    156a:	7f 92       	push	r7
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	fc 01       	movw	r30, r24
    1582:	42 a4       	ldd	r4, Z+42	; 0x2a
    1584:	53 a4       	ldd	r5, Z+43	; 0x2b
    1586:	64 a4       	ldd	r6, Z+44	; 0x2c
    1588:	75 a4       	ldd	r7, Z+45	; 0x2d
    158a:	44 16       	cp	r4, r20
    158c:	55 06       	cpc	r5, r21
    158e:	66 06       	cpc	r6, r22
    1590:	77 06       	cpc	r7, r23
    1592:	11 f4       	brne	.+4      	; 0x1598 <move_window+0x34>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	4d c0       	rjmp	.+154    	; 0x1632 <move_window+0xce>
    1598:	6a 01       	movw	r12, r20
    159a:	7b 01       	movw	r14, r22
    159c:	ec 01       	movw	r28, r24
    159e:	84 81       	ldd	r24, Z+4	; 0x04
    15a0:	81 11       	cpse	r24, r1
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <move_window+0x4c>
    15a4:	c1 14       	cp	r12, r1
    15a6:	d1 04       	cpc	r13, r1
    15a8:	e1 04       	cpc	r14, r1
    15aa:	f1 04       	cpc	r15, r1
    15ac:	99 f3       	breq	.-26     	; 0x1594 <move_window+0x30>
    15ae:	33 c0       	rjmp	.+102    	; 0x1616 <move_window+0xb2>
    15b0:	5f 01       	movw	r10, r30
    15b2:	fe e2       	ldi	r31, 0x2E	; 46
    15b4:	af 0e       	add	r10, r31
    15b6:	b1 1c       	adc	r11, r1
    15b8:	01 e0       	ldi	r16, 0x01	; 1
    15ba:	a3 01       	movw	r20, r6
    15bc:	92 01       	movw	r18, r4
    15be:	b5 01       	movw	r22, r10
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	43 df       	rcall	.-378    	; 0x144a <disk_write>
    15c4:	88 23       	and	r24, r24
    15c6:	11 f0       	breq	.+4      	; 0x15cc <move_window+0x68>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	33 c0       	rjmp	.+102    	; 0x1632 <move_window+0xce>
    15cc:	1c 82       	std	Y+4, r1	; 0x04
    15ce:	4e 8d       	ldd	r20, Y+30	; 0x1e
    15d0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    15d2:	68 a1       	ldd	r22, Y+32	; 0x20
    15d4:	79 a1       	ldd	r23, Y+33	; 0x21
    15d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15da:	ac 8d       	ldd	r26, Y+28	; 0x1c
    15dc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    15de:	84 0f       	add	r24, r20
    15e0:	95 1f       	adc	r25, r21
    15e2:	a6 1f       	adc	r26, r22
    15e4:	b7 1f       	adc	r27, r23
    15e6:	48 16       	cp	r4, r24
    15e8:	59 06       	cpc	r5, r25
    15ea:	6a 06       	cpc	r6, r26
    15ec:	7b 06       	cpc	r7, r27
    15ee:	d0 f6       	brcc	.-76     	; 0x15a4 <move_window+0x40>
    15f0:	1b 81       	ldd	r17, Y+3	; 0x03
    15f2:	12 30       	cpi	r17, 0x02	; 2
    15f4:	b8 f2       	brcs	.-82     	; 0x15a4 <move_window+0x40>
    15f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15fa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    15fc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    15fe:	48 0e       	add	r4, r24
    1600:	59 1e       	adc	r5, r25
    1602:	6a 1e       	adc	r6, r26
    1604:	7b 1e       	adc	r7, r27
    1606:	01 e0       	ldi	r16, 0x01	; 1
    1608:	a3 01       	movw	r20, r6
    160a:	92 01       	movw	r18, r4
    160c:	b5 01       	movw	r22, r10
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	1c df       	rcall	.-456    	; 0x144a <disk_write>
    1612:	11 50       	subi	r17, 0x01	; 1
    1614:	ee cf       	rjmp	.-36     	; 0x15f2 <move_window+0x8e>
    1616:	01 e0       	ldi	r16, 0x01	; 1
    1618:	a7 01       	movw	r20, r14
    161a:	96 01       	movw	r18, r12
    161c:	be 01       	movw	r22, r28
    161e:	62 5d       	subi	r22, 0xD2	; 210
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	07 df       	rcall	.-498    	; 0x1434 <disk_read>
    1626:	81 11       	cpse	r24, r1
    1628:	cf cf       	rjmp	.-98     	; 0x15c8 <move_window+0x64>
    162a:	ca a6       	std	Y+42, r12	; 0x2a
    162c:	db a6       	std	Y+43, r13	; 0x2b
    162e:	ec a6       	std	Y+44, r14	; 0x2c
    1630:	fd a6       	std	Y+45, r15	; 0x2d
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	08 95       	ret

00001650 <check_fs>:
    1650:	0f 93       	push	r16
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	9a 01       	movw	r18, r20
    165a:	ab 01       	movw	r20, r22
    165c:	bc 01       	movw	r22, r24
    165e:	62 5d       	subi	r22, 0xD2	; 210
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	01 e0       	ldi	r16, 0x01	; 1
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	e6 de       	rcall	.-564    	; 0x1434 <disk_read>
    1668:	81 11       	cpse	r24, r1
    166a:	22 c0       	rjmp	.+68     	; 0x16b0 <check_fs+0x60>
    166c:	fe 01       	movw	r30, r28
    166e:	e4 5d       	subi	r30, 0xD4	; 212
    1670:	fd 4f       	sbci	r31, 0xFD	; 253
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	85 35       	cpi	r24, 0x55	; 85
    1678:	9a 4a       	sbci	r25, 0xAA	; 170
    167a:	e1 f4       	brne	.+56     	; 0x16b4 <check_fs+0x64>
    167c:	e8 5c       	subi	r30, 0xC8	; 200
    167e:	f1 40       	sbci	r31, 0x01	; 1
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	a2 81       	ldd	r26, Z+2	; 0x02
    1686:	b3 81       	ldd	r27, Z+3	; 0x03
    1688:	bb 27       	eor	r27, r27
    168a:	86 34       	cpi	r24, 0x46	; 70
    168c:	91 44       	sbci	r25, 0x41	; 65
    168e:	a4 45       	sbci	r26, 0x54	; 84
    1690:	b1 05       	cpc	r27, r1
    1692:	91 f0       	breq	.+36     	; 0x16b8 <check_fs+0x68>
    1694:	c0 58       	subi	r28, 0x80	; 128
    1696:	df 4f       	sbci	r29, 0xFF	; 255
    1698:	48 81       	ld	r20, Y
    169a:	59 81       	ldd	r21, Y+1	; 0x01
    169c:	6a 81       	ldd	r22, Y+2	; 0x02
    169e:	7b 81       	ldd	r23, Y+3	; 0x03
    16a0:	77 27       	eor	r23, r23
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	46 34       	cpi	r20, 0x46	; 70
    16a6:	51 44       	sbci	r21, 0x41	; 65
    16a8:	64 45       	sbci	r22, 0x54	; 84
    16aa:	71 05       	cpc	r23, r1
    16ac:	31 f4       	brne	.+12     	; 0x16ba <check_fs+0x6a>
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <check_fs+0x68>
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <check_fs+0x6a>
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <check_fs+0x6a>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <validate>:
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	79 f0       	breq	.+30     	; 0x16e4 <validate+0x22>
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 81       	ld	r18, Z
    16ca:	22 23       	and	r18, r18
    16cc:	59 f0       	breq	.+22     	; 0x16e4 <validate+0x22>
    16ce:	26 81       	ldd	r18, Z+6	; 0x06
    16d0:	37 81       	ldd	r19, Z+7	; 0x07
    16d2:	26 17       	cp	r18, r22
    16d4:	37 07       	cpc	r19, r23
    16d6:	31 f4       	brne	.+12     	; 0x16e4 <validate+0x22>
    16d8:	81 81       	ldd	r24, Z+1	; 0x01
    16da:	aa de       	rcall	.-684    	; 0x1430 <disk_status>
    16dc:	80 fd       	sbrc	r24, 0
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <validate+0x26>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	89 e0       	ldi	r24, 0x09	; 9
    16e6:	08 95       	ret
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	08 95       	ret

000016ec <clust2sect>:
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	fc 01       	movw	r30, r24
    16f2:	9a 01       	movw	r18, r20
    16f4:	ab 01       	movw	r20, r22
    16f6:	22 50       	subi	r18, 0x02	; 2
    16f8:	31 09       	sbc	r19, r1
    16fa:	41 09       	sbc	r20, r1
    16fc:	51 09       	sbc	r21, r1
    16fe:	86 89       	ldd	r24, Z+22	; 0x16
    1700:	97 89       	ldd	r25, Z+23	; 0x17
    1702:	a0 8d       	ldd	r26, Z+24	; 0x18
    1704:	b1 8d       	ldd	r27, Z+25	; 0x19
    1706:	02 97       	sbiw	r24, 0x02	; 2
    1708:	a1 09       	sbc	r26, r1
    170a:	b1 09       	sbc	r27, r1
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	4a 07       	cpc	r20, r26
    1712:	5b 07       	cpc	r21, r27
    1714:	68 f4       	brcc	.+26     	; 0x1730 <clust2sect+0x44>
    1716:	a2 81       	ldd	r26, Z+2	; 0x02
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__muluhisi3>
    171e:	06 a1       	ldd	r16, Z+38	; 0x26
    1720:	17 a1       	ldd	r17, Z+39	; 0x27
    1722:	20 a5       	ldd	r18, Z+40	; 0x28
    1724:	31 a5       	ldd	r19, Z+41	; 0x29
    1726:	60 0f       	add	r22, r16
    1728:	71 1f       	adc	r23, r17
    172a:	82 1f       	adc	r24, r18
    172c:	93 1f       	adc	r25, r19
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <clust2sect+0x4a>
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	cb 01       	movw	r24, r22
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <get_fat>:
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	42 30       	cpi	r20, 0x02	; 2
    1752:	51 05       	cpc	r21, r1
    1754:	61 05       	cpc	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	08 f4       	brcc	.+2      	; 0x175c <get_fat+0x20>
    175a:	a5 c0       	rjmp	.+330    	; 0x18a6 <get_fat+0x16a>
    175c:	fc 01       	movw	r30, r24
    175e:	06 89       	ldd	r16, Z+22	; 0x16
    1760:	17 89       	ldd	r17, Z+23	; 0x17
    1762:	20 8d       	ldd	r18, Z+24	; 0x18
    1764:	31 8d       	ldd	r19, Z+25	; 0x19
    1766:	40 17       	cp	r20, r16
    1768:	51 07       	cpc	r21, r17
    176a:	62 07       	cpc	r22, r18
    176c:	73 07       	cpc	r23, r19
    176e:	08 f0       	brcs	.+2      	; 0x1772 <get_fat+0x36>
    1770:	9a c0       	rjmp	.+308    	; 0x18a6 <get_fat+0x16a>
    1772:	6a 01       	movw	r12, r20
    1774:	7b 01       	movw	r14, r22
    1776:	ec 01       	movw	r28, r24
    1778:	80 81       	ld	r24, Z
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	09 f4       	brne	.+2      	; 0x1780 <get_fat+0x44>
    177e:	48 c0       	rjmp	.+144    	; 0x1810 <get_fat+0xd4>
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	09 f4       	brne	.+2      	; 0x1786 <get_fat+0x4a>
    1784:	65 c0       	rjmp	.+202    	; 0x1850 <get_fat+0x114>
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	09 f0       	breq	.+2      	; 0x178c <get_fat+0x50>
    178a:	92 c0       	rjmp	.+292    	; 0x18b0 <get_fat+0x174>
    178c:	5a 01       	movw	r10, r20
    178e:	b6 94       	lsr	r11
    1790:	a7 94       	ror	r10
    1792:	ac 0c       	add	r10, r12
    1794:	bd 1c       	adc	r11, r13
    1796:	c5 01       	movw	r24, r10
    1798:	89 2f       	mov	r24, r25
    179a:	99 27       	eor	r25, r25
    179c:	86 95       	lsr	r24
    179e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    17a0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    17a2:	68 a1       	ldd	r22, Y+32	; 0x20
    17a4:	79 a1       	ldd	r23, Y+33	; 0x21
    17a6:	48 0f       	add	r20, r24
    17a8:	59 1f       	adc	r21, r25
    17aa:	61 1d       	adc	r22, r1
    17ac:	71 1d       	adc	r23, r1
    17ae:	ce 01       	movw	r24, r28
    17b0:	d9 de       	rcall	.-590    	; 0x1564 <move_window>
    17b2:	81 11       	cpse	r24, r1
    17b4:	7d c0       	rjmp	.+250    	; 0x18b0 <get_fat+0x174>
    17b6:	f5 01       	movw	r30, r10
    17b8:	f1 70       	andi	r31, 0x01	; 1
    17ba:	ec 0f       	add	r30, r28
    17bc:	fd 1f       	adc	r31, r29
    17be:	16 a5       	ldd	r17, Z+46	; 0x2e
    17c0:	ff ef       	ldi	r31, 0xFF	; 255
    17c2:	af 1a       	sub	r10, r31
    17c4:	bf 0a       	sbc	r11, r31
    17c6:	c5 01       	movw	r24, r10
    17c8:	89 2f       	mov	r24, r25
    17ca:	99 27       	eor	r25, r25
    17cc:	86 95       	lsr	r24
    17ce:	4e 8d       	ldd	r20, Y+30	; 0x1e
    17d0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    17d2:	68 a1       	ldd	r22, Y+32	; 0x20
    17d4:	79 a1       	ldd	r23, Y+33	; 0x21
    17d6:	48 0f       	add	r20, r24
    17d8:	59 1f       	adc	r21, r25
    17da:	61 1d       	adc	r22, r1
    17dc:	71 1d       	adc	r23, r1
    17de:	ce 01       	movw	r24, r28
    17e0:	c1 de       	rcall	.-638    	; 0x1564 <move_window>
    17e2:	81 11       	cpse	r24, r1
    17e4:	65 c0       	rjmp	.+202    	; 0x18b0 <get_fat+0x174>
    17e6:	c5 01       	movw	r24, r10
    17e8:	91 70       	andi	r25, 0x01	; 1
    17ea:	fe 01       	movw	r30, r28
    17ec:	e8 0f       	add	r30, r24
    17ee:	f9 1f       	adc	r31, r25
    17f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    17f2:	61 2f       	mov	r22, r17
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	78 2b       	or	r23, r24
    17f8:	c0 fe       	sbrs	r12, 0
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <get_fat+0xcc>
    17fc:	54 e0       	ldi	r21, 0x04	; 4
    17fe:	76 95       	lsr	r23
    1800:	67 95       	ror	r22
    1802:	5a 95       	dec	r21
    1804:	e1 f7       	brne	.-8      	; 0x17fe <get_fat+0xc2>
    1806:	01 c0       	rjmp	.+2      	; 0x180a <get_fat+0xce>
    1808:	7f 70       	andi	r23, 0x0F	; 15
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	53 c0       	rjmp	.+166    	; 0x18b6 <get_fat+0x17a>
    1810:	77 27       	eor	r23, r23
    1812:	6f 2d       	mov	r22, r15
    1814:	5e 2d       	mov	r21, r14
    1816:	4d 2d       	mov	r20, r13
    1818:	86 8d       	ldd	r24, Z+30	; 0x1e
    181a:	97 8d       	ldd	r25, Z+31	; 0x1f
    181c:	a0 a1       	ldd	r26, Z+32	; 0x20
    181e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1820:	48 0f       	add	r20, r24
    1822:	59 1f       	adc	r21, r25
    1824:	6a 1f       	adc	r22, r26
    1826:	7b 1f       	adc	r23, r27
    1828:	cf 01       	movw	r24, r30
    182a:	9c de       	rcall	.-712    	; 0x1564 <move_window>
    182c:	81 11       	cpse	r24, r1
    182e:	40 c0       	rjmp	.+128    	; 0x18b0 <get_fat+0x174>
    1830:	cc 0c       	add	r12, r12
    1832:	dd 1c       	adc	r13, r13
    1834:	ee 1c       	adc	r14, r14
    1836:	ff 1c       	adc	r15, r15
    1838:	e8 94       	clt
    183a:	c0 f8       	bld	r12, 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	d8 22       	and	r13, r24
    1840:	ee 24       	eor	r14, r14
    1842:	ff 24       	eor	r15, r15
    1844:	fe 01       	movw	r30, r28
    1846:	ec 0d       	add	r30, r12
    1848:	fd 1d       	adc	r31, r13
    184a:	66 a5       	ldd	r22, Z+46	; 0x2e
    184c:	77 a5       	ldd	r23, Z+47	; 0x2f
    184e:	dd cf       	rjmp	.-70     	; 0x180a <get_fat+0xce>
    1850:	86 8d       	ldd	r24, Z+30	; 0x1e
    1852:	97 8d       	ldd	r25, Z+31	; 0x1f
    1854:	a0 a1       	ldd	r26, Z+32	; 0x20
    1856:	b1 a1       	ldd	r27, Z+33	; 0x21
    1858:	27 e0       	ldi	r18, 0x07	; 7
    185a:	76 95       	lsr	r23
    185c:	67 95       	ror	r22
    185e:	57 95       	ror	r21
    1860:	47 95       	ror	r20
    1862:	2a 95       	dec	r18
    1864:	d1 f7       	brne	.-12     	; 0x185a <get_fat+0x11e>
    1866:	48 0f       	add	r20, r24
    1868:	59 1f       	adc	r21, r25
    186a:	6a 1f       	adc	r22, r26
    186c:	7b 1f       	adc	r23, r27
    186e:	cf 01       	movw	r24, r30
    1870:	79 de       	rcall	.-782    	; 0x1564 <move_window>
    1872:	81 11       	cpse	r24, r1
    1874:	1d c0       	rjmp	.+58     	; 0x18b0 <get_fat+0x174>
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	cc 0c       	add	r12, r12
    187a:	dd 1c       	adc	r13, r13
    187c:	ee 1c       	adc	r14, r14
    187e:	ff 1c       	adc	r15, r15
    1880:	8a 95       	dec	r24
    1882:	d1 f7       	brne	.-12     	; 0x1878 <get_fat+0x13c>
    1884:	ec ef       	ldi	r30, 0xFC	; 252
    1886:	ce 22       	and	r12, r30
    1888:	e1 e0       	ldi	r30, 0x01	; 1
    188a:	de 22       	and	r13, r30
    188c:	ee 24       	eor	r14, r14
    188e:	ff 24       	eor	r15, r15
    1890:	fe 01       	movw	r30, r28
    1892:	ec 0d       	add	r30, r12
    1894:	fd 1d       	adc	r31, r13
    1896:	86 a5       	ldd	r24, Z+46	; 0x2e
    1898:	97 a5       	ldd	r25, Z+47	; 0x2f
    189a:	a0 a9       	ldd	r26, Z+48	; 0x30
    189c:	b1 a9       	ldd	r27, Z+49	; 0x31
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	9f 70       	andi	r25, 0x0F	; 15
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <get_fat+0x17a>
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <get_fat+0x17a>
    18b0:	6f ef       	ldi	r22, 0xFF	; 255
    18b2:	7f ef       	ldi	r23, 0xFF	; 255
    18b4:	cb 01       	movw	r24, r22
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	08 95       	ret

000018cc <dir_sdi.constprop.1>:
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	1d 82       	std	Y+5, r1	; 0x05
    18d8:	1c 82       	std	Y+4, r1	; 0x04
    18da:	4e 81       	ldd	r20, Y+6	; 0x06
    18dc:	5f 81       	ldd	r21, Y+7	; 0x07
    18de:	68 85       	ldd	r22, Y+8	; 0x08
    18e0:	79 85       	ldd	r23, Y+9	; 0x09
    18e2:	41 30       	cpi	r20, 0x01	; 1
    18e4:	51 05       	cpc	r21, r1
    18e6:	61 05       	cpc	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <dir_sdi.constprop.1+0x24>
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	61 c0       	rjmp	.+194    	; 0x19b2 <dir_sdi.constprop.1+0xe6>
    18f0:	08 81       	ld	r16, Y
    18f2:	19 81       	ldd	r17, Y+1	; 0x01
    18f4:	f8 01       	movw	r30, r16
    18f6:	86 89       	ldd	r24, Z+22	; 0x16
    18f8:	97 89       	ldd	r25, Z+23	; 0x17
    18fa:	a0 8d       	ldd	r26, Z+24	; 0x18
    18fc:	b1 8d       	ldd	r27, Z+25	; 0x19
    18fe:	48 17       	cp	r20, r24
    1900:	59 07       	cpc	r21, r25
    1902:	6a 07       	cpc	r22, r26
    1904:	7b 07       	cpc	r23, r27
    1906:	90 f7       	brcc	.-28     	; 0x18ec <dir_sdi.constprop.1+0x20>
    1908:	41 15       	cp	r20, r1
    190a:	51 05       	cpc	r21, r1
    190c:	61 05       	cpc	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	f1 f4       	brne	.+60     	; 0x194e <dir_sdi.constprop.1+0x82>
    1912:	80 81       	ld	r24, Z
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	49 f4       	brne	.+18     	; 0x192a <dir_sdi.constprop.1+0x5e>
    1918:	42 a1       	ldd	r20, Z+34	; 0x22
    191a:	53 a1       	ldd	r21, Z+35	; 0x23
    191c:	64 a1       	ldd	r22, Z+36	; 0x24
    191e:	75 a1       	ldd	r23, Z+37	; 0x25
    1920:	41 15       	cp	r20, r1
    1922:	51 05       	cpc	r21, r1
    1924:	61 05       	cpc	r22, r1
    1926:	71 05       	cpc	r23, r1
    1928:	91 f4       	brne	.+36     	; 0x194e <dir_sdi.constprop.1+0x82>
    192a:	1a 86       	std	Y+10, r1	; 0x0a
    192c:	1b 86       	std	Y+11, r1	; 0x0b
    192e:	1c 86       	std	Y+12, r1	; 0x0c
    1930:	1d 86       	std	Y+13, r1	; 0x0d
    1932:	f8 01       	movw	r30, r16
    1934:	80 85       	ldd	r24, Z+8	; 0x08
    1936:	91 85       	ldd	r25, Z+9	; 0x09
    1938:	89 2b       	or	r24, r25
    193a:	c1 f2       	breq	.-80     	; 0x18ec <dir_sdi.constprop.1+0x20>
    193c:	82 a1       	ldd	r24, Z+34	; 0x22
    193e:	93 a1       	ldd	r25, Z+35	; 0x23
    1940:	a4 a1       	ldd	r26, Z+36	; 0x24
    1942:	b5 a1       	ldd	r27, Z+37	; 0x25
    1944:	8e 87       	std	Y+14, r24	; 0x0e
    1946:	9f 87       	std	Y+15, r25	; 0x0f
    1948:	a8 8b       	std	Y+16, r26	; 0x10
    194a:	b9 8b       	std	Y+17, r27	; 0x11
    194c:	2b c0       	rjmp	.+86     	; 0x19a4 <dir_sdi.constprop.1+0xd8>
    194e:	f8 01       	movw	r30, r16
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	81 11       	cpse	r24, r1
    1954:	1d c0       	rjmp	.+58     	; 0x1990 <dir_sdi.constprop.1+0xc4>
    1956:	88 81       	ld	r24, Y
    1958:	99 81       	ldd	r25, Y+1	; 0x01
    195a:	f0 de       	rcall	.-544    	; 0x173c <get_fat>
    195c:	ab 01       	movw	r20, r22
    195e:	bc 01       	movw	r22, r24
    1960:	4f 3f       	cpi	r20, 0xFF	; 255
    1962:	ff ef       	ldi	r31, 0xFF	; 255
    1964:	5f 07       	cpc	r21, r31
    1966:	6f 07       	cpc	r22, r31
    1968:	7f 07       	cpc	r23, r31
    196a:	11 f1       	breq	.+68     	; 0x19b0 <dir_sdi.constprop.1+0xe4>
    196c:	42 30       	cpi	r20, 0x02	; 2
    196e:	51 05       	cpc	r21, r1
    1970:	61 05       	cpc	r22, r1
    1972:	71 05       	cpc	r23, r1
    1974:	08 f4       	brcc	.+2      	; 0x1978 <dir_sdi.constprop.1+0xac>
    1976:	ba cf       	rjmp	.-140    	; 0x18ec <dir_sdi.constprop.1+0x20>
    1978:	e8 81       	ld	r30, Y
    197a:	f9 81       	ldd	r31, Y+1	; 0x01
    197c:	86 89       	ldd	r24, Z+22	; 0x16
    197e:	97 89       	ldd	r25, Z+23	; 0x17
    1980:	a0 8d       	ldd	r26, Z+24	; 0x18
    1982:	b1 8d       	ldd	r27, Z+25	; 0x19
    1984:	48 17       	cp	r20, r24
    1986:	59 07       	cpc	r21, r25
    1988:	6a 07       	cpc	r22, r26
    198a:	7b 07       	cpc	r23, r27
    198c:	20 f3       	brcs	.-56     	; 0x1956 <dir_sdi.constprop.1+0x8a>
    198e:	ae cf       	rjmp	.-164    	; 0x18ec <dir_sdi.constprop.1+0x20>
    1990:	4a 87       	std	Y+10, r20	; 0x0a
    1992:	5b 87       	std	Y+11, r21	; 0x0b
    1994:	6c 87       	std	Y+12, r22	; 0x0c
    1996:	7d 87       	std	Y+13, r23	; 0x0d
    1998:	c8 01       	movw	r24, r16
    199a:	a8 de       	rcall	.-688    	; 0x16ec <clust2sect>
    199c:	6e 87       	std	Y+14, r22	; 0x0e
    199e:	7f 87       	std	Y+15, r23	; 0x0f
    19a0:	88 8b       	std	Y+16, r24	; 0x10
    19a2:	99 8b       	std	Y+17, r25	; 0x11
    19a4:	c8 01       	movw	r24, r16
    19a6:	8e 96       	adiw	r24, 0x2e	; 46
    19a8:	9b 8b       	std	Y+19, r25	; 0x13
    19aa:	8a 8b       	std	Y+18, r24	; 0x12
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <dir_sdi.constprop.1+0xe6>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	08 95       	ret

000019bc <put_fat>:
    19bc:	4f 92       	push	r4
    19be:	5f 92       	push	r5
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	00 d0       	rcall	.+0      	; 0x19da <put_fat+0x1e>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <put_fat+0x20>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <put_fat+0x22>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	42 30       	cpi	r20, 0x02	; 2
    19e4:	51 05       	cpc	r21, r1
    19e6:	61 05       	cpc	r22, r1
    19e8:	71 05       	cpc	r23, r1
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <put_fat+0x32>
    19ec:	ec c0       	rjmp	.+472    	; 0x1bc6 <put_fat+0x20a>
    19ee:	dc 01       	movw	r26, r24
    19f0:	56 96       	adiw	r26, 0x16	; 22
    19f2:	cd 90       	ld	r12, X+
    19f4:	dd 90       	ld	r13, X+
    19f6:	ed 90       	ld	r14, X+
    19f8:	fc 90       	ld	r15, X
    19fa:	59 97       	sbiw	r26, 0x19	; 25
    19fc:	4c 15       	cp	r20, r12
    19fe:	5d 05       	cpc	r21, r13
    1a00:	6e 05       	cpc	r22, r14
    1a02:	7f 05       	cpc	r23, r15
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <put_fat+0x4c>
    1a06:	df c0       	rjmp	.+446    	; 0x1bc6 <put_fat+0x20a>
    1a08:	28 01       	movw	r4, r16
    1a0a:	39 01       	movw	r6, r18
    1a0c:	6a 01       	movw	r12, r20
    1a0e:	7b 01       	movw	r14, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	fc 01       	movw	r30, r24
    1a16:	80 81       	ld	r24, Z
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <put_fat+0x62>
    1a1c:	6d c0       	rjmp	.+218    	; 0x1af8 <put_fat+0x13c>
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <put_fat+0x68>
    1a22:	90 c0       	rjmp	.+288    	; 0x1b44 <put_fat+0x188>
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <put_fat+0x6e>
    1a28:	c7 c0       	rjmp	.+398    	; 0x1bb8 <put_fat+0x1fc>
    1a2a:	5a 01       	movw	r10, r20
    1a2c:	b6 94       	lsr	r11
    1a2e:	a7 94       	ror	r10
    1a30:	ac 0c       	add	r10, r12
    1a32:	bd 1c       	adc	r11, r13
    1a34:	c5 01       	movw	r24, r10
    1a36:	89 2f       	mov	r24, r25
    1a38:	99 27       	eor	r25, r25
    1a3a:	86 95       	lsr	r24
    1a3c:	46 8d       	ldd	r20, Z+30	; 0x1e
    1a3e:	57 8d       	ldd	r21, Z+31	; 0x1f
    1a40:	60 a1       	ldd	r22, Z+32	; 0x20
    1a42:	71 a1       	ldd	r23, Z+33	; 0x21
    1a44:	48 0f       	add	r20, r24
    1a46:	59 1f       	adc	r21, r25
    1a48:	61 1d       	adc	r22, r1
    1a4a:	71 1d       	adc	r23, r1
    1a4c:	cf 01       	movw	r24, r30
    1a4e:	8a dd       	rcall	.-1260   	; 0x1564 <move_window>
    1a50:	81 11       	cpse	r24, r1
    1a52:	b3 c0       	rjmp	.+358    	; 0x1bba <put_fat+0x1fe>
    1a54:	f5 01       	movw	r30, r10
    1a56:	f1 70       	andi	r31, 0x01	; 1
    1a58:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5c:	e2 0f       	add	r30, r18
    1a5e:	f3 1f       	adc	r31, r19
    1a60:	d7 01       	movw	r26, r14
    1a62:	c6 01       	movw	r24, r12
    1a64:	81 70       	andi	r24, 0x01	; 1
    1a66:	99 27       	eor	r25, r25
    1a68:	aa 27       	eor	r26, r26
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	ab 83       	std	Y+3, r26	; 0x03
    1a72:	bc 83       	std	Y+4, r27	; 0x04
    1a74:	c0 fe       	sbrs	r12, 0
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <put_fat+0xce>
    1a78:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	2f 70       	andi	r18, 0x0F	; 15
    1a7e:	a0 e1       	ldi	r26, 0x10	; 16
    1a80:	4a 9e       	mul	r4, r26
    1a82:	c0 01       	movw	r24, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	82 2b       	or	r24, r18
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <put_fat+0xd0>
    1a8a:	84 2d       	mov	r24, r4
    1a8c:	86 a7       	std	Z+46, r24	; 0x2e
    1a8e:	bf ef       	ldi	r27, 0xFF	; 255
    1a90:	ab 1a       	sub	r10, r27
    1a92:	bb 0a       	sbc	r11, r27
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	ed 81       	ldd	r30, Y+5	; 0x05
    1a98:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9a:	84 83       	std	Z+4, r24	; 0x04
    1a9c:	c5 01       	movw	r24, r10
    1a9e:	89 2f       	mov	r24, r25
    1aa0:	99 27       	eor	r25, r25
    1aa2:	86 95       	lsr	r24
    1aa4:	46 8d       	ldd	r20, Z+30	; 0x1e
    1aa6:	57 8d       	ldd	r21, Z+31	; 0x1f
    1aa8:	60 a1       	ldd	r22, Z+32	; 0x20
    1aaa:	71 a1       	ldd	r23, Z+33	; 0x21
    1aac:	48 0f       	add	r20, r24
    1aae:	59 1f       	adc	r21, r25
    1ab0:	61 1d       	adc	r22, r1
    1ab2:	71 1d       	adc	r23, r1
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	56 dd       	rcall	.-1364   	; 0x1564 <move_window>
    1ab8:	81 11       	cpse	r24, r1
    1aba:	7f c0       	rjmp	.+254    	; 0x1bba <put_fat+0x1fe>
    1abc:	f1 e0       	ldi	r31, 0x01	; 1
    1abe:	bf 22       	and	r11, r31
    1ac0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac4:	ea 0d       	add	r30, r10
    1ac6:	fb 1d       	adc	r31, r11
    1ac8:	29 81       	ldd	r18, Y+1	; 0x01
    1aca:	3a 81       	ldd	r19, Y+2	; 0x02
    1acc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ace:	5c 81       	ldd	r21, Y+4	; 0x04
    1ad0:	23 2b       	or	r18, r19
    1ad2:	24 2b       	or	r18, r20
    1ad4:	25 2b       	or	r18, r21
    1ad6:	41 f0       	breq	.+16     	; 0x1ae8 <put_fat+0x12c>
    1ad8:	54 e0       	ldi	r21, 0x04	; 4
    1ada:	76 94       	lsr	r7
    1adc:	67 94       	ror	r6
    1ade:	57 94       	ror	r5
    1ae0:	47 94       	ror	r4
    1ae2:	5a 95       	dec	r21
    1ae4:	d1 f7       	brne	.-12     	; 0x1ada <put_fat+0x11e>
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <put_fat+0x138>
    1ae8:	06 a5       	ldd	r16, Z+46	; 0x2e
    1aea:	00 7f       	andi	r16, 0xF0	; 240
    1aec:	95 2d       	mov	r25, r5
    1aee:	9f 70       	andi	r25, 0x0F	; 15
    1af0:	40 2e       	mov	r4, r16
    1af2:	49 2a       	or	r4, r25
    1af4:	46 a6       	std	Z+46, r4	; 0x2e
    1af6:	61 c0       	rjmp	.+194    	; 0x1bba <put_fat+0x1fe>
    1af8:	77 27       	eor	r23, r23
    1afa:	6f 2d       	mov	r22, r15
    1afc:	5e 2d       	mov	r21, r14
    1afe:	4d 2d       	mov	r20, r13
    1b00:	ed 81       	ldd	r30, Y+5	; 0x05
    1b02:	fe 81       	ldd	r31, Y+6	; 0x06
    1b04:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b06:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b08:	a0 a1       	ldd	r26, Z+32	; 0x20
    1b0a:	b1 a1       	ldd	r27, Z+33	; 0x21
    1b0c:	48 0f       	add	r20, r24
    1b0e:	59 1f       	adc	r21, r25
    1b10:	6a 1f       	adc	r22, r26
    1b12:	7b 1f       	adc	r23, r27
    1b14:	cf 01       	movw	r24, r30
    1b16:	26 dd       	rcall	.-1460   	; 0x1564 <move_window>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	4f c0       	rjmp	.+158    	; 0x1bba <put_fat+0x1fe>
    1b1c:	cc 0c       	add	r12, r12
    1b1e:	dd 1c       	adc	r13, r13
    1b20:	ee 1c       	adc	r14, r14
    1b22:	ff 1c       	adc	r15, r15
    1b24:	e8 94       	clt
    1b26:	c0 f8       	bld	r12, 0
    1b28:	f1 e0       	ldi	r31, 0x01	; 1
    1b2a:	df 22       	and	r13, r31
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	ff 24       	eor	r15, r15
    1b30:	2e e2       	ldi	r18, 0x2E	; 46
    1b32:	c2 0e       	add	r12, r18
    1b34:	d1 1c       	adc	r13, r1
    1b36:	ed 81       	ldd	r30, Y+5	; 0x05
    1b38:	fe 81       	ldd	r31, Y+6	; 0x06
    1b3a:	ec 0d       	add	r30, r12
    1b3c:	fd 1d       	adc	r31, r13
    1b3e:	51 82       	std	Z+1, r5	; 0x01
    1b40:	40 82       	st	Z, r4
    1b42:	3b c0       	rjmp	.+118    	; 0x1bba <put_fat+0x1fe>
    1b44:	ed 81       	ldd	r30, Y+5	; 0x05
    1b46:	fe 81       	ldd	r31, Y+6	; 0x06
    1b48:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b4a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b4c:	a0 a1       	ldd	r26, Z+32	; 0x20
    1b4e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1b50:	27 e0       	ldi	r18, 0x07	; 7
    1b52:	76 95       	lsr	r23
    1b54:	67 95       	ror	r22
    1b56:	57 95       	ror	r21
    1b58:	47 95       	ror	r20
    1b5a:	2a 95       	dec	r18
    1b5c:	d1 f7       	brne	.-12     	; 0x1b52 <put_fat+0x196>
    1b5e:	48 0f       	add	r20, r24
    1b60:	59 1f       	adc	r21, r25
    1b62:	6a 1f       	adc	r22, r26
    1b64:	7b 1f       	adc	r23, r27
    1b66:	cf 01       	movw	r24, r30
    1b68:	fd dc       	rcall	.-1542   	; 0x1564 <move_window>
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	26 c0       	rjmp	.+76     	; 0x1bba <put_fat+0x1fe>
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	cc 0c       	add	r12, r12
    1b72:	dd 1c       	adc	r13, r13
    1b74:	ee 1c       	adc	r14, r14
    1b76:	ff 1c       	adc	r15, r15
    1b78:	9a 95       	dec	r25
    1b7a:	d1 f7       	brne	.-12     	; 0x1b70 <put_fat+0x1b4>
    1b7c:	fc ef       	ldi	r31, 0xFC	; 252
    1b7e:	cf 22       	and	r12, r31
    1b80:	f1 e0       	ldi	r31, 0x01	; 1
    1b82:	df 22       	and	r13, r31
    1b84:	ee 24       	eor	r14, r14
    1b86:	ff 24       	eor	r15, r15
    1b88:	2e e2       	ldi	r18, 0x2E	; 46
    1b8a:	c2 0e       	add	r12, r18
    1b8c:	d1 1c       	adc	r13, r1
    1b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b90:	fe 81       	ldd	r31, Y+6	; 0x06
    1b92:	ec 0d       	add	r30, r12
    1b94:	fd 1d       	adc	r31, r13
    1b96:	00 81       	ld	r16, Z
    1b98:	11 81       	ldd	r17, Z+1	; 0x01
    1b9a:	22 81       	ldd	r18, Z+2	; 0x02
    1b9c:	33 81       	ldd	r19, Z+3	; 0x03
    1b9e:	00 27       	eor	r16, r16
    1ba0:	11 27       	eor	r17, r17
    1ba2:	22 27       	eor	r18, r18
    1ba4:	30 7f       	andi	r19, 0xF0	; 240
    1ba6:	40 2a       	or	r4, r16
    1ba8:	51 2a       	or	r5, r17
    1baa:	62 2a       	or	r6, r18
    1bac:	73 2a       	or	r7, r19
    1bae:	40 82       	st	Z, r4
    1bb0:	51 82       	std	Z+1, r5	; 0x01
    1bb2:	62 82       	std	Z+2, r6	; 0x02
    1bb4:	73 82       	std	Z+3, r7	; 0x03
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <put_fat+0x1fe>
    1bb8:	82 e0       	ldi	r24, 0x02	; 2
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	ad 81       	ldd	r26, Y+5	; 0x05
    1bbe:	be 81       	ldd	r27, Y+6	; 0x06
    1bc0:	14 96       	adiw	r26, 0x04	; 4
    1bc2:	9c 93       	st	X, r25
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <put_fat+0x20c>
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	26 96       	adiw	r28, 0x06	; 6
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	bf 90       	pop	r11
    1be6:	af 90       	pop	r10
    1be8:	7f 90       	pop	r7
    1bea:	6f 90       	pop	r6
    1bec:	5f 90       	pop	r5
    1bee:	4f 90       	pop	r4
    1bf0:	08 95       	ret

00001bf2 <create_chain>:
    1bf2:	4f 92       	push	r4
    1bf4:	5f 92       	push	r5
    1bf6:	6f 92       	push	r6
    1bf8:	7f 92       	push	r7
    1bfa:	8f 92       	push	r8
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	ec 01       	movw	r28, r24
    1c14:	2a 01       	movw	r4, r20
    1c16:	3b 01       	movw	r6, r22
    1c18:	41 15       	cp	r20, r1
    1c1a:	51 05       	cpc	r21, r1
    1c1c:	61 05       	cpc	r22, r1
    1c1e:	71 05       	cpc	r23, r1
    1c20:	99 f4       	brne	.+38     	; 0x1c48 <create_chain+0x56>
    1c22:	8a 84       	ldd	r8, Y+10	; 0x0a
    1c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c26:	ac 84       	ldd	r10, Y+12	; 0x0c
    1c28:	bd 84       	ldd	r11, Y+13	; 0x0d
    1c2a:	81 14       	cp	r8, r1
    1c2c:	91 04       	cpc	r9, r1
    1c2e:	a1 04       	cpc	r10, r1
    1c30:	b1 04       	cpc	r11, r1
    1c32:	01 f1       	breq	.+64     	; 0x1c74 <create_chain+0x82>
    1c34:	8e 89       	ldd	r24, Y+22	; 0x16
    1c36:	9f 89       	ldd	r25, Y+23	; 0x17
    1c38:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c3a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c3c:	88 16       	cp	r8, r24
    1c3e:	99 06       	cpc	r9, r25
    1c40:	aa 06       	cpc	r10, r26
    1c42:	bb 06       	cpc	r11, r27
    1c44:	d8 f0       	brcs	.+54     	; 0x1c7c <create_chain+0x8a>
    1c46:	16 c0       	rjmp	.+44     	; 0x1c74 <create_chain+0x82>
    1c48:	79 dd       	rcall	.-1294   	; 0x173c <get_fat>
    1c4a:	6b 01       	movw	r12, r22
    1c4c:	7c 01       	movw	r14, r24
    1c4e:	62 30       	cpi	r22, 0x02	; 2
    1c50:	71 05       	cpc	r23, r1
    1c52:	81 05       	cpc	r24, r1
    1c54:	91 05       	cpc	r25, r1
    1c56:	08 f4       	brcc	.+2      	; 0x1c5a <create_chain+0x68>
    1c58:	7f c0       	rjmp	.+254    	; 0x1d58 <create_chain+0x166>
    1c5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c5c:	9f 89       	ldd	r25, Y+23	; 0x17
    1c5e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c60:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c62:	c8 16       	cp	r12, r24
    1c64:	d9 06       	cpc	r13, r25
    1c66:	ea 06       	cpc	r14, r26
    1c68:	fb 06       	cpc	r15, r27
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <create_chain+0x7c>
    1c6c:	7a c0       	rjmp	.+244    	; 0x1d62 <create_chain+0x170>
    1c6e:	53 01       	movw	r10, r6
    1c70:	42 01       	movw	r8, r4
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <create_chain+0x8a>
    1c74:	81 2c       	mov	r8, r1
    1c76:	91 2c       	mov	r9, r1
    1c78:	54 01       	movw	r10, r8
    1c7a:	83 94       	inc	r8
    1c7c:	75 01       	movw	r14, r10
    1c7e:	64 01       	movw	r12, r8
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	c8 1a       	sub	r12, r24
    1c84:	d8 0a       	sbc	r13, r24
    1c86:	e8 0a       	sbc	r14, r24
    1c88:	f8 0a       	sbc	r15, r24
    1c8a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c8c:	9f 89       	ldd	r25, Y+23	; 0x17
    1c8e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c90:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c92:	c8 16       	cp	r12, r24
    1c94:	d9 06       	cpc	r13, r25
    1c96:	ea 06       	cpc	r14, r26
    1c98:	fb 06       	cpc	r15, r27
    1c9a:	68 f0       	brcs	.+26     	; 0x1cb6 <create_chain+0xc4>
    1c9c:	22 e0       	ldi	r18, 0x02	; 2
    1c9e:	82 16       	cp	r8, r18
    1ca0:	91 04       	cpc	r9, r1
    1ca2:	a1 04       	cpc	r10, r1
    1ca4:	b1 04       	cpc	r11, r1
    1ca6:	10 f4       	brcc	.+4      	; 0x1cac <create_chain+0xba>
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	57 c0       	rjmp	.+174    	; 0x1d5a <create_chain+0x168>
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	c8 2e       	mov	r12, r24
    1cb0:	d1 2c       	mov	r13, r1
    1cb2:	e1 2c       	mov	r14, r1
    1cb4:	f1 2c       	mov	r15, r1
    1cb6:	b7 01       	movw	r22, r14
    1cb8:	a6 01       	movw	r20, r12
    1cba:	ce 01       	movw	r24, r28
    1cbc:	3f dd       	rcall	.-1410   	; 0x173c <get_fat>
    1cbe:	61 15       	cp	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	81 05       	cpc	r24, r1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	b1 f0       	breq	.+44     	; 0x1cf4 <create_chain+0x102>
    1cc8:	6f 3f       	cpi	r22, 0xFF	; 255
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	72 07       	cpc	r23, r18
    1cce:	82 07       	cpc	r24, r18
    1cd0:	92 07       	cpc	r25, r18
    1cd2:	29 f4       	brne	.+10     	; 0x1cde <create_chain+0xec>
    1cd4:	6f ef       	ldi	r22, 0xFF	; 255
    1cd6:	7f ef       	ldi	r23, 0xFF	; 255
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	44 c0       	rjmp	.+136    	; 0x1d66 <create_chain+0x174>
    1cde:	61 30       	cpi	r22, 0x01	; 1
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	81 05       	cpc	r24, r1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	c1 f1       	breq	.+112    	; 0x1d58 <create_chain+0x166>
    1ce8:	c8 14       	cp	r12, r8
    1cea:	d9 04       	cpc	r13, r9
    1cec:	ea 04       	cpc	r14, r10
    1cee:	fb 04       	cpc	r15, r11
    1cf0:	39 f6       	brne	.-114    	; 0x1c80 <create_chain+0x8e>
    1cf2:	da cf       	rjmp	.-76     	; 0x1ca8 <create_chain+0xb6>
    1cf4:	0f ef       	ldi	r16, 0xFF	; 255
    1cf6:	1f ef       	ldi	r17, 0xFF	; 255
    1cf8:	2f ef       	ldi	r18, 0xFF	; 255
    1cfa:	3f e0       	ldi	r19, 0x0F	; 15
    1cfc:	b7 01       	movw	r22, r14
    1cfe:	a6 01       	movw	r20, r12
    1d00:	ce 01       	movw	r24, r28
    1d02:	5c de       	rcall	.-840    	; 0x19bc <put_fat>
    1d04:	81 11       	cpse	r24, r1
    1d06:	25 c0       	rjmp	.+74     	; 0x1d52 <create_chain+0x160>
    1d08:	41 14       	cp	r4, r1
    1d0a:	51 04       	cpc	r5, r1
    1d0c:	61 04       	cpc	r6, r1
    1d0e:	71 04       	cpc	r7, r1
    1d10:	c1 f4       	brne	.+48     	; 0x1d42 <create_chain+0x150>
    1d12:	ca 86       	std	Y+10, r12	; 0x0a
    1d14:	db 86       	std	Y+11, r13	; 0x0b
    1d16:	ec 86       	std	Y+12, r14	; 0x0c
    1d18:	fd 86       	std	Y+13, r15	; 0x0d
    1d1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d1e:	a8 89       	ldd	r26, Y+16	; 0x10
    1d20:	b9 89       	ldd	r27, Y+17	; 0x11
    1d22:	8f 3f       	cpi	r24, 0xFF	; 255
    1d24:	2f ef       	ldi	r18, 0xFF	; 255
    1d26:	92 07       	cpc	r25, r18
    1d28:	a2 07       	cpc	r26, r18
    1d2a:	b2 07       	cpc	r27, r18
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <create_chain+0x170>
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	a1 09       	sbc	r26, r1
    1d32:	b1 09       	sbc	r27, r1
    1d34:	8e 87       	std	Y+14, r24	; 0x0e
    1d36:	9f 87       	std	Y+15, r25	; 0x0f
    1d38:	a8 8b       	std	Y+16, r26	; 0x10
    1d3a:	b9 8b       	std	Y+17, r27	; 0x11
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	10 c0       	rjmp	.+32     	; 0x1d62 <create_chain+0x170>
    1d42:	97 01       	movw	r18, r14
    1d44:	86 01       	movw	r16, r12
    1d46:	b3 01       	movw	r22, r6
    1d48:	a2 01       	movw	r20, r4
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	37 de       	rcall	.-914    	; 0x19bc <put_fat>
    1d4e:	88 23       	and	r24, r24
    1d50:	01 f3       	breq	.-64     	; 0x1d12 <create_chain+0x120>
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <create_chain+0x166>
    1d56:	be cf       	rjmp	.-132    	; 0x1cd4 <create_chain+0xe2>
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <create_chain+0x174>
    1d62:	b6 01       	movw	r22, r12
    1d64:	c7 01       	movw	r24, r14
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	bf 90       	pop	r11
    1d78:	af 90       	pop	r10
    1d7a:	9f 90       	pop	r9
    1d7c:	8f 90       	pop	r8
    1d7e:	7f 90       	pop	r7
    1d80:	6f 90       	pop	r6
    1d82:	5f 90       	pop	r5
    1d84:	4f 90       	pop	r4
    1d86:	08 95       	ret

00001d88 <dir_next>:
    1d88:	8f 92       	push	r8
    1d8a:	9f 92       	push	r9
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	6b 01       	movw	r12, r22
    1da4:	0c 81       	ldd	r16, Y+4	; 0x04
    1da6:	1d 81       	ldd	r17, Y+5	; 0x05
    1da8:	0f 5f       	subi	r16, 0xFF	; 255
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <dir_next+0x2a>
    1dae:	84 e0       	ldi	r24, 0x04	; 4
    1db0:	dc c0       	rjmp	.+440    	; 0x1f6a <dir_next+0x1e2>
    1db2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1db4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1db6:	68 89       	ldd	r22, Y+16	; 0x10
    1db8:	79 89       	ldd	r23, Y+17	; 0x11
    1dba:	41 15       	cp	r20, r1
    1dbc:	51 05       	cpc	r21, r1
    1dbe:	61 05       	cpc	r22, r1
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	a9 f3       	breq	.-22     	; 0x1dae <dir_next+0x26>
    1dc4:	78 01       	movw	r14, r16
    1dc6:	8f e0       	ldi	r24, 0x0F	; 15
    1dc8:	e8 22       	and	r14, r24
    1dca:	ff 24       	eor	r15, r15
    1dcc:	e1 14       	cp	r14, r1
    1dce:	f1 04       	cpc	r15, r1
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <dir_next+0x4c>
    1dd2:	ba c0       	rjmp	.+372    	; 0x1f48 <dir_next+0x1c0>
    1dd4:	4f 5f       	subi	r20, 0xFF	; 255
    1dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd8:	6f 4f       	sbci	r22, 0xFF	; 255
    1dda:	7f 4f       	sbci	r23, 0xFF	; 255
    1ddc:	4e 87       	std	Y+14, r20	; 0x0e
    1dde:	5f 87       	std	Y+15, r21	; 0x0f
    1de0:	68 8b       	std	Y+16, r22	; 0x10
    1de2:	79 8b       	std	Y+17, r23	; 0x11
    1de4:	4a 85       	ldd	r20, Y+10	; 0x0a
    1de6:	5b 85       	ldd	r21, Y+11	; 0x0b
    1de8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dec:	88 81       	ld	r24, Y
    1dee:	99 81       	ldd	r25, Y+1	; 0x01
    1df0:	fc 01       	movw	r30, r24
    1df2:	41 15       	cp	r20, r1
    1df4:	51 05       	cpc	r21, r1
    1df6:	61 05       	cpc	r22, r1
    1df8:	71 05       	cpc	r23, r1
    1dfa:	31 f4       	brne	.+12     	; 0x1e08 <dir_next+0x80>
    1dfc:	80 85       	ldd	r24, Z+8	; 0x08
    1dfe:	91 85       	ldd	r25, Z+9	; 0x09
    1e00:	08 17       	cp	r16, r24
    1e02:	19 07       	cpc	r17, r25
    1e04:	a0 f6       	brcc	.-88     	; 0x1dae <dir_next+0x26>
    1e06:	a0 c0       	rjmp	.+320    	; 0x1f48 <dir_next+0x1c0>
    1e08:	22 81       	ldd	r18, Z+2	; 0x02
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	21 50       	subi	r18, 0x01	; 1
    1e0e:	31 09       	sbc	r19, r1
    1e10:	f8 01       	movw	r30, r16
    1e12:	a4 e0       	ldi	r26, 0x04	; 4
    1e14:	f6 95       	lsr	r31
    1e16:	e7 95       	ror	r30
    1e18:	aa 95       	dec	r26
    1e1a:	e1 f7       	brne	.-8      	; 0x1e14 <dir_next+0x8c>
    1e1c:	2e 23       	and	r18, r30
    1e1e:	3f 23       	and	r19, r31
    1e20:	23 2b       	or	r18, r19
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <dir_next+0x9e>
    1e24:	91 c0       	rjmp	.+290    	; 0x1f48 <dir_next+0x1c0>
    1e26:	8a dc       	rcall	.-1772   	; 0x173c <get_fat>
    1e28:	4b 01       	movw	r8, r22
    1e2a:	5c 01       	movw	r10, r24
    1e2c:	62 30       	cpi	r22, 0x02	; 2
    1e2e:	71 05       	cpc	r23, r1
    1e30:	81 05       	cpc	r24, r1
    1e32:	91 05       	cpc	r25, r1
    1e34:	10 f4       	brcc	.+4      	; 0x1e3a <dir_next+0xb2>
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	98 c0       	rjmp	.+304    	; 0x1f6a <dir_next+0x1e2>
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	88 16       	cp	r8, r24
    1e3e:	98 06       	cpc	r9, r24
    1e40:	a8 06       	cpc	r10, r24
    1e42:	b8 06       	cpc	r11, r24
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <dir_next+0xc2>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 c0       	rjmp	.+288    	; 0x1f6a <dir_next+0x1e2>
    1e4a:	88 81       	ld	r24, Y
    1e4c:	99 81       	ldd	r25, Y+1	; 0x01
    1e4e:	fc 01       	movw	r30, r24
    1e50:	46 89       	ldd	r20, Z+22	; 0x16
    1e52:	57 89       	ldd	r21, Z+23	; 0x17
    1e54:	60 8d       	ldd	r22, Z+24	; 0x18
    1e56:	71 8d       	ldd	r23, Z+25	; 0x19
    1e58:	84 16       	cp	r8, r20
    1e5a:	95 06       	cpc	r9, r21
    1e5c:	a6 06       	cpc	r10, r22
    1e5e:	b7 06       	cpc	r11, r23
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <dir_next+0xdc>
    1e62:	65 c0       	rjmp	.+202    	; 0x1f2e <dir_next+0x1a6>
    1e64:	cd 28       	or	r12, r13
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <dir_next+0xe2>
    1e68:	a2 cf       	rjmp	.-188    	; 0x1dae <dir_next+0x26>
    1e6a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e6c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e70:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e72:	bf de       	rcall	.-642    	; 0x1bf2 <create_chain>
    1e74:	4b 01       	movw	r8, r22
    1e76:	5c 01       	movw	r10, r24
    1e78:	61 15       	cp	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	81 05       	cpc	r24, r1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <dir_next+0xfc>
    1e82:	72 c0       	rjmp	.+228    	; 0x1f68 <dir_next+0x1e0>
    1e84:	61 30       	cpi	r22, 0x01	; 1
    1e86:	71 05       	cpc	r23, r1
    1e88:	81 05       	cpc	r24, r1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	a1 f2       	breq	.-88     	; 0x1e36 <dir_next+0xae>
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	88 16       	cp	r8, r24
    1e92:	98 06       	cpc	r9, r24
    1e94:	a8 06       	cpc	r10, r24
    1e96:	b8 06       	cpc	r11, r24
    1e98:	b1 f2       	breq	.-84     	; 0x1e46 <dir_next+0xbe>
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	ba 01       	movw	r22, r20
    1ea0:	88 81       	ld	r24, Y
    1ea2:	99 81       	ldd	r25, Y+1	; 0x01
    1ea4:	5f db       	rcall	.-2370   	; 0x1564 <move_window>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	ce cf       	rjmp	.-100    	; 0x1e46 <dir_next+0xbe>
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	fc 01       	movw	r30, r24
    1eb0:	be 96       	adiw	r30, 0x2e	; 46
    1eb2:	82 5d       	subi	r24, 0xD2	; 210
    1eb4:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb6:	8e 17       	cp	r24, r30
    1eb8:	9f 07       	cpc	r25, r31
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <dir_next+0x138>
    1ebc:	11 92       	st	Z+, r1
    1ebe:	fb cf       	rjmp	.-10     	; 0x1eb6 <dir_next+0x12e>
    1ec0:	c8 80       	ld	r12, Y
    1ec2:	d9 80       	ldd	r13, Y+1	; 0x01
    1ec4:	b5 01       	movw	r22, r10
    1ec6:	a4 01       	movw	r20, r8
    1ec8:	c6 01       	movw	r24, r12
    1eca:	10 dc       	rcall	.-2016   	; 0x16ec <clust2sect>
    1ecc:	f6 01       	movw	r30, r12
    1ece:	62 a7       	std	Z+42, r22	; 0x2a
    1ed0:	73 a7       	std	Z+43, r23	; 0x2b
    1ed2:	84 a7       	std	Z+44, r24	; 0x2c
    1ed4:	95 a7       	std	Z+45, r25	; 0x2d
    1ed6:	d1 2c       	mov	r13, r1
    1ed8:	cc 24       	eor	r12, r12
    1eda:	c3 94       	inc	r12
    1edc:	e8 81       	ld	r30, Y
    1ede:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	d8 16       	cp	r13, r24
    1ee4:	c0 f4       	brcc	.+48     	; 0x1f16 <dir_next+0x18e>
    1ee6:	c4 82       	std	Z+4, r12	; 0x04
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	ba 01       	movw	r22, r20
    1eee:	88 81       	ld	r24, Y
    1ef0:	99 81       	ldd	r25, Y+1	; 0x01
    1ef2:	38 db       	rcall	.-2448   	; 0x1564 <move_window>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	a7 cf       	rjmp	.-178    	; 0x1e46 <dir_next+0xbe>
    1ef8:	e8 81       	ld	r30, Y
    1efa:	f9 81       	ldd	r31, Y+1	; 0x01
    1efc:	82 a5       	ldd	r24, Z+42	; 0x2a
    1efe:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f00:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f02:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	a1 1d       	adc	r26, r1
    1f08:	b1 1d       	adc	r27, r1
    1f0a:	82 a7       	std	Z+42, r24	; 0x2a
    1f0c:	93 a7       	std	Z+43, r25	; 0x2b
    1f0e:	a4 a7       	std	Z+44, r26	; 0x2c
    1f10:	b5 a7       	std	Z+45, r27	; 0x2d
    1f12:	d3 94       	inc	r13
    1f14:	e3 cf       	rjmp	.-58     	; 0x1edc <dir_next+0x154>
    1f16:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f18:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f1a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f1c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f1e:	8d 19       	sub	r24, r13
    1f20:	91 09       	sbc	r25, r1
    1f22:	a1 09       	sbc	r26, r1
    1f24:	b1 09       	sbc	r27, r1
    1f26:	82 a7       	std	Z+42, r24	; 0x2a
    1f28:	93 a7       	std	Z+43, r25	; 0x2b
    1f2a:	a4 a7       	std	Z+44, r26	; 0x2c
    1f2c:	b5 a7       	std	Z+45, r27	; 0x2d
    1f2e:	8a 86       	std	Y+10, r8	; 0x0a
    1f30:	9b 86       	std	Y+11, r9	; 0x0b
    1f32:	ac 86       	std	Y+12, r10	; 0x0c
    1f34:	bd 86       	std	Y+13, r11	; 0x0d
    1f36:	b5 01       	movw	r22, r10
    1f38:	a4 01       	movw	r20, r8
    1f3a:	88 81       	ld	r24, Y
    1f3c:	99 81       	ldd	r25, Y+1	; 0x01
    1f3e:	d6 db       	rcall	.-2132   	; 0x16ec <clust2sect>
    1f40:	6e 87       	std	Y+14, r22	; 0x0e
    1f42:	7f 87       	std	Y+15, r23	; 0x0f
    1f44:	88 8b       	std	Y+16, r24	; 0x10
    1f46:	99 8b       	std	Y+17, r25	; 0x11
    1f48:	1d 83       	std	Y+5, r17	; 0x05
    1f4a:	0c 83       	std	Y+4, r16	; 0x04
    1f4c:	88 81       	ld	r24, Y
    1f4e:	99 81       	ldd	r25, Y+1	; 0x01
    1f50:	8e 96       	adiw	r24, 0x2e	; 46
    1f52:	25 e0       	ldi	r18, 0x05	; 5
    1f54:	ee 0c       	add	r14, r14
    1f56:	ff 1c       	adc	r15, r15
    1f58:	2a 95       	dec	r18
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <dir_next+0x1cc>
    1f5c:	e8 0e       	add	r14, r24
    1f5e:	f9 1e       	adc	r15, r25
    1f60:	fb 8a       	std	Y+19, r15	; 0x13
    1f62:	ea 8a       	std	Y+18, r14	; 0x12
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <dir_next+0x1e2>
    1f68:	87 e0       	ldi	r24, 0x07	; 7
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	8f 90       	pop	r8
    1f82:	08 95       	ret

00001f84 <f_mount>:
    1f84:	81 11       	cpse	r24, r1
    1f86:	12 c0       	rjmp	.+36     	; 0x1fac <f_mount+0x28>
    1f88:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <FatFs>
    1f8c:	f0 91 25 04 	lds	r31, 0x0425	; 0x800425 <FatFs+0x1>
    1f90:	30 97       	sbiw	r30, 0x00	; 0
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <f_mount+0x12>
    1f94:	10 82       	st	Z, r1
    1f96:	61 15       	cp	r22, r1
    1f98:	71 05       	cpc	r23, r1
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <f_mount+0x1c>
    1f9c:	fb 01       	movw	r30, r22
    1f9e:	10 82       	st	Z, r1
    1fa0:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <FatFs+0x1>
    1fa4:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <FatFs>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	08 95       	ret
    1fac:	8b e0       	ldi	r24, 0x0B	; 11
    1fae:	08 95       	ret

00001fb0 <f_open>:
    1fb0:	2f 92       	push	r2
    1fb2:	3f 92       	push	r3
    1fb4:	4f 92       	push	r4
    1fb6:	5f 92       	push	r5
    1fb8:	6f 92       	push	r6
    1fba:	7f 92       	push	r7
    1fbc:	8f 92       	push	r8
    1fbe:	9f 92       	push	r9
    1fc0:	af 92       	push	r10
    1fc2:	bf 92       	push	r11
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	ea 97       	sbiw	r28, 0x3a	; 58
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	98 a7       	std	Y+40, r25	; 0x28
    1fe6:	8f a3       	std	Y+39, r24	; 0x27
    1fe8:	6b 01       	movw	r12, r22
    1fea:	4e a7       	std	Y+46, r20	; 0x2e
    1fec:	dc 01       	movw	r26, r24
    1fee:	1d 92       	st	X+, r1
    1ff0:	1c 92       	st	X, r1
    1ff2:	4f 71       	andi	r20, 0x1F	; 31
    1ff4:	49 a7       	std	Y+41, r20	; 0x29
    1ff6:	fb 01       	movw	r30, r22
    1ff8:	80 81       	ld	r24, Z
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	c0 97       	sbiw	r24, 0x30	; 48
    1ffe:	8a 30       	cpi	r24, 0x0A	; 10
    2000:	91 05       	cpc	r25, r1
    2002:	48 f4       	brcc	.+18     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    2004:	21 81       	ldd	r18, Z+1	; 0x01
    2006:	2a 33       	cpi	r18, 0x3A	; 58
    2008:	31 f4       	brne	.+12     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    200a:	f2 e0       	ldi	r31, 0x02	; 2
    200c:	cf 0e       	add	r12, r31
    200e:	d1 1c       	adc	r13, r1
    2010:	89 2b       	or	r24, r25
    2012:	09 f0       	breq	.+2      	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    2014:	f8 c1       	rjmp	.+1008   	; 0x2406 <__stack+0x307>
    2016:	e0 90 24 04 	lds	r14, 0x0424	; 0x800424 <FatFs>
    201a:	f0 90 25 04 	lds	r15, 0x0425	; 0x800425 <FatFs+0x1>
    201e:	fa 82       	std	Y+2, r15	; 0x02
    2020:	e9 82       	std	Y+1, r14	; 0x01
    2022:	e1 14       	cp	r14, r1
    2024:	f1 04       	cpc	r15, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2028:	f0 c1       	rjmp	.+992    	; 0x240a <__stack+0x30b>
    202a:	1e a5       	ldd	r17, Y+46	; 0x2e
    202c:	1e 71       	andi	r17, 0x1E	; 30
    202e:	d7 01       	movw	r26, r14
    2030:	8c 91       	ld	r24, X
    2032:	88 23       	and	r24, r24
    2034:	59 f0       	breq	.+22     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	8c 91       	ld	r24, X
    203a:	fa d9       	rcall	.-3084   	; 0x1430 <disk_status>
    203c:	80 fd       	sbrc	r24, 0
    203e:	06 c0       	rjmp	.+12     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2040:	11 23       	and	r17, r17
    2042:	09 f4       	brne	.+2      	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2044:	e4 c1       	rjmp	.+968    	; 0x240e <__stack+0x30f>
    2046:	82 fd       	sbrc	r24, 2
    2048:	e6 c1       	rjmp	.+972    	; 0x2416 <__stack+0x317>
    204a:	e1 c1       	rjmp	.+962    	; 0x240e <__stack+0x30f>
    204c:	f7 01       	movw	r30, r14
    204e:	10 82       	st	Z, r1
    2050:	11 82       	std	Z+1, r1	; 0x01
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	eb d9       	rcall	.-3114   	; 0x142c <disk_initialize>
    2056:	80 fd       	sbrc	r24, 0
    2058:	dc c1       	rjmp	.+952    	; 0x2412 <__stack+0x313>
    205a:	11 23       	and	r17, r17
    205c:	11 f0       	breq	.+4      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    205e:	82 fd       	sbrc	r24, 2
    2060:	da c1       	rjmp	.+948    	; 0x2416 <__stack+0x317>
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	ba 01       	movw	r22, r20
    2068:	c7 01       	movw	r24, r14
    206a:	f2 da       	rcall	.-2588   	; 0x1650 <check_fs>
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	a9 f4       	brne	.+42     	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    2070:	f7 01       	movw	r30, r14
    2072:	e0 51       	subi	r30, 0x10	; 16
    2074:	fe 4f       	sbci	r31, 0xFE	; 254
    2076:	80 81       	ld	r24, Z
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <__DATA_REGION_LENGTH__+0x7e>
    207c:	d0 c1       	rjmp	.+928    	; 0x241e <__stack+0x31f>
    207e:	34 96       	adiw	r30, 0x04	; 4
    2080:	40 80       	ld	r4, Z
    2082:	51 80       	ldd	r5, Z+1	; 0x01
    2084:	62 80       	ldd	r6, Z+2	; 0x02
    2086:	73 80       	ldd	r7, Z+3	; 0x03
    2088:	4a a6       	std	Y+42, r4	; 0x2a
    208a:	5b a6       	std	Y+43, r5	; 0x2b
    208c:	6c a6       	std	Y+44, r6	; 0x2c
    208e:	7d a6       	std	Y+45, r7	; 0x2d
    2090:	b3 01       	movw	r22, r6
    2092:	a2 01       	movw	r20, r4
    2094:	c7 01       	movw	r24, r14
    2096:	dc da       	rcall	.-2632   	; 0x1650 <check_fs>
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    209a:	1a a6       	std	Y+42, r1	; 0x2a
    209c:	1b a6       	std	Y+43, r1	; 0x2b
    209e:	1c a6       	std	Y+44, r1	; 0x2c
    20a0:	1d a6       	std	Y+45, r1	; 0x2d
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    20a6:	b9 c1       	rjmp	.+882    	; 0x241a <__stack+0x31b>
    20a8:	81 11       	cpse	r24, r1
    20aa:	b9 c1       	rjmp	.+882    	; 0x241e <__stack+0x31f>
    20ac:	d7 01       	movw	r26, r14
    20ae:	d9 96       	adiw	r26, 0x39	; 57
    20b0:	8d 91       	ld	r24, X+
    20b2:	9c 91       	ld	r25, X
    20b4:	da 97       	sbiw	r26, 0x3a	; 58
    20b6:	81 15       	cp	r24, r1
    20b8:	92 40       	sbci	r25, 0x02	; 2
    20ba:	09 f0       	breq	.+2      	; 0x20be <__DATA_REGION_LENGTH__+0xbe>
    20bc:	b0 c1       	rjmp	.+864    	; 0x241e <__stack+0x31f>
    20be:	f7 01       	movw	r30, r14
    20c0:	ec 5b       	subi	r30, 0xBC	; 188
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	40 80       	ld	r4, Z
    20c6:	51 80       	ldd	r5, Z+1	; 0x01
    20c8:	32 01       	movw	r6, r4
    20ca:	81 2c       	mov	r8, r1
    20cc:	91 2c       	mov	r9, r1
    20ce:	6f aa       	std	Y+55, r6	; 0x37
    20d0:	78 ae       	std	Y+56, r7	; 0x38
    20d2:	89 ae       	std	Y+57, r8	; 0x39
    20d4:	9a ae       	std	Y+58, r9	; 0x3a
    20d6:	67 28       	or	r6, r7
    20d8:	68 28       	or	r6, r8
    20da:	69 28       	or	r6, r9
    20dc:	49 f4       	brne	.+18     	; 0x20f0 <__DATA_REGION_LENGTH__+0xf0>
    20de:	3e 96       	adiw	r30, 0x0e	; 14
    20e0:	80 80       	ld	r8, Z
    20e2:	91 80       	ldd	r9, Z+1	; 0x01
    20e4:	a2 80       	ldd	r10, Z+2	; 0x02
    20e6:	b3 80       	ldd	r11, Z+3	; 0x03
    20e8:	8f aa       	std	Y+55, r8	; 0x37
    20ea:	98 ae       	std	Y+56, r9	; 0x38
    20ec:	a9 ae       	std	Y+57, r10	; 0x39
    20ee:	ba ae       	std	Y+58, r11	; 0x3a
    20f0:	4f a8       	ldd	r4, Y+55	; 0x37
    20f2:	58 ac       	ldd	r5, Y+56	; 0x38
    20f4:	69 ac       	ldd	r6, Y+57	; 0x39
    20f6:	7a ac       	ldd	r7, Y+58	; 0x3a
    20f8:	d7 01       	movw	r26, r14
    20fa:	5a 96       	adiw	r26, 0x1a	; 26
    20fc:	4d 92       	st	X+, r4
    20fe:	5d 92       	st	X+, r5
    2100:	6d 92       	st	X+, r6
    2102:	7c 92       	st	X, r7
    2104:	5d 97       	sbiw	r26, 0x1d	; 29
    2106:	de 96       	adiw	r26, 0x3e	; 62
    2108:	ac 91       	ld	r26, X
    210a:	f7 01       	movw	r30, r14
    210c:	a3 83       	std	Z+3, r26	; 0x03
    210e:	8f ef       	ldi	r24, 0xFF	; 255
    2110:	8a 0f       	add	r24, r26
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	08 f0       	brcs	.+2      	; 0x2118 <__stack+0x19>
    2116:	83 c1       	rjmp	.+774    	; 0x241e <__stack+0x31f>
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	a3 01       	movw	r20, r6
    211c:	92 01       	movw	r18, r4
    211e:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__muluhisi3>
    2122:	6f a7       	std	Y+47, r22	; 0x2f
    2124:	78 ab       	std	Y+48, r23	; 0x30
    2126:	89 ab       	std	Y+49, r24	; 0x31
    2128:	9a ab       	std	Y+50, r25	; 0x32
    212a:	23 ad       	ldd	r18, Z+59	; 0x3b
    212c:	22 83       	std	Z+2, r18	; 0x02
    212e:	22 23       	and	r18, r18
    2130:	09 f4       	brne	.+2      	; 0x2134 <__stack+0x35>
    2132:	75 c1       	rjmp	.+746    	; 0x241e <__stack+0x31f>
    2134:	82 2f       	mov	r24, r18
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	ac 01       	movw	r20, r24
    213a:	41 50       	subi	r20, 0x01	; 1
    213c:	51 09       	sbc	r21, r1
    213e:	84 23       	and	r24, r20
    2140:	95 23       	and	r25, r21
    2142:	89 2b       	or	r24, r25
    2144:	09 f0       	breq	.+2      	; 0x2148 <__stack+0x49>
    2146:	6b c1       	rjmp	.+726    	; 0x241e <__stack+0x31f>
    2148:	ff 96       	adiw	r30, 0x3f	; 63
    214a:	20 80       	ld	r2, Z
    214c:	31 80       	ldd	r3, Z+1	; 0x01
    214e:	d7 01       	movw	r26, r14
    2150:	19 96       	adiw	r26, 0x09	; 9
    2152:	3c 92       	st	X, r3
    2154:	2e 92       	st	-X, r2
    2156:	18 97       	sbiw	r26, 0x08	; 8
    2158:	c1 01       	movw	r24, r2
    215a:	8f 70       	andi	r24, 0x0F	; 15
    215c:	99 27       	eor	r25, r25
    215e:	89 2b       	or	r24, r25
    2160:	09 f0       	breq	.+2      	; 0x2164 <__stack+0x65>
    2162:	5d c1       	rjmp	.+698    	; 0x241e <__stack+0x31f>
    2164:	32 96       	adiw	r30, 0x02	; 2
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	cb 01       	movw	r24, r22
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	a1 05       	cpc	r26, r1
    2174:	b1 05       	cpc	r27, r1
    2176:	29 f4       	brne	.+10     	; 0x2182 <__stack+0x83>
    2178:	3d 96       	adiw	r30, 0x0d	; 13
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	a2 81       	ldd	r26, Z+2	; 0x02
    2180:	b3 81       	ldd	r27, Z+3	; 0x03
    2182:	f7 01       	movw	r30, r14
    2184:	44 ad       	ldd	r20, Z+60	; 0x3c
    2186:	55 ad       	ldd	r21, Z+61	; 0x3d
    2188:	41 15       	cp	r20, r1
    218a:	51 05       	cpc	r21, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <__stack+0x91>
    218e:	47 c1       	rjmp	.+654    	; 0x241e <__stack+0x31f>
    2190:	2a 01       	movw	r4, r20
    2192:	61 2c       	mov	r6, r1
    2194:	71 2c       	mov	r7, r1
    2196:	4b aa       	std	Y+51, r4	; 0x33
    2198:	5c aa       	std	Y+52, r5	; 0x34
    219a:	6d aa       	std	Y+53, r6	; 0x35
    219c:	7e aa       	std	Y+54, r7	; 0x36
    219e:	a1 01       	movw	r20, r2
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	56 95       	lsr	r21
    21a4:	47 95       	ror	r20
    21a6:	6a 95       	dec	r22
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <__stack+0xa3>
    21aa:	53 01       	movw	r10, r6
    21ac:	42 01       	movw	r8, r4
    21ae:	84 0e       	add	r8, r20
    21b0:	95 1e       	adc	r9, r21
    21b2:	a1 1c       	adc	r10, r1
    21b4:	b1 1c       	adc	r11, r1
    21b6:	4f a4       	ldd	r4, Y+47	; 0x2f
    21b8:	58 a8       	ldd	r5, Y+48	; 0x30
    21ba:	69 a8       	ldd	r6, Y+49	; 0x31
    21bc:	7a a8       	ldd	r7, Y+50	; 0x32
    21be:	48 0c       	add	r4, r8
    21c0:	59 1c       	adc	r5, r9
    21c2:	6a 1c       	adc	r6, r10
    21c4:	7b 1c       	adc	r7, r11
    21c6:	4b a2       	std	Y+35, r4	; 0x23
    21c8:	5c a2       	std	Y+36, r5	; 0x24
    21ca:	6d a2       	std	Y+37, r6	; 0x25
    21cc:	7e a2       	std	Y+38, r7	; 0x26
    21ce:	84 15       	cp	r24, r4
    21d0:	95 05       	cpc	r25, r5
    21d2:	a6 05       	cpc	r26, r6
    21d4:	b7 05       	cpc	r27, r7
    21d6:	08 f4       	brcc	.+2      	; 0x21da <__stack+0xdb>
    21d8:	22 c1       	rjmp	.+580    	; 0x241e <__stack+0x31f>
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	64 19       	sub	r22, r4
    21e0:	75 09       	sbc	r23, r5
    21e2:	86 09       	sbc	r24, r6
    21e4:	97 09       	sbc	r25, r7
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    21f0:	21 15       	cp	r18, r1
    21f2:	31 05       	cpc	r19, r1
    21f4:	41 05       	cpc	r20, r1
    21f6:	51 05       	cpc	r21, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <__stack+0xfd>
    21fa:	11 c1       	rjmp	.+546    	; 0x241e <__stack+0x31f>
    21fc:	49 01       	movw	r8, r18
    21fe:	5a 01       	movw	r10, r20
    2200:	62 e0       	ldi	r22, 0x02	; 2
    2202:	86 0e       	add	r8, r22
    2204:	91 1c       	adc	r9, r1
    2206:	a1 1c       	adc	r10, r1
    2208:	b1 1c       	adc	r11, r1
    220a:	8a a5       	ldd	r24, Y+42	; 0x2a
    220c:	9b a5       	ldd	r25, Y+43	; 0x2b
    220e:	ac a5       	ldd	r26, Y+44	; 0x2c
    2210:	bd a5       	ldd	r27, Y+45	; 0x2d
    2212:	48 0e       	add	r4, r24
    2214:	59 1e       	adc	r5, r25
    2216:	6a 1e       	adc	r6, r26
    2218:	7b 1e       	adc	r7, r27
    221a:	4b a2       	std	Y+35, r4	; 0x23
    221c:	5c a2       	std	Y+36, r5	; 0x24
    221e:	6d a2       	std	Y+37, r6	; 0x25
    2220:	7e a2       	std	Y+38, r7	; 0x26
    2222:	8b a9       	ldd	r24, Y+51	; 0x33
    2224:	9c a9       	ldd	r25, Y+52	; 0x34
    2226:	ad a9       	ldd	r26, Y+53	; 0x35
    2228:	be a9       	ldd	r27, Y+54	; 0x36
    222a:	4a a4       	ldd	r4, Y+42	; 0x2a
    222c:	5b a4       	ldd	r5, Y+43	; 0x2b
    222e:	6c a4       	ldd	r6, Y+44	; 0x2c
    2230:	7d a4       	ldd	r7, Y+45	; 0x2d
    2232:	84 0d       	add	r24, r4
    2234:	95 1d       	adc	r25, r5
    2236:	a6 1d       	adc	r26, r6
    2238:	b7 1d       	adc	r27, r7
    223a:	26 3f       	cpi	r18, 0xF6	; 246
    223c:	6f e0       	ldi	r22, 0x0F	; 15
    223e:	36 07       	cpc	r19, r22
    2240:	41 05       	cpc	r20, r1
    2242:	51 05       	cpc	r21, r1
    2244:	70 f1       	brcs	.+92     	; 0x22a2 <__stack+0x1a3>
    2246:	26 3f       	cpi	r18, 0xF6	; 246
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	41 05       	cpc	r20, r1
    224c:	51 05       	cpc	r21, r1
    224e:	08 f4       	brcc	.+2      	; 0x2252 <__stack+0x153>
    2250:	a6 c3       	rjmp	.+1868   	; 0x299e <__stack+0x89f>
    2252:	f7 01       	movw	r30, r14
    2254:	86 8a       	std	Z+22, r8	; 0x16
    2256:	97 8a       	std	Z+23, r9	; 0x17
    2258:	a0 8e       	std	Z+24, r10	; 0x18
    225a:	b1 8e       	std	Z+25, r11	; 0x19
    225c:	4b a0       	ldd	r4, Y+35	; 0x23
    225e:	5c a0       	ldd	r5, Y+36	; 0x24
    2260:	6d a0       	ldd	r6, Y+37	; 0x25
    2262:	7e a0       	ldd	r7, Y+38	; 0x26
    2264:	46 a2       	std	Z+38, r4	; 0x26
    2266:	57 a2       	std	Z+39, r5	; 0x27
    2268:	60 a6       	std	Z+40, r6	; 0x28
    226a:	71 a6       	std	Z+41, r7	; 0x29
    226c:	86 8f       	std	Z+30, r24	; 0x1e
    226e:	97 8f       	std	Z+31, r25	; 0x1f
    2270:	a0 a3       	std	Z+32, r26	; 0x20
    2272:	b1 a3       	std	Z+33, r27	; 0x21
    2274:	23 28       	or	r2, r3
    2276:	09 f0       	breq	.+2      	; 0x227a <__stack+0x17b>
    2278:	d2 c0       	rjmp	.+420    	; 0x241e <__stack+0x31f>
    227a:	e6 5a       	subi	r30, 0xA6	; 166
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	a2 81       	ldd	r26, Z+2	; 0x02
    2284:	b3 81       	ldd	r27, Z+3	; 0x03
    2286:	f7 01       	movw	r30, r14
    2288:	82 a3       	std	Z+34, r24	; 0x22
    228a:	93 a3       	std	Z+35, r25	; 0x23
    228c:	a4 a3       	std	Z+36, r26	; 0x24
    228e:	b5 a3       	std	Z+37, r27	; 0x25
    2290:	42 e0       	ldi	r20, 0x02	; 2
    2292:	88 0c       	add	r8, r8
    2294:	99 1c       	adc	r9, r9
    2296:	aa 1c       	adc	r10, r10
    2298:	bb 1c       	adc	r11, r11
    229a:	4a 95       	dec	r20
    229c:	d1 f7       	brne	.-12     	; 0x2292 <__stack+0x193>
    229e:	13 e0       	ldi	r17, 0x03	; 3
    22a0:	29 c0       	rjmp	.+82     	; 0x22f4 <__stack+0x1f5>
    22a2:	11 e0       	ldi	r17, 0x01	; 1
    22a4:	f7 01       	movw	r30, r14
    22a6:	86 8a       	std	Z+22, r8	; 0x16
    22a8:	97 8a       	std	Z+23, r9	; 0x17
    22aa:	a0 8e       	std	Z+24, r10	; 0x18
    22ac:	b1 8e       	std	Z+25, r11	; 0x19
    22ae:	4b a0       	ldd	r4, Y+35	; 0x23
    22b0:	5c a0       	ldd	r5, Y+36	; 0x24
    22b2:	6d a0       	ldd	r6, Y+37	; 0x25
    22b4:	7e a0       	ldd	r7, Y+38	; 0x26
    22b6:	46 a2       	std	Z+38, r4	; 0x26
    22b8:	57 a2       	std	Z+39, r5	; 0x27
    22ba:	60 a6       	std	Z+40, r6	; 0x28
    22bc:	71 a6       	std	Z+41, r7	; 0x29
    22be:	86 8f       	std	Z+30, r24	; 0x1e
    22c0:	97 8f       	std	Z+31, r25	; 0x1f
    22c2:	a0 a3       	std	Z+32, r26	; 0x20
    22c4:	b1 a3       	std	Z+33, r27	; 0x21
    22c6:	23 28       	or	r2, r3
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__stack+0x1cd>
    22ca:	a9 c0       	rjmp	.+338    	; 0x241e <__stack+0x31f>
    22cc:	4f a4       	ldd	r4, Y+47	; 0x2f
    22ce:	58 a8       	ldd	r5, Y+48	; 0x30
    22d0:	69 a8       	ldd	r6, Y+49	; 0x31
    22d2:	7a a8       	ldd	r7, Y+50	; 0x32
    22d4:	84 0d       	add	r24, r4
    22d6:	95 1d       	adc	r25, r5
    22d8:	a6 1d       	adc	r26, r6
    22da:	b7 1d       	adc	r27, r7
    22dc:	f7 01       	movw	r30, r14
    22de:	82 a3       	std	Z+34, r24	; 0x22
    22e0:	93 a3       	std	Z+35, r25	; 0x23
    22e2:	a4 a3       	std	Z+36, r26	; 0x24
    22e4:	b5 a3       	std	Z+37, r27	; 0x25
    22e6:	12 30       	cpi	r17, 0x02	; 2
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0x1ed>
    22ea:	5b c3       	rjmp	.+1718   	; 0x29a2 <__stack+0x8a3>
    22ec:	88 0c       	add	r8, r8
    22ee:	99 1c       	adc	r9, r9
    22f0:	aa 1c       	adc	r10, r10
    22f2:	bb 1c       	adc	r11, r11
    22f4:	2f ef       	ldi	r18, 0xFF	; 255
    22f6:	82 0e       	add	r8, r18
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	92 1e       	adc	r9, r18
    22fc:	a1 1c       	adc	r10, r1
    22fe:	b1 1c       	adc	r11, r1
    2300:	09 e0       	ldi	r16, 0x09	; 9
    2302:	b6 94       	lsr	r11
    2304:	a7 94       	ror	r10
    2306:	97 94       	ror	r9
    2308:	87 94       	ror	r8
    230a:	0a 95       	dec	r16
    230c:	d1 f7       	brne	.-12     	; 0x2302 <__stack+0x203>
    230e:	4f a8       	ldd	r4, Y+55	; 0x37
    2310:	58 ac       	ldd	r5, Y+56	; 0x38
    2312:	69 ac       	ldd	r6, Y+57	; 0x39
    2314:	7a ac       	ldd	r7, Y+58	; 0x3a
    2316:	48 14       	cp	r4, r8
    2318:	59 04       	cpc	r5, r9
    231a:	6a 04       	cpc	r6, r10
    231c:	7b 04       	cpc	r7, r11
    231e:	08 f4       	brcc	.+2      	; 0x2322 <__stack+0x223>
    2320:	7e c0       	rjmp	.+252    	; 0x241e <__stack+0x31f>
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	9f ef       	ldi	r25, 0xFF	; 255
    2326:	dc 01       	movw	r26, r24
    2328:	f7 01       	movw	r30, r14
    232a:	86 87       	std	Z+14, r24	; 0x0e
    232c:	97 87       	std	Z+15, r25	; 0x0f
    232e:	a0 8b       	std	Z+16, r26	; 0x10
    2330:	b1 8b       	std	Z+17, r27	; 0x11
    2332:	12 86       	std	Z+10, r1	; 0x0a
    2334:	13 86       	std	Z+11, r1	; 0x0b
    2336:	14 86       	std	Z+12, r1	; 0x0c
    2338:	15 86       	std	Z+13, r1	; 0x0d
    233a:	13 30       	cpi	r17, 0x03	; 3
    233c:	09 f0       	breq	.+2      	; 0x2340 <__stack+0x241>
    233e:	4d c0       	rjmp	.+154    	; 0x23da <__stack+0x2db>
    2340:	15 82       	std	Z+5, r1	; 0x05
    2342:	e2 5a       	subi	r30, 0xA2	; 162
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	2a a5       	ldd	r18, Y+42	; 0x2a
    234c:	3b a5       	ldd	r19, Y+43	; 0x2b
    234e:	4c a5       	ldd	r20, Y+44	; 0x2c
    2350:	5d a5       	ldd	r21, Y+45	; 0x2d
    2352:	28 0f       	add	r18, r24
    2354:	39 1f       	adc	r19, r25
    2356:	41 1d       	adc	r20, r1
    2358:	51 1d       	adc	r21, r1
    235a:	f7 01       	movw	r30, r14
    235c:	22 8b       	std	Z+18, r18	; 0x12
    235e:	33 8b       	std	Z+19, r19	; 0x13
    2360:	44 8b       	std	Z+20, r20	; 0x14
    2362:	55 8b       	std	Z+21, r21	; 0x15
    2364:	01 e0       	ldi	r16, 0x01	; 1
    2366:	b7 01       	movw	r22, r14
    2368:	62 5d       	subi	r22, 0xD2	; 210
    236a:	7f 4f       	sbci	r23, 0xFF	; 255
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	62 d8       	rcall	.-3900   	; 0x1434 <disk_read>
    2370:	81 11       	cpse	r24, r1
    2372:	33 c0       	rjmp	.+102    	; 0x23da <__stack+0x2db>
    2374:	f7 01       	movw	r30, r14
    2376:	e4 5d       	subi	r30, 0xD4	; 212
    2378:	fd 4f       	sbci	r31, 0xFD	; 253
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	85 35       	cpi	r24, 0x55	; 85
    2380:	9a 4a       	sbci	r25, 0xAA	; 170
    2382:	59 f5       	brne	.+86     	; 0x23da <__stack+0x2db>
    2384:	f7 01       	movw	r30, r14
    2386:	86 a5       	ldd	r24, Z+46	; 0x2e
    2388:	97 a5       	ldd	r25, Z+47	; 0x2f
    238a:	a0 a9       	ldd	r26, Z+48	; 0x30
    238c:	b1 a9       	ldd	r27, Z+49	; 0x31
    238e:	82 35       	cpi	r24, 0x52	; 82
    2390:	92 45       	sbci	r25, 0x52	; 82
    2392:	a1 46       	sbci	r26, 0x61	; 97
    2394:	b1 44       	sbci	r27, 0x41	; 65
    2396:	09 f5       	brne	.+66     	; 0x23da <__stack+0x2db>
    2398:	f7 01       	movw	r30, r14
    239a:	ee 5e       	subi	r30, 0xEE	; 238
    239c:	fd 4f       	sbci	r31, 0xFD	; 253
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	a2 81       	ldd	r26, Z+2	; 0x02
    23a4:	b3 81       	ldd	r27, Z+3	; 0x03
    23a6:	82 37       	cpi	r24, 0x72	; 114
    23a8:	92 47       	sbci	r25, 0x72	; 114
    23aa:	a1 44       	sbci	r26, 0x41	; 65
    23ac:	b1 46       	sbci	r27, 0x61	; 97
    23ae:	a9 f4       	brne	.+42     	; 0x23da <__stack+0x2db>
    23b0:	38 96       	adiw	r30, 0x08	; 8
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	a2 81       	ldd	r26, Z+2	; 0x02
    23b8:	b3 81       	ldd	r27, Z+3	; 0x03
    23ba:	f7 01       	movw	r30, r14
    23bc:	82 87       	std	Z+10, r24	; 0x0a
    23be:	93 87       	std	Z+11, r25	; 0x0b
    23c0:	a4 87       	std	Z+12, r26	; 0x0c
    23c2:	b5 87       	std	Z+13, r27	; 0x0d
    23c4:	ea 5e       	subi	r30, 0xEA	; 234
    23c6:	fd 4f       	sbci	r31, 0xFD	; 253
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	a2 81       	ldd	r26, Z+2	; 0x02
    23ce:	b3 81       	ldd	r27, Z+3	; 0x03
    23d0:	f7 01       	movw	r30, r14
    23d2:	86 87       	std	Z+14, r24	; 0x0e
    23d4:	97 87       	std	Z+15, r25	; 0x0f
    23d6:	a0 8b       	std	Z+16, r26	; 0x10
    23d8:	b1 8b       	std	Z+17, r27	; 0x11
    23da:	d7 01       	movw	r26, r14
    23dc:	1c 93       	st	X, r17
    23de:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Fsid>
    23e2:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <Fsid+0x1>
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <Fsid+0x1>
    23ec:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Fsid>
    23f0:	17 96       	adiw	r26, 0x07	; 7
    23f2:	9c 93       	st	X, r25
    23f4:	8e 93       	st	-X, r24
    23f6:	16 97       	sbiw	r26, 0x06	; 6
    23f8:	f7 01       	movw	r30, r14
    23fa:	12 a6       	std	Z+42, r1	; 0x2a
    23fc:	13 a6       	std	Z+43, r1	; 0x2b
    23fe:	14 a6       	std	Z+44, r1	; 0x2c
    2400:	15 a6       	std	Z+45, r1	; 0x2d
    2402:	14 82       	std	Z+4, r1	; 0x04
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__stack+0x30f>
    2406:	1b e0       	ldi	r17, 0x0B	; 11
    2408:	0b c0       	rjmp	.+22     	; 0x2420 <__stack+0x321>
    240a:	1c e0       	ldi	r17, 0x0C	; 12
    240c:	09 c0       	rjmp	.+18     	; 0x2420 <__stack+0x321>
    240e:	10 e0       	ldi	r17, 0x00	; 0
    2410:	07 c0       	rjmp	.+14     	; 0x2420 <__stack+0x321>
    2412:	13 e0       	ldi	r17, 0x03	; 3
    2414:	05 c0       	rjmp	.+10     	; 0x2420 <__stack+0x321>
    2416:	1a e0       	ldi	r17, 0x0A	; 10
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <__stack+0x321>
    241a:	11 e0       	ldi	r17, 0x01	; 1
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <__stack+0x321>
    241e:	1d e0       	ldi	r17, 0x0D	; 13
    2420:	ce 01       	movw	r24, r28
    2422:	47 96       	adiw	r24, 0x17	; 23
    2424:	9e 8b       	std	Y+22, r25	; 0x16
    2426:	8d 8b       	std	Y+21, r24	; 0x15
    2428:	11 11       	cpse	r17, r1
    242a:	1c c1       	rjmp	.+568    	; 0x2664 <__stack+0x565>
    242c:	d6 01       	movw	r26, r12
    242e:	8c 91       	ld	r24, X
    2430:	8f 32       	cpi	r24, 0x2F	; 47
    2432:	11 f0       	breq	.+4      	; 0x2438 <__stack+0x339>
    2434:	8c 35       	cpi	r24, 0x5C	; 92
    2436:	19 f4       	brne	.+6      	; 0x243e <__stack+0x33f>
    2438:	bf ef       	ldi	r27, 0xFF	; 255
    243a:	cb 1a       	sub	r12, r27
    243c:	db 0a       	sbc	r13, r27
    243e:	1f 82       	std	Y+7, r1	; 0x07
    2440:	18 86       	std	Y+8, r1	; 0x08
    2442:	19 86       	std	Y+9, r1	; 0x09
    2444:	1a 86       	std	Y+10, r1	; 0x0a
    2446:	f6 01       	movw	r30, r12
    2448:	80 81       	ld	r24, Z
    244a:	80 32       	cpi	r24, 0x20	; 32
    244c:	28 f0       	brcs	.+10     	; 0x2458 <__stack+0x359>
    244e:	b0 e2       	ldi	r27, 0x20	; 32
    2450:	eb 2e       	mov	r14, r27
    2452:	15 e0       	ldi	r17, 0x05	; 5
    2454:	f1 2e       	mov	r15, r17
    2456:	5d c0       	rjmp	.+186    	; 0x2512 <__stack+0x413>
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	37 da       	rcall	.-2962   	; 0x18cc <dir_sdi.constprop.1>
    245e:	18 2f       	mov	r17, r24
    2460:	1c 8a       	std	Y+20, r1	; 0x14
    2462:	1b 8a       	std	Y+19, r1	; 0x13
    2464:	ff c0       	rjmp	.+510    	; 0x2664 <__stack+0x565>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	48 e0       	ldi	r20, 0x08	; 8
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	9b 01       	movw	r18, r22
    2476:	2f 5f       	subi	r18, 0xFF	; 255
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	64 01       	movw	r12, r8
    247c:	c6 0e       	add	r12, r22
    247e:	d7 1e       	adc	r13, r23
    2480:	d6 01       	movw	r26, r12
    2482:	1c 91       	ld	r17, X
    2484:	11 32       	cpi	r17, 0x21	; 33
    2486:	08 f0       	brcs	.+2      	; 0x248a <__stack+0x38b>
    2488:	5c c0       	rjmp	.+184    	; 0x2542 <__stack+0x443>
    248a:	64 01       	movw	r12, r8
    248c:	c2 0e       	add	r12, r18
    248e:	d3 1e       	adc	r13, r19
    2490:	11 32       	cpi	r17, 0x21	; 33
    2492:	08 f4       	brcc	.+2      	; 0x2496 <__stack+0x397>
    2494:	b5 c0       	rjmp	.+362    	; 0x2600 <__stack+0x501>
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	89 2b       	or	r24, r25
    249a:	09 f4       	brne	.+2      	; 0x249e <__stack+0x39f>
    249c:	e0 c0       	rjmp	.+448    	; 0x265e <__stack+0x55f>
    249e:	80 81       	ld	r24, Z
    24a0:	85 3e       	cpi	r24, 0xE5	; 229
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__stack+0x3a7>
    24a4:	f0 82       	st	Z, r15
    24a6:	48 30       	cpi	r20, 0x08	; 8
    24a8:	51 05       	cpc	r21, r1
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__stack+0x3b1>
    24ac:	00 0f       	add	r16, r16
    24ae:	00 0f       	add	r16, r16
    24b0:	80 2f       	mov	r24, r16
    24b2:	83 70       	andi	r24, 0x03	; 3
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	09 f4       	brne	.+2      	; 0x24ba <__stack+0x3bb>
    24b8:	20 61       	ori	r18, 0x10	; 16
    24ba:	80 2f       	mov	r24, r16
    24bc:	8c 70       	andi	r24, 0x0C	; 12
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <__stack+0x3c5>
    24c2:	28 60       	ori	r18, 0x08	; 8
    24c4:	23 87       	std	Z+11, r18	; 0x0b
    24c6:	ce 01       	movw	r24, r28
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	00 da       	rcall	.-3072   	; 0x18cc <dir_sdi.constprop.1>
    24cc:	18 2f       	mov	r17, r24
    24ce:	88 23       	and	r24, r24
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <__stack+0x3d5>
    24d2:	98 c0       	rjmp	.+304    	; 0x2604 <__stack+0x505>
    24d4:	ed 89       	ldd	r30, Y+21	; 0x15
    24d6:	fe 89       	ldd	r31, Y+22	; 0x16
    24d8:	83 85       	ldd	r24, Z+11	; 0x0b
    24da:	11 11       	cpse	r17, r1
    24dc:	bb c0       	rjmp	.+374    	; 0x2654 <__stack+0x555>
    24de:	82 fd       	sbrc	r24, 2
    24e0:	c1 c0       	rjmp	.+386    	; 0x2664 <__stack+0x565>
    24e2:	eb 89       	ldd	r30, Y+19	; 0x13
    24e4:	fc 89       	ldd	r31, Y+20	; 0x14
    24e6:	83 85       	ldd	r24, Z+11	; 0x0b
    24e8:	84 ff       	sbrs	r24, 4
    24ea:	bb c0       	rjmp	.+374    	; 0x2662 <__stack+0x563>
    24ec:	84 89       	ldd	r24, Z+20	; 0x14
    24ee:	95 89       	ldd	r25, Z+21	; 0x15
    24f0:	a0 e0       	ldi	r26, 0x00	; 0
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	dc 01       	movw	r26, r24
    24f6:	99 27       	eor	r25, r25
    24f8:	88 27       	eor	r24, r24
    24fa:	42 8d       	ldd	r20, Z+26	; 0x1a
    24fc:	53 8d       	ldd	r21, Z+27	; 0x1b
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	84 2b       	or	r24, r20
    2504:	95 2b       	or	r25, r21
    2506:	a6 2b       	or	r26, r22
    2508:	b7 2b       	or	r27, r23
    250a:	8f 83       	std	Y+7, r24	; 0x07
    250c:	98 87       	std	Y+8, r25	; 0x08
    250e:	a9 87       	std	Y+9, r26	; 0x09
    2510:	ba 87       	std	Y+10, r27	; 0x0a
    2512:	96 01       	movw	r18, r12
    2514:	49 01       	movw	r8, r18
    2516:	d9 01       	movw	r26, r18
    2518:	8c 91       	ld	r24, X
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	8f 32       	cpi	r24, 0x2F	; 47
    2520:	c9 f3       	breq	.-14     	; 0x2514 <__stack+0x415>
    2522:	8c 35       	cpi	r24, 0x5C	; 92
    2524:	b9 f3       	breq	.-18     	; 0x2514 <__stack+0x415>
    2526:	ed 89       	ldd	r30, Y+21	; 0x15
    2528:	fe 89       	ldd	r31, Y+22	; 0x16
    252a:	cf 01       	movw	r24, r30
    252c:	9f 01       	movw	r18, r30
    252e:	25 5f       	subi	r18, 0xF5	; 245
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	82 17       	cp	r24, r18
    2534:	93 07       	cpc	r25, r19
    2536:	09 f4       	brne	.+2      	; 0x253a <__stack+0x43b>
    2538:	96 cf       	rjmp	.-212    	; 0x2466 <__stack+0x367>
    253a:	dc 01       	movw	r26, r24
    253c:	ed 92       	st	X+, r14
    253e:	cd 01       	movw	r24, r26
    2540:	f8 cf       	rjmp	.-16     	; 0x2532 <__stack+0x433>
    2542:	1f 32       	cpi	r17, 0x2F	; 47
    2544:	09 f4       	brne	.+2      	; 0x2548 <__stack+0x449>
    2546:	a1 cf       	rjmp	.-190    	; 0x248a <__stack+0x38b>
    2548:	1c 35       	cpi	r17, 0x5C	; 92
    254a:	09 f4       	brne	.+2      	; 0x254e <__stack+0x44f>
    254c:	9e cf       	rjmp	.-196    	; 0x248a <__stack+0x38b>
    254e:	1e 32       	cpi	r17, 0x2E	; 46
    2550:	19 f0       	breq	.+6      	; 0x2558 <__stack+0x459>
    2552:	84 17       	cp	r24, r20
    2554:	95 07       	cpc	r25, r21
    2556:	78 f0       	brcs	.+30     	; 0x2576 <__stack+0x477>
    2558:	48 30       	cpi	r20, 0x08	; 8
    255a:	51 05       	cpc	r21, r1
    255c:	09 f0       	breq	.+2      	; 0x2560 <__stack+0x461>
    255e:	7f c0       	rjmp	.+254    	; 0x265e <__stack+0x55f>
    2560:	1e 32       	cpi	r17, 0x2E	; 46
    2562:	09 f0       	breq	.+2      	; 0x2566 <__stack+0x467>
    2564:	7c c0       	rjmp	.+248    	; 0x265e <__stack+0x55f>
    2566:	00 0f       	add	r16, r16
    2568:	00 0f       	add	r16, r16
    256a:	88 e0       	ldi	r24, 0x08	; 8
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	4b e0       	ldi	r20, 0x0B	; 11
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	b9 01       	movw	r22, r18
    2574:	7f cf       	rjmp	.-258    	; 0x2474 <__stack+0x375>
    2576:	17 fd       	sbrc	r17, 7
    2578:	03 60       	ori	r16, 0x03	; 3
    257a:	af e7       	ldi	r26, 0x7F	; 127
    257c:	da 2e       	mov	r13, r26
    257e:	d1 0e       	add	r13, r17
    2580:	be e1       	ldi	r27, 0x1E	; 30
    2582:	bd 15       	cp	r27, r13
    2584:	38 f4       	brcc	.+14     	; 0x2594 <__stack+0x495>
    2586:	a0 e2       	ldi	r26, 0x20	; 32
    2588:	da 2e       	mov	r13, r26
    258a:	d1 0e       	add	r13, r17
    258c:	bc e1       	ldi	r27, 0x1C	; 28
    258e:	4b 2e       	mov	r4, r27
    2590:	4d 14       	cp	r4, r13
    2592:	28 f1       	brcs	.+74     	; 0x25de <__stack+0x4df>
    2594:	6e 5f       	subi	r22, 0xFE	; 254
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	28 0d       	add	r18, r8
    259a:	39 1d       	adc	r19, r9
    259c:	d9 01       	movw	r26, r18
    259e:	dc 90       	ld	r13, X
    25a0:	20 ec       	ldi	r18, 0xC0	; 192
    25a2:	2d 0d       	add	r18, r13
    25a4:	2f 33       	cpi	r18, 0x3F	; 63
    25a6:	28 f0       	brcs	.+10     	; 0x25b2 <__stack+0x4b3>
    25a8:	20 e8       	ldi	r18, 0x80	; 128
    25aa:	2d 0d       	add	r18, r13
    25ac:	2d 37       	cpi	r18, 0x7D	; 125
    25ae:	08 f0       	brcs	.+2      	; 0x25b2 <__stack+0x4b3>
    25b0:	56 c0       	rjmp	.+172    	; 0x265e <__stack+0x55f>
    25b2:	9a 01       	movw	r18, r20
    25b4:	21 50       	subi	r18, 0x01	; 1
    25b6:	31 09       	sbc	r19, r1
    25b8:	82 17       	cp	r24, r18
    25ba:	93 07       	cpc	r25, r19
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <__stack+0x4c1>
    25be:	4f c0       	rjmp	.+158    	; 0x265e <__stack+0x55f>
    25c0:	9f 01       	movw	r18, r30
    25c2:	28 0f       	add	r18, r24
    25c4:	39 1f       	adc	r19, r25
    25c6:	d9 01       	movw	r26, r18
    25c8:	1c 93       	st	X, r17
    25ca:	9c 01       	movw	r18, r24
    25cc:	2f 5f       	subi	r18, 0xFF	; 255
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	2e 0f       	add	r18, r30
    25d2:	3f 1f       	adc	r19, r31
    25d4:	02 96       	adiw	r24, 0x02	; 2
    25d6:	d9 01       	movw	r26, r18
    25d8:	dc 92       	st	X, r13
    25da:	9b 01       	movw	r18, r22
    25dc:	ca cf       	rjmp	.-108    	; 0x2572 <__stack+0x473>
    25de:	a1 2e       	mov	r10, r17
    25e0:	b1 2c       	mov	r11, r1
    25e2:	6a eb       	ldi	r22, 0xBA	; 186
    25e4:	c6 2e       	mov	r12, r22
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	d6 2e       	mov	r13, r22
    25ea:	d6 01       	movw	r26, r12
    25ec:	6d 91       	ld	r22, X+
    25ee:	6d 01       	movw	r12, r26
    25f0:	66 23       	and	r22, r22
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <__stack+0x4f7>
    25f4:	88 c1       	rjmp	.+784    	; 0x2906 <__stack+0x807>
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	a6 16       	cp	r10, r22
    25fa:	b7 06       	cpc	r11, r23
    25fc:	b1 f7       	brne	.-20     	; 0x25ea <__stack+0x4eb>
    25fe:	2f c0       	rjmp	.+94     	; 0x265e <__stack+0x55f>
    2600:	24 e0       	ldi	r18, 0x04	; 4
    2602:	4a cf       	rjmp	.-364    	; 0x2498 <__stack+0x399>
    2604:	4f 85       	ldd	r20, Y+15	; 0x0f
    2606:	58 89       	ldd	r21, Y+16	; 0x10
    2608:	69 89       	ldd	r22, Y+17	; 0x11
    260a:	7a 89       	ldd	r23, Y+18	; 0x12
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2614:	18 2f       	mov	r17, r24
    2616:	81 11       	cpse	r24, r1
    2618:	5d cf       	rjmp	.-326    	; 0x24d4 <__stack+0x3d5>
    261a:	eb 89       	ldd	r30, Y+19	; 0x13
    261c:	fc 89       	ldd	r31, Y+20	; 0x14
    261e:	80 81       	ld	r24, Z
    2620:	88 23       	and	r24, r24
    2622:	b1 f0       	breq	.+44     	; 0x2650 <__stack+0x551>
    2624:	83 85       	ldd	r24, Z+11	; 0x0b
    2626:	83 fd       	sbrc	r24, 3
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <__stack+0x545>
    262a:	ad 89       	ldd	r26, Y+21	; 0x15
    262c:	be 89       	ldd	r27, Y+22	; 0x16
    262e:	9f 01       	movw	r18, r30
    2630:	25 5f       	subi	r18, 0xF5	; 245
    2632:	3f 4f       	sbci	r19, 0xFF	; 255
    2634:	2e 17       	cp	r18, r30
    2636:	3f 07       	cpc	r19, r31
    2638:	09 f4       	brne	.+2      	; 0x263c <__stack+0x53d>
    263a:	4c cf       	rjmp	.-360    	; 0x24d4 <__stack+0x3d5>
    263c:	91 91       	ld	r25, Z+
    263e:	8d 91       	ld	r24, X+
    2640:	98 17       	cp	r25, r24
    2642:	c1 f3       	breq	.-16     	; 0x2634 <__stack+0x535>
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	9d db       	rcall	.-2246   	; 0x1d88 <dir_next>
    264e:	3e cf       	rjmp	.-388    	; 0x24cc <__stack+0x3cd>
    2650:	14 e0       	ldi	r17, 0x04	; 4
    2652:	40 cf       	rjmp	.-384    	; 0x24d4 <__stack+0x3d5>
    2654:	14 30       	cpi	r17, 0x04	; 4
    2656:	31 f4       	brne	.+12     	; 0x2664 <__stack+0x565>
    2658:	82 ff       	sbrs	r24, 2
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <__stack+0x563>
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <__stack+0x565>
    265e:	16 e0       	ldi	r17, 0x06	; 6
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <__stack+0x565>
    2662:	15 e0       	ldi	r17, 0x05	; 5
    2664:	2b 88       	ldd	r2, Y+19	; 0x13
    2666:	3c 88       	ldd	r3, Y+20	; 0x14
    2668:	11 11       	cpse	r17, r1
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <__stack+0x575>
    266c:	21 14       	cp	r2, r1
    266e:	31 04       	cpc	r3, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <__stack+0x575>
    2672:	16 e0       	ldi	r17, 0x06	; 6
    2674:	8e a5       	ldd	r24, Y+46	; 0x2e
    2676:	8c 71       	andi	r24, 0x1C	; 28
    2678:	09 f4       	brne	.+2      	; 0x267c <__stack+0x57d>
    267a:	db c0       	rjmp	.+438    	; 0x2832 <__stack+0x733>
    267c:	11 23       	and	r17, r17
    267e:	a1 f1       	breq	.+104    	; 0x26e8 <__stack+0x5e9>
    2680:	14 30       	cpi	r17, 0x04	; 4
    2682:	51 f5       	brne	.+84     	; 0x26d8 <__stack+0x5d9>
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	21 d9       	rcall	.-3518   	; 0x18cc <dir_sdi.constprop.1>
    268a:	18 2f       	mov	r17, r24
    268c:	81 11       	cpse	r24, r1
    268e:	a0 c1       	rjmp	.+832    	; 0x29d0 <__stack+0x8d1>
    2690:	4f 85       	ldd	r20, Y+15	; 0x0f
    2692:	58 89       	ldd	r21, Y+16	; 0x10
    2694:	69 89       	ldd	r22, Y+17	; 0x11
    2696:	7a 89       	ldd	r23, Y+18	; 0x12
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    26a0:	18 2f       	mov	r17, r24
    26a2:	81 11       	cpse	r24, r1
    26a4:	95 c1       	rjmp	.+810    	; 0x29d0 <__stack+0x8d1>
    26a6:	eb 89       	ldd	r30, Y+19	; 0x13
    26a8:	fc 89       	ldd	r31, Y+20	; 0x14
    26aa:	80 81       	ld	r24, Z
    26ac:	85 3e       	cpi	r24, 0xE5	; 229
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <__stack+0x5b3>
    26b0:	3d c1       	rjmp	.+634    	; 0x292c <__stack+0x82d>
    26b2:	88 23       	and	r24, r24
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <__stack+0x5b9>
    26b6:	3a c1       	rjmp	.+628    	; 0x292c <__stack+0x82d>
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	ce 01       	movw	r24, r28
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	63 db       	rcall	.-2362   	; 0x1d88 <dir_next>
    26c2:	e3 cf       	rjmp	.-58     	; 0x268a <__stack+0x58b>
    26c4:	6d 89       	ldd	r22, Y+21	; 0x15
    26c6:	7e 89       	ldd	r23, Y+22	; 0x16
    26c8:	4b e0       	ldi	r20, 0x0B	; 11
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	0e 94 93 0a 	call	0x1526	; 0x1526 <mem_cpy>
    26d0:	e9 81       	ldd	r30, Y+1	; 0x01
    26d2:	fa 81       	ldd	r31, Y+2	; 0x02
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	84 83       	std	Z+4, r24	; 0x04
    26d8:	b9 a5       	ldd	r27, Y+41	; 0x29
    26da:	b8 60       	ori	r27, 0x08	; 8
    26dc:	b9 a7       	std	Y+41, r27	; 0x29
    26de:	11 11       	cpse	r17, r1
    26e0:	77 c1       	rjmp	.+750    	; 0x29d0 <__stack+0x8d1>
    26e2:	2b 88       	ldd	r2, Y+19	; 0x13
    26e4:	3c 88       	ldd	r3, Y+20	; 0x14
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <__stack+0x5f9>
    26e8:	f1 01       	movw	r30, r2
    26ea:	83 85       	ldd	r24, Z+11	; 0x0b
    26ec:	81 71       	andi	r24, 0x11	; 17
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <__stack+0x5f3>
    26f0:	54 c1       	rjmp	.+680    	; 0x299a <__stack+0x89b>
    26f2:	4e a4       	ldd	r4, Y+46	; 0x2e
    26f4:	42 fc       	sbrc	r4, 2
    26f6:	31 c1       	rjmp	.+610    	; 0x295a <__stack+0x85b>
    26f8:	59 a4       	ldd	r5, Y+41	; 0x29
    26fa:	53 fe       	sbrs	r5, 3
    26fc:	ac c0       	rjmp	.+344    	; 0x2856 <__stack+0x757>
    26fe:	0e 94 36 0a 	call	0x146c	; 0x146c <get_fattime>
    2702:	d1 01       	movw	r26, r2
    2704:	1e 96       	adiw	r26, 0x0e	; 14
    2706:	6d 93       	st	X+, r22
    2708:	7d 93       	st	X+, r23
    270a:	8d 93       	st	X+, r24
    270c:	9c 93       	st	X, r25
    270e:	51 97       	sbiw	r26, 0x11	; 17
    2710:	1b 96       	adiw	r26, 0x0b	; 11
    2712:	1c 92       	st	X, r1
    2714:	f1 01       	movw	r30, r2
    2716:	14 8e       	std	Z+28, r1	; 0x1c
    2718:	15 8e       	std	Z+29, r1	; 0x1d
    271a:	16 8e       	std	Z+30, r1	; 0x1e
    271c:	17 8e       	std	Z+31, r1	; 0x1f
    271e:	84 89       	ldd	r24, Z+20	; 0x14
    2720:	95 89       	ldd	r25, Z+21	; 0x15
    2722:	a0 e0       	ldi	r26, 0x00	; 0
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	dc 01       	movw	r26, r24
    2728:	99 27       	eor	r25, r25
    272a:	88 27       	eor	r24, r24
    272c:	42 8d       	ldd	r20, Z+26	; 0x1a
    272e:	53 8d       	ldd	r21, Z+27	; 0x1b
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	2c 01       	movw	r4, r24
    2736:	3d 01       	movw	r6, r26
    2738:	44 2a       	or	r4, r20
    273a:	55 2a       	or	r5, r21
    273c:	66 2a       	or	r6, r22
    273e:	77 2a       	or	r7, r23
    2740:	13 8e       	std	Z+27, r1	; 0x1b
    2742:	12 8e       	std	Z+26, r1	; 0x1a
    2744:	15 8a       	std	Z+21, r1	; 0x15
    2746:	14 8a       	std	Z+20, r1	; 0x14
    2748:	89 80       	ldd	r8, Y+1	; 0x01
    274a:	9a 80       	ldd	r9, Y+2	; 0x02
    274c:	9c a2       	std	Y+36, r9	; 0x24
    274e:	8b a2       	std	Y+35, r8	; 0x23
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	d4 01       	movw	r26, r8
    2754:	14 96       	adiw	r26, 0x04	; 4
    2756:	8c 93       	st	X, r24
    2758:	41 14       	cp	r4, r1
    275a:	51 04       	cpc	r5, r1
    275c:	61 04       	cpc	r6, r1
    275e:	71 04       	cpc	r7, r1
    2760:	09 f4       	brne	.+2      	; 0x2764 <__stack+0x665>
    2762:	76 c0       	rjmp	.+236    	; 0x2850 <__stack+0x751>
    2764:	b1 e0       	ldi	r27, 0x01	; 1
    2766:	4b 16       	cp	r4, r27
    2768:	51 04       	cpc	r5, r1
    276a:	61 04       	cpc	r6, r1
    276c:	71 04       	cpc	r7, r1
    276e:	09 f4       	brne	.+2      	; 0x2772 <__stack+0x673>
    2770:	0e c1       	rjmp	.+540    	; 0x298e <__stack+0x88f>
    2772:	f4 01       	movw	r30, r8
    2774:	86 89       	ldd	r24, Z+22	; 0x16
    2776:	97 89       	ldd	r25, Z+23	; 0x17
    2778:	a0 8d       	ldd	r26, Z+24	; 0x18
    277a:	b1 8d       	ldd	r27, Z+25	; 0x19
    277c:	48 16       	cp	r4, r24
    277e:	59 06       	cpc	r5, r25
    2780:	6a 06       	cpc	r6, r26
    2782:	7b 06       	cpc	r7, r27
    2784:	08 f0       	brcs	.+2      	; 0x2788 <__stack+0x689>
    2786:	03 c1       	rjmp	.+518    	; 0x298e <__stack+0x88f>
    2788:	82 a4       	ldd	r8, Z+42	; 0x2a
    278a:	93 a4       	ldd	r9, Z+43	; 0x2b
    278c:	a4 a4       	ldd	r10, Z+44	; 0x2c
    278e:	b5 a4       	ldd	r11, Z+45	; 0x2d
    2790:	8a a6       	std	Y+42, r8	; 0x2a
    2792:	9b a6       	std	Y+43, r9	; 0x2b
    2794:	ac a6       	std	Y+44, r10	; 0x2c
    2796:	bd a6       	std	Y+45, r11	; 0x2d
    2798:	73 01       	movw	r14, r6
    279a:	62 01       	movw	r12, r4
    279c:	eb a1       	ldd	r30, Y+35	; 0x23
    279e:	fc a1       	ldd	r31, Y+36	; 0x24
    27a0:	86 89       	ldd	r24, Z+22	; 0x16
    27a2:	97 89       	ldd	r25, Z+23	; 0x17
    27a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    27a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    27a8:	c8 16       	cp	r12, r24
    27aa:	d9 06       	cpc	r13, r25
    27ac:	ea 06       	cpc	r14, r26
    27ae:	fb 06       	cpc	r15, r27
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <__stack+0x6b5>
    27b2:	d5 c0       	rjmp	.+426    	; 0x295e <__stack+0x85f>
    27b4:	b7 01       	movw	r22, r14
    27b6:	a6 01       	movw	r20, r12
    27b8:	8b a1       	ldd	r24, Y+35	; 0x23
    27ba:	9c a1       	ldd	r25, Y+36	; 0x24
    27bc:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_fat>
    27c0:	4b 01       	movw	r8, r22
    27c2:	5c 01       	movw	r10, r24
    27c4:	61 15       	cp	r22, r1
    27c6:	71 05       	cpc	r23, r1
    27c8:	81 05       	cpc	r24, r1
    27ca:	91 05       	cpc	r25, r1
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <__stack+0x6d1>
    27ce:	c7 c0       	rjmp	.+398    	; 0x295e <__stack+0x85f>
    27d0:	61 30       	cpi	r22, 0x01	; 1
    27d2:	71 05       	cpc	r23, r1
    27d4:	81 05       	cpc	r24, r1
    27d6:	91 05       	cpc	r25, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <__stack+0x6dd>
    27da:	d9 c0       	rjmp	.+434    	; 0x298e <__stack+0x88f>
    27dc:	6f 3f       	cpi	r22, 0xFF	; 255
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	8f 4f       	sbci	r24, 0xFF	; 255
    27e2:	9f 4f       	sbci	r25, 0xFF	; 255
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <__stack+0x6e9>
    27e6:	d5 c0       	rjmp	.+426    	; 0x2992 <__stack+0x893>
    27e8:	00 e0       	ldi	r16, 0x00	; 0
    27ea:	10 e0       	ldi	r17, 0x00	; 0
    27ec:	98 01       	movw	r18, r16
    27ee:	b7 01       	movw	r22, r14
    27f0:	a6 01       	movw	r20, r12
    27f2:	8b a1       	ldd	r24, Y+35	; 0x23
    27f4:	9c a1       	ldd	r25, Y+36	; 0x24
    27f6:	e2 d8       	rcall	.-3644   	; 0x19bc <put_fat>
    27f8:	18 2f       	mov	r17, r24
    27fa:	81 11       	cpse	r24, r1
    27fc:	e9 c0       	rjmp	.+466    	; 0x29d0 <__stack+0x8d1>
    27fe:	eb a1       	ldd	r30, Y+35	; 0x23
    2800:	fc a1       	ldd	r31, Y+36	; 0x24
    2802:	86 85       	ldd	r24, Z+14	; 0x0e
    2804:	97 85       	ldd	r25, Z+15	; 0x0f
    2806:	a0 89       	ldd	r26, Z+16	; 0x10
    2808:	b1 89       	ldd	r27, Z+17	; 0x11
    280a:	8f 3f       	cpi	r24, 0xFF	; 255
    280c:	ff ef       	ldi	r31, 0xFF	; 255
    280e:	9f 07       	cpc	r25, r31
    2810:	af 07       	cpc	r26, r31
    2812:	bf 07       	cpc	r27, r31
    2814:	59 f0       	breq	.+22     	; 0x282c <__stack+0x72d>
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	a1 1d       	adc	r26, r1
    281a:	b1 1d       	adc	r27, r1
    281c:	eb a1       	ldd	r30, Y+35	; 0x23
    281e:	fc a1       	ldd	r31, Y+36	; 0x24
    2820:	86 87       	std	Z+14, r24	; 0x0e
    2822:	97 87       	std	Z+15, r25	; 0x0f
    2824:	a0 8b       	std	Z+16, r26	; 0x10
    2826:	b1 8b       	std	Z+17, r27	; 0x11
    2828:	21 e0       	ldi	r18, 0x01	; 1
    282a:	25 83       	std	Z+5, r18	; 0x05
    282c:	75 01       	movw	r14, r10
    282e:	64 01       	movw	r12, r8
    2830:	b5 cf       	rjmp	.-150    	; 0x279c <__stack+0x69d>
    2832:	11 11       	cpse	r17, r1
    2834:	cd c0       	rjmp	.+410    	; 0x29d0 <__stack+0x8d1>
    2836:	d1 01       	movw	r26, r2
    2838:	1b 96       	adiw	r26, 0x0b	; 11
    283a:	8c 91       	ld	r24, X
    283c:	84 fd       	sbrc	r24, 4
    283e:	ab c0       	rjmp	.+342    	; 0x2996 <__stack+0x897>
    2840:	4e a4       	ldd	r4, Y+46	; 0x2e
    2842:	41 fe       	sbrs	r4, 1
    2844:	02 c0       	rjmp	.+4      	; 0x284a <__stack+0x74b>
    2846:	80 fd       	sbrc	r24, 0
    2848:	a8 c0       	rjmp	.+336    	; 0x299a <__stack+0x89b>
    284a:	59 a4       	ldd	r5, Y+41	; 0x29
    284c:	53 fe       	sbrs	r5, 3
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <__stack+0x757>
    2850:	29 a5       	ldd	r18, Y+41	; 0x29
    2852:	20 62       	ori	r18, 0x20	; 32
    2854:	29 a7       	std	Y+41, r18	; 0x29
    2856:	e9 81       	ldd	r30, Y+1	; 0x01
    2858:	fa 81       	ldd	r31, Y+2	; 0x02
    285a:	42 a5       	ldd	r20, Z+42	; 0x2a
    285c:	53 a5       	ldd	r21, Z+43	; 0x2b
    285e:	64 a5       	ldd	r22, Z+44	; 0x2c
    2860:	75 a5       	ldd	r23, Z+45	; 0x2d
    2862:	af a1       	ldd	r26, Y+39	; 0x27
    2864:	b8 a5       	ldd	r27, Y+40	; 0x28
    2866:	5a 96       	adiw	r26, 0x1a	; 26
    2868:	4d 93       	st	X+, r20
    286a:	5d 93       	st	X+, r21
    286c:	6d 93       	st	X+, r22
    286e:	7c 93       	st	X, r23
    2870:	5d 97       	sbiw	r26, 0x1d	; 29
    2872:	5f 96       	adiw	r26, 0x1f	; 31
    2874:	3c 92       	st	X, r3
    2876:	2e 92       	st	-X, r2
    2878:	5e 97       	sbiw	r26, 0x1e	; 30
    287a:	49 a4       	ldd	r4, Y+41	; 0x29
    287c:	14 96       	adiw	r26, 0x04	; 4
    287e:	4c 92       	st	X, r4
    2880:	d1 01       	movw	r26, r2
    2882:	54 96       	adiw	r26, 0x14	; 20
    2884:	8d 91       	ld	r24, X+
    2886:	9c 91       	ld	r25, X
    2888:	55 97       	sbiw	r26, 0x15	; 21
    288a:	a0 e0       	ldi	r26, 0x00	; 0
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	9c 01       	movw	r18, r24
    2890:	11 27       	eor	r17, r17
    2892:	00 27       	eor	r16, r16
    2894:	d1 01       	movw	r26, r2
    2896:	5a 96       	adiw	r26, 0x1a	; 26
    2898:	4d 91       	ld	r20, X+
    289a:	5c 91       	ld	r21, X
    289c:	5b 97       	sbiw	r26, 0x1b	; 27
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	40 2b       	or	r20, r16
    28a4:	51 2b       	or	r21, r17
    28a6:	62 2b       	or	r22, r18
    28a8:	73 2b       	or	r23, r19
    28aa:	af a1       	ldd	r26, Y+39	; 0x27
    28ac:	b8 a5       	ldd	r27, Y+40	; 0x28
    28ae:	1e 96       	adiw	r26, 0x0e	; 14
    28b0:	4d 93       	st	X+, r20
    28b2:	5d 93       	st	X+, r21
    28b4:	6d 93       	st	X+, r22
    28b6:	7c 93       	st	X, r23
    28b8:	51 97       	sbiw	r26, 0x11	; 17
    28ba:	d1 01       	movw	r26, r2
    28bc:	5c 96       	adiw	r26, 0x1c	; 28
    28be:	4d 91       	ld	r20, X+
    28c0:	5d 91       	ld	r21, X+
    28c2:	6d 91       	ld	r22, X+
    28c4:	7c 91       	ld	r23, X
    28c6:	5f 97       	sbiw	r26, 0x1f	; 31
    28c8:	af a1       	ldd	r26, Y+39	; 0x27
    28ca:	b8 a5       	ldd	r27, Y+40	; 0x28
    28cc:	1a 96       	adiw	r26, 0x0a	; 10
    28ce:	4d 93       	st	X+, r20
    28d0:	5d 93       	st	X+, r21
    28d2:	6d 93       	st	X+, r22
    28d4:	7c 93       	st	X, r23
    28d6:	1d 97       	sbiw	r26, 0x0d	; 13
    28d8:	16 96       	adiw	r26, 0x06	; 6
    28da:	1d 92       	st	X+, r1
    28dc:	1d 92       	st	X+, r1
    28de:	1d 92       	st	X+, r1
    28e0:	1c 92       	st	X, r1
    28e2:	19 97       	sbiw	r26, 0x09	; 9
    28e4:	56 96       	adiw	r26, 0x16	; 22
    28e6:	1d 92       	st	X+, r1
    28e8:	1d 92       	st	X+, r1
    28ea:	1d 92       	st	X+, r1
    28ec:	1c 92       	st	X, r1
    28ee:	59 97       	sbiw	r26, 0x19	; 25
    28f0:	11 96       	adiw	r26, 0x01	; 1
    28f2:	fc 93       	st	X, r31
    28f4:	ee 93       	st	-X, r30
    28f6:	86 81       	ldd	r24, Z+6	; 0x06
    28f8:	97 81       	ldd	r25, Z+7	; 0x07
    28fa:	13 96       	adiw	r26, 0x03	; 3
    28fc:	9c 93       	st	X, r25
    28fe:	8e 93       	st	-X, r24
    2900:	12 97       	sbiw	r26, 0x02	; 2
    2902:	10 e0       	ldi	r17, 0x00	; 0
    2904:	65 c0       	rjmp	.+202    	; 0x29d0 <__stack+0x8d1>
    2906:	6f eb       	ldi	r22, 0xBF	; 191
    2908:	61 0f       	add	r22, r17
    290a:	6a 31       	cpi	r22, 0x1A	; 26
    290c:	10 f4       	brcc	.+4      	; 0x2912 <__stack+0x813>
    290e:	02 60       	ori	r16, 0x02	; 2
    2910:	06 c0       	rjmp	.+12     	; 0x291e <__stack+0x81f>
    2912:	6f e9       	ldi	r22, 0x9F	; 159
    2914:	61 0f       	add	r22, r17
    2916:	6a 31       	cpi	r22, 0x1A	; 26
    2918:	10 f4       	brcc	.+4      	; 0x291e <__stack+0x81f>
    291a:	01 60       	ori	r16, 0x01	; 1
    291c:	10 52       	subi	r17, 0x20	; 32
    291e:	bf 01       	movw	r22, r30
    2920:	68 0f       	add	r22, r24
    2922:	79 1f       	adc	r23, r25
    2924:	db 01       	movw	r26, r22
    2926:	1c 93       	st	X, r17
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	23 ce       	rjmp	.-954    	; 0x2572 <__stack+0x473>
    292c:	4f 85       	ldd	r20, Y+15	; 0x0f
    292e:	58 89       	ldd	r21, Y+16	; 0x10
    2930:	69 89       	ldd	r22, Y+17	; 0x11
    2932:	7a 89       	ldd	r23, Y+18	; 0x12
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    293c:	18 2f       	mov	r17, r24
    293e:	81 11       	cpse	r24, r1
    2940:	cb ce       	rjmp	.-618    	; 0x26d8 <__stack+0x5d9>
    2942:	8b 89       	ldd	r24, Y+19	; 0x13
    2944:	9c 89       	ldd	r25, Y+20	; 0x14
    2946:	fc 01       	movw	r30, r24
    2948:	9c 01       	movw	r18, r24
    294a:	20 5e       	subi	r18, 0xE0	; 224
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	2e 17       	cp	r18, r30
    2950:	3f 07       	cpc	r19, r31
    2952:	09 f4       	brne	.+2      	; 0x2956 <__stack+0x857>
    2954:	b7 ce       	rjmp	.-658    	; 0x26c4 <__stack+0x5c5>
    2956:	11 92       	st	Z+, r1
    2958:	fa cf       	rjmp	.-12     	; 0x294e <__stack+0x84f>
    295a:	18 e0       	ldi	r17, 0x08	; 8
    295c:	39 c0       	rjmp	.+114    	; 0x29d0 <__stack+0x8d1>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	b3 01       	movw	r22, r6
    2964:	a2 01       	movw	r20, r4
    2966:	41 50       	subi	r20, 0x01	; 1
    2968:	51 09       	sbc	r21, r1
    296a:	61 09       	sbc	r22, r1
    296c:	71 09       	sbc	r23, r1
    296e:	fc 01       	movw	r30, r24
    2970:	42 87       	std	Z+10, r20	; 0x0a
    2972:	53 87       	std	Z+11, r21	; 0x0b
    2974:	64 87       	std	Z+12, r22	; 0x0c
    2976:	75 87       	std	Z+13, r23	; 0x0d
    2978:	4a a5       	ldd	r20, Y+42	; 0x2a
    297a:	5b a5       	ldd	r21, Y+43	; 0x2b
    297c:	6c a5       	ldd	r22, Y+44	; 0x2c
    297e:	7d a5       	ldd	r23, Y+45	; 0x2d
    2980:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2984:	18 2f       	mov	r17, r24
    2986:	88 23       	and	r24, r24
    2988:	09 f4       	brne	.+2      	; 0x298c <__stack+0x88d>
    298a:	5f cf       	rjmp	.-322    	; 0x284a <__stack+0x74b>
    298c:	21 c0       	rjmp	.+66     	; 0x29d0 <__stack+0x8d1>
    298e:	12 e0       	ldi	r17, 0x02	; 2
    2990:	1f c0       	rjmp	.+62     	; 0x29d0 <__stack+0x8d1>
    2992:	11 e0       	ldi	r17, 0x01	; 1
    2994:	1d c0       	rjmp	.+58     	; 0x29d0 <__stack+0x8d1>
    2996:	14 e0       	ldi	r17, 0x04	; 4
    2998:	1b c0       	rjmp	.+54     	; 0x29d0 <__stack+0x8d1>
    299a:	17 e0       	ldi	r17, 0x07	; 7
    299c:	19 c0       	rjmp	.+50     	; 0x29d0 <__stack+0x8d1>
    299e:	12 e0       	ldi	r17, 0x02	; 2
    29a0:	81 cc       	rjmp	.-1790   	; 0x22a4 <__stack+0x1a5>
    29a2:	a3 e0       	ldi	r26, 0x03	; 3
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	a5 01       	movw	r20, r10
    29a8:	94 01       	movw	r18, r8
    29aa:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__muluhisi3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	b6 95       	lsr	r27
    29b4:	a7 95       	ror	r26
    29b6:	97 95       	ror	r25
    29b8:	87 95       	ror	r24
    29ba:	f1 e0       	ldi	r31, 0x01	; 1
    29bc:	8f 22       	and	r8, r31
    29be:	99 24       	eor	r9, r9
    29c0:	aa 24       	eor	r10, r10
    29c2:	bb 24       	eor	r11, r11
    29c4:	88 0e       	add	r8, r24
    29c6:	99 1e       	adc	r9, r25
    29c8:	aa 1e       	adc	r10, r26
    29ca:	bb 1e       	adc	r11, r27
    29cc:	11 e0       	ldi	r17, 0x01	; 1
    29ce:	92 cc       	rjmp	.-1756   	; 0x22f4 <__stack+0x1f5>
    29d0:	81 2f       	mov	r24, r17
    29d2:	ea 96       	adiw	r28, 0x3a	; 58
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	df 90       	pop	r13
    29ec:	cf 90       	pop	r12
    29ee:	bf 90       	pop	r11
    29f0:	af 90       	pop	r10
    29f2:	9f 90       	pop	r9
    29f4:	8f 90       	pop	r8
    29f6:	7f 90       	pop	r7
    29f8:	6f 90       	pop	r6
    29fa:	5f 90       	pop	r5
    29fc:	4f 90       	pop	r4
    29fe:	3f 90       	pop	r3
    2a00:	2f 90       	pop	r2
    2a02:	08 95       	ret

00002a04 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2a04:	2f 92       	push	r2
    2a06:	3f 92       	push	r3
    2a08:	4f 92       	push	r4
    2a0a:	5f 92       	push	r5
    2a0c:	6f 92       	push	r6
    2a0e:	7f 92       	push	r7
    2a10:	8f 92       	push	r8
    2a12:	9f 92       	push	r9
    2a14:	af 92       	push	r10
    2a16:	bf 92       	push	r11
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	ec 01       	movw	r28, r24
    2a2a:	5b 01       	movw	r10, r22
    2a2c:	6a 01       	movw	r12, r20
    2a2e:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    2a30:	f9 01       	movw	r30, r18
    2a32:	11 82       	std	Z+1, r1	; 0x01
    2a34:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    2a36:	6a 81       	ldd	r22, Y+2	; 0x02
    2a38:	7b 81       	ldd	r23, Y+3	; 0x03
    2a3a:	88 81       	ld	r24, Y
    2a3c:	99 81       	ldd	r25, Y+1	; 0x01
    2a3e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2a42:	81 11       	cpse	r24, r1
    2a44:	67 c1       	rjmp	.+718    	; 0x2d14 <f_write+0x310>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	87 fd       	sbrc	r24, 7
    2a4a:	61 c1       	rjmp	.+706    	; 0x2d0e <f_write+0x30a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2a4c:	81 ff       	sbrs	r24, 1
    2a4e:	61 c1       	rjmp	.+706    	; 0x2d12 <f_write+0x30e>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a54:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a56:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a58:	ac 01       	movw	r20, r24
    2a5a:	bd 01       	movw	r22, r26
    2a5c:	4c 0d       	add	r20, r12
    2a5e:	5d 1d       	adc	r21, r13
    2a60:	61 1d       	adc	r22, r1
    2a62:	71 1d       	adc	r23, r1
    2a64:	48 17       	cp	r20, r24
    2a66:	59 07       	cpc	r21, r25
    2a68:	6a 07       	cpc	r22, r26
    2a6a:	7b 07       	cpc	r23, r27
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <f_write+0x6c>
    2a6e:	b3 c0       	rjmp	.+358    	; 0x2bd6 <f_write+0x1d2>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2a70:	8e 81       	ldd	r24, Y+6	; 0x06
    2a72:	9f 81       	ldd	r25, Y+7	; 0x07
    2a74:	a8 85       	ldd	r26, Y+8	; 0x08
    2a76:	b9 85       	ldd	r27, Y+9	; 0x09
    2a78:	4a 85       	ldd	r20, Y+10	; 0x0a
    2a7a:	5b 85       	ldd	r21, Y+11	; 0x0b
    2a7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a80:	48 17       	cp	r20, r24
    2a82:	59 07       	cpc	r21, r25
    2a84:	6a 07       	cpc	r22, r26
    2a86:	7b 07       	cpc	r23, r27
    2a88:	08 f0       	brcs	.+2      	; 0x2a8c <f_write+0x88>
    2a8a:	3c c1       	rjmp	.+632    	; 0x2d04 <f_write+0x300>
    2a8c:	8a 87       	std	Y+10, r24	; 0x0a
    2a8e:	9b 87       	std	Y+11, r25	; 0x0b
    2a90:	ac 87       	std	Y+12, r26	; 0x0c
    2a92:	bd 87       	std	Y+13, r27	; 0x0d
    2a94:	37 c1       	rjmp	.+622    	; 0x2d04 <f_write+0x300>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2a96:	4e 81       	ldd	r20, Y+6	; 0x06
    2a98:	5f 81       	ldd	r21, Y+7	; 0x07
    2a9a:	68 85       	ldd	r22, Y+8	; 0x08
    2a9c:	79 85       	ldd	r23, Y+9	; 0x09
    2a9e:	db 01       	movw	r26, r22
    2aa0:	ca 01       	movw	r24, r20
    2aa2:	91 70       	andi	r25, 0x01	; 1
    2aa4:	aa 27       	eor	r26, r26
    2aa6:	bb 27       	eor	r27, r27
    2aa8:	89 2b       	or	r24, r25
    2aaa:	8a 2b       	or	r24, r26
    2aac:	8b 2b       	or	r24, r27
    2aae:	09 f0       	breq	.+2      	; 0x2ab2 <f_write+0xae>
    2ab0:	f9 c0       	rjmp	.+498    	; 0x2ca4 <f_write+0x2a0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2ab2:	e8 81       	ld	r30, Y
    2ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab6:	22 81       	ldd	r18, Z+2	; 0x02
    2ab8:	21 50       	subi	r18, 0x01	; 1
    2aba:	2a 01       	movw	r4, r20
    2abc:	3b 01       	movw	r6, r22
    2abe:	a9 e0       	ldi	r26, 0x09	; 9
    2ac0:	76 94       	lsr	r7
    2ac2:	67 94       	ror	r6
    2ac4:	57 94       	ror	r5
    2ac6:	47 94       	ror	r4
    2ac8:	aa 95       	dec	r26
    2aca:	d1 f7       	brne	.-12     	; 0x2ac0 <f_write+0xbc>
    2acc:	12 2f       	mov	r17, r18
    2ace:	14 21       	and	r17, r4
			if (!csect) {					/* On the cluster boundary? */
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <f_write+0xd0>
    2ad2:	86 c0       	rjmp	.+268    	; 0x2be0 <f_write+0x1dc>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;			/* Update current cluster */
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2ad4:	88 81       	ld	r24, Y
    2ad6:	99 81       	ldd	r25, Y+1	; 0x01
    2ad8:	fc 01       	movw	r30, r24
    2ada:	42 a4       	ldd	r4, Z+42	; 0x2a
    2adc:	53 a4       	ldd	r5, Z+43	; 0x2b
    2ade:	64 a4       	ldd	r6, Z+44	; 0x2c
    2ae0:	75 a4       	ldd	r7, Z+45	; 0x2d
    2ae2:	4e 89       	ldd	r20, Y+22	; 0x16
    2ae4:	5f 89       	ldd	r21, Y+23	; 0x17
    2ae6:	68 8d       	ldd	r22, Y+24	; 0x18
    2ae8:	79 8d       	ldd	r23, Y+25	; 0x19
    2aea:	44 16       	cp	r4, r20
    2aec:	55 06       	cpc	r5, r21
    2aee:	66 06       	cpc	r6, r22
    2af0:	77 06       	cpc	r7, r23
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <f_write+0xf2>
    2af4:	ab c0       	rjmp	.+342    	; 0x2c4c <f_write+0x248>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2af6:	88 80       	ld	r8, Y
    2af8:	99 80       	ldd	r9, Y+1	; 0x01
    2afa:	4a 89       	ldd	r20, Y+18	; 0x12
    2afc:	5b 89       	ldd	r21, Y+19	; 0x13
    2afe:	6c 89       	ldd	r22, Y+20	; 0x14
    2b00:	7d 89       	ldd	r23, Y+21	; 0x15
    2b02:	c4 01       	movw	r24, r8
    2b04:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2b08:	61 15       	cp	r22, r1
    2b0a:	71 05       	cpc	r23, r1
    2b0c:	81 05       	cpc	r24, r1
    2b0e:	91 05       	cpc	r25, r1
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <f_write+0x110>
    2b12:	a5 c0       	rjmp	.+330    	; 0x2c5e <f_write+0x25a>
			sect += csect;
    2b14:	2b 01       	movw	r4, r22
    2b16:	3c 01       	movw	r6, r24
    2b18:	41 0e       	add	r4, r17
    2b1a:	51 1c       	adc	r5, r1
    2b1c:	61 1c       	adc	r6, r1
    2b1e:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2b20:	76 01       	movw	r14, r12
    2b22:	ef 2c       	mov	r14, r15
    2b24:	ff 24       	eor	r15, r15
    2b26:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    2b28:	e1 14       	cp	r14, r1
    2b2a:	f1 04       	cpc	r15, r1
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <f_write+0x12c>
    2b2e:	9b c0       	rjmp	.+310    	; 0x2c66 <f_write+0x262>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2b30:	f4 01       	movw	r30, r8
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	21 2f       	mov	r18, r17
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	a9 01       	movw	r20, r18
    2b3a:	4e 0d       	add	r20, r14
    2b3c:	5f 1d       	adc	r21, r15
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	84 17       	cp	r24, r20
    2b42:	95 07       	cpc	r25, r21
    2b44:	18 f4       	brcc	.+6      	; 0x2b4c <f_write+0x148>
					cc = fp->fs->csize - csect;
    2b46:	7c 01       	movw	r14, r24
    2b48:	e2 1a       	sub	r14, r18
    2b4a:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2b4c:	0e 2d       	mov	r16, r14
    2b4e:	a3 01       	movw	r20, r6
    2b50:	92 01       	movw	r18, r4
    2b52:	b5 01       	movw	r22, r10
    2b54:	f4 01       	movw	r30, r8
    2b56:	81 81       	ldd	r24, Z+1	; 0x01
    2b58:	0e 94 25 0a 	call	0x144a	; 0x144a <disk_write>
    2b5c:	81 11       	cpse	r24, r1
    2b5e:	b8 c0       	rjmp	.+368    	; 0x2cd0 <f_write+0x2cc>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2b60:	88 81       	ld	r24, Y
    2b62:	99 81       	ldd	r25, Y+1	; 0x01
    2b64:	fc 01       	movw	r30, r24
    2b66:	42 a5       	ldd	r20, Z+42	; 0x2a
    2b68:	53 a5       	ldd	r21, Z+43	; 0x2b
    2b6a:	64 a5       	ldd	r22, Z+44	; 0x2c
    2b6c:	75 a5       	ldd	r23, Z+45	; 0x2d
    2b6e:	44 19       	sub	r20, r4
    2b70:	55 09       	sbc	r21, r5
    2b72:	66 09       	sbc	r22, r6
    2b74:	77 09       	sbc	r23, r7
    2b76:	27 01       	movw	r4, r14
    2b78:	61 2c       	mov	r6, r1
    2b7a:	71 2c       	mov	r7, r1
    2b7c:	44 15       	cp	r20, r4
    2b7e:	55 05       	cpc	r21, r5
    2b80:	66 05       	cpc	r22, r6
    2b82:	77 05       	cpc	r23, r7
    2b84:	70 f4       	brcc	.+28     	; 0x2ba2 <f_write+0x19e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2b86:	54 2f       	mov	r21, r20
    2b88:	44 27       	eor	r20, r20
    2b8a:	55 0f       	add	r21, r21
    2b8c:	b5 01       	movw	r22, r10
    2b8e:	64 0f       	add	r22, r20
    2b90:	75 1f       	adc	r23, r21
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	52 e0       	ldi	r21, 0x02	; 2
    2b96:	8e 96       	adiw	r24, 0x2e	; 46
    2b98:	0e 94 93 0a 	call	0x1526	; 0x1526 <mem_cpy>
					fp->fs->wflag = 0;
    2b9c:	e8 81       	ld	r30, Y
    2b9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba0:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2ba2:	fe 2c       	mov	r15, r14
    2ba4:	ee 24       	eor	r14, r14
    2ba6:	ff 0c       	add	r15, r15
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2ba8:	ae 0c       	add	r10, r14
    2baa:	bf 1c       	adc	r11, r15
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb0:	a8 85       	ldd	r26, Y+8	; 0x08
    2bb2:	b9 85       	ldd	r27, Y+9	; 0x09
    2bb4:	8e 0d       	add	r24, r14
    2bb6:	9f 1d       	adc	r25, r15
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	b1 1d       	adc	r27, r1
    2bbc:	8e 83       	std	Y+6, r24	; 0x06
    2bbe:	9f 83       	std	Y+7, r25	; 0x07
    2bc0:	a8 87       	std	Y+8, r26	; 0x08
    2bc2:	b9 87       	std	Y+9, r27	; 0x09
    2bc4:	f1 01       	movw	r30, r2
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	8e 0d       	add	r24, r14
    2bcc:	9f 1d       	adc	r25, r15
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	ce 18       	sub	r12, r14
    2bd4:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2bd6:	c1 14       	cp	r12, r1
    2bd8:	d1 04       	cpc	r13, r1
    2bda:	09 f0       	breq	.+2      	; 0x2bde <f_write+0x1da>
    2bdc:	5c cf       	rjmp	.-328    	; 0x2a96 <f_write+0x92>
    2bde:	48 cf       	rjmp	.-368    	; 0x2a70 <f_write+0x6c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
    2be0:	45 2b       	or	r20, r21
    2be2:	46 2b       	or	r20, r22
    2be4:	47 2b       	or	r20, r23
    2be6:	a1 f4       	brne	.+40     	; 0x2c10 <f_write+0x20c>
					clst = fp->sclust;		/* Follow from the origin */
    2be8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2bea:	7f 85       	ldd	r23, Y+15	; 0x0f
    2bec:	88 89       	ldd	r24, Y+16	; 0x10
    2bee:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    2bf0:	61 15       	cp	r22, r1
    2bf2:	71 05       	cpc	r23, r1
    2bf4:	81 05       	cpc	r24, r1
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	c1 f4       	brne	.+48     	; 0x2c2a <f_write+0x226>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	ba 01       	movw	r22, r20
    2c00:	cf 01       	movw	r24, r30
    2c02:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <create_chain>
    2c06:	6e 87       	std	Y+14, r22	; 0x0e
    2c08:	7f 87       	std	Y+15, r23	; 0x0f
    2c0a:	88 8b       	std	Y+16, r24	; 0x10
    2c0c:	99 8b       	std	Y+17, r25	; 0x11
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <f_write+0x21a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2c10:	4a 89       	ldd	r20, Y+18	; 0x12
    2c12:	5b 89       	ldd	r21, Y+19	; 0x13
    2c14:	6c 89       	ldd	r22, Y+20	; 0x14
    2c16:	7d 89       	ldd	r23, Y+21	; 0x15
    2c18:	cf 01       	movw	r24, r30
    2c1a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2c1e:	61 15       	cp	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	81 05       	cpc	r24, r1
    2c24:	91 05       	cpc	r25, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <f_write+0x226>
    2c28:	23 cf       	rjmp	.-442    	; 0x2a70 <f_write+0x6c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2c2a:	61 30       	cpi	r22, 0x01	; 1
    2c2c:	71 05       	cpc	r23, r1
    2c2e:	81 05       	cpc	r24, r1
    2c30:	91 05       	cpc	r25, r1
    2c32:	a9 f0       	breq	.+42     	; 0x2c5e <f_write+0x25a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c34:	6f 3f       	cpi	r22, 0xFF	; 255
    2c36:	ff ef       	ldi	r31, 0xFF	; 255
    2c38:	7f 07       	cpc	r23, r31
    2c3a:	8f 07       	cpc	r24, r31
    2c3c:	9f 07       	cpc	r25, r31
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <f_write+0x23e>
    2c40:	47 c0       	rjmp	.+142    	; 0x2cd0 <f_write+0x2cc>
				fp->clust = clst;			/* Update current cluster */
    2c42:	6a 8b       	std	Y+18, r22	; 0x12
    2c44:	7b 8b       	std	Y+19, r23	; 0x13
    2c46:	8c 8b       	std	Y+20, r24	; 0x14
    2c48:	9d 8b       	std	Y+21, r25	; 0x15
    2c4a:	44 cf       	rjmp	.-376    	; 0x2ad4 <f_write+0xd0>
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	ba 01       	movw	r22, r20
    2c52:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2c56:	88 23       	and	r24, r24
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <f_write+0x258>
    2c5a:	4d cf       	rjmp	.-358    	; 0x2af6 <f_write+0xf2>
    2c5c:	39 c0       	rjmp	.+114    	; 0x2cd0 <f_write+0x2cc>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	8c 83       	std	Y+4, r24	; 0x04
    2c64:	54 c0       	rjmp	.+168    	; 0x2d0e <f_write+0x30a>
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2c66:	4e 81       	ldd	r20, Y+6	; 0x06
    2c68:	5f 81       	ldd	r21, Y+7	; 0x07
    2c6a:	68 85       	ldd	r22, Y+8	; 0x08
    2c6c:	79 85       	ldd	r23, Y+9	; 0x09
    2c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c72:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c74:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c76:	48 17       	cp	r20, r24
    2c78:	59 07       	cpc	r21, r25
    2c7a:	6a 07       	cpc	r22, r26
    2c7c:	7b 07       	cpc	r23, r27
    2c7e:	70 f0       	brcs	.+28     	; 0x2c9c <f_write+0x298>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	ba 01       	movw	r22, r20
    2c86:	c4 01       	movw	r24, r8
    2c88:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	20 c0       	rjmp	.+64     	; 0x2cd0 <f_write+0x2cc>
				fp->fs->winsect = sect;
    2c90:	e8 81       	ld	r30, Y
    2c92:	f9 81       	ldd	r31, Y+1	; 0x01
    2c94:	42 a6       	std	Z+42, r4	; 0x2a
    2c96:	53 a6       	std	Z+43, r5	; 0x2b
    2c98:	64 a6       	std	Z+44, r6	; 0x2c
    2c9a:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2c9c:	4e 8a       	std	Y+22, r4	; 0x16
    2c9e:	5f 8a       	std	Y+23, r5	; 0x17
    2ca0:	68 8e       	std	Y+24, r6	; 0x18
    2ca2:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca8:	91 70       	andi	r25, 0x01	; 1
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	32 e0       	ldi	r19, 0x02	; 2
    2cae:	28 1b       	sub	r18, r24
    2cb0:	39 0b       	sbc	r19, r25
    2cb2:	76 01       	movw	r14, r12
    2cb4:	2c 15       	cp	r18, r12
    2cb6:	3d 05       	cpc	r19, r13
    2cb8:	08 f4       	brcc	.+2      	; 0x2cbc <f_write+0x2b8>
    2cba:	79 01       	movw	r14, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2cbc:	4e 89       	ldd	r20, Y+22	; 0x16
    2cbe:	5f 89       	ldd	r21, Y+23	; 0x17
    2cc0:	68 8d       	ldd	r22, Y+24	; 0x18
    2cc2:	79 8d       	ldd	r23, Y+25	; 0x19
    2cc4:	88 81       	ld	r24, Y
    2cc6:	99 81       	ldd	r25, Y+1	; 0x01
    2cc8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2ccc:	88 23       	and	r24, r24
    2cce:	29 f0       	breq	.+10     	; 0x2cda <f_write+0x2d6>
			ABORT(fp->fs, FR_DISK_ERR);
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	80 68       	ori	r24, 0x80	; 128
    2cd4:	8c 83       	std	Y+4, r24	; 0x04
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	1d c0       	rjmp	.+58     	; 0x2d14 <f_write+0x310>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2cda:	8e 81       	ldd	r24, Y+6	; 0x06
    2cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cde:	a8 85       	ldd	r26, Y+8	; 0x08
    2ce0:	b9 85       	ldd	r27, Y+9	; 0x09
    2ce2:	91 70       	andi	r25, 0x01	; 1
    2ce4:	aa 27       	eor	r26, r26
    2ce6:	bb 27       	eor	r27, r27
    2ce8:	8e 96       	adiw	r24, 0x2e	; 46
    2cea:	28 81       	ld	r18, Y
    2cec:	39 81       	ldd	r19, Y+1	; 0x01
    2cee:	a7 01       	movw	r20, r14
    2cf0:	b5 01       	movw	r22, r10
    2cf2:	82 0f       	add	r24, r18
    2cf4:	93 1f       	adc	r25, r19
    2cf6:	0e 94 93 0a 	call	0x1526	; 0x1526 <mem_cpy>
		fp->fs->wflag = 1;
    2cfa:	e8 81       	ld	r30, Y
    2cfc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cfe:	31 e0       	ldi	r19, 0x01	; 1
    2d00:	34 83       	std	Z+4, r19	; 0x04
    2d02:	52 cf       	rjmp	.-348    	; 0x2ba8 <f_write+0x1a4>
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2d04:	8c 81       	ldd	r24, Y+4	; 0x04
    2d06:	80 62       	ori	r24, 0x20	; 32
    2d08:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <f_write+0x310>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2d0e:	82 e0       	ldi	r24, 0x02	; 2
    2d10:	01 c0       	rjmp	.+2      	; 0x2d14 <f_write+0x310>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2d12:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
    2d24:	bf 90       	pop	r11
    2d26:	af 90       	pop	r10
    2d28:	9f 90       	pop	r9
    2d2a:	8f 90       	pop	r8
    2d2c:	7f 90       	pop	r7
    2d2e:	6f 90       	pop	r6
    2d30:	5f 90       	pop	r5
    2d32:	4f 90       	pop	r4
    2d34:	3f 90       	pop	r3
    2d36:	2f 90       	pop	r2
    2d38:	08 95       	ret

00002d3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2d44:	6a 81       	ldd	r22, Y+2	; 0x02
    2d46:	7b 81       	ldd	r23, Y+3	; 0x03
    2d48:	88 81       	ld	r24, Y
    2d4a:	99 81       	ldd	r25, Y+1	; 0x01
    2d4c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <validate>
    2d50:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2d52:	81 11       	cpse	r24, r1
    2d54:	95 c0       	rjmp	.+298    	; 0x2e80 <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	85 ff       	sbrs	r24, 5
    2d5a:	92 c0       	rjmp	.+292    	; 0x2e80 <f_sync+0x146>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2d5c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2d5e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2d60:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2d62:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2d64:	88 81       	ld	r24, Y
    2d66:	99 81       	ldd	r25, Y+1	; 0x01
    2d68:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2d6c:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2d6e:	81 11       	cpse	r24, r1
    2d70:	87 c0       	rjmp	.+270    	; 0x2e80 <f_sync+0x146>
				dir = fp->dir_ptr;
    2d72:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2d74:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2d76:	f8 01       	movw	r30, r16
    2d78:	83 85       	ldd	r24, Z+11	; 0x0b
    2d7a:	80 62       	ori	r24, 0x20	; 32
    2d7c:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d82:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d84:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d86:	84 8f       	std	Z+28, r24	; 0x1c
    2d88:	95 8f       	std	Z+29, r25	; 0x1d
    2d8a:	a6 8f       	std	Z+30, r26	; 0x1e
    2d8c:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    2d8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d90:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d92:	93 8f       	std	Z+27, r25	; 0x1b
    2d94:	82 8f       	std	Z+26, r24	; 0x1a
    2d96:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d98:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9a:	a8 89       	ldd	r26, Y+16	; 0x10
    2d9c:	b9 89       	ldd	r27, Y+17	; 0x11
    2d9e:	b5 8b       	std	Z+21, r27	; 0x15
    2da0:	a4 8b       	std	Z+20, r26	; 0x14
				tim = get_fattime();						/* Update updated time */
    2da2:	0e 94 36 0a 	call	0x146c	; 0x146c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2da6:	f8 01       	movw	r30, r16
    2da8:	66 8b       	std	Z+22, r22	; 0x16
    2daa:	77 8b       	std	Z+23, r23	; 0x17
    2dac:	80 8f       	std	Z+24, r24	; 0x18
    2dae:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2db0:	8c 81       	ldd	r24, Y+4	; 0x04
    2db2:	8f 7d       	andi	r24, 0xDF	; 223
    2db4:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2db6:	e8 81       	ld	r30, Y
    2db8:	f9 81       	ldd	r31, Y+1	; 0x01
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2dbe:	09 90       	ld	r0, Y+
    2dc0:	d8 81       	ld	r29, Y
    2dc2:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	ba 01       	movw	r22, r20
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <move_window>
    2dd0:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2dd2:	81 11       	cpse	r24, r1
    2dd4:	55 c0       	rjmp	.+170    	; 0x2e80 <f_sync+0x146>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2dd6:	88 81       	ld	r24, Y
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	09 f0       	breq	.+2      	; 0x2dde <f_sync+0xa4>
    2ddc:	47 c0       	rjmp	.+142    	; 0x2e6c <f_sync+0x132>
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	88 23       	and	r24, r24
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <f_sync+0xac>
    2de4:	43 c0       	rjmp	.+134    	; 0x2e6c <f_sync+0x132>
			fs->winsect = 0;
    2de6:	1a a6       	std	Y+42, r1	; 0x2a
    2de8:	1b a6       	std	Y+43, r1	; 0x2b
    2dea:	1c a6       	std	Y+44, r1	; 0x2c
    2dec:	1d a6       	std	Y+45, r1	; 0x2d
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2dee:	be 01       	movw	r22, r28
    2df0:	62 5d       	subi	r22, 0xD2	; 210
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	fb 01       	movw	r30, r22
    2df6:	ce 01       	movw	r24, r28
    2df8:	82 5d       	subi	r24, 0xD2	; 210
    2dfa:	9d 4f       	sbci	r25, 0xFD	; 253
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    2dfc:	e8 17       	cp	r30, r24
    2dfe:	f9 07       	cpc	r31, r25
    2e00:	11 f0       	breq	.+4      	; 0x2e06 <f_sync+0xcc>
		*d++ = (BYTE)val;
    2e02:	11 92       	st	Z+, r1
    2e04:	fb cf       	rjmp	.-10     	; 0x2dfc <f_sync+0xc2>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2e06:	85 e5       	ldi	r24, 0x55	; 85
    2e08:	9a ea       	ldi	r25, 0xAA	; 170
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e4 5d       	subi	r30, 0xD4	; 212
    2e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2e14:	82 e5       	ldi	r24, 0x52	; 82
    2e16:	92 e5       	ldi	r25, 0x52	; 82
    2e18:	a1 e6       	ldi	r26, 0x61	; 97
    2e1a:	b1 e4       	ldi	r27, 0x41	; 65
    2e1c:	8e a7       	std	Y+46, r24	; 0x2e
    2e1e:	9f a7       	std	Y+47, r25	; 0x2f
    2e20:	a8 ab       	std	Y+48, r26	; 0x30
    2e22:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2e24:	82 e7       	ldi	r24, 0x72	; 114
    2e26:	92 e7       	ldi	r25, 0x72	; 114
    2e28:	a1 e4       	ldi	r26, 0x41	; 65
    2e2a:	b1 e6       	ldi	r27, 0x61	; 97
    2e2c:	7a 97       	sbiw	r30, 0x1a	; 26
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2e36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e3a:	a8 89       	ldd	r26, Y+16	; 0x10
    2e3c:	b9 89       	ldd	r27, Y+17	; 0x11
    2e3e:	34 96       	adiw	r30, 0x04	; 4
    2e40:	80 83       	st	Z, r24
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	a2 83       	std	Z+2, r26	; 0x02
    2e46:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e4c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e4e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e50:	34 96       	adiw	r30, 0x04	; 4
    2e52:	80 83       	st	Z, r24
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	a2 83       	std	Z+2, r26	; 0x02
    2e58:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2e5a:	2a 89       	ldd	r18, Y+18	; 0x12
    2e5c:	3b 89       	ldd	r19, Y+19	; 0x13
    2e5e:	4c 89       	ldd	r20, Y+20	; 0x14
    2e60:	5d 89       	ldd	r21, Y+21	; 0x15
    2e62:	01 e0       	ldi	r16, 0x01	; 1
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	0e 94 25 0a 	call	0x144a	; 0x144a <disk_write>
			fs->fsi_flag = 0;
    2e6a:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	0e 94 30 0a 	call	0x1460	; 0x1460 <disk_ioctl>
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	81 11       	cpse	r24, r1
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <f_sync+0x146>
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2e80:	89 2f       	mov	r24, r25
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	08 95       	ret

00002e8c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2e92:	53 df       	rcall	.-346    	; 0x2d3a <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2e94:	81 11       	cpse	r24, r1
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <f_close+0x10>
    2e98:	19 82       	std	Y+1, r1	; 0x01
    2e9a:	18 82       	st	Y, r1
	return res;
#endif
}
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	08 95       	ret

00002ea2 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2ea2:	4f 92       	push	r4
    2ea4:	5f 92       	push	r5
    2ea6:	6f 92       	push	r6
    2ea8:	7f 92       	push	r7
    2eaa:	8f 92       	push	r8
    2eac:	9f 92       	push	r9
    2eae:	af 92       	push	r10
    2eb0:	bf 92       	push	r11
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <f_lseek+0x22>
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <f_lseek+0x24>
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <f_lseek+0x26>
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	9e 83       	std	Y+6, r25	; 0x06
    2ece:	8d 83       	std	Y+5, r24	; 0x05
    2ed0:	6a 01       	movw	r12, r20
    2ed2:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	12 96       	adiw	r26, 0x02	; 2
    2ed8:	6d 91       	ld	r22, X+
    2eda:	7c 91       	ld	r23, X
    2edc:	13 97       	sbiw	r26, 0x03	; 3
    2ede:	8d 91       	ld	r24, X+
    2ee0:	9c 91       	ld	r25, X
    2ee2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	7d c1       	rjmp	.+762    	; 0x31e4 <f_lseek+0x342>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2eea:	ed 81       	ldd	r30, Y+5	; 0x05
    2eec:	fe 81       	ldd	r31, Y+6	; 0x06
    2eee:	24 81       	ldd	r18, Z+4	; 0x04
    2ef0:	27 fd       	sbrc	r18, 7
    2ef2:	70 c1       	rjmp	.+736    	; 0x31d4 <f_lseek+0x332>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2ef4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ef6:	93 85       	ldd	r25, Z+11	; 0x0b
    2ef8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2efa:	b5 85       	ldd	r27, Z+13	; 0x0d
    2efc:	8c 15       	cp	r24, r12
    2efe:	9d 05       	cpc	r25, r13
    2f00:	ae 05       	cpc	r26, r14
    2f02:	bf 05       	cpc	r27, r15
    2f04:	20 f4       	brcc	.+8      	; 0x2f0e <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2f06:	21 fd       	sbrc	r18, 1
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <f_lseek+0x6c>
    2f0a:	6c 01       	movw	r12, r24
    2f0c:	7d 01       	movw	r14, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2f0e:	ad 81       	ldd	r26, Y+5	; 0x05
    2f10:	be 81       	ldd	r27, Y+6	; 0x06
    2f12:	16 96       	adiw	r26, 0x06	; 6
    2f14:	4d 90       	ld	r4, X+
    2f16:	5d 90       	ld	r5, X+
    2f18:	6d 90       	ld	r6, X+
    2f1a:	7c 90       	ld	r7, X
    2f1c:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2f1e:	fd 01       	movw	r30, r26
    2f20:	16 82       	std	Z+6, r1	; 0x06
    2f22:	17 82       	std	Z+7, r1	; 0x07
    2f24:	10 86       	std	Z+8, r1	; 0x08
    2f26:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2f28:	c1 14       	cp	r12, r1
    2f2a:	d1 04       	cpc	r13, r1
    2f2c:	e1 04       	cpc	r14, r1
    2f2e:	f1 04       	cpc	r15, r1
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <f_lseek+0x92>
    2f32:	54 c1       	rjmp	.+680    	; 0x31dc <f_lseek+0x33a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2f34:	ad 81       	ldd	r26, Y+5	; 0x05
    2f36:	be 81       	ldd	r27, Y+6	; 0x06
    2f38:	0d 91       	ld	r16, X+
    2f3a:	1c 91       	ld	r17, X
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	82 80       	ldd	r8, Z+2	; 0x02
    2f40:	91 2c       	mov	r9, r1
    2f42:	a1 2c       	mov	r10, r1
    2f44:	b1 2c       	mov	r11, r1
    2f46:	39 e0       	ldi	r19, 0x09	; 9
    2f48:	88 0c       	add	r8, r8
    2f4a:	99 1c       	adc	r9, r9
    2f4c:	aa 1c       	adc	r10, r10
    2f4e:	bb 1c       	adc	r11, r11
    2f50:	3a 95       	dec	r19
    2f52:	d1 f7       	brne	.-12     	; 0x2f48 <f_lseek+0xa6>
			if (ifptr > 0 &&
    2f54:	41 14       	cp	r4, r1
    2f56:	51 04       	cpc	r5, r1
    2f58:	61 04       	cpc	r6, r1
    2f5a:	71 04       	cpc	r7, r1
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <f_lseek+0xbe>
    2f5e:	40 c0       	rjmp	.+128    	; 0x2fe0 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2f60:	f1 e0       	ldi	r31, 0x01	; 1
    2f62:	4f 1a       	sub	r4, r31
    2f64:	51 08       	sbc	r5, r1
    2f66:	61 08       	sbc	r6, r1
    2f68:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	61 50       	subi	r22, 0x01	; 1
    2f70:	71 09       	sbc	r23, r1
    2f72:	81 09       	sbc	r24, r1
    2f74:	91 09       	sbc	r25, r1
    2f76:	a5 01       	movw	r20, r10
    2f78:	94 01       	movw	r18, r8
    2f7a:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2f7e:	29 83       	std	Y+1, r18	; 0x01
    2f80:	3a 83       	std	Y+2, r19	; 0x02
    2f82:	4b 83       	std	Y+3, r20	; 0x03
    2f84:	5c 83       	std	Y+4, r21	; 0x04
    2f86:	c3 01       	movw	r24, r6
    2f88:	b2 01       	movw	r22, r4
    2f8a:	a5 01       	movw	r20, r10
    2f8c:	94 01       	movw	r18, r8
    2f8e:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	ab 81       	ldd	r26, Y+3	; 0x03
    2f98:	bc 81       	ldd	r27, Y+4	; 0x04
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	a4 07       	cpc	r26, r20
    2fa0:	b5 07       	cpc	r27, r21
    2fa2:	f0 f0       	brcs	.+60     	; 0x2fe0 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2fa4:	88 27       	eor	r24, r24
    2fa6:	99 27       	eor	r25, r25
    2fa8:	dc 01       	movw	r26, r24
    2faa:	88 19       	sub	r24, r8
    2fac:	99 09       	sbc	r25, r9
    2fae:	aa 09       	sbc	r26, r10
    2fb0:	bb 09       	sbc	r27, r11
    2fb2:	48 22       	and	r4, r24
    2fb4:	59 22       	and	r5, r25
    2fb6:	6a 22       	and	r6, r26
    2fb8:	7b 22       	and	r7, r27
    2fba:	ad 81       	ldd	r26, Y+5	; 0x05
    2fbc:	be 81       	ldd	r27, Y+6	; 0x06
    2fbe:	16 96       	adiw	r26, 0x06	; 6
    2fc0:	4d 92       	st	X+, r4
    2fc2:	5d 92       	st	X+, r5
    2fc4:	6d 92       	st	X+, r6
    2fc6:	7c 92       	st	X, r7
    2fc8:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2fca:	c4 18       	sub	r12, r4
    2fcc:	d5 08       	sbc	r13, r5
    2fce:	e6 08       	sbc	r14, r6
    2fd0:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    2fd2:	52 96       	adiw	r26, 0x12	; 18
    2fd4:	4d 91       	ld	r20, X+
    2fd6:	5d 91       	ld	r21, X+
    2fd8:	6d 91       	ld	r22, X+
    2fda:	7c 91       	ld	r23, X
    2fdc:	55 97       	sbiw	r26, 0x15	; 21
    2fde:	2e c0       	rjmp	.+92     	; 0x303c <f_lseek+0x19a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2fe0:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe2:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe4:	46 85       	ldd	r20, Z+14	; 0x0e
    2fe6:	57 85       	ldd	r21, Z+15	; 0x0f
    2fe8:	60 89       	ldd	r22, Z+16	; 0x10
    2fea:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2fec:	41 15       	cp	r20, r1
    2fee:	51 05       	cpc	r21, r1
    2ff0:	61 05       	cpc	r22, r1
    2ff2:	71 05       	cpc	r23, r1
    2ff4:	e9 f4       	brne	.+58     	; 0x3030 <f_lseek+0x18e>
					clst = create_chain(fp->fs, 0);
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	ba 01       	movw	r22, r20
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <create_chain>
    3002:	ab 01       	movw	r20, r22
    3004:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3006:	41 30       	cpi	r20, 0x01	; 1
    3008:	51 05       	cpc	r21, r1
    300a:	61 05       	cpc	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	09 f4       	brne	.+2      	; 0x3012 <f_lseek+0x170>
    3010:	9e c0       	rjmp	.+316    	; 0x314e <f_lseek+0x2ac>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3012:	4f 3f       	cpi	r20, 0xFF	; 255
    3014:	bf ef       	ldi	r27, 0xFF	; 255
    3016:	5b 07       	cpc	r21, r27
    3018:	6b 07       	cpc	r22, r27
    301a:	7b 07       	cpc	r23, r27
    301c:	09 f4       	brne	.+2      	; 0x3020 <f_lseek+0x17e>
    301e:	62 c0       	rjmp	.+196    	; 0x30e4 <f_lseek+0x242>
					fp->sclust = clst;
    3020:	ad 81       	ldd	r26, Y+5	; 0x05
    3022:	be 81       	ldd	r27, Y+6	; 0x06
    3024:	1e 96       	adiw	r26, 0x0e	; 14
    3026:	4d 93       	st	X+, r20
    3028:	5d 93       	st	X+, r21
    302a:	6d 93       	st	X+, r22
    302c:	7c 93       	st	X, r23
    302e:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    3030:	ed 81       	ldd	r30, Y+5	; 0x05
    3032:	fe 81       	ldd	r31, Y+6	; 0x06
    3034:	42 8b       	std	Z+18, r20	; 0x12
    3036:	53 8b       	std	Z+19, r21	; 0x13
    3038:	64 8b       	std	Z+20, r22	; 0x14
    303a:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    303c:	41 15       	cp	r20, r1
    303e:	51 05       	cpc	r21, r1
    3040:	61 05       	cpc	r22, r1
    3042:	71 05       	cpc	r23, r1
    3044:	89 f5       	brne	.+98     	; 0x30a8 <f_lseek+0x206>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3046:	c1 2c       	mov	r12, r1
    3048:	d1 2c       	mov	r13, r1
    304a:	76 01       	movw	r14, r12
    304c:	94 c0       	rjmp	.+296    	; 0x3176 <f_lseek+0x2d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    304e:	42 30       	cpi	r20, 0x02	; 2
    3050:	51 05       	cpc	r21, r1
    3052:	61 05       	cpc	r22, r1
    3054:	71 05       	cpc	r23, r1
    3056:	08 f4       	brcc	.+2      	; 0x305a <f_lseek+0x1b8>
    3058:	51 c0       	rjmp	.+162    	; 0x30fc <f_lseek+0x25a>
    305a:	ad 81       	ldd	r26, Y+5	; 0x05
    305c:	be 81       	ldd	r27, Y+6	; 0x06
    305e:	ed 91       	ld	r30, X+
    3060:	fc 91       	ld	r31, X
    3062:	86 89       	ldd	r24, Z+22	; 0x16
    3064:	97 89       	ldd	r25, Z+23	; 0x17
    3066:	a0 8d       	ldd	r26, Z+24	; 0x18
    3068:	b1 8d       	ldd	r27, Z+25	; 0x19
    306a:	48 17       	cp	r20, r24
    306c:	59 07       	cpc	r21, r25
    306e:	6a 07       	cpc	r22, r26
    3070:	7b 07       	cpc	r23, r27
    3072:	08 f0       	brcs	.+2      	; 0x3076 <f_lseek+0x1d4>
    3074:	43 c0       	rjmp	.+134    	; 0x30fc <f_lseek+0x25a>
					fp->clust = clst;
    3076:	ad 81       	ldd	r26, Y+5	; 0x05
    3078:	be 81       	ldd	r27, Y+6	; 0x06
    307a:	52 96       	adiw	r26, 0x12	; 18
    307c:	4d 93       	st	X+, r20
    307e:	5d 93       	st	X+, r21
    3080:	6d 93       	st	X+, r22
    3082:	7c 93       	st	X, r23
    3084:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    3086:	fd 01       	movw	r30, r26
    3088:	86 81       	ldd	r24, Z+6	; 0x06
    308a:	97 81       	ldd	r25, Z+7	; 0x07
    308c:	a0 85       	ldd	r26, Z+8	; 0x08
    308e:	b1 85       	ldd	r27, Z+9	; 0x09
    3090:	88 0d       	add	r24, r8
    3092:	99 1d       	adc	r25, r9
    3094:	aa 1d       	adc	r26, r10
    3096:	bb 1d       	adc	r27, r11
    3098:	86 83       	std	Z+6, r24	; 0x06
    309a:	97 83       	std	Z+7, r25	; 0x07
    309c:	a0 87       	std	Z+8, r26	; 0x08
    309e:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    30a0:	c8 18       	sub	r12, r8
    30a2:	d9 08       	sbc	r13, r9
    30a4:	ea 08       	sbc	r14, r10
    30a6:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    30a8:	8c 14       	cp	r8, r12
    30aa:	9d 04       	cpc	r9, r13
    30ac:	ae 04       	cpc	r10, r14
    30ae:	bf 04       	cpc	r11, r15
    30b0:	68 f5       	brcc	.+90     	; 0x310c <f_lseek+0x26a>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    30b2:	ad 81       	ldd	r26, Y+5	; 0x05
    30b4:	be 81       	ldd	r27, Y+6	; 0x06
    30b6:	14 96       	adiw	r26, 0x04	; 4
    30b8:	2c 91       	ld	r18, X
    30ba:	14 97       	sbiw	r26, 0x04	; 4
    30bc:	8d 91       	ld	r24, X+
    30be:	9c 91       	ld	r25, X
    30c0:	21 ff       	sbrs	r18, 1
    30c2:	17 c0       	rjmp	.+46     	; 0x30f2 <f_lseek+0x250>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    30c4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <create_chain>
    30c8:	ab 01       	movw	r20, r22
    30ca:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    30cc:	41 15       	cp	r20, r1
    30ce:	51 05       	cpc	r21, r1
    30d0:	61 05       	cpc	r22, r1
    30d2:	71 05       	cpc	r23, r1
    30d4:	c9 f0       	breq	.+50     	; 0x3108 <f_lseek+0x266>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    30d6:	4f 3f       	cpi	r20, 0xFF	; 255
    30d8:	bf ef       	ldi	r27, 0xFF	; 255
    30da:	5b 07       	cpc	r21, r27
    30dc:	6b 07       	cpc	r22, r27
    30de:	7b 07       	cpc	r23, r27
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <f_lseek+0x242>
    30e2:	b5 cf       	rjmp	.-150    	; 0x304e <f_lseek+0x1ac>
    30e4:	ed 81       	ldd	r30, Y+5	; 0x05
    30e6:	fe 81       	ldd	r31, Y+6	; 0x06
    30e8:	84 81       	ldd	r24, Z+4	; 0x04
    30ea:	80 68       	ori	r24, 0x80	; 128
    30ec:	84 83       	std	Z+4, r24	; 0x04
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	79 c0       	rjmp	.+242    	; 0x31e4 <f_lseek+0x342>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    30f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_fat>
    30f6:	ab 01       	movw	r20, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	ed cf       	rjmp	.-38     	; 0x30d6 <f_lseek+0x234>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    30fc:	ed 81       	ldd	r30, Y+5	; 0x05
    30fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3100:	84 81       	ldd	r24, Z+4	; 0x04
    3102:	80 68       	ori	r24, 0x80	; 128
    3104:	84 83       	std	Z+4, r24	; 0x04
    3106:	66 c0       	rjmp	.+204    	; 0x31d4 <f_lseek+0x332>
    3108:	75 01       	movw	r14, r10
    310a:	64 01       	movw	r12, r8
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    310c:	ed 81       	ldd	r30, Y+5	; 0x05
    310e:	fe 81       	ldd	r31, Y+6	; 0x06
    3110:	86 81       	ldd	r24, Z+6	; 0x06
    3112:	97 81       	ldd	r25, Z+7	; 0x07
    3114:	a0 85       	ldd	r26, Z+8	; 0x08
    3116:	b1 85       	ldd	r27, Z+9	; 0x09
    3118:	8c 0d       	add	r24, r12
    311a:	9d 1d       	adc	r25, r13
    311c:	ae 1d       	adc	r26, r14
    311e:	bf 1d       	adc	r27, r15
    3120:	86 83       	std	Z+6, r24	; 0x06
    3122:	97 83       	std	Z+7, r25	; 0x07
    3124:	a0 87       	std	Z+8, r26	; 0x08
    3126:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3128:	d7 01       	movw	r26, r14
    312a:	c6 01       	movw	r24, r12
    312c:	91 70       	andi	r25, 0x01	; 1
    312e:	aa 27       	eor	r26, r26
    3130:	bb 27       	eor	r27, r27
    3132:	89 2b       	or	r24, r25
    3134:	8a 2b       	or	r24, r26
    3136:	8b 2b       	or	r24, r27
    3138:	09 f4       	brne	.+2      	; 0x313c <f_lseek+0x29a>
    313a:	85 cf       	rjmp	.-246    	; 0x3046 <f_lseek+0x1a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3144:	61 15       	cp	r22, r1
    3146:	71 05       	cpc	r23, r1
    3148:	81 05       	cpc	r24, r1
    314a:	91 05       	cpc	r25, r1
    314c:	49 f4       	brne	.+18     	; 0x3160 <f_lseek+0x2be>
    314e:	ad 81       	ldd	r26, Y+5	; 0x05
    3150:	be 81       	ldd	r27, Y+6	; 0x06
    3152:	14 96       	adiw	r26, 0x04	; 4
    3154:	8c 91       	ld	r24, X
    3156:	14 97       	sbiw	r26, 0x04	; 4
    3158:	80 68       	ori	r24, 0x80	; 128
    315a:	14 96       	adiw	r26, 0x04	; 4
    315c:	8c 93       	st	X, r24
    315e:	3a c0       	rjmp	.+116    	; 0x31d4 <f_lseek+0x332>
					nsect += ofs / SS(fp->fs);
    3160:	29 e0       	ldi	r18, 0x09	; 9
    3162:	f6 94       	lsr	r15
    3164:	e7 94       	ror	r14
    3166:	d7 94       	ror	r13
    3168:	c7 94       	ror	r12
    316a:	2a 95       	dec	r18
    316c:	d1 f7       	brne	.-12     	; 0x3162 <f_lseek+0x2c0>
    316e:	c6 0e       	add	r12, r22
    3170:	d7 1e       	adc	r13, r23
    3172:	e8 1e       	adc	r14, r24
    3174:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3176:	ed 81       	ldd	r30, Y+5	; 0x05
    3178:	fe 81       	ldd	r31, Y+6	; 0x06
    317a:	86 81       	ldd	r24, Z+6	; 0x06
    317c:	97 81       	ldd	r25, Z+7	; 0x07
    317e:	a0 85       	ldd	r26, Z+8	; 0x08
    3180:	b1 85       	ldd	r27, Z+9	; 0x09
    3182:	ac 01       	movw	r20, r24
    3184:	bd 01       	movw	r22, r26
    3186:	51 70       	andi	r21, 0x01	; 1
    3188:	66 27       	eor	r22, r22
    318a:	77 27       	eor	r23, r23
    318c:	45 2b       	or	r20, r21
    318e:	46 2b       	or	r20, r22
    3190:	47 2b       	or	r20, r23
    3192:	69 f0       	breq	.+26     	; 0x31ae <f_lseek+0x30c>
    3194:	46 89       	ldd	r20, Z+22	; 0x16
    3196:	57 89       	ldd	r21, Z+23	; 0x17
    3198:	60 8d       	ldd	r22, Z+24	; 0x18
    319a:	71 8d       	ldd	r23, Z+25	; 0x19
    319c:	c4 16       	cp	r12, r20
    319e:	d5 06       	cpc	r13, r21
    31a0:	e6 06       	cpc	r14, r22
    31a2:	f7 06       	cpc	r15, r23
    31a4:	21 f0       	breq	.+8      	; 0x31ae <f_lseek+0x30c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    31a6:	c6 8a       	std	Z+22, r12	; 0x16
    31a8:	d7 8a       	std	Z+23, r13	; 0x17
    31aa:	e0 8e       	std	Z+24, r14	; 0x18
    31ac:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    31ae:	ed 81       	ldd	r30, Y+5	; 0x05
    31b0:	fe 81       	ldd	r31, Y+6	; 0x06
    31b2:	42 85       	ldd	r20, Z+10	; 0x0a
    31b4:	53 85       	ldd	r21, Z+11	; 0x0b
    31b6:	64 85       	ldd	r22, Z+12	; 0x0c
    31b8:	75 85       	ldd	r23, Z+13	; 0x0d
    31ba:	48 17       	cp	r20, r24
    31bc:	59 07       	cpc	r21, r25
    31be:	6a 07       	cpc	r22, r26
    31c0:	7b 07       	cpc	r23, r27
    31c2:	50 f4       	brcc	.+20     	; 0x31d8 <f_lseek+0x336>
			fp->fsize = fp->fptr;
    31c4:	82 87       	std	Z+10, r24	; 0x0a
    31c6:	93 87       	std	Z+11, r25	; 0x0b
    31c8:	a4 87       	std	Z+12, r26	; 0x0c
    31ca:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    31cc:	84 81       	ldd	r24, Z+4	; 0x04
    31ce:	80 62       	ori	r24, 0x20	; 32
    31d0:	84 83       	std	Z+4, r24	; 0x04
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <f_lseek+0x336>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	06 c0       	rjmp	.+12     	; 0x31e4 <f_lseek+0x342>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	04 c0       	rjmp	.+8      	; 0x31e4 <f_lseek+0x342>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	dc 01       	movw	r26, r24
    31e2:	e5 cf       	rjmp	.-54     	; 0x31ae <f_lseek+0x30c>
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    31e4:	26 96       	adiw	r28, 0x06	; 6
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	df 90       	pop	r13
    31fe:	cf 90       	pop	r12
    3200:	bf 90       	pop	r11
    3202:	af 90       	pop	r10
    3204:	9f 90       	pop	r9
    3206:	8f 90       	pop	r8
    3208:	7f 90       	pop	r7
    320a:	6f 90       	pop	r6
    320c:	5f 90       	pop	r5
    320e:	4f 90       	pop	r4
    3210:	08 95       	ret

00003212 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    3212:	98 2f       	mov	r25, r24
    3214:	97 30       	cpi	r25, 0x07	; 7
    3216:	68 f5       	brcc	.+90     	; 0x3272 <Endpoint_ConfigureEndpoint_Prv+0x60>
    3218:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    321c:	98 17       	cp	r25, r24
    321e:	39 f0       	breq	.+14     	; 0x322e <Endpoint_ConfigureEndpoint_Prv+0x1c>
    3220:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3224:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3228:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <Endpoint_ConfigureEndpoint_Prv+0x22>
    322e:	24 2f       	mov	r18, r20
    3230:	76 2f       	mov	r23, r22
    3232:	50 e0       	ldi	r21, 0x00	; 0
    3234:	21 fd       	sbrc	r18, 1
    3236:	02 c0       	rjmp	.+4      	; 0x323c <Endpoint_ConfigureEndpoint_Prv+0x2a>
    3238:	9f 5f       	subi	r25, 0xFF	; 255
    323a:	ec cf       	rjmp	.-40     	; 0x3214 <Endpoint_ConfigureEndpoint_Prv+0x2>
    323c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3240:	3e 7f       	andi	r19, 0xFE	; 254
    3242:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3246:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    324a:	3d 7f       	andi	r19, 0xFD	; 253
    324c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3250:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3254:	31 60       	ori	r19, 0x01	; 1
    3256:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    325a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    325e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3262:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3266:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    326a:	27 fd       	sbrc	r18, 7
    326c:	e5 cf       	rjmp	.-54     	; 0x3238 <Endpoint_ConfigureEndpoint_Prv+0x26>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	08 95       	ret
    3272:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	08 95       	ret

0000327a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    327a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    327e:	87 ff       	sbrs	r24, 7
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3282:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    3286:	82 fd       	sbrc	r24, 2
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    328a:	8e b3       	in	r24, 0x1e	; 30
    328c:	81 11       	cpse	r24, r1
    328e:	f9 cf       	rjmp	.-14     	; 0x3282 <Endpoint_ClearStatusStage+0x8>
    3290:	10 c0       	rjmp	.+32     	; 0x32b2 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3292:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3296:	8b 77       	andi	r24, 0x7B	; 123
    3298:	0a c0       	rjmp	.+20     	; 0x32ae <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    329a:	8e b3       	in	r24, 0x1e	; 30
    329c:	88 23       	and	r24, r24
    329e:	49 f0       	breq	.+18     	; 0x32b2 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    32a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    32a4:	80 ff       	sbrs	r24, 0
    32a6:	f9 cf       	rjmp	.-14     	; 0x329a <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    32a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32ac:	8e 77       	andi	r24, 0x7E	; 126
    32ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32b2:	08 95       	ret

000032b4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    32b4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    32b8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    32bc:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    32be:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    32c2:	84 2f       	mov	r24, r20
    32c4:	81 70       	andi	r24, 0x01	; 1
    32c6:	40 ff       	sbrs	r20, 0
    32c8:	22 c0       	rjmp	.+68     	; 0x330e <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    32ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    32ce:	80 fd       	sbrc	r24, 0
    32d0:	1c c0       	rjmp	.+56     	; 0x330a <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    32d2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    32d4:	88 23       	and	r24, r24
    32d6:	99 f0       	breq	.+38     	; 0x32fe <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    32d8:	85 30       	cpi	r24, 0x05	; 5
    32da:	99 f0       	breq	.+38     	; 0x3302 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    32dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    32e0:	85 fd       	sbrc	r24, 5
    32e2:	11 c0       	rjmp	.+34     	; 0x3306 <Endpoint_WaitUntilReady+0x52>
    32e4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    32e8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    32ec:	24 17       	cp	r18, r20
    32ee:	35 07       	cpc	r19, r21
    32f0:	31 f3       	breq	.-52     	; 0x32be <Endpoint_WaitUntilReady+0xa>
    32f2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    32f4:	11 f0       	breq	.+4      	; 0x32fa <Endpoint_WaitUntilReady+0x46>
    32f6:	9a 01       	movw	r18, r20
    32f8:	e2 cf       	rjmp	.-60     	; 0x32be <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    32fa:	84 e0       	ldi	r24, 0x04	; 4
    32fc:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    330e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3312:	42 ff       	sbrs	r20, 2
    3314:	de cf       	rjmp	.-68     	; 0x32d2 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3316:	08 95       	ret

00003318 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3320:	48 d0       	rcall	.+144    	; 0x33b2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3322:	4f d0       	rcall	.+158    	; 0x33c2 <USB_INT_ClearAllInterrupts>
    3324:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3326:	d0 e0       	ldi	r29, 0x00	; 0
    3328:	88 81       	ld	r24, Y
    332a:	8f 77       	andi	r24, 0x7F	; 127
    332c:	88 83       	st	Y, r24
    332e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    3330:	80 68       	ori	r24, 0x80	; 128
    3332:	88 83       	st	Y, r24
    3334:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3336:	8f 7d       	andi	r24, 0xDF	; 223
    3338:	88 83       	st	Y, r24
    333a:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 68       	ori	r24, 0x80	; 128
    3342:	80 83       	st	Z, r24
    3344:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3346:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3348:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    334c:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3350:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3354:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3356:	10 e0       	ldi	r17, 0x00	; 0
    3358:	f8 01       	movw	r30, r16
    335a:	80 81       	ld	r24, Z
    335c:	8b 7f       	andi	r24, 0xFB	; 251
    335e:	80 83       	st	Z, r24
    3360:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3362:	81 60       	ori	r24, 0x01	; 1
    3364:	88 83       	st	Y, r24
    3366:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	52 df       	rcall	.-348    	; 0x3212 <Endpoint_ConfigureEndpoint_Prv>
    336e:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	8e 7f       	andi	r24, 0xFE	; 254
    3376:	80 83       	st	Z, r24
    3378:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	81 60       	ori	r24, 0x01	; 1
    3380:	80 83       	st	Z, r24
    3382:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3384:	88 60       	ori	r24, 0x08	; 8
    3386:	80 83       	st	Z, r24
    3388:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    338a:	80 81       	ld	r24, Z
    338c:	8e 7f       	andi	r24, 0xFE	; 254
    338e:	80 83       	st	Z, r24
    3390:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    3392:	80 61       	ori	r24, 0x10	; 16
    3394:	88 83       	st	Y, r24
    3396:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	08 95       	ret

000033a0 <USB_Init>:
    33a0:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	81 60       	ori	r24, 0x01	; 1
    33a8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <USB_IsInitialized>

	USB_ResetInterface();
    33b0:	b3 cf       	rjmp	.-154    	; 0x3318 <USB_ResetInterface>

000033b2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    33b2:	e8 ed       	ldi	r30, 0xD8	; 216
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	8c 7f       	andi	r24, 0xFC	; 252
    33ba:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    33bc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    33c0:	08 95       	ret

000033c2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    33c2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    33c6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    33ca:	08 95       	ret

000033cc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    33cc:	1f 92       	push	r1
    33ce:	0f 92       	push	r0
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	0f 92       	push	r0
    33d4:	11 24       	eor	r1, r1
    33d6:	0b b6       	in	r0, 0x3b	; 59
    33d8:	0f 92       	push	r0
    33da:	2f 93       	push	r18
    33dc:	3f 93       	push	r19
    33de:	4f 93       	push	r20
    33e0:	5f 93       	push	r21
    33e2:	6f 93       	push	r22
    33e4:	7f 93       	push	r23
    33e6:	8f 93       	push	r24
    33e8:	9f 93       	push	r25
    33ea:	af 93       	push	r26
    33ec:	bf 93       	push	r27
    33ee:	ef 93       	push	r30
    33f0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    33f2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    33f6:	82 ff       	sbrs	r24, 2
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    33fa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    33fe:	82 ff       	sbrs	r24, 2
    3400:	06 c0       	rjmp	.+12     	; 0x340e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3402:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3406:	8b 7f       	andi	r24, 0xFB	; 251
    3408:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    340c:	46 d4       	rcall	.+2188   	; 0x3c9a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    340e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3412:	80 ff       	sbrs	r24, 0
    3414:	1d c0       	rjmp	.+58     	; 0x3450 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3416:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    341a:	80 ff       	sbrs	r24, 0
    341c:	19 c0       	rjmp	.+50     	; 0x3450 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    341e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    3422:	8e 7f       	andi	r24, 0xFE	; 254
    3424:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3428:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    342c:	80 ff       	sbrs	r24, 0
    342e:	0c c0       	rjmp	.+24     	; 0x3448 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3430:	8c e0       	ldi	r24, 0x0C	; 12
    3432:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3434:	8e e0       	ldi	r24, 0x0E	; 14
    3436:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3438:	09 b4       	in	r0, 0x29	; 41
    343a:	00 fe       	sbrs	r0, 0
    343c:	fd cf       	rjmp	.-6      	; 0x3438 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    3442:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Device_Connect>
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3448:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    344a:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    344c:	0e 94 b8 02 	call	0x570	; 0x570 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3450:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3454:	80 ff       	sbrs	r24, 0
    3456:	17 c0       	rjmp	.+46     	; 0x3486 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3458:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    345c:	80 ff       	sbrs	r24, 0
    345e:	13 c0       	rjmp	.+38     	; 0x3486 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3460:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3464:	8e 7f       	andi	r24, 0xFE	; 254
    3466:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    346a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    346e:	80 61       	ori	r24, 0x10	; 16
    3470:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    3474:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3478:	80 62       	ori	r24, 0x20	; 32
    347a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    347e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3480:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    3482:	8e bb       	out	0x1e, r24	; 30
    3484:	0a d4       	rcall	.+2068   	; 0x3c9a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3486:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    348a:	84 ff       	sbrs	r24, 4
    348c:	2c c0       	rjmp	.+88     	; 0x34e6 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    348e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3492:	84 ff       	sbrs	r24, 4
    3494:	28 c0       	rjmp	.+80     	; 0x34e6 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3496:	8c e0       	ldi	r24, 0x0C	; 12
    3498:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    349a:	8e e0       	ldi	r24, 0x0E	; 14
    349c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    349e:	09 b4       	in	r0, 0x29	; 41
    34a0:	00 fe       	sbrs	r0, 0
    34a2:	fd cf       	rjmp	.-6      	; 0x349e <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    34a4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    34a8:	8f 7d       	andi	r24, 0xDF	; 223
    34aa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    34ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    34b2:	8f 7e       	andi	r24, 0xEF	; 239
    34b4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    34b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    34bc:	8f 7e       	andi	r24, 0xEF	; 239
    34be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    34c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    34c6:	81 60       	ori	r24, 0x01	; 1
    34c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    34cc:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <USB_Device_ConfigurationNumber>
    34d0:	81 11       	cpse	r24, r1
    34d2:	06 c0       	rjmp	.+12     	; 0x34e0 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    34d4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    34d8:	87 fd       	sbrc	r24, 7
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <__vector_10+0x114>
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <__vector_10+0x116>
    34e0:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    34e2:	8e bb       	out	0x1e, r24	; 30
    34e4:	da d3       	rcall	.+1972   	; 0x3c9a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    34e6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    34ea:	83 ff       	sbrs	r24, 3
    34ec:	26 c0       	rjmp	.+76     	; 0x353a <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    34ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    34f2:	83 ff       	sbrs	r24, 3
    34f4:	22 c0       	rjmp	.+68     	; 0x353a <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    34f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    34fa:	87 7f       	andi	r24, 0xF7	; 247
    34fc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    3504:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3508:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    350c:	8e 7f       	andi	r24, 0xFE	; 254
    350e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3512:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3516:	8e 7f       	andi	r24, 0xFE	; 254
    3518:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    351c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3520:	80 61       	ori	r24, 0x10	; 16
    3522:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3526:	42 e0       	ldi	r20, 0x02	; 2
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	72 de       	rcall	.-796    	; 0x3212 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    352e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    3532:	88 60       	ori	r24, 0x08	; 8
    3534:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3538:	b0 d3       	rcall	.+1888   	; 0x3c9a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	bf 91       	pop	r27
    3540:	af 91       	pop	r26
    3542:	9f 91       	pop	r25
    3544:	8f 91       	pop	r24
    3546:	7f 91       	pop	r23
    3548:	6f 91       	pop	r22
    354a:	5f 91       	pop	r21
    354c:	4f 91       	pop	r20
    354e:	3f 91       	pop	r19
    3550:	2f 91       	pop	r18
    3552:	0f 90       	pop	r0
    3554:	0b be       	out	0x3b, r0	; 59
    3556:	0f 90       	pop	r0
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	0f 90       	pop	r0
    355c:	1f 90       	pop	r1
    355e:	18 95       	reti

00003560 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3560:	1f 92       	push	r1
    3562:	0f 92       	push	r0
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	0f 92       	push	r0
    3568:	11 24       	eor	r1, r1
    356a:	0b b6       	in	r0, 0x3b	; 59
    356c:	0f 92       	push	r0
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	2f 93       	push	r18
    3576:	3f 93       	push	r19
    3578:	4f 93       	push	r20
    357a:	5f 93       	push	r21
    357c:	6f 93       	push	r22
    357e:	7f 93       	push	r23
    3580:	8f 93       	push	r24
    3582:	9f 93       	push	r25
    3584:	af 93       	push	r26
    3586:	bf 93       	push	r27
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	ef 93       	push	r30
    358e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    3590:	c9 ee       	ldi	r28, 0xE9	; 233
    3592:	d0 e0       	ldi	r29, 0x00	; 0
    3594:	88 81       	ld	r24, Y
    3596:	87 70       	andi	r24, 0x07	; 7
    3598:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    359a:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    359c:	00 ef       	ldi	r16, 0xF0	; 240
    359e:	10 e0       	ldi	r17, 0x00	; 0
    35a0:	f8 01       	movw	r30, r16
    35a2:	80 81       	ld	r24, Z
    35a4:	87 7f       	andi	r24, 0xF7	; 247
    35a6:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    35a8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    35aa:	26 d2       	rcall	.+1100   	; 0x39f8 <USB_Device_ProcessControlRequest>
    35ac:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    35ae:	f8 01       	movw	r30, r16
    35b0:	80 81       	ld	r24, Z
    35b2:	88 60       	ori	r24, 0x08	; 8
    35b4:	80 83       	st	Z, r24
    35b6:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    35b8:	ff 91       	pop	r31
    35ba:	ef 91       	pop	r30
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	bf 91       	pop	r27
    35c2:	af 91       	pop	r26
    35c4:	9f 91       	pop	r25
    35c6:	8f 91       	pop	r24
    35c8:	7f 91       	pop	r23
    35ca:	6f 91       	pop	r22
    35cc:	5f 91       	pop	r21
    35ce:	4f 91       	pop	r20
    35d0:	3f 91       	pop	r19
    35d2:	2f 91       	pop	r18
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	ff 90       	pop	r15
    35da:	0f 90       	pop	r0
    35dc:	0b be       	out	0x3b, r0	; 59
    35de:	0f 90       	pop	r0
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	0f 90       	pop	r0
    35e4:	1f 90       	pop	r1
    35e6:	18 95       	reti

000035e8 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	ec 01       	movw	r28, r24
    35f6:	8b 01       	movw	r16, r22
    35f8:	5d de       	rcall	.-838    	; 0x32b4 <Endpoint_WaitUntilReady>
    35fa:	81 11       	cpse	r24, r1
    35fc:	2d c0       	rjmp	.+90     	; 0x3658 <Endpoint_Null_Stream+0x70>
    35fe:	01 15       	cp	r16, r1
    3600:	11 05       	cpc	r17, r1
    3602:	29 f0       	breq	.+10     	; 0x360e <Endpoint_Null_Stream+0x26>
    3604:	f8 01       	movw	r30, r16
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	c8 1b       	sub	r28, r24
    360c:	d9 0b       	sbc	r29, r25
    360e:	e1 2c       	mov	r14, r1
    3610:	f1 2c       	mov	r15, r1
    3612:	20 97       	sbiw	r28, 0x00	; 0
    3614:	01 f1       	breq	.+64     	; 0x3656 <Endpoint_Null_Stream+0x6e>
    3616:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    361a:	85 fd       	sbrc	r24, 5
    361c:	15 c0       	rjmp	.+42     	; 0x3648 <Endpoint_Null_Stream+0x60>
    361e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3622:	8e 77       	andi	r24, 0x7E	; 126
    3624:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3628:	01 15       	cp	r16, r1
    362a:	11 05       	cpc	r17, r1
    362c:	49 f0       	breq	.+18     	; 0x3640 <Endpoint_Null_Stream+0x58>
    362e:	f8 01       	movw	r30, r16
    3630:	80 81       	ld	r24, Z
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	e8 0e       	add	r14, r24
    3636:	f9 1e       	adc	r15, r25
    3638:	f1 82       	std	Z+1, r15	; 0x01
    363a:	e0 82       	st	Z, r14
    363c:	85 e0       	ldi	r24, 0x05	; 5
    363e:	0c c0       	rjmp	.+24     	; 0x3658 <Endpoint_Null_Stream+0x70>
    3640:	39 de       	rcall	.-910    	; 0x32b4 <Endpoint_WaitUntilReady>
    3642:	88 23       	and	r24, r24
    3644:	31 f3       	breq	.-52     	; 0x3612 <Endpoint_Null_Stream+0x2a>
    3646:	08 c0       	rjmp	.+16     	; 0x3658 <Endpoint_Null_Stream+0x70>
    3648:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    364c:	21 97       	sbiw	r28, 0x01	; 1
    364e:	ff ef       	ldi	r31, 0xFF	; 255
    3650:	ef 1a       	sub	r14, r31
    3652:	ff 0a       	sbc	r15, r31
    3654:	de cf       	rjmp	.-68     	; 0x3612 <Endpoint_Null_Stream+0x2a>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	08 95       	ret

00003666 <Endpoint_Write_Stream_LE>:
    3666:	cf 92       	push	r12
    3668:	df 92       	push	r13
    366a:	ef 92       	push	r14
    366c:	ff 92       	push	r15
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	ec 01       	movw	r28, r24
    3678:	8b 01       	movw	r16, r22
    367a:	7a 01       	movw	r14, r20
    367c:	1b de       	rcall	.-970    	; 0x32b4 <Endpoint_WaitUntilReady>
    367e:	81 11       	cpse	r24, r1
    3680:	32 c0       	rjmp	.+100    	; 0x36e6 <Endpoint_Write_Stream_LE+0x80>
    3682:	e1 14       	cp	r14, r1
    3684:	f1 04       	cpc	r15, r1
    3686:	39 f0       	breq	.+14     	; 0x3696 <Endpoint_Write_Stream_LE+0x30>
    3688:	f7 01       	movw	r30, r14
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	08 1b       	sub	r16, r24
    3690:	19 0b       	sbc	r17, r25
    3692:	c8 0f       	add	r28, r24
    3694:	d9 1f       	adc	r29, r25
    3696:	c1 2c       	mov	r12, r1
    3698:	d1 2c       	mov	r13, r1
    369a:	01 15       	cp	r16, r1
    369c:	11 05       	cpc	r17, r1
    369e:	11 f1       	breq	.+68     	; 0x36e4 <Endpoint_Write_Stream_LE+0x7e>
    36a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36a4:	85 fd       	sbrc	r24, 5
    36a6:	15 c0       	rjmp	.+42     	; 0x36d2 <Endpoint_Write_Stream_LE+0x6c>
    36a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36ac:	8e 77       	andi	r24, 0x7E	; 126
    36ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36b2:	e1 14       	cp	r14, r1
    36b4:	f1 04       	cpc	r15, r1
    36b6:	49 f0       	breq	.+18     	; 0x36ca <Endpoint_Write_Stream_LE+0x64>
    36b8:	f7 01       	movw	r30, r14
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	c8 0e       	add	r12, r24
    36c0:	d9 1e       	adc	r13, r25
    36c2:	d1 82       	std	Z+1, r13	; 0x01
    36c4:	c0 82       	st	Z, r12
    36c6:	85 e0       	ldi	r24, 0x05	; 5
    36c8:	0e c0       	rjmp	.+28     	; 0x36e6 <Endpoint_Write_Stream_LE+0x80>
    36ca:	f4 dd       	rcall	.-1048   	; 0x32b4 <Endpoint_WaitUntilReady>
    36cc:	88 23       	and	r24, r24
    36ce:	29 f3       	breq	.-54     	; 0x369a <Endpoint_Write_Stream_LE+0x34>
    36d0:	0a c0       	rjmp	.+20     	; 0x36e6 <Endpoint_Write_Stream_LE+0x80>
    36d2:	89 91       	ld	r24, Y+
    36d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    36d8:	01 50       	subi	r16, 0x01	; 1
    36da:	11 09       	sbc	r17, r1
    36dc:	ff ef       	ldi	r31, 0xFF	; 255
    36de:	cf 1a       	sub	r12, r31
    36e0:	df 0a       	sbc	r13, r31
    36e2:	db cf       	rjmp	.-74     	; 0x369a <Endpoint_Write_Stream_LE+0x34>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	ef 90       	pop	r14
    36f2:	df 90       	pop	r13
    36f4:	cf 90       	pop	r12
    36f6:	08 95       	ret

000036f8 <Endpoint_Write_Stream_BE>:
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	ec 01       	movw	r28, r24
    370a:	8b 01       	movw	r16, r22
    370c:	7a 01       	movw	r14, r20
    370e:	d2 dd       	rcall	.-1116   	; 0x32b4 <Endpoint_WaitUntilReady>
    3710:	81 11       	cpse	r24, r1
    3712:	37 c0       	rjmp	.+110    	; 0x3782 <Endpoint_Write_Stream_BE+0x8a>
    3714:	c8 01       	movw	r24, r16
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	c8 0f       	add	r28, r24
    371a:	d9 1f       	adc	r29, r25
    371c:	e1 14       	cp	r14, r1
    371e:	f1 04       	cpc	r15, r1
    3720:	39 f0       	breq	.+14     	; 0x3730 <Endpoint_Write_Stream_BE+0x38>
    3722:	f7 01       	movw	r30, r14
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	08 1b       	sub	r16, r24
    372a:	19 0b       	sbc	r17, r25
    372c:	c8 1b       	sub	r28, r24
    372e:	d9 0b       	sbc	r29, r25
    3730:	c1 2c       	mov	r12, r1
    3732:	d1 2c       	mov	r13, r1
    3734:	01 15       	cp	r16, r1
    3736:	11 05       	cpc	r17, r1
    3738:	19 f1       	breq	.+70     	; 0x3780 <Endpoint_Write_Stream_BE+0x88>
    373a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    373e:	85 fd       	sbrc	r24, 5
    3740:	15 c0       	rjmp	.+42     	; 0x376c <Endpoint_Write_Stream_BE+0x74>
    3742:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3746:	8e 77       	andi	r24, 0x7E	; 126
    3748:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    374c:	e1 14       	cp	r14, r1
    374e:	f1 04       	cpc	r15, r1
    3750:	49 f0       	breq	.+18     	; 0x3764 <Endpoint_Write_Stream_BE+0x6c>
    3752:	f7 01       	movw	r30, r14
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	c8 0e       	add	r12, r24
    375a:	d9 1e       	adc	r13, r25
    375c:	d1 82       	std	Z+1, r13	; 0x01
    375e:	c0 82       	st	Z, r12
    3760:	85 e0       	ldi	r24, 0x05	; 5
    3762:	0f c0       	rjmp	.+30     	; 0x3782 <Endpoint_Write_Stream_BE+0x8a>
    3764:	a7 dd       	rcall	.-1202   	; 0x32b4 <Endpoint_WaitUntilReady>
    3766:	88 23       	and	r24, r24
    3768:	29 f3       	breq	.-54     	; 0x3734 <Endpoint_Write_Stream_BE+0x3c>
    376a:	0b c0       	rjmp	.+22     	; 0x3782 <Endpoint_Write_Stream_BE+0x8a>
    376c:	88 81       	ld	r24, Y
    376e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3772:	21 97       	sbiw	r28, 0x01	; 1
    3774:	01 50       	subi	r16, 0x01	; 1
    3776:	11 09       	sbc	r17, r1
    3778:	ff ef       	ldi	r31, 0xFF	; 255
    377a:	cf 1a       	sub	r12, r31
    377c:	df 0a       	sbc	r13, r31
    377e:	da cf       	rjmp	.-76     	; 0x3734 <Endpoint_Write_Stream_BE+0x3c>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	08 95       	ret

00003794 <Endpoint_Read_Stream_LE>:
    3794:	cf 92       	push	r12
    3796:	df 92       	push	r13
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	ec 01       	movw	r28, r24
    37a6:	8b 01       	movw	r16, r22
    37a8:	7a 01       	movw	r14, r20
    37aa:	84 dd       	rcall	.-1272   	; 0x32b4 <Endpoint_WaitUntilReady>
    37ac:	81 11       	cpse	r24, r1
    37ae:	32 c0       	rjmp	.+100    	; 0x3814 <Endpoint_Read_Stream_LE+0x80>
    37b0:	e1 14       	cp	r14, r1
    37b2:	f1 04       	cpc	r15, r1
    37b4:	39 f0       	breq	.+14     	; 0x37c4 <Endpoint_Read_Stream_LE+0x30>
    37b6:	f7 01       	movw	r30, r14
    37b8:	80 81       	ld	r24, Z
    37ba:	91 81       	ldd	r25, Z+1	; 0x01
    37bc:	08 1b       	sub	r16, r24
    37be:	19 0b       	sbc	r17, r25
    37c0:	c8 0f       	add	r28, r24
    37c2:	d9 1f       	adc	r29, r25
    37c4:	c1 2c       	mov	r12, r1
    37c6:	d1 2c       	mov	r13, r1
    37c8:	01 15       	cp	r16, r1
    37ca:	11 05       	cpc	r17, r1
    37cc:	11 f1       	breq	.+68     	; 0x3812 <Endpoint_Read_Stream_LE+0x7e>
    37ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    37d2:	85 fd       	sbrc	r24, 5
    37d4:	15 c0       	rjmp	.+42     	; 0x3800 <Endpoint_Read_Stream_LE+0x6c>
    37d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    37da:	8b 77       	andi	r24, 0x7B	; 123
    37dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    37e0:	e1 14       	cp	r14, r1
    37e2:	f1 04       	cpc	r15, r1
    37e4:	49 f0       	breq	.+18     	; 0x37f8 <Endpoint_Read_Stream_LE+0x64>
    37e6:	f7 01       	movw	r30, r14
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	c8 0e       	add	r12, r24
    37ee:	d9 1e       	adc	r13, r25
    37f0:	d1 82       	std	Z+1, r13	; 0x01
    37f2:	c0 82       	st	Z, r12
    37f4:	85 e0       	ldi	r24, 0x05	; 5
    37f6:	0e c0       	rjmp	.+28     	; 0x3814 <Endpoint_Read_Stream_LE+0x80>
    37f8:	5d dd       	rcall	.-1350   	; 0x32b4 <Endpoint_WaitUntilReady>
    37fa:	88 23       	and	r24, r24
    37fc:	29 f3       	breq	.-54     	; 0x37c8 <Endpoint_Read_Stream_LE+0x34>
    37fe:	0a c0       	rjmp	.+20     	; 0x3814 <Endpoint_Read_Stream_LE+0x80>
    3800:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3804:	89 93       	st	Y+, r24
    3806:	01 50       	subi	r16, 0x01	; 1
    3808:	11 09       	sbc	r17, r1
    380a:	ff ef       	ldi	r31, 0xFF	; 255
    380c:	cf 1a       	sub	r12, r31
    380e:	df 0a       	sbc	r13, r31
    3810:	db cf       	rjmp	.-74     	; 0x37c8 <Endpoint_Read_Stream_LE+0x34>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ff 90       	pop	r15
    381e:	ef 90       	pop	r14
    3820:	df 90       	pop	r13
    3822:	cf 90       	pop	r12
    3824:	08 95       	ret

00003826 <Endpoint_Write_Control_Stream_LE>:
    3826:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <USB_ControlRequest+0x6>
    382a:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <USB_ControlRequest+0x7>
    382e:	26 17       	cp	r18, r22
    3830:	37 07       	cpc	r19, r23
    3832:	48 f0       	brcs	.+18     	; 0x3846 <Endpoint_Write_Control_Stream_LE+0x20>
    3834:	61 15       	cp	r22, r1
    3836:	71 05       	cpc	r23, r1
    3838:	39 f4       	brne	.+14     	; 0x3848 <Endpoint_Write_Control_Stream_LE+0x22>
    383a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    383e:	2e 77       	andi	r18, 0x7E	; 126
    3840:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3844:	01 c0       	rjmp	.+2      	; 0x3848 <Endpoint_Write_Control_Stream_LE+0x22>
    3846:	b9 01       	movw	r22, r18
    3848:	fc 01       	movw	r30, r24
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	61 15       	cp	r22, r1
    384e:	71 05       	cpc	r23, r1
    3850:	61 f1       	breq	.+88     	; 0x38aa <Endpoint_Write_Control_Stream_LE+0x84>
    3852:	8e b3       	in	r24, 0x1e	; 30
    3854:	88 23       	and	r24, r24
    3856:	c9 f1       	breq	.+114    	; 0x38ca <Endpoint_Write_Control_Stream_LE+0xa4>
    3858:	85 30       	cpi	r24, 0x05	; 5
    385a:	c9 f1       	breq	.+114    	; 0x38ce <Endpoint_Write_Control_Stream_LE+0xa8>
    385c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3860:	83 fd       	sbrc	r24, 3
    3862:	31 c0       	rjmp	.+98     	; 0x38c6 <Endpoint_Write_Control_Stream_LE+0xa0>
    3864:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3868:	82 fd       	sbrc	r24, 2
    386a:	27 c0       	rjmp	.+78     	; 0x38ba <Endpoint_Write_Control_Stream_LE+0x94>
    386c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3870:	80 ff       	sbrs	r24, 0
    3872:	ec cf       	rjmp	.-40     	; 0x384c <Endpoint_Write_Control_Stream_LE+0x26>
    3874:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3878:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    387c:	61 15       	cp	r22, r1
    387e:	71 05       	cpc	r23, r1
    3880:	51 f0       	breq	.+20     	; 0x3896 <Endpoint_Write_Control_Stream_LE+0x70>
    3882:	88 30       	cpi	r24, 0x08	; 8
    3884:	91 05       	cpc	r25, r1
    3886:	38 f4       	brcc	.+14     	; 0x3896 <Endpoint_Write_Control_Stream_LE+0x70>
    3888:	21 91       	ld	r18, Z+
    388a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    388e:	61 50       	subi	r22, 0x01	; 1
    3890:	71 09       	sbc	r23, r1
    3892:	01 96       	adiw	r24, 0x01	; 1
    3894:	f3 cf       	rjmp	.-26     	; 0x387c <Endpoint_Write_Control_Stream_LE+0x56>
    3896:	21 e0       	ldi	r18, 0x01	; 1
    3898:	08 97       	sbiw	r24, 0x08	; 8
    389a:	09 f0       	breq	.+2      	; 0x389e <Endpoint_Write_Control_Stream_LE+0x78>
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38a2:	8e 77       	andi	r24, 0x7E	; 126
    38a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38a8:	d1 cf       	rjmp	.-94     	; 0x384c <Endpoint_Write_Control_Stream_LE+0x26>
    38aa:	21 11       	cpse	r18, r1
    38ac:	d2 cf       	rjmp	.-92     	; 0x3852 <Endpoint_Write_Control_Stream_LE+0x2c>
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <Endpoint_Write_Control_Stream_LE+0x94>
    38b0:	8e b3       	in	r24, 0x1e	; 30
    38b2:	88 23       	and	r24, r24
    38b4:	51 f0       	breq	.+20     	; 0x38ca <Endpoint_Write_Control_Stream_LE+0xa4>
    38b6:	85 30       	cpi	r24, 0x05	; 5
    38b8:	51 f0       	breq	.+20     	; 0x38ce <Endpoint_Write_Control_Stream_LE+0xa8>
    38ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38be:	82 ff       	sbrs	r24, 2
    38c0:	f7 cf       	rjmp	.-18     	; 0x38b0 <Endpoint_Write_Control_Stream_LE+0x8a>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	08 95       	ret
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	08 95       	ret
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	08 95       	ret
    38ce:	83 e0       	ldi	r24, 0x03	; 3
    38d0:	08 95       	ret

000038d2 <Endpoint_Read_Control_Stream_LE>:
    38d2:	61 15       	cp	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	29 f4       	brne	.+10     	; 0x38e2 <Endpoint_Read_Control_Stream_LE+0x10>
    38d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38dc:	2b 77       	andi	r18, 0x7B	; 123
    38de:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38e2:	fc 01       	movw	r30, r24
    38e4:	61 15       	cp	r22, r1
    38e6:	71 05       	cpc	r23, r1
    38e8:	21 f1       	breq	.+72     	; 0x3932 <Endpoint_Read_Control_Stream_LE+0x60>
    38ea:	8e b3       	in	r24, 0x1e	; 30
    38ec:	88 23       	and	r24, r24
    38ee:	49 f1       	breq	.+82     	; 0x3942 <Endpoint_Read_Control_Stream_LE+0x70>
    38f0:	85 30       	cpi	r24, 0x05	; 5
    38f2:	49 f1       	breq	.+82     	; 0x3946 <Endpoint_Read_Control_Stream_LE+0x74>
    38f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38f8:	83 fd       	sbrc	r24, 3
    38fa:	21 c0       	rjmp	.+66     	; 0x393e <Endpoint_Read_Control_Stream_LE+0x6c>
    38fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3900:	82 ff       	sbrs	r24, 2
    3902:	f0 cf       	rjmp	.-32     	; 0x38e4 <Endpoint_Read_Control_Stream_LE+0x12>
    3904:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3908:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    390c:	89 2b       	or	r24, r25
    390e:	31 f0       	breq	.+12     	; 0x391c <Endpoint_Read_Control_Stream_LE+0x4a>
    3910:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3914:	81 93       	st	Z+, r24
    3916:	61 50       	subi	r22, 0x01	; 1
    3918:	71 09       	sbc	r23, r1
    391a:	a1 f7       	brne	.-24     	; 0x3904 <Endpoint_Read_Control_Stream_LE+0x32>
    391c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3920:	8b 77       	andi	r24, 0x7B	; 123
    3922:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3926:	de cf       	rjmp	.-68     	; 0x38e4 <Endpoint_Read_Control_Stream_LE+0x12>
    3928:	8e b3       	in	r24, 0x1e	; 30
    392a:	88 23       	and	r24, r24
    392c:	51 f0       	breq	.+20     	; 0x3942 <Endpoint_Read_Control_Stream_LE+0x70>
    392e:	85 30       	cpi	r24, 0x05	; 5
    3930:	51 f0       	breq	.+20     	; 0x3946 <Endpoint_Read_Control_Stream_LE+0x74>
    3932:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3936:	80 ff       	sbrs	r24, 0
    3938:	f7 cf       	rjmp	.-18     	; 0x3928 <Endpoint_Read_Control_Stream_LE+0x56>
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	08 95       	ret
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	08 95       	ret
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	08 95       	ret
    3946:	83 e0       	ldi	r24, 0x03	; 3
    3948:	08 95       	ret

0000394a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    394a:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <USB_ControlRequest+0x6>
    394e:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <USB_ControlRequest+0x7>
    3952:	26 17       	cp	r18, r22
    3954:	37 07       	cpc	r19, r23
    3956:	48 f0       	brcs	.+18     	; 0x396a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3958:	61 15       	cp	r22, r1
    395a:	71 05       	cpc	r23, r1
    395c:	39 f4       	brne	.+14     	; 0x396c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    395e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3962:	2e 77       	andi	r18, 0x7E	; 126
    3964:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3968:	01 c0       	rjmp	.+2      	; 0x396c <Endpoint_Write_Control_PStream_LE+0x22>
    396a:	b9 01       	movw	r22, r18
    396c:	fc 01       	movw	r30, r24
    396e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3970:	61 15       	cp	r22, r1
    3972:	71 05       	cpc	r23, r1
    3974:	69 f1       	breq	.+90     	; 0x39d0 <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3976:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3978:	88 23       	and	r24, r24
    397a:	d1 f1       	breq	.+116    	; 0x39f0 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    397c:	85 30       	cpi	r24, 0x05	; 5
    397e:	d1 f1       	breq	.+116    	; 0x39f4 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3984:	83 fd       	sbrc	r24, 3
    3986:	32 c0       	rjmp	.+100    	; 0x39ec <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3988:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    398c:	82 fd       	sbrc	r24, 2
    398e:	28 c0       	rjmp	.+80     	; 0x39e0 <Endpoint_Write_Control_PStream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3990:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    3994:	80 ff       	sbrs	r24, 0
    3996:	ec cf       	rjmp	.-40     	; 0x3970 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    3998:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    399c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    39a0:	61 15       	cp	r22, r1
    39a2:	71 05       	cpc	r23, r1
    39a4:	59 f0       	breq	.+22     	; 0x39bc <Endpoint_Write_Control_PStream_LE+0x72>
    39a6:	88 30       	cpi	r24, 0x08	; 8
    39a8:	91 05       	cpc	r25, r1
    39aa:	40 f4       	brcc	.+16     	; 0x39bc <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    39ac:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    39ae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    39b2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    39b4:	61 50       	subi	r22, 0x01	; 1
    39b6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	f2 cf       	rjmp	.-28     	; 0x39a0 <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    39bc:	21 e0       	ldi	r18, 0x01	; 1
    39be:	08 97       	sbiw	r24, 0x08	; 8
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <Endpoint_Write_Control_PStream_LE+0x7a>
    39c2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    39c8:	8e 77       	andi	r24, 0x7E	; 126
    39ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    39ce:	d0 cf       	rjmp	.-96     	; 0x3970 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    39d0:	21 11       	cpse	r18, r1
    39d2:	d1 cf       	rjmp	.-94     	; 0x3976 <Endpoint_Write_Control_PStream_LE+0x2c>
    39d4:	05 c0       	rjmp	.+10     	; 0x39e0 <Endpoint_Write_Control_PStream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39d6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39d8:	88 23       	and	r24, r24
    39da:	51 f0       	breq	.+20     	; 0x39f0 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39dc:	85 30       	cpi	r24, 0x05	; 5
    39de:	51 f0       	breq	.+20     	; 0x39f4 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    39e4:	82 ff       	sbrs	r24, 2
    39e6:	f7 cf       	rjmp	.-18     	; 0x39d6 <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    39f0:	82 e0       	ldi	r24, 0x02	; 2
    39f2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    39f4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    39f6:	08 95       	ret

000039f8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	cf 93       	push	r28
    39fe:	df 93       	push	r29
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	aa 97       	sbiw	r28, 0x2a	; 42
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	cd bf       	out	0x3d, r28	; 61
    3a10:	ea e2       	ldi	r30, 0x2A	; 42
    3a12:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3a14:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3a18:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3a1a:	24 e0       	ldi	r18, 0x04	; 4
    3a1c:	e2 33       	cpi	r30, 0x32	; 50
    3a1e:	f2 07       	cpc	r31, r18
    3a20:	c9 f7       	brne	.-14     	; 0x3a14 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3a22:	0e 94 ce 02 	call	0x59c	; 0x59c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3a26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    3a2a:	83 ff       	sbrs	r24, 3
    3a2c:	1d c1       	rjmp	.+570    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3a2e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3a32:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <USB_ControlRequest+0x1>
    3a36:	49 2f       	mov	r20, r25
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	4a 30       	cpi	r20, 0x0A	; 10
    3a3c:	51 05       	cpc	r21, r1
    3a3e:	08 f0       	brcs	.+2      	; 0x3a42 <USB_Device_ProcessControlRequest+0x4a>
    3a40:	13 c1       	rjmp	.+550    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
    3a42:	fa 01       	movw	r30, r20
    3a44:	e4 5b       	subi	r30, 0xB4	; 180
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	25 c6       	rjmp	.+3146   	; 0x4694 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a4a:	80 38       	cpi	r24, 0x80	; 128
    3a4c:	81 f0       	breq	.+32     	; 0x3a6e <USB_Device_ProcessControlRequest+0x76>
    3a4e:	82 38       	cpi	r24, 0x82	; 130
    3a50:	09 f0       	breq	.+2      	; 0x3a54 <USB_Device_ProcessControlRequest+0x5c>
    3a52:	0a c1       	rjmp	.+532    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3a54:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <USB_ControlRequest+0x4>
    3a58:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3a5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3a5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    3a62:	85 fb       	bst	r24, 5
    3a64:	88 27       	eor	r24, r24
    3a66:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3a68:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3a6c:	06 c0       	rjmp	.+12     	; 0x3a7a <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3a6e:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3a72:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <USB_Device_RemoteWakeupEnabled>
    3a76:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3a78:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3a7a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3a7e:	97 7f       	andi	r25, 0xF7	; 247
    3a80:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3a84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3a88:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3a8c:	c5 c0       	rjmp	.+394    	; 0x3c18 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a8e:	28 2f       	mov	r18, r24
    3a90:	2d 7f       	andi	r18, 0xFD	; 253
    3a92:	09 f0       	breq	.+2      	; 0x3a96 <USB_Device_ProcessControlRequest+0x9e>
    3a94:	e9 c0       	rjmp	.+466    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3a96:	88 23       	and	r24, r24
    3a98:	19 f0       	breq	.+6      	; 0x3aa0 <USB_Device_ProcessControlRequest+0xa8>
    3a9a:	82 30       	cpi	r24, 0x02	; 2
    3a9c:	61 f0       	breq	.+24     	; 0x3ab6 <USB_Device_ProcessControlRequest+0xbe>
    3a9e:	e4 c0       	rjmp	.+456    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3aa0:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3aa4:	81 30       	cpi	r24, 0x01	; 1
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <USB_Device_ProcessControlRequest+0xb2>
    3aa8:	df c0       	rjmp	.+446    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3aaa:	93 30       	cpi	r25, 0x03	; 3
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <USB_Device_ProcessControlRequest+0xb8>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <USB_Device_RemoteWakeupEnabled>
    3ab4:	2b c0       	rjmp	.+86     	; 0x3b0c <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3ab6:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3aba:	81 11       	cpse	r24, r1
    3abc:	27 c0       	rjmp	.+78     	; 0x3b0c <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3abe:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <USB_ControlRequest+0x4>
    3ac2:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3ac4:	09 f4       	brne	.+2      	; 0x3ac8 <USB_Device_ProcessControlRequest+0xd0>
    3ac6:	d0 c0       	rjmp	.+416    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3ac8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3acc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3ad0:	20 ff       	sbrs	r18, 0
    3ad2:	1c c0       	rjmp	.+56     	; 0x3b0c <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ad4:	93 30       	cpi	r25, 0x03	; 3
    3ad6:	21 f4       	brne	.+8      	; 0x3ae0 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3ad8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3adc:	80 62       	ori	r24, 0x20	; 32
    3ade:	14 c0       	rjmp	.+40     	; 0x3b08 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3ae0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3ae4:	90 61       	ori	r25, 0x10	; 16
    3ae6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    3aea:	21 e0       	ldi	r18, 0x01	; 1
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	a9 01       	movw	r20, r18
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <USB_Device_ProcessControlRequest+0xfe>
    3af2:	44 0f       	add	r20, r20
    3af4:	55 1f       	adc	r21, r21
    3af6:	8a 95       	dec	r24
    3af8:	e2 f7       	brpl	.-8      	; 0x3af2 <USB_Device_ProcessControlRequest+0xfa>
    3afa:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    3afe:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3b02:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3b06:	88 60       	ori	r24, 0x08	; 8
    3b08:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3b0c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3b10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3b14:	87 7f       	andi	r24, 0xF7	; 247
    3b16:	83 c0       	rjmp	.+262    	; 0x3c1e <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3b18:	81 11       	cpse	r24, r1
    3b1a:	a6 c0       	rjmp	.+332    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    3b1c:	10 91 2c 04 	lds	r17, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3b20:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3b22:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3b24:	f8 94       	cli
    3b26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3b2a:	87 7f       	andi	r24, 0xF7	; 247
    3b2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3b30:	a4 db       	rcall	.-2232   	; 0x327a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3b32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    3b36:	80 ff       	sbrs	r24, 0
    3b38:	fc cf       	rjmp	.-8      	; 0x3b32 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3b3a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3b3e:	80 78       	andi	r24, 0x80	; 128
    3b40:	81 2b       	or	r24, r17

				UDADDR = Temp;
    3b42:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    3b46:	80 68       	ori	r24, 0x80	; 128
    3b48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3b4c:	11 11       	cpse	r17, r1
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <USB_Device_ProcessControlRequest+0x15c>
    3b50:	82 e0       	ldi	r24, 0x02	; 2
    3b52:	01 c0       	rjmp	.+2      	; 0x3b56 <USB_Device_ProcessControlRequest+0x15e>
    3b54:	83 e0       	ldi	r24, 0x03	; 3
    3b56:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3b58:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    3b5a:	86 c0       	rjmp	.+268    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b5c:	80 58       	subi	r24, 0x80	; 128
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	08 f0       	brcs	.+2      	; 0x3b64 <USB_Device_ProcessControlRequest+0x16c>
    3b62:	82 c0       	rjmp	.+260    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3b64:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3b68:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <USB_ControlRequest+0x3>
    3b6c:	8c 3d       	cpi	r24, 0xDC	; 220
    3b6e:	53 e0       	ldi	r21, 0x03	; 3
    3b70:	95 07       	cpc	r25, r21
    3b72:	71 f5       	brne	.+92     	; 0x3bd0 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3b78:	8a e2       	ldi	r24, 0x2A	; 42
    3b7a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3b7c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3b7e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3b80:	de 01       	movw	r26, r28
    3b82:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3b84:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3b86:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3b88:	51 e2       	ldi	r21, 0x21	; 33
    3b8a:	e3 2f       	mov	r30, r19
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    3b92:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    3b94:	20 ff       	sbrs	r18, 0
    3b96:	03 c0       	rjmp	.+6      	; 0x3b9e <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    3b98:	e2 95       	swap	r30
    3b9a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    3b9c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3b9e:	ef 70       	andi	r30, 0x0F	; 15
    3ba0:	8e 2f       	mov	r24, r30
    3ba2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3ba4:	ea 30       	cpi	r30, 0x0A	; 10
    3ba6:	10 f0       	brcs	.+4      	; 0x3bac <USB_Device_ProcessControlRequest+0x1b4>
    3ba8:	c7 96       	adiw	r24, 0x37	; 55
    3baa:	01 c0       	rjmp	.+2      	; 0x3bae <USB_Device_ProcessControlRequest+0x1b6>
    3bac:	c0 96       	adiw	r24, 0x30	; 48
    3bae:	8d 93       	st	X+, r24
    3bb0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3bb2:	2f 5f       	subi	r18, 0xFF	; 255
    3bb4:	24 31       	cpi	r18, 0x14	; 20
    3bb6:	49 f7       	brne	.-46     	; 0x3b8a <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3bb8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3bba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3bbe:	87 7f       	andi	r24, 0xF7	; 247
    3bc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3bc4:	6a e2       	ldi	r22, 0x2A	; 42
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	ce 01       	movw	r24, r28
    3bca:	01 96       	adiw	r24, 0x01	; 1
    3bcc:	2c de       	rcall	.-936    	; 0x3826 <Endpoint_Write_Control_Stream_LE>
    3bce:	13 c0       	rjmp	.+38     	; 0x3bf6 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3bd0:	ae 01       	movw	r20, r28
    3bd2:	4f 5f       	subi	r20, 0xFF	; 255
    3bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd6:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <USB_ControlRequest+0x4>
    3bda:	0e 94 0e 03 	call	0x61c	; 0x61c <CALLBACK_USB_GetDescriptor>
    3bde:	bc 01       	movw	r22, r24
    3be0:	89 2b       	or	r24, r25
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <USB_Device_ProcessControlRequest+0x1ee>
    3be4:	41 c0       	rjmp	.+130    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
    3be6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3bea:	97 7f       	andi	r25, 0xF7	; 247
    3bec:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	aa de       	rcall	.-684    	; 0x394a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3bf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3bfa:	8b 77       	andi	r24, 0x7B	; 123
    3bfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c00:	33 c0       	rjmp	.+102    	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3c02:	80 38       	cpi	r24, 0x80	; 128
    3c04:	89 f5       	brne	.+98     	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c0a:	87 7f       	andi	r24, 0xF7	; 247
    3c0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3c10:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3c14:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3c18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c1c:	8e 77       	andi	r24, 0x7E	; 126
    3c1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3c22:	2b db       	rcall	.-2474   	; 0x327a <Endpoint_ClearStatusStage>
    3c24:	21 c0       	rjmp	.+66     	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3c26:	81 11       	cpse	r24, r1
    3c28:	1f c0       	rjmp	.+62     	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3c2a:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3c2e:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <USB_ControlRequest+0x3>
    3c32:	99 27       	eor	r25, r25
    3c34:	02 97       	sbiw	r24, 0x02	; 2
    3c36:	c4 f4       	brge	.+48     	; 0x3c68 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c3c:	87 7f       	andi	r24, 0xF7	; 247
    3c3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3c42:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3c46:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    3c4a:	17 db       	rcall	.-2514   	; 0x327a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3c4c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <USB_Device_ConfigurationNumber>
    3c50:	81 11       	cpse	r24, r1
    3c52:	06 c0       	rjmp	.+12     	; 0x3c60 <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3c54:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3c58:	87 fd       	sbrc	r24, 7
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <USB_Device_ProcessControlRequest+0x268>
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	01 c0       	rjmp	.+2      	; 0x3c62 <USB_Device_ProcessControlRequest+0x26a>
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    3c64:	0e 94 bb 02 	call	0x576	; 0x576 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3c6c:	83 ff       	sbrs	r24, 3
    3c6e:	0a c0       	rjmp	.+20     	; 0x3c84 <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3c70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3c74:	80 62       	ori	r24, 0x20	; 32
    3c76:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c7e:	87 7f       	andi	r24, 0xF7	; 247
    3c80:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    3c84:	aa 96       	adiw	r28, 0x2a	; 42
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	08 95       	ret

00003c9a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3c9a:	08 95       	ret

00003c9c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3c9c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    3c9e:	8e b3       	in	r24, 0x1e	; 30
    3ca0:	88 23       	and	r24, r24
    3ca2:	59 f0       	breq	.+22     	; 0x3cba <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    3ca4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3ca8:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3caa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    3cb2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    3cb4:	a1 de       	rcall	.-702    	; 0x39f8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3cb6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    3cba:	cf 91       	pop	r28
    3cbc:	08 95       	ret

00003cbe <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3cbe:	6f 92       	push	r6
    3cc0:	7f 92       	push	r7
    3cc2:	8f 92       	push	r8
    3cc4:	9f 92       	push	r9
    3cc6:	af 92       	push	r10
    3cc8:	bf 92       	push	r11
    3cca:	cf 92       	push	r12
    3ccc:	df 92       	push	r13
    3cce:	ef 92       	push	r14
    3cd0:	ff 92       	push	r15
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	00 d0       	rcall	.+0      	; 0x3cdc <HID_Device_ProcessControlRequest+0x1e>
    3cdc:	1f 92       	push	r1
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    3ce4:	ad b6       	in	r10, 0x3d	; 61
    3ce6:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3ce8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    3cec:	83 ff       	sbrs	r24, 3
    3cee:	f9 c0       	rjmp	.+498    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    3cf0:	f7 01       	movw	r30, r14
    3cf2:	80 81       	ld	r24, Z
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <USB_ControlRequest+0x4>
    3cfa:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <USB_ControlRequest+0x5>
    3cfe:	28 17       	cp	r18, r24
    3d00:	39 07       	cpc	r19, r25
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <HID_Device_ProcessControlRequest+0x48>
    3d04:	ee c0       	rjmp	.+476    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
	  return;

	switch (USB_ControlRequest.bRequest)
    3d06:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <USB_ControlRequest+0x1>
    3d0a:	83 30       	cpi	r24, 0x03	; 3
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <HID_Device_ProcessControlRequest+0x52>
    3d0e:	98 c0       	rjmp	.+304    	; 0x3e40 <HID_Device_ProcessControlRequest+0x182>
    3d10:	30 f4       	brcc	.+12     	; 0x3d1e <HID_Device_ProcessControlRequest+0x60>
    3d12:	81 30       	cpi	r24, 0x01	; 1
    3d14:	71 f0       	breq	.+28     	; 0x3d32 <HID_Device_ProcessControlRequest+0x74>
    3d16:	82 30       	cpi	r24, 0x02	; 2
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <HID_Device_ProcessControlRequest+0x5e>
    3d1a:	cb c0       	rjmp	.+406    	; 0x3eb2 <HID_Device_ProcessControlRequest+0x1f4>
    3d1c:	e2 c0       	rjmp	.+452    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
    3d1e:	8a 30       	cpi	r24, 0x0A	; 10
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <HID_Device_ProcessControlRequest+0x66>
    3d22:	af c0       	rjmp	.+350    	; 0x3e82 <HID_Device_ProcessControlRequest+0x1c4>
    3d24:	8b 30       	cpi	r24, 0x0B	; 11
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <HID_Device_ProcessControlRequest+0x6c>
    3d28:	98 c0       	rjmp	.+304    	; 0x3e5a <HID_Device_ProcessControlRequest+0x19c>
    3d2a:	89 30       	cpi	r24, 0x09	; 9
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <HID_Device_ProcessControlRequest+0x72>
    3d2e:	d9 c0       	rjmp	.+434    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
    3d30:	49 c0       	rjmp	.+146    	; 0x3dc4 <HID_Device_ProcessControlRequest+0x106>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3d32:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3d36:	81 3a       	cpi	r24, 0xA1	; 161
    3d38:	09 f0       	breq	.+2      	; 0x3d3c <HID_Device_ProcessControlRequest+0x7e>
    3d3a:	d3 c0       	rjmp	.+422    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
			{
    3d3c:	8d b6       	in	r8, 0x3d	; 61
    3d3e:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    3d40:	1a 82       	std	Y+2, r1	; 0x02
    3d42:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    3d44:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3d48:	10 91 2d 04 	lds	r17, 0x042D	; 0x80042d <USB_ControlRequest+0x3>
    3d4c:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3d4e:	f7 01       	movw	r30, r14
    3d50:	87 81       	ldd	r24, Z+7	; 0x07
    3d52:	48 2f       	mov	r20, r24
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	8d b7       	in	r24, 0x3d	; 61
    3d58:	9e b7       	in	r25, 0x3e	; 62
    3d5a:	84 1b       	sub	r24, r20
    3d5c:	95 0b       	sbc	r25, r21
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	9e bf       	out	0x3e, r25	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	8d bf       	out	0x3d, r24	; 61
    3d68:	ed b7       	in	r30, 0x3d	; 61
    3d6a:	fe b7       	in	r31, 0x3e	; 62
    3d6c:	31 96       	adiw	r30, 0x01	; 1
    3d6e:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	cf 01       	movw	r24, r30
    3d76:	c6 d4       	rcall	.+2444   	; 0x4704 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    3d78:	4f ef       	ldi	r20, 0xFF	; 255
    3d7a:	41 0f       	add	r20, r17
    3d7c:	8e 01       	movw	r16, r28
    3d7e:	0f 5f       	subi	r16, 0xFF	; 255
    3d80:	1f 4f       	sbci	r17, 0xFF	; 255
    3d82:	96 01       	movw	r18, r12
    3d84:	be 01       	movw	r22, r28
    3d86:	6d 5f       	subi	r22, 0xFD	; 253
    3d88:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8a:	c7 01       	movw	r24, r14
    3d8c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    3d90:	f7 01       	movw	r30, r14
    3d92:	85 81       	ldd	r24, Z+5	; 0x05
    3d94:	96 81       	ldd	r25, Z+6	; 0x06
    3d96:	00 97       	sbiw	r24, 0x00	; 0
    3d98:	21 f0       	breq	.+8      	; 0x3da2 <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    3d9a:	47 81       	ldd	r20, Z+7	; 0x07
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	b6 01       	movw	r22, r12
    3da0:	a8 d4       	rcall	.+2384   	; 0x46f2 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3da2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3da6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3daa:	87 7f       	andi	r24, 0xF7	; 247
    3dac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    3db0:	69 81       	ldd	r22, Y+1	; 0x01
    3db2:	7a 81       	ldd	r23, Y+2	; 0x02
    3db4:	c6 01       	movw	r24, r12
    3db6:	37 dd       	rcall	.-1426   	; 0x3826 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3db8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dbc:	8b 77       	andi	r24, 0x7B	; 123
    3dbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dc2:	38 c0       	rjmp	.+112    	; 0x3e34 <HID_Device_ProcessControlRequest+0x176>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3dc4:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3dc8:	81 32       	cpi	r24, 0x21	; 33
    3dca:	09 f0       	breq	.+2      	; 0x3dce <HID_Device_ProcessControlRequest+0x110>
    3dcc:	8a c0       	rjmp	.+276    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
			{
    3dce:	8d b6       	in	r8, 0x3d	; 61
    3dd0:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    3dd2:	00 91 30 04 	lds	r16, 0x0430	; 0x800430 <USB_ControlRequest+0x6>
    3dd6:	10 91 31 04 	lds	r17, 0x0431	; 0x800431 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    3dda:	70 90 2c 04 	lds	r7, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3dde:	60 90 2d 04 	lds	r6, 0x042D	; 0x80042d <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    3de2:	8d b7       	in	r24, 0x3d	; 61
    3de4:	9e b7       	in	r25, 0x3e	; 62
    3de6:	80 1b       	sub	r24, r16
    3de8:	91 0b       	sbc	r25, r17
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	9e bf       	out	0x3e, r25	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	8d bf       	out	0x3d, r24	; 61
    3df4:	ed b7       	in	r30, 0x3d	; 61
    3df6:	fe b7       	in	r31, 0x3e	; 62
    3df8:	31 96       	adiw	r30, 0x01	; 1
    3dfa:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e00:	87 7f       	andi	r24, 0xF7	; 247
    3e02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    3e06:	b8 01       	movw	r22, r16
    3e08:	cf 01       	movw	r24, r30
    3e0a:	63 dd       	rcall	.-1338   	; 0x38d2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e10:	8e 77       	andi	r24, 0x7E	; 126
    3e12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    3e16:	21 e0       	ldi	r18, 0x01	; 1
    3e18:	71 10       	cpse	r7, r1
    3e1a:	01 c0       	rjmp	.+2      	; 0x3e1e <HID_Device_ProcessControlRequest+0x160>
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	02 1b       	sub	r16, r18
    3e22:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    3e24:	2c 0d       	add	r18, r12
    3e26:	3d 1d       	adc	r19, r13

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    3e28:	4f ef       	ldi	r20, 0xFF	; 255
    3e2a:	46 0d       	add	r20, r6
    3e2c:	67 2d       	mov	r22, r7
    3e2e:	c7 01       	movw	r24, r14
    3e30:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <CALLBACK_HID_Device_ProcessHIDReport>
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	9e be       	out	0x3e, r9	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	8d be       	out	0x3d, r8	; 61
    3e3e:	51 c0       	rjmp	.+162    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3e40:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3e44:	81 3a       	cpi	r24, 0xA1	; 161
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <HID_Device_ProcessControlRequest+0x18c>
    3e48:	4c c0       	rjmp	.+152    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e4e:	87 7f       	andi	r24, 0xF7	; 247
    3e50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    3e54:	f7 01       	movw	r30, r14
    3e56:	80 85       	ldd	r24, Z+8	; 0x08
    3e58:	3c c0       	rjmp	.+120    	; 0x3ed2 <HID_Device_ProcessControlRequest+0x214>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3e5a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3e5e:	81 32       	cpi	r24, 0x21	; 33
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <HID_Device_ProcessControlRequest+0x1a6>
    3e62:	3f c0       	rjmp	.+126    	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
    3e64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e68:	87 7f       	andi	r24, 0xF7	; 247
    3e6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3e6e:	05 da       	rcall	.-3062   	; 0x327a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    3e70:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	91 11       	cpse	r25, r1
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <HID_Device_ProcessControlRequest+0x1be>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	f7 01       	movw	r30, r14
    3e7e:	80 87       	std	Z+8, r24	; 0x08
    3e80:	30 c0       	rjmp	.+96     	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3e82:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3e86:	81 32       	cpi	r24, 0x21	; 33
    3e88:	61 f5       	brne	.+88     	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
    3e8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e8e:	87 7f       	andi	r24, 0xF7	; 247
    3e90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3e94:	f2 d9       	rcall	.-3100   	; 0x327a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    3e96:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <USB_ControlRequest+0x2>
    3e9a:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <USB_ControlRequest+0x3>
    3e9e:	88 27       	eor	r24, r24
    3ea0:	36 e0       	ldi	r19, 0x06	; 6
    3ea2:	96 95       	lsr	r25
    3ea4:	87 95       	ror	r24
    3ea6:	3a 95       	dec	r19
    3ea8:	e1 f7       	brne	.-8      	; 0x3ea2 <HID_Device_ProcessControlRequest+0x1e4>
    3eaa:	f7 01       	movw	r30, r14
    3eac:	92 87       	std	Z+10, r25	; 0x0a
    3eae:	81 87       	std	Z+9, r24	; 0x09
    3eb0:	18 c0       	rjmp	.+48     	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3eb2:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <USB_ControlRequest>
    3eb6:	81 3a       	cpi	r24, 0xA1	; 161
    3eb8:	a1 f4       	brne	.+40     	; 0x3ee2 <HID_Device_ProcessControlRequest+0x224>
    3eba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3ebe:	87 7f       	andi	r24, 0xF7	; 247
    3ec0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    3ec4:	f7 01       	movw	r30, r14
    3ec6:	81 85       	ldd	r24, Z+9	; 0x09
    3ec8:	92 85       	ldd	r25, Z+10	; 0x0a
    3eca:	96 95       	lsr	r25
    3ecc:	87 95       	ror	r24
    3ece:	96 95       	lsr	r25
    3ed0:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3ed2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ed6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3eda:	8e 77       	andi	r24, 0x7E	; 126
    3edc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3ee0:	cc d9       	rcall	.-3176   	; 0x327a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	be be       	out	0x3e, r11	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	ad be       	out	0x3d, r10	; 61
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	ff 90       	pop	r15
    3efc:	ef 90       	pop	r14
    3efe:	df 90       	pop	r13
    3f00:	cf 90       	pop	r12
    3f02:	bf 90       	pop	r11
    3f04:	af 90       	pop	r10
    3f06:	9f 90       	pop	r9
    3f08:	8f 90       	pop	r8
    3f0a:	7f 90       	pop	r7
    3f0c:	6f 90       	pop	r6
    3f0e:	08 95       	ret

00003f10 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    3f16:	dc 01       	movw	r26, r24
    3f18:	18 96       	adiw	r26, 0x08	; 8
    3f1a:	85 e0       	ldi	r24, 0x05	; 5
    3f1c:	ed 01       	movw	r28, r26
    3f1e:	19 92       	st	Y+, r1
    3f20:	8a 95       	dec	r24
    3f22:	e9 f7       	brne	.-6      	; 0x3f1e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
    3f28:	84 ef       	ldi	r24, 0xF4	; 244
    3f2a:	91 e0       	ldi	r25, 0x01	; 1
    3f2c:	92 87       	std	Z+10, r25	; 0x0a
    3f2e:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    3f30:	84 81       	ldd	r24, Z+4	; 0x04
    3f32:	81 11       	cpse	r24, r1
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <HID_Device_ConfigureEndpoints+0x2a>
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <HID_Device_ConfigureEndpoints+0x2c>
    3f3a:	44 e0       	ldi	r20, 0x04	; 4
    3f3c:	62 81       	ldd	r22, Z+2	; 0x02
    3f3e:	73 81       	ldd	r23, Z+3	; 0x03
    3f40:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    3f42:	28 e0       	ldi	r18, 0x08	; 8
    3f44:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    3f46:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3f48:	26 17       	cp	r18, r22
    3f4a:	37 07       	cpc	r19, r23
    3f4c:	20 f4       	brcc	.+8      	; 0x3f56 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
    3f4e:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    3f50:	22 0f       	add	r18, r18
    3f52:	33 1f       	adc	r19, r19
    3f54:	f9 cf       	rjmp	.-14     	; 0x3f48 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3f56:	42 60       	ori	r20, 0x02	; 2
    3f58:	92 95       	swap	r25
    3f5a:	90 7f       	andi	r25, 0xF0	; 240
    3f5c:	49 2b       	or	r20, r25
    3f5e:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	56 c9       	rjmp	.-3412   	; 0x3212 <Endpoint_ConfigureEndpoint_Prv>

00003f66 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3f66:	5f 92       	push	r5
    3f68:	6f 92       	push	r6
    3f6a:	7f 92       	push	r7
    3f6c:	8f 92       	push	r8
    3f6e:	9f 92       	push	r9
    3f70:	af 92       	push	r10
    3f72:	bf 92       	push	r11
    3f74:	cf 92       	push	r12
    3f76:	df 92       	push	r13
    3f78:	ef 92       	push	r14
    3f7a:	ff 92       	push	r15
    3f7c:	0f 93       	push	r16
    3f7e:	1f 93       	push	r17
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	00 d0       	rcall	.+0      	; 0x3f86 <HID_Device_USBTask+0x20>
    3f86:	1f 92       	push	r1
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    3f8e:	ad b6       	in	r10, 0x3d	; 61
    3f90:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3f92:	8e b3       	in	r24, 0x1e	; 30
    3f94:	84 30       	cpi	r24, 0x04	; 4
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <HID_Device_USBTask+0x34>
    3f98:	74 c0       	rjmp	.+232    	; 0x4082 <HID_Device_USBTask+0x11c>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    3f9a:	f7 01       	movw	r30, r14
    3f9c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3f9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3fa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    3fa6:	85 ff       	sbrs	r24, 5
    3fa8:	6c c0       	rjmp	.+216    	; 0x4082 <HID_Device_USBTask+0x11c>
	{
    3faa:	8d b6       	in	r8, 0x3d	; 61
    3fac:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3fae:	47 81       	ldd	r20, Z+7	; 0x07
    3fb0:	50 e0       	ldi	r21, 0x00	; 0
    3fb2:	8d b7       	in	r24, 0x3d	; 61
    3fb4:	9e b7       	in	r25, 0x3e	; 62
    3fb6:	84 1b       	sub	r24, r20
    3fb8:	95 0b       	sbc	r25, r21
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	9e bf       	out	0x3e, r25	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	8d bf       	out	0x3d, r24	; 61
    3fc4:	ed b7       	in	r30, 0x3d	; 61
    3fc6:	fe b7       	in	r31, 0x3e	; 62
    3fc8:	31 96       	adiw	r30, 0x01	; 1
    3fca:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    3fcc:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    3fce:	1a 82       	std	Y+2, r1	; 0x02
    3fd0:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	70 e0       	ldi	r23, 0x00	; 0
    3fd6:	cf 01       	movw	r24, r30
    3fd8:	95 d3       	rcall	.+1834   	; 0x4704 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    3fda:	8e 01       	movw	r16, r28
    3fdc:	0f 5f       	subi	r16, 0xFF	; 255
    3fde:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe0:	96 01       	movw	r18, r12
    3fe2:	40 e0       	ldi	r20, 0x00	; 0
    3fe4:	be 01       	movw	r22, r28
    3fe6:	6d 5f       	subi	r22, 0xFD	; 253
    3fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fea:	c7 01       	movw	r24, r14
    3fec:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CALLBACK_HID_Device_CreateHIDReport>
    3ff0:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    3ff2:	f7 01       	movw	r30, r14
    3ff4:	81 85       	ldd	r24, Z+9	; 0x09
    3ff6:	92 85       	ldd	r25, Z+10	; 0x0a
    3ff8:	89 2b       	or	r24, r25
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <HID_Device_USBTask+0xa0>
    3ffc:	11 e0       	ldi	r17, 0x01	; 1
    3ffe:	83 85       	ldd	r24, Z+11	; 0x0b
    4000:	94 85       	ldd	r25, Z+12	; 0x0c
    4002:	89 2b       	or	r24, r25
    4004:	09 f0       	breq	.+2      	; 0x4008 <HID_Device_USBTask+0xa2>
    4006:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4008:	f7 01       	movw	r30, r14
    400a:	65 80       	ldd	r6, Z+5	; 0x05
    400c:	76 80       	ldd	r7, Z+6	; 0x06
    400e:	61 14       	cp	r6, r1
    4010:	71 04       	cpc	r7, r1
    4012:	81 f0       	breq	.+32     	; 0x4034 <HID_Device_USBTask+0xce>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    4014:	49 81       	ldd	r20, Y+1	; 0x01
    4016:	5a 81       	ldd	r21, Y+2	; 0x02
    4018:	b3 01       	movw	r22, r6
    401a:	c6 01       	movw	r24, r12
    401c:	5d d3       	rcall	.+1722   	; 0x46d8 <memcmp>
    401e:	01 e0       	ldi	r16, 0x01	; 1
    4020:	89 2b       	or	r24, r25
    4022:	09 f4       	brne	.+2      	; 0x4026 <HID_Device_USBTask+0xc0>
    4024:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4026:	f7 01       	movw	r30, r14
    4028:	47 81       	ldd	r20, Z+7	; 0x07
    402a:	50 e0       	ldi	r21, 0x00	; 0
    402c:	b6 01       	movw	r22, r12
    402e:	c3 01       	movw	r24, r6
    4030:	60 d3       	rcall	.+1728   	; 0x46f2 <memcpy>
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <HID_Device_USBTask+0xd0>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    4034:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	89 2b       	or	r24, r25
    403c:	e9 f0       	breq	.+58     	; 0x4078 <HID_Device_USBTask+0x112>
    403e:	51 10       	cpse	r5, r1
    4040:	04 c0       	rjmp	.+8      	; 0x404a <HID_Device_USBTask+0xe4>
    4042:	01 11       	cpse	r16, r1
    4044:	02 c0       	rjmp	.+4      	; 0x404a <HID_Device_USBTask+0xe4>
    4046:	10 ff       	sbrs	r17, 0
    4048:	17 c0       	rjmp	.+46     	; 0x4078 <HID_Device_USBTask+0x112>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    404a:	f7 01       	movw	r30, r14
    404c:	81 85       	ldd	r24, Z+9	; 0x09
    404e:	92 85       	ldd	r25, Z+10	; 0x0a
    4050:	94 87       	std	Z+12, r25	; 0x0c
    4052:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    4054:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4056:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    405a:	8b 81       	ldd	r24, Y+3	; 0x03
    405c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    405e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    4062:	69 81       	ldd	r22, Y+1	; 0x01
    4064:	7a 81       	ldd	r23, Y+2	; 0x02
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	c6 01       	movw	r24, r12
    406c:	fc da       	rcall	.-2568   	; 0x3666 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    406e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4072:	8e 77       	andi	r24, 0x7E	; 126
    4074:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	9e be       	out	0x3e, r9	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	be be       	out	0x3e, r11	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	ad be       	out	0x3d, r10	; 61
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	ff 90       	pop	r15
    409c:	ef 90       	pop	r14
    409e:	df 90       	pop	r13
    40a0:	cf 90       	pop	r12
    40a2:	bf 90       	pop	r11
    40a4:	af 90       	pop	r10
    40a6:	9f 90       	pop	r9
    40a8:	8f 90       	pop	r8
    40aa:	7f 90       	pop	r7
    40ac:	6f 90       	pop	r6
    40ae:	5f 90       	pop	r5
    40b0:	08 95       	ret

000040b2 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    40b6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    40ba:	23 ff       	sbrs	r18, 3
    40bc:	34 c0       	rjmp	.+104    	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    40be:	fc 01       	movw	r30, r24
    40c0:	20 81       	ld	r18, Z
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <USB_ControlRequest+0x4>
    40c8:	50 91 2f 04 	lds	r21, 0x042F	; 0x80042f <USB_ControlRequest+0x5>
    40cc:	42 17       	cp	r20, r18
    40ce:	53 07       	cpc	r21, r19
    40d0:	51 f5       	brne	.+84     	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    40d2:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <USB_ControlRequest+0x1>
    40d6:	2e 3f       	cpi	r18, 0xFE	; 254
    40d8:	81 f0       	breq	.+32     	; 0x40fa <MS_Device_ProcessControlRequest+0x48>
    40da:	2f 3f       	cpi	r18, 0xFF	; 255
    40dc:	21 f5       	brne	.+72     	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    40de:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <USB_ControlRequest>
    40e2:	21 32       	cpi	r18, 0x21	; 33
    40e4:	01 f5       	brne	.+64     	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
    40e6:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    40ec:	87 7f       	andi	r24, 0xF7	; 247
    40ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    40f2:	c3 d8       	rcall	.-3706   	; 0x327a <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	8e ab       	std	Y+54, r24	; 0x36
    40f8:	16 c0       	rjmp	.+44     	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    40fa:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <USB_ControlRequest>
    40fe:	21 3a       	cpi	r18, 0xA1	; 161
    4100:	91 f4       	brne	.+36     	; 0x4126 <MS_Device_ProcessControlRequest+0x74>
    4102:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4106:	27 7f       	andi	r18, 0xF7	; 247
    4108:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    410c:	fc 01       	movw	r30, r24
    410e:	81 85       	ldd	r24, Z+9	; 0x09
    4110:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4112:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4116:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    411a:	8e 77       	andi	r24, 0x7E	; 126
    411c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    4120:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4122:	cf 91       	pop	r28
    4124:	aa c8       	rjmp	.-3756   	; 0x327a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    412c:	1f 93       	push	r17
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    4134:	fc 01       	movw	r30, r24
    4136:	3a 96       	adiw	r30, 0x0a	; 10
    4138:	8d e2       	ldi	r24, 0x2D	; 45
    413a:	df 01       	movw	r26, r30
    413c:	1d 92       	st	X+, r1
    413e:	8a 95       	dec	r24
    4140:	e9 f7       	brne	.-6      	; 0x413c <MS_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    4142:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	81 13       	cpse	r24, r17
    4148:	05 c0       	rjmp	.+10     	; 0x4154 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    414a:	6a 81       	ldd	r22, Y+2	; 0x02
    414c:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    414e:	8c 81       	ldd	r24, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    4150:	90 e8       	ldi	r25, 0x80	; 128
    4152:	0c c0       	rjmp	.+24     	; 0x416c <MS_Device_ConfigureEndpoints+0x40>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    4154:	8d 81       	ldd	r24, Y+5	; 0x05
    4156:	81 17       	cp	r24, r17
    4158:	29 f0       	breq	.+10     	; 0x4164 <MS_Device_ConfigureEndpoints+0x38>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    415a:	1f 5f       	subi	r17, 0xFF	; 255
    415c:	17 30       	cpi	r17, 0x07	; 7
    415e:	91 f7       	brne	.-28     	; 0x4144 <MS_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	1d c0       	rjmp	.+58     	; 0x419e <MS_Device_ConfigureEndpoints+0x72>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    4164:	6e 81       	ldd	r22, Y+6	; 0x06
    4166:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    4168:	88 85       	ldd	r24, Y+8	; 0x08
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    416a:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    416c:	81 11       	cpse	r24, r1
    416e:	84 e0       	ldi	r24, 0x04	; 4
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    4170:	28 e0       	ldi	r18, 0x08	; 8
    4172:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    4174:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4176:	26 17       	cp	r18, r22
    4178:	37 07       	cpc	r19, r23
    417a:	20 f4       	brcc	.+8      	; 0x4184 <MS_Device_ConfigureEndpoints+0x58>
				{
					MaskVal++;
    417c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    417e:	22 0f       	add	r18, r18
    4180:	33 1f       	adc	r19, r19
    4182:	f9 cf       	rjmp	.-14     	; 0x4176 <MS_Device_ConfigureEndpoints+0x4a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    4184:	42 95       	swap	r20
    4186:	40 7f       	andi	r20, 0xF0	; 240
    4188:	82 60       	ori	r24, 0x02	; 2
    418a:	48 2b       	or	r20, r24
    418c:	61 e0       	ldi	r22, 0x01	; 1
    418e:	91 11       	cpse	r25, r1
    4190:	01 c0       	rjmp	.+2      	; 0x4194 <MS_Device_ConfigureEndpoints+0x68>
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	60 68       	ori	r22, 0x80	; 128
    4196:	81 2f       	mov	r24, r17
    4198:	3c d8       	rcall	.-3976   	; 0x3212 <Endpoint_ConfigureEndpoint_Prv>
    419a:	81 11       	cpse	r24, r1
    419c:	de cf       	rjmp	.-68     	; 0x415a <MS_Device_ConfigureEndpoints+0x2e>
			return false;
		}
	}

	return true;
}
    419e:	df 91       	pop	r29
    41a0:	cf 91       	pop	r28
    41a2:	1f 91       	pop	r17
    41a4:	08 95       	ret

000041a6 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	0f 93       	push	r16
    41ac:	1f 93       	push	r17
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	00 d0       	rcall	.+0      	; 0x41b4 <MS_Device_USBTask+0xe>
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    41b8:	2e b3       	in	r18, 0x1e	; 30
    41ba:	24 30       	cpi	r18, 0x04	; 4
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <MS_Device_USBTask+0x1a>
    41be:	f7 c0       	rjmp	.+494    	; 0x43ae <MS_Device_USBTask+0x208>
    41c0:	8c 01       	movw	r16, r24
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    41c2:	fc 01       	movw	r30, r24
    41c4:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    41c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    41ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    41ce:	85 ff       	sbrs	r24, 5
    41d0:	b8 c0       	rjmp	.+368    	; 0x4342 <MS_Device_USBTask+0x19c>

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    41d2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    41d4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	
	BytesProcessed = 0;
    41d8:	1a 82       	std	Y+2, r1	; 0x02
    41da:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    41dc:	78 01       	movw	r14, r16
    41de:	fa e0       	ldi	r31, 0x0A	; 10
    41e0:	ef 0e       	add	r14, r31
    41e2:	f1 1c       	adc	r15, r1
    41e4:	ae 01       	movw	r20, r28
    41e6:	4f 5f       	subi	r20, 0xFF	; 255
    41e8:	5f 4f       	sbci	r21, 0xFF	; 255
    41ea:	6f e0       	ldi	r22, 0x0F	; 15
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	c7 01       	movw	r24, r14
    41f0:	d1 da       	rcall	.-2654   	; 0x3794 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    41f2:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    41f4:	85 30       	cpi	r24, 0x05	; 5
    41f6:	21 f4       	brne	.+8      	; 0x4200 <MS_Device_USBTask+0x5a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    41f8:	86 a9       	ldd	r24, Z+54	; 0x36
    41fa:	88 23       	and	r24, r24
    41fc:	99 f3       	breq	.-26     	; 0x41e4 <MS_Device_USBTask+0x3e>
    41fe:	a1 c0       	rjmp	.+322    	; 0x4342 <MS_Device_USBTask+0x19c>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    4200:	82 85       	ldd	r24, Z+10	; 0x0a
    4202:	93 85       	ldd	r25, Z+11	; 0x0b
    4204:	a4 85       	ldd	r26, Z+12	; 0x0c
    4206:	b5 85       	ldd	r27, Z+13	; 0x0d
    4208:	85 35       	cpi	r24, 0x55	; 85
    420a:	93 45       	sbci	r25, 0x53	; 83
    420c:	a2 44       	sbci	r26, 0x42	; 66
    420e:	b3 44       	sbci	r27, 0x43	; 67
    4210:	61 f4       	brne	.+24     	; 0x422a <MS_Device_USBTask+0x84>
    4212:	f8 01       	movw	r30, r16
    4214:	97 89       	ldd	r25, Z+23	; 0x17
    4216:	81 85       	ldd	r24, Z+9	; 0x09
    4218:	98 17       	cp	r25, r24
    421a:	38 f4       	brcc	.+14     	; 0x422a <MS_Device_USBTask+0x84>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    421c:	86 89       	ldd	r24, Z+22	; 0x16
    421e:	8f 71       	andi	r24, 0x1F	; 31
    4220:	21 f4       	brne	.+8      	; 0x422a <MS_Device_USBTask+0x84>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4222:	80 8d       	ldd	r24, Z+24	; 0x18
    4224:	81 50       	subi	r24, 0x01	; 1
    4226:	80 31       	cpi	r24, 0x10	; 16
    4228:	78 f0       	brcs	.+30     	; 0x4248 <MS_Device_USBTask+0xa2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    422a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    422e:	80 62       	ori	r24, 0x20	; 32
    4230:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4234:	f8 01       	movw	r30, r16
    4236:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4238:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    423c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4240:	80 62       	ori	r24, 0x20	; 32
    4242:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4246:	7d c0       	rjmp	.+250    	; 0x4342 <MS_Device_USBTask+0x19c>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    4248:	1a 82       	std	Y+2, r1	; 0x02
    424a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    424c:	78 01       	movw	r14, r16
    424e:	f9 e1       	ldi	r31, 0x19	; 25
    4250:	ef 0e       	add	r14, r31
    4252:	f1 1c       	adc	r15, r1
    4254:	f8 01       	movw	r30, r16
    4256:	60 8d       	ldd	r22, Z+24	; 0x18
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	ae 01       	movw	r20, r28
    425c:	4f 5f       	subi	r20, 0xFF	; 255
    425e:	5f 4f       	sbci	r21, 0xFF	; 255
    4260:	c7 01       	movw	r24, r14
    4262:	98 da       	rcall	.-2768   	; 0x3794 <Endpoint_Read_Stream_LE>
    4264:	85 30       	cpi	r24, 0x05	; 5
    4266:	29 f4       	brne	.+10     	; 0x4272 <MS_Device_USBTask+0xcc>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4268:	f8 01       	movw	r30, r16
    426a:	86 a9       	ldd	r24, Z+54	; 0x36
    426c:	88 23       	and	r24, r24
    426e:	91 f3       	breq	.-28     	; 0x4254 <MS_Device_USBTask+0xae>
    4270:	68 c0       	rjmp	.+208    	; 0x4342 <MS_Device_USBTask+0x19c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4272:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4276:	8b 77       	andi	r24, 0x7B	; 123
    4278:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    427c:	f8 01       	movw	r30, r16
    427e:	86 89       	ldd	r24, Z+22	; 0x16
    4280:	87 ff       	sbrs	r24, 7
    4282:	03 c0       	rjmp	.+6      	; 0x428a <MS_Device_USBTask+0xe4>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4284:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4286:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    428a:	c8 01       	movw	r24, r16
    428c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    4290:	91 e0       	ldi	r25, 0x01	; 1
    4292:	98 27       	eor	r25, r24
    4294:	f8 01       	movw	r30, r16
    4296:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    4298:	45 e5       	ldi	r20, 0x55	; 85
    429a:	53 e5       	ldi	r21, 0x53	; 83
    429c:	62 e4       	ldi	r22, 0x42	; 66
    429e:	73 e5       	ldi	r23, 0x53	; 83
    42a0:	41 a7       	std	Z+41, r20	; 0x29
    42a2:	52 a7       	std	Z+42, r21	; 0x2a
    42a4:	63 a7       	std	Z+43, r22	; 0x2b
    42a6:	74 a7       	std	Z+44, r23	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    42a8:	46 85       	ldd	r20, Z+14	; 0x0e
    42aa:	57 85       	ldd	r21, Z+15	; 0x0f
    42ac:	60 89       	ldd	r22, Z+16	; 0x10
    42ae:	71 89       	ldd	r23, Z+17	; 0x11
    42b0:	45 a7       	std	Z+45, r20	; 0x2d
    42b2:	56 a7       	std	Z+46, r21	; 0x2e
    42b4:	67 a7       	std	Z+47, r22	; 0x2f
    42b6:	70 ab       	std	Z+48, r23	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    42b8:	42 89       	ldd	r20, Z+18	; 0x12
    42ba:	53 89       	ldd	r21, Z+19	; 0x13
    42bc:	64 89       	ldd	r22, Z+20	; 0x14
    42be:	75 89       	ldd	r23, Z+21	; 0x15
    42c0:	41 ab       	std	Z+49, r20	; 0x31
    42c2:	52 ab       	std	Z+50, r21	; 0x32
    42c4:	63 ab       	std	Z+51, r22	; 0x33
    42c6:	74 ab       	std	Z+52, r23	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    42c8:	81 11       	cpse	r24, r1
    42ca:	09 c0       	rjmp	.+18     	; 0x42de <MS_Device_USBTask+0x138>
    42cc:	45 2b       	or	r20, r21
    42ce:	46 2b       	or	r20, r22
    42d0:	47 2b       	or	r20, r23
    42d2:	29 f0       	breq	.+10     	; 0x42de <MS_Device_USBTask+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    42d4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    42d8:	80 62       	ori	r24, 0x20	; 32
    42da:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    42de:	f8 01       	movw	r30, r16
    42e0:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    42e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    42e6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    42ea:	f8 01       	movw	r30, r16

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    42ec:	85 ff       	sbrs	r24, 5
    42ee:	04 c0       	rjmp	.+8      	; 0x42f8 <MS_Device_USBTask+0x152>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    42f0:	86 a9       	ldd	r24, Z+54	; 0x36
    42f2:	88 23       	and	r24, r24
    42f4:	c1 f3       	breq	.-16     	; 0x42e6 <MS_Device_USBTask+0x140>
    42f6:	25 c0       	rjmp	.+74     	; 0x4342 <MS_Device_USBTask+0x19c>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    42f8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    42fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    42fe:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	while (Endpoint_IsStalled())
    4302:	85 ff       	sbrs	r24, 5
    4304:	05 c0       	rjmp	.+10     	; 0x4310 <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4306:	f8 01       	movw	r30, r16
    4308:	86 a9       	ldd	r24, Z+54	; 0x36
    430a:	88 23       	and	r24, r24
    430c:	c1 f3       	breq	.-16     	; 0x42fe <MS_Device_USBTask+0x158>
    430e:	19 c0       	rjmp	.+50     	; 0x4342 <MS_Device_USBTask+0x19c>
		  return;
	}

	uint16_t BytesProcessed = 0;
    4310:	1a 82       	std	Y+2, r1	; 0x02
    4312:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4314:	78 01       	movw	r14, r16
    4316:	f9 e2       	ldi	r31, 0x29	; 41
    4318:	ef 0e       	add	r14, r31
    431a:	f1 1c       	adc	r15, r1
    431c:	ae 01       	movw	r20, r28
    431e:	4f 5f       	subi	r20, 0xFF	; 255
    4320:	5f 4f       	sbci	r21, 0xFF	; 255
    4322:	6d e0       	ldi	r22, 0x0D	; 13
    4324:	70 e0       	ldi	r23, 0x00	; 0
    4326:	c7 01       	movw	r24, r14
    4328:	9e d9       	rcall	.-3268   	; 0x3666 <Endpoint_Write_Stream_LE>
    432a:	85 30       	cpi	r24, 0x05	; 5
    432c:	29 f4       	brne	.+10     	; 0x4338 <MS_Device_USBTask+0x192>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    432e:	f8 01       	movw	r30, r16
    4330:	86 a9       	ldd	r24, Z+54	; 0x36
    4332:	88 23       	and	r24, r24
    4334:	99 f3       	breq	.-26     	; 0x431c <MS_Device_USBTask+0x176>
    4336:	05 c0       	rjmp	.+10     	; 0x4342 <MS_Device_USBTask+0x19c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4338:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    433c:	8e 77       	andi	r24, 0x7E	; 126
    433e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    4342:	f8 01       	movw	r30, r16
    4344:	86 a9       	ldd	r24, Z+54	; 0x36
    4346:	88 23       	and	r24, r24
    4348:	91 f1       	breq	.+100    	; 0x43ae <MS_Device_USBTask+0x208>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9c 01       	movw	r18, r24
    4350:	05 80       	ldd	r0, Z+5	; 0x05
    4352:	02 c0       	rjmp	.+4      	; 0x4358 <MS_Device_USBTask+0x1b2>
    4354:	22 0f       	add	r18, r18
    4356:	33 1f       	adc	r19, r19
    4358:	0a 94       	dec	r0
    435a:	e2 f7       	brpl	.-8      	; 0x4354 <MS_Device_USBTask+0x1ae>
    435c:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    4360:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    4364:	01 80       	ldd	r0, Z+1	; 0x01
    4366:	02 c0       	rjmp	.+4      	; 0x436c <MS_Device_USBTask+0x1c6>
    4368:	88 0f       	add	r24, r24
    436a:	99 1f       	adc	r25, r25
    436c:	0a 94       	dec	r0
    436e:	e2 f7       	brpl	.-8      	; 0x4368 <MS_Device_USBTask+0x1c2>
    4370:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    4374:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4378:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    437a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    437e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4382:	80 61       	ori	r24, 0x10	; 16
    4384:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4388:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    438c:	88 60       	ori	r24, 0x08	; 8
    438e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4392:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4394:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4398:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    439c:	80 61       	ori	r24, 0x10	; 16
    439e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    43a2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    43a6:	88 60       	ori	r24, 0x08	; 8
    43a8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    43ac:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    43ae:	0f 90       	pop	r0
    43b0:	0f 90       	pop	r0
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	08 95       	ret

000043c0 <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    43c0:	80 e4       	ldi	r24, 0x40	; 64
    43c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    43c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    43ca:	80 64       	ori	r24, 0x40	; 64
    43cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    43d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    43d4:	84 ff       	sbrs	r24, 4
    43d6:	fc cf       	rjmp	.-8      	; 0x43d0 <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    43d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    43dc:	80 61       	ori	r24, 0x10	; 16
    43de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
				return ADC;
    43e2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    43e6:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    43ea:	e5 e6       	ldi	r30, 0x65	; 101
    43ec:	f1 e0       	ldi	r31, 0x01	; 1
    43ee:	85 91       	lpm	r24, Z+
    43f0:	94 91       	lpm	r25, Z
    43f2:	84 17       	cp	r24, r20
    43f4:	95 07       	cpc	r25, r21
    43f6:	a0 f0       	brcs	.+40     	; 0x4420 <Temperature_GetTemperature+0x60>
    43f8:	25 e6       	ldi	r18, 0x65	; 101
    43fa:	31 e0       	ldi	r19, 0x01	; 1
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    4400:	f9 01       	movw	r30, r18
    4402:	65 91       	lpm	r22, Z+
    4404:	74 91       	lpm	r23, Z
    4406:	64 17       	cp	r22, r20
    4408:	75 07       	cpc	r23, r21
    440a:	10 f4       	brcc	.+4      	; 0x4410 <Temperature_GetTemperature+0x50>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    440c:	85 51       	subi	r24, 0x15	; 21
    440e:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	2e 5f       	subi	r18, 0xFE	; 254
    4414:	3f 4f       	sbci	r19, 0xFF	; 255
    4416:	88 37       	cpi	r24, 0x78	; 120
    4418:	91 05       	cpc	r25, r1
    441a:	91 f7       	brne	.-28     	; 0x4400 <Temperature_GetTemperature+0x40>
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
    441c:	82 e6       	ldi	r24, 0x62	; 98
    441e:	08 95       	ret
int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;
    4420:	8b ee       	ldi	r24, 0xEB	; 235
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
}
    4422:	08 95       	ret

00004424 <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4424:	94 ea       	ldi	r25, 0xA4	; 164
    4426:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    442a:	24 e6       	ldi	r18, 0x64	; 100
    442c:	62 9f       	mul	r22, r18
    442e:	b0 01       	movw	r22, r0
    4430:	11 24       	eor	r1, r1
    4432:	61 50       	subi	r22, 0x01	; 1
    4434:	71 09       	sbc	r23, r1

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    4436:	9b 01       	movw	r18, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
    4438:	40 e0       	ldi	r20, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    443a:	54 ea       	ldi	r21, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    443c:	2f 3f       	cpi	r18, 0xFF	; 255
    443e:	9f ef       	ldi	r25, 0xFF	; 255
    4440:	39 07       	cpc	r19, r25
    4442:	31 f1       	breq	.+76     	; 0x4490 <TWI_StartTransmission+0x6c>
    4444:	41 11       	cpse	r20, r1
    4446:	1d c0       	rjmp	.+58     	; 0x4482 <TWI_StartTransmission+0x5e>
		{
			if (TWCR & (1 << TWINT))
    4448:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    444c:	97 ff       	sbrs	r25, 7
    444e:	12 c0       	rjmp	.+36     	; 0x4474 <TWI_StartTransmission+0x50>
			{
				switch (TWSR & TW_STATUS_MASK)
    4450:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4454:	98 7f       	andi	r25, 0xF8	; 248
    4456:	90 31       	cpi	r25, 0x10	; 16
    4458:	61 f0       	breq	.+24     	; 0x4472 <TWI_StartTransmission+0x4e>
    445a:	98 33       	cpi	r25, 0x38	; 56
    445c:	39 f0       	breq	.+14     	; 0x446c <TWI_StartTransmission+0x48>
    445e:	98 30       	cpi	r25, 0x08	; 8
    4460:	41 f0       	breq	.+16     	; 0x4472 <TWI_StartTransmission+0x4e>
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
						continue;
					default:
						TWCR = (1 << TWEN);
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						return TWI_ERROR_BusFault;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	08 95       	ret
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    446c:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
						continue;
    4470:	05 c0       	rjmp	.+10     	; 0x447c <TWI_StartTransmission+0x58>
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
    4472:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4474:	9a e1       	ldi	r25, 0x1A	; 26
    4476:	9a 95       	dec	r25
    4478:	f1 f7       	brne	.-4      	; 0x4476 <TWI_StartTransmission+0x52>
    447a:	00 c0       	rjmp	.+0      	; 0x447c <TWI_StartTransmission+0x58>
    447c:	21 50       	subi	r18, 0x01	; 1
    447e:	31 09       	sbc	r19, r1
    4480:	dd cf       	rjmp	.-70     	; 0x443c <TWI_StartTransmission+0x18>
			}

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    4482:	23 2b       	or	r18, r19
    4484:	29 f4       	brne	.+10     	; 0x4490 <TWI_StartTransmission+0x6c>
		{
			TWCR = (1 << TWEN);
    4486:	84 e0       	ldi	r24, 0x04	; 4
    4488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			return TWI_ERROR_BusCaptureTimeout;
    448c:	82 e0       	ldi	r24, 0x02	; 2
    448e:	08 95       	ret
		}

		TWDR = SlaveAddress;
    4490:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = ((1 << TWINT) | (1 << TWEN));
    4494:	84 e8       	ldi	r24, 0x84	; 132
    4496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
    449a:	6f 3f       	cpi	r22, 0xFF	; 255
    449c:	8f ef       	ldi	r24, 0xFF	; 255
    449e:	78 07       	cpc	r23, r24
    44a0:	71 f0       	breq	.+28     	; 0x44be <TWI_StartTransmission+0x9a>
		{
			if (TWCR & (1 << TWINT))
    44a2:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    44a6:	cb 01       	movw	r24, r22
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	27 fd       	sbrc	r18, 7
    44ac:	06 c0       	rjmp	.+12     	; 0x44ba <TWI_StartTransmission+0x96>
    44ae:	2a e1       	ldi	r18, 0x1A	; 26
    44b0:	2a 95       	dec	r18
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <TWI_StartTransmission+0x8c>
    44b4:	00 c0       	rjmp	.+0      	; 0x44b6 <TWI_StartTransmission+0x92>
    44b6:	bc 01       	movw	r22, r24
    44b8:	f0 cf       	rjmp	.-32     	; 0x449a <TWI_StartTransmission+0x76>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    44ba:	67 2b       	or	r22, r23
    44bc:	61 f0       	breq	.+24     	; 0x44d6 <TWI_StartTransmission+0xb2>
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
    44be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    44c2:	88 7f       	andi	r24, 0xF8	; 248
    44c4:	88 31       	cpi	r24, 0x18	; 24
    44c6:	49 f0       	breq	.+18     	; 0x44da <TWI_StartTransmission+0xb6>
    44c8:	80 34       	cpi	r24, 0x40	; 64
    44ca:	39 f0       	breq	.+14     	; 0x44da <TWI_StartTransmission+0xb6>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    44cc:	84 e9       	ldi	r24, 0x94	; 148
    44ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				return TWI_ERROR_SlaveNotReady;
    44d2:	84 e0       	ldi	r24, 0x04	; 4
    44d4:	08 95       	ret

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
    44d6:	83 e0       	ldi	r24, 0x03	; 3
    44d8:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
    44da:	80 e0       	ldi	r24, 0x00	; 0
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    44dc:	08 95       	ret

000044de <TWI_SendByte>:

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    44de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1 << TWINT) | (1 << TWEN));
    44e2:	84 e8       	ldi	r24, 0x84	; 132
    44e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
    44e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    44ec:	87 ff       	sbrs	r24, 7
    44ee:	fc cf       	rjmp	.-8      	; 0x44e8 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    44f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    44f4:	98 7f       	andi	r25, 0xF8	; 248
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	98 32       	cpi	r25, 0x28	; 40
    44fa:	09 f0       	breq	.+2      	; 0x44fe <TWI_SendByte+0x20>
    44fc:	80 e0       	ldi	r24, 0x00	; 0
}
    44fe:	08 95       	ret

00004500 <TWI_ReceiveByte>:

bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
    4500:	fc 01       	movw	r30, r24
	uint8_t TWCRMask;

	if (LastByte)
    4502:	61 11       	cpse	r22, r1
    4504:	02 c0       	rjmp	.+4      	; 0x450a <TWI_ReceiveByte+0xa>
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    4506:	94 ec       	ldi	r25, 0xC4	; 196
    4508:	01 c0       	rjmp	.+2      	; 0x450c <TWI_ReceiveByte+0xc>
					 const bool LastByte)
{
	uint8_t TWCRMask;

	if (LastByte)
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
    450a:	94 e8       	ldi	r25, 0x84	; 132
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

	TWCR = TWCRMask;
    450c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
    4510:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4514:	87 ff       	sbrs	r24, 7
    4516:	fc cf       	rjmp	.-8      	; 0x4510 <TWI_ReceiveByte+0x10>
	*Byte = TWDR;
    4518:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    451c:	80 83       	st	Z, r24
	
	uint8_t Status = (TWSR & TW_STATUS_MASK);
    451e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4522:	98 7f       	andi	r25, 0xF8	; 248
	
	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	66 23       	and	r22, r22
    4528:	19 f0       	breq	.+6      	; 0x4530 <TWI_ReceiveByte+0x30>
    452a:	98 35       	cpi	r25, 0x58	; 88
    452c:	19 f4       	brne	.+6      	; 0x4534 <TWI_ReceiveByte+0x34>
    452e:	03 c0       	rjmp	.+6      	; 0x4536 <TWI_ReceiveByte+0x36>
    4530:	90 35       	cpi	r25, 0x50	; 80
    4532:	09 f0       	breq	.+2      	; 0x4536 <TWI_ReceiveByte+0x36>
    4534:	80 e0       	ldi	r24, 0x00	; 0
}
    4536:	08 95       	ret

00004538 <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
    4538:	9f 92       	push	r9
    453a:	af 92       	push	r10
    453c:	bf 92       	push	r11
    453e:	cf 92       	push	r12
    4540:	df 92       	push	r13
    4542:	ef 92       	push	r14
    4544:	ff 92       	push	r15
    4546:	0f 93       	push	r16
    4548:	1f 93       	push	r17
    454a:	cf 93       	push	r28
    454c:	df 93       	push	r29
    454e:	f8 2e       	mov	r15, r24
    4550:	b6 2e       	mov	r11, r22
    4552:	94 2e       	mov	r9, r20
    4554:	a5 2e       	mov	r10, r21
    4556:	c2 2f       	mov	r28, r18
	uint8_t ErrorCode;
	
	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    4558:	8e 7f       	andi	r24, 0xFE	; 254
    455a:	64 df       	rcall	.-312    	; 0x4424 <TWI_StartTransmission>
    455c:	d8 2f       	mov	r29, r24
    455e:	81 11       	cpse	r24, r1
    4560:	28 c0       	rjmp	.+80     	; 0x45b2 <TWI_ReadPacket+0x7a>
    4562:	c9 2c       	mov	r12, r9
    4564:	da 2c       	mov	r13, r10
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4566:	cc 23       	and	r28, r28
    4568:	39 f0       	breq	.+14     	; 0x4578 <TWI_ReadPacket+0x40>
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    456a:	f6 01       	movw	r30, r12
    456c:	81 91       	ld	r24, Z+
    456e:	6f 01       	movw	r12, r30
    4570:	b6 df       	rcall	.-148    	; 0x44de <TWI_SendByte>
    4572:	c1 50       	subi	r28, 0x01	; 1
    4574:	81 11       	cpse	r24, r1
    4576:	f7 cf       	rjmp	.-18     	; 0x4566 <TWI_ReadPacket+0x2e>
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}
		
		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    4578:	6b 2d       	mov	r22, r11
    457a:	8f 2d       	mov	r24, r15
    457c:	81 60       	ori	r24, 0x01	; 1
    457e:	52 df       	rcall	.-348    	; 0x4424 <TWI_StartTransmission>
    4580:	d8 2f       	mov	r29, r24
    4582:	81 11       	cpse	r24, r1
    4584:	16 c0       	rjmp	.+44     	; 0x45b2 <TWI_ReadPacket+0x7a>
    4586:	cf ef       	ldi	r28, 0xFF	; 255
    4588:	ce 0d       	add	r28, r14
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    458a:	cf 3f       	cpi	r28, 0xFF	; 255
    458c:	79 f0       	breq	.+30     	; 0x45ac <TWI_ReadPacket+0x74>
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    458e:	78 01       	movw	r14, r16
    4590:	ff ef       	ldi	r31, 0xFF	; 255
    4592:	ef 1a       	sub	r14, r31
    4594:	ff 0a       	sbc	r15, r31
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	c1 11       	cpse	r28, r1
    459a:	60 e0       	ldi	r22, 0x00	; 0
    459c:	c8 01       	movw	r24, r16
    459e:	b0 df       	rcall	.-160    	; 0x4500 <TWI_ReceiveByte>
    45a0:	c1 50       	subi	r28, 0x01	; 1
    45a2:	88 23       	and	r24, r24
    45a4:	11 f0       	breq	.+4      	; 0x45aa <TWI_ReadPacket+0x72>
    45a6:	87 01       	movw	r16, r14
    45a8:	f0 cf       	rjmp	.-32     	; 0x458a <TWI_ReadPacket+0x52>
				{
					ErrorCode = TWI_ERROR_SlaveNAK;
    45aa:	d5 e0       	ldi	r29, 0x05	; 5

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    45ac:	84 e9       	ldi	r24, 0x94	; 148
    45ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			TWI_StopTransmission();
		}
	}
	
	return ErrorCode;
}
    45b2:	8d 2f       	mov	r24, r29
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	ff 90       	pop	r15
    45be:	ef 90       	pop	r14
    45c0:	df 90       	pop	r13
    45c2:	cf 90       	pop	r12
    45c4:	bf 90       	pop	r11
    45c6:	af 90       	pop	r10
    45c8:	9f 90       	pop	r9
    45ca:	08 95       	ret

000045cc <TWI_WritePacket>:
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
    45cc:	bf 92       	push	r11
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	b4 2e       	mov	r11, r20
    45e0:	f5 2e       	mov	r15, r21
    45e2:	c2 2f       	mov	r28, r18
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    45e4:	8e 7f       	andi	r24, 0xFE	; 254
    45e6:	1e df       	rcall	.-452    	; 0x4424 <TWI_StartTransmission>
    45e8:	d8 2f       	mov	r29, r24
    45ea:	81 11       	cpse	r24, r1
    45ec:	1a c0       	rjmp	.+52     	; 0x4622 <TWI_WritePacket+0x56>
    45ee:	cb 2c       	mov	r12, r11
    45f0:	df 2c       	mov	r13, r15
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    45f2:	cc 23       	and	r28, r28
    45f4:	41 f0       	breq	.+16     	; 0x4606 <TWI_WritePacket+0x3a>
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    45f6:	f6 01       	movw	r30, r12
    45f8:	81 91       	ld	r24, Z+
    45fa:	6f 01       	movw	r12, r30
    45fc:	70 df       	rcall	.-288    	; 0x44de <TWI_SendByte>
    45fe:	c1 50       	subi	r28, 0x01	; 1
    4600:	81 11       	cpse	r24, r1
    4602:	f7 cf       	rjmp	.-18     	; 0x45f2 <TWI_WritePacket+0x26>
			{				
				ErrorCode = TWI_ERROR_SlaveNAK;
    4604:	d5 e0       	ldi	r29, 0x05	; 5
    4606:	68 01       	movw	r12, r16
				break;
			}
		}

		while (Length--)
    4608:	ee 20       	and	r14, r14
    460a:	41 f0       	breq	.+16     	; 0x461c <TWI_WritePacket+0x50>
		{
			if (!(TWI_SendByte(*(Buffer++))))
    460c:	f6 01       	movw	r30, r12
    460e:	81 91       	ld	r24, Z+
    4610:	6f 01       	movw	r12, r30
    4612:	65 df       	rcall	.-310    	; 0x44de <TWI_SendByte>
    4614:	ea 94       	dec	r14
    4616:	81 11       	cpse	r24, r1
    4618:	f7 cf       	rjmp	.-18     	; 0x4608 <TWI_WritePacket+0x3c>
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
    461a:	d5 e0       	ldi	r29, 0x05	; 5
    461c:	84 e9       	ldi	r24, 0x94	; 148
    461e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		TWI_StopTransmission();
	}
	
	return ErrorCode;
}
    4622:	8d 2f       	mov	r24, r29
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	ff 90       	pop	r15
    462e:	ef 90       	pop	r14
    4630:	df 90       	pop	r13
    4632:	cf 90       	pop	r12
    4634:	bf 90       	pop	r11
    4636:	08 95       	ret

00004638 <__udivmodqi4>:
    4638:	99 1b       	sub	r25, r25
    463a:	79 e0       	ldi	r23, 0x09	; 9
    463c:	04 c0       	rjmp	.+8      	; 0x4646 <__udivmodqi4_ep>

0000463e <__udivmodqi4_loop>:
    463e:	99 1f       	adc	r25, r25
    4640:	96 17       	cp	r25, r22
    4642:	08 f0       	brcs	.+2      	; 0x4646 <__udivmodqi4_ep>
    4644:	96 1b       	sub	r25, r22

00004646 <__udivmodqi4_ep>:
    4646:	88 1f       	adc	r24, r24
    4648:	7a 95       	dec	r23
    464a:	c9 f7       	brne	.-14     	; 0x463e <__udivmodqi4_loop>
    464c:	80 95       	com	r24
    464e:	08 95       	ret

00004650 <__udivmodsi4>:
    4650:	a1 e2       	ldi	r26, 0x21	; 33
    4652:	1a 2e       	mov	r1, r26
    4654:	aa 1b       	sub	r26, r26
    4656:	bb 1b       	sub	r27, r27
    4658:	fd 01       	movw	r30, r26
    465a:	0d c0       	rjmp	.+26     	; 0x4676 <__udivmodsi4_ep>

0000465c <__udivmodsi4_loop>:
    465c:	aa 1f       	adc	r26, r26
    465e:	bb 1f       	adc	r27, r27
    4660:	ee 1f       	adc	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	a2 17       	cp	r26, r18
    4666:	b3 07       	cpc	r27, r19
    4668:	e4 07       	cpc	r30, r20
    466a:	f5 07       	cpc	r31, r21
    466c:	20 f0       	brcs	.+8      	; 0x4676 <__udivmodsi4_ep>
    466e:	a2 1b       	sub	r26, r18
    4670:	b3 0b       	sbc	r27, r19
    4672:	e4 0b       	sbc	r30, r20
    4674:	f5 0b       	sbc	r31, r21

00004676 <__udivmodsi4_ep>:
    4676:	66 1f       	adc	r22, r22
    4678:	77 1f       	adc	r23, r23
    467a:	88 1f       	adc	r24, r24
    467c:	99 1f       	adc	r25, r25
    467e:	1a 94       	dec	r1
    4680:	69 f7       	brne	.-38     	; 0x465c <__udivmodsi4_loop>
    4682:	60 95       	com	r22
    4684:	70 95       	com	r23
    4686:	80 95       	com	r24
    4688:	90 95       	com	r25
    468a:	9b 01       	movw	r18, r22
    468c:	ac 01       	movw	r20, r24
    468e:	bd 01       	movw	r22, r26
    4690:	cf 01       	movw	r24, r30
    4692:	08 95       	ret

00004694 <__tablejump2__>:
    4694:	ee 0f       	add	r30, r30
    4696:	ff 1f       	adc	r31, r31
    4698:	00 24       	eor	r0, r0
    469a:	00 1c       	adc	r0, r0
    469c:	0b be       	out	0x3b, r0	; 59
    469e:	07 90       	elpm	r0, Z+
    46a0:	f6 91       	elpm	r31, Z
    46a2:	e0 2d       	mov	r30, r0
    46a4:	09 94       	ijmp

000046a6 <__muluhisi3>:
    46a6:	09 d0       	rcall	.+18     	; 0x46ba <__umulhisi3>
    46a8:	a5 9f       	mul	r26, r21
    46aa:	90 0d       	add	r25, r0
    46ac:	b4 9f       	mul	r27, r20
    46ae:	90 0d       	add	r25, r0
    46b0:	a4 9f       	mul	r26, r20
    46b2:	80 0d       	add	r24, r0
    46b4:	91 1d       	adc	r25, r1
    46b6:	11 24       	eor	r1, r1
    46b8:	08 95       	ret

000046ba <__umulhisi3>:
    46ba:	a2 9f       	mul	r26, r18
    46bc:	b0 01       	movw	r22, r0
    46be:	b3 9f       	mul	r27, r19
    46c0:	c0 01       	movw	r24, r0
    46c2:	a3 9f       	mul	r26, r19
    46c4:	70 0d       	add	r23, r0
    46c6:	81 1d       	adc	r24, r1
    46c8:	11 24       	eor	r1, r1
    46ca:	91 1d       	adc	r25, r1
    46cc:	b2 9f       	mul	r27, r18
    46ce:	70 0d       	add	r23, r0
    46d0:	81 1d       	adc	r24, r1
    46d2:	11 24       	eor	r1, r1
    46d4:	91 1d       	adc	r25, r1
    46d6:	08 95       	ret

000046d8 <memcmp>:
    46d8:	fb 01       	movw	r30, r22
    46da:	dc 01       	movw	r26, r24
    46dc:	04 c0       	rjmp	.+8      	; 0x46e6 <memcmp+0xe>
    46de:	8d 91       	ld	r24, X+
    46e0:	01 90       	ld	r0, Z+
    46e2:	80 19       	sub	r24, r0
    46e4:	21 f4       	brne	.+8      	; 0x46ee <memcmp+0x16>
    46e6:	41 50       	subi	r20, 0x01	; 1
    46e8:	50 40       	sbci	r21, 0x00	; 0
    46ea:	c8 f7       	brcc	.-14     	; 0x46de <memcmp+0x6>
    46ec:	88 1b       	sub	r24, r24
    46ee:	99 0b       	sbc	r25, r25
    46f0:	08 95       	ret

000046f2 <memcpy>:
    46f2:	fb 01       	movw	r30, r22
    46f4:	dc 01       	movw	r26, r24
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <memcpy+0xa>
    46f8:	01 90       	ld	r0, Z+
    46fa:	0d 92       	st	X+, r0
    46fc:	41 50       	subi	r20, 0x01	; 1
    46fe:	50 40       	sbci	r21, 0x00	; 0
    4700:	d8 f7       	brcc	.-10     	; 0x46f8 <memcpy+0x6>
    4702:	08 95       	ret

00004704 <memset>:
    4704:	dc 01       	movw	r26, r24
    4706:	01 c0       	rjmp	.+2      	; 0x470a <memset+0x6>
    4708:	6d 93       	st	X+, r22
    470a:	41 50       	subi	r20, 0x01	; 1
    470c:	50 40       	sbci	r21, 0x00	; 0
    470e:	e0 f7       	brcc	.-8      	; 0x4708 <memset+0x4>
    4710:	08 95       	ret

00004712 <sprintf>:
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	2e 97       	sbiw	r28, 0x0e	; 14
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	0d 89       	ldd	r16, Y+21	; 0x15
    472c:	1e 89       	ldd	r17, Y+22	; 0x16
    472e:	86 e0       	ldi	r24, 0x06	; 6
    4730:	8c 83       	std	Y+4, r24	; 0x04
    4732:	1a 83       	std	Y+2, r17	; 0x02
    4734:	09 83       	std	Y+1, r16	; 0x01
    4736:	8f ef       	ldi	r24, 0xFF	; 255
    4738:	9f e7       	ldi	r25, 0x7F	; 127
    473a:	9e 83       	std	Y+6, r25	; 0x06
    473c:	8d 83       	std	Y+5, r24	; 0x05
    473e:	ae 01       	movw	r20, r28
    4740:	47 5e       	subi	r20, 0xE7	; 231
    4742:	5f 4f       	sbci	r21, 0xFF	; 255
    4744:	6f 89       	ldd	r22, Y+23	; 0x17
    4746:	78 8d       	ldd	r23, Y+24	; 0x18
    4748:	ce 01       	movw	r24, r28
    474a:	01 96       	adiw	r24, 0x01	; 1
    474c:	10 d0       	rcall	.+32     	; 0x476e <vfprintf>
    474e:	ef 81       	ldd	r30, Y+7	; 0x07
    4750:	f8 85       	ldd	r31, Y+8	; 0x08
    4752:	e0 0f       	add	r30, r16
    4754:	f1 1f       	adc	r31, r17
    4756:	10 82       	st	Z, r1
    4758:	2e 96       	adiw	r28, 0x0e	; 14
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	1f 91       	pop	r17
    476a:	0f 91       	pop	r16
    476c:	08 95       	ret

0000476e <vfprintf>:
    476e:	2f 92       	push	r2
    4770:	3f 92       	push	r3
    4772:	4f 92       	push	r4
    4774:	5f 92       	push	r5
    4776:	6f 92       	push	r6
    4778:	7f 92       	push	r7
    477a:	8f 92       	push	r8
    477c:	9f 92       	push	r9
    477e:	af 92       	push	r10
    4780:	bf 92       	push	r11
    4782:	cf 92       	push	r12
    4784:	df 92       	push	r13
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
    4796:	2b 97       	sbiw	r28, 0x0b	; 11
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	f8 94       	cli
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	6c 01       	movw	r12, r24
    47a4:	7b 01       	movw	r14, r22
    47a6:	8a 01       	movw	r16, r20
    47a8:	fc 01       	movw	r30, r24
    47aa:	17 82       	std	Z+7, r1	; 0x07
    47ac:	16 82       	std	Z+6, r1	; 0x06
    47ae:	83 81       	ldd	r24, Z+3	; 0x03
    47b0:	81 ff       	sbrs	r24, 1
    47b2:	bf c1       	rjmp	.+894    	; 0x4b32 <vfprintf+0x3c4>
    47b4:	ce 01       	movw	r24, r28
    47b6:	01 96       	adiw	r24, 0x01	; 1
    47b8:	3c 01       	movw	r6, r24
    47ba:	f6 01       	movw	r30, r12
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	f7 01       	movw	r30, r14
    47c0:	93 fd       	sbrc	r25, 3
    47c2:	85 91       	lpm	r24, Z+
    47c4:	93 ff       	sbrs	r25, 3
    47c6:	81 91       	ld	r24, Z+
    47c8:	7f 01       	movw	r14, r30
    47ca:	88 23       	and	r24, r24
    47cc:	09 f4       	brne	.+2      	; 0x47d0 <vfprintf+0x62>
    47ce:	ad c1       	rjmp	.+858    	; 0x4b2a <vfprintf+0x3bc>
    47d0:	85 32       	cpi	r24, 0x25	; 37
    47d2:	39 f4       	brne	.+14     	; 0x47e2 <vfprintf+0x74>
    47d4:	93 fd       	sbrc	r25, 3
    47d6:	85 91       	lpm	r24, Z+
    47d8:	93 ff       	sbrs	r25, 3
    47da:	81 91       	ld	r24, Z+
    47dc:	7f 01       	movw	r14, r30
    47de:	85 32       	cpi	r24, 0x25	; 37
    47e0:	21 f4       	brne	.+8      	; 0x47ea <vfprintf+0x7c>
    47e2:	b6 01       	movw	r22, r12
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	d6 d1       	rcall	.+940    	; 0x4b94 <fputc>
    47e8:	e8 cf       	rjmp	.-48     	; 0x47ba <vfprintf+0x4c>
    47ea:	91 2c       	mov	r9, r1
    47ec:	21 2c       	mov	r2, r1
    47ee:	31 2c       	mov	r3, r1
    47f0:	ff e1       	ldi	r31, 0x1F	; 31
    47f2:	f3 15       	cp	r31, r3
    47f4:	d8 f0       	brcs	.+54     	; 0x482c <vfprintf+0xbe>
    47f6:	8b 32       	cpi	r24, 0x2B	; 43
    47f8:	79 f0       	breq	.+30     	; 0x4818 <vfprintf+0xaa>
    47fa:	38 f4       	brcc	.+14     	; 0x480a <vfprintf+0x9c>
    47fc:	80 32       	cpi	r24, 0x20	; 32
    47fe:	79 f0       	breq	.+30     	; 0x481e <vfprintf+0xb0>
    4800:	83 32       	cpi	r24, 0x23	; 35
    4802:	a1 f4       	brne	.+40     	; 0x482c <vfprintf+0xbe>
    4804:	23 2d       	mov	r18, r3
    4806:	20 61       	ori	r18, 0x10	; 16
    4808:	1d c0       	rjmp	.+58     	; 0x4844 <vfprintf+0xd6>
    480a:	8d 32       	cpi	r24, 0x2D	; 45
    480c:	61 f0       	breq	.+24     	; 0x4826 <vfprintf+0xb8>
    480e:	80 33       	cpi	r24, 0x30	; 48
    4810:	69 f4       	brne	.+26     	; 0x482c <vfprintf+0xbe>
    4812:	23 2d       	mov	r18, r3
    4814:	21 60       	ori	r18, 0x01	; 1
    4816:	16 c0       	rjmp	.+44     	; 0x4844 <vfprintf+0xd6>
    4818:	83 2d       	mov	r24, r3
    481a:	82 60       	ori	r24, 0x02	; 2
    481c:	38 2e       	mov	r3, r24
    481e:	e3 2d       	mov	r30, r3
    4820:	e4 60       	ori	r30, 0x04	; 4
    4822:	3e 2e       	mov	r3, r30
    4824:	2a c0       	rjmp	.+84     	; 0x487a <vfprintf+0x10c>
    4826:	f3 2d       	mov	r31, r3
    4828:	f8 60       	ori	r31, 0x08	; 8
    482a:	1d c0       	rjmp	.+58     	; 0x4866 <vfprintf+0xf8>
    482c:	37 fc       	sbrc	r3, 7
    482e:	2d c0       	rjmp	.+90     	; 0x488a <vfprintf+0x11c>
    4830:	20 ed       	ldi	r18, 0xD0	; 208
    4832:	28 0f       	add	r18, r24
    4834:	2a 30       	cpi	r18, 0x0A	; 10
    4836:	40 f0       	brcs	.+16     	; 0x4848 <vfprintf+0xda>
    4838:	8e 32       	cpi	r24, 0x2E	; 46
    483a:	b9 f4       	brne	.+46     	; 0x486a <vfprintf+0xfc>
    483c:	36 fc       	sbrc	r3, 6
    483e:	75 c1       	rjmp	.+746    	; 0x4b2a <vfprintf+0x3bc>
    4840:	23 2d       	mov	r18, r3
    4842:	20 64       	ori	r18, 0x40	; 64
    4844:	32 2e       	mov	r3, r18
    4846:	19 c0       	rjmp	.+50     	; 0x487a <vfprintf+0x10c>
    4848:	36 fe       	sbrs	r3, 6
    484a:	06 c0       	rjmp	.+12     	; 0x4858 <vfprintf+0xea>
    484c:	8a e0       	ldi	r24, 0x0A	; 10
    484e:	98 9e       	mul	r9, r24
    4850:	20 0d       	add	r18, r0
    4852:	11 24       	eor	r1, r1
    4854:	92 2e       	mov	r9, r18
    4856:	11 c0       	rjmp	.+34     	; 0x487a <vfprintf+0x10c>
    4858:	ea e0       	ldi	r30, 0x0A	; 10
    485a:	2e 9e       	mul	r2, r30
    485c:	20 0d       	add	r18, r0
    485e:	11 24       	eor	r1, r1
    4860:	22 2e       	mov	r2, r18
    4862:	f3 2d       	mov	r31, r3
    4864:	f0 62       	ori	r31, 0x20	; 32
    4866:	3f 2e       	mov	r3, r31
    4868:	08 c0       	rjmp	.+16     	; 0x487a <vfprintf+0x10c>
    486a:	8c 36       	cpi	r24, 0x6C	; 108
    486c:	21 f4       	brne	.+8      	; 0x4876 <vfprintf+0x108>
    486e:	83 2d       	mov	r24, r3
    4870:	80 68       	ori	r24, 0x80	; 128
    4872:	38 2e       	mov	r3, r24
    4874:	02 c0       	rjmp	.+4      	; 0x487a <vfprintf+0x10c>
    4876:	88 36       	cpi	r24, 0x68	; 104
    4878:	41 f4       	brne	.+16     	; 0x488a <vfprintf+0x11c>
    487a:	f7 01       	movw	r30, r14
    487c:	93 fd       	sbrc	r25, 3
    487e:	85 91       	lpm	r24, Z+
    4880:	93 ff       	sbrs	r25, 3
    4882:	81 91       	ld	r24, Z+
    4884:	7f 01       	movw	r14, r30
    4886:	81 11       	cpse	r24, r1
    4888:	b3 cf       	rjmp	.-154    	; 0x47f0 <vfprintf+0x82>
    488a:	98 2f       	mov	r25, r24
    488c:	9f 7d       	andi	r25, 0xDF	; 223
    488e:	95 54       	subi	r25, 0x45	; 69
    4890:	93 30       	cpi	r25, 0x03	; 3
    4892:	28 f4       	brcc	.+10     	; 0x489e <vfprintf+0x130>
    4894:	0c 5f       	subi	r16, 0xFC	; 252
    4896:	1f 4f       	sbci	r17, 0xFF	; 255
    4898:	9f e3       	ldi	r25, 0x3F	; 63
    489a:	99 83       	std	Y+1, r25	; 0x01
    489c:	0d c0       	rjmp	.+26     	; 0x48b8 <vfprintf+0x14a>
    489e:	83 36       	cpi	r24, 0x63	; 99
    48a0:	31 f0       	breq	.+12     	; 0x48ae <vfprintf+0x140>
    48a2:	83 37       	cpi	r24, 0x73	; 115
    48a4:	71 f0       	breq	.+28     	; 0x48c2 <vfprintf+0x154>
    48a6:	83 35       	cpi	r24, 0x53	; 83
    48a8:	09 f0       	breq	.+2      	; 0x48ac <vfprintf+0x13e>
    48aa:	55 c0       	rjmp	.+170    	; 0x4956 <vfprintf+0x1e8>
    48ac:	20 c0       	rjmp	.+64     	; 0x48ee <vfprintf+0x180>
    48ae:	f8 01       	movw	r30, r16
    48b0:	80 81       	ld	r24, Z
    48b2:	89 83       	std	Y+1, r24	; 0x01
    48b4:	0e 5f       	subi	r16, 0xFE	; 254
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	88 24       	eor	r8, r8
    48ba:	83 94       	inc	r8
    48bc:	91 2c       	mov	r9, r1
    48be:	53 01       	movw	r10, r6
    48c0:	12 c0       	rjmp	.+36     	; 0x48e6 <vfprintf+0x178>
    48c2:	28 01       	movw	r4, r16
    48c4:	f2 e0       	ldi	r31, 0x02	; 2
    48c6:	4f 0e       	add	r4, r31
    48c8:	51 1c       	adc	r5, r1
    48ca:	f8 01       	movw	r30, r16
    48cc:	a0 80       	ld	r10, Z
    48ce:	b1 80       	ldd	r11, Z+1	; 0x01
    48d0:	36 fe       	sbrs	r3, 6
    48d2:	03 c0       	rjmp	.+6      	; 0x48da <vfprintf+0x16c>
    48d4:	69 2d       	mov	r22, r9
    48d6:	70 e0       	ldi	r23, 0x00	; 0
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <vfprintf+0x170>
    48da:	6f ef       	ldi	r22, 0xFF	; 255
    48dc:	7f ef       	ldi	r23, 0xFF	; 255
    48de:	c5 01       	movw	r24, r10
    48e0:	4e d1       	rcall	.+668    	; 0x4b7e <strnlen>
    48e2:	4c 01       	movw	r8, r24
    48e4:	82 01       	movw	r16, r4
    48e6:	f3 2d       	mov	r31, r3
    48e8:	ff 77       	andi	r31, 0x7F	; 127
    48ea:	3f 2e       	mov	r3, r31
    48ec:	15 c0       	rjmp	.+42     	; 0x4918 <vfprintf+0x1aa>
    48ee:	28 01       	movw	r4, r16
    48f0:	22 e0       	ldi	r18, 0x02	; 2
    48f2:	42 0e       	add	r4, r18
    48f4:	51 1c       	adc	r5, r1
    48f6:	f8 01       	movw	r30, r16
    48f8:	a0 80       	ld	r10, Z
    48fa:	b1 80       	ldd	r11, Z+1	; 0x01
    48fc:	36 fe       	sbrs	r3, 6
    48fe:	03 c0       	rjmp	.+6      	; 0x4906 <vfprintf+0x198>
    4900:	69 2d       	mov	r22, r9
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	02 c0       	rjmp	.+4      	; 0x490a <vfprintf+0x19c>
    4906:	6f ef       	ldi	r22, 0xFF	; 255
    4908:	7f ef       	ldi	r23, 0xFF	; 255
    490a:	c5 01       	movw	r24, r10
    490c:	2d d1       	rcall	.+602    	; 0x4b68 <strnlen_P>
    490e:	4c 01       	movw	r8, r24
    4910:	f3 2d       	mov	r31, r3
    4912:	f0 68       	ori	r31, 0x80	; 128
    4914:	3f 2e       	mov	r3, r31
    4916:	82 01       	movw	r16, r4
    4918:	33 fc       	sbrc	r3, 3
    491a:	19 c0       	rjmp	.+50     	; 0x494e <vfprintf+0x1e0>
    491c:	82 2d       	mov	r24, r2
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	88 16       	cp	r8, r24
    4922:	99 06       	cpc	r9, r25
    4924:	a0 f4       	brcc	.+40     	; 0x494e <vfprintf+0x1e0>
    4926:	b6 01       	movw	r22, r12
    4928:	80 e2       	ldi	r24, 0x20	; 32
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	33 d1       	rcall	.+614    	; 0x4b94 <fputc>
    492e:	2a 94       	dec	r2
    4930:	f5 cf       	rjmp	.-22     	; 0x491c <vfprintf+0x1ae>
    4932:	f5 01       	movw	r30, r10
    4934:	37 fc       	sbrc	r3, 7
    4936:	85 91       	lpm	r24, Z+
    4938:	37 fe       	sbrs	r3, 7
    493a:	81 91       	ld	r24, Z+
    493c:	5f 01       	movw	r10, r30
    493e:	b6 01       	movw	r22, r12
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	28 d1       	rcall	.+592    	; 0x4b94 <fputc>
    4944:	21 10       	cpse	r2, r1
    4946:	2a 94       	dec	r2
    4948:	21 e0       	ldi	r18, 0x01	; 1
    494a:	82 1a       	sub	r8, r18
    494c:	91 08       	sbc	r9, r1
    494e:	81 14       	cp	r8, r1
    4950:	91 04       	cpc	r9, r1
    4952:	79 f7       	brne	.-34     	; 0x4932 <vfprintf+0x1c4>
    4954:	e1 c0       	rjmp	.+450    	; 0x4b18 <vfprintf+0x3aa>
    4956:	84 36       	cpi	r24, 0x64	; 100
    4958:	11 f0       	breq	.+4      	; 0x495e <vfprintf+0x1f0>
    495a:	89 36       	cpi	r24, 0x69	; 105
    495c:	39 f5       	brne	.+78     	; 0x49ac <vfprintf+0x23e>
    495e:	f8 01       	movw	r30, r16
    4960:	37 fe       	sbrs	r3, 7
    4962:	07 c0       	rjmp	.+14     	; 0x4972 <vfprintf+0x204>
    4964:	60 81       	ld	r22, Z
    4966:	71 81       	ldd	r23, Z+1	; 0x01
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	93 81       	ldd	r25, Z+3	; 0x03
    496c:	0c 5f       	subi	r16, 0xFC	; 252
    496e:	1f 4f       	sbci	r17, 0xFF	; 255
    4970:	08 c0       	rjmp	.+16     	; 0x4982 <vfprintf+0x214>
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	07 2e       	mov	r0, r23
    4978:	00 0c       	add	r0, r0
    497a:	88 0b       	sbc	r24, r24
    497c:	99 0b       	sbc	r25, r25
    497e:	0e 5f       	subi	r16, 0xFE	; 254
    4980:	1f 4f       	sbci	r17, 0xFF	; 255
    4982:	f3 2d       	mov	r31, r3
    4984:	ff 76       	andi	r31, 0x6F	; 111
    4986:	3f 2e       	mov	r3, r31
    4988:	97 ff       	sbrs	r25, 7
    498a:	09 c0       	rjmp	.+18     	; 0x499e <vfprintf+0x230>
    498c:	90 95       	com	r25
    498e:	80 95       	com	r24
    4990:	70 95       	com	r23
    4992:	61 95       	neg	r22
    4994:	7f 4f       	sbci	r23, 0xFF	; 255
    4996:	8f 4f       	sbci	r24, 0xFF	; 255
    4998:	9f 4f       	sbci	r25, 0xFF	; 255
    499a:	f0 68       	ori	r31, 0x80	; 128
    499c:	3f 2e       	mov	r3, r31
    499e:	2a e0       	ldi	r18, 0x0A	; 10
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	a3 01       	movw	r20, r6
    49a4:	33 d1       	rcall	.+614    	; 0x4c0c <__ultoa_invert>
    49a6:	88 2e       	mov	r8, r24
    49a8:	86 18       	sub	r8, r6
    49aa:	44 c0       	rjmp	.+136    	; 0x4a34 <vfprintf+0x2c6>
    49ac:	85 37       	cpi	r24, 0x75	; 117
    49ae:	31 f4       	brne	.+12     	; 0x49bc <vfprintf+0x24e>
    49b0:	23 2d       	mov	r18, r3
    49b2:	2f 7e       	andi	r18, 0xEF	; 239
    49b4:	b2 2e       	mov	r11, r18
    49b6:	2a e0       	ldi	r18, 0x0A	; 10
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	25 c0       	rjmp	.+74     	; 0x4a06 <vfprintf+0x298>
    49bc:	93 2d       	mov	r25, r3
    49be:	99 7f       	andi	r25, 0xF9	; 249
    49c0:	b9 2e       	mov	r11, r25
    49c2:	8f 36       	cpi	r24, 0x6F	; 111
    49c4:	c1 f0       	breq	.+48     	; 0x49f6 <vfprintf+0x288>
    49c6:	18 f4       	brcc	.+6      	; 0x49ce <vfprintf+0x260>
    49c8:	88 35       	cpi	r24, 0x58	; 88
    49ca:	79 f0       	breq	.+30     	; 0x49ea <vfprintf+0x27c>
    49cc:	ae c0       	rjmp	.+348    	; 0x4b2a <vfprintf+0x3bc>
    49ce:	80 37       	cpi	r24, 0x70	; 112
    49d0:	19 f0       	breq	.+6      	; 0x49d8 <vfprintf+0x26a>
    49d2:	88 37       	cpi	r24, 0x78	; 120
    49d4:	21 f0       	breq	.+8      	; 0x49de <vfprintf+0x270>
    49d6:	a9 c0       	rjmp	.+338    	; 0x4b2a <vfprintf+0x3bc>
    49d8:	e9 2f       	mov	r30, r25
    49da:	e0 61       	ori	r30, 0x10	; 16
    49dc:	be 2e       	mov	r11, r30
    49de:	b4 fe       	sbrs	r11, 4
    49e0:	0d c0       	rjmp	.+26     	; 0x49fc <vfprintf+0x28e>
    49e2:	fb 2d       	mov	r31, r11
    49e4:	f4 60       	ori	r31, 0x04	; 4
    49e6:	bf 2e       	mov	r11, r31
    49e8:	09 c0       	rjmp	.+18     	; 0x49fc <vfprintf+0x28e>
    49ea:	34 fe       	sbrs	r3, 4
    49ec:	0a c0       	rjmp	.+20     	; 0x4a02 <vfprintf+0x294>
    49ee:	29 2f       	mov	r18, r25
    49f0:	26 60       	ori	r18, 0x06	; 6
    49f2:	b2 2e       	mov	r11, r18
    49f4:	06 c0       	rjmp	.+12     	; 0x4a02 <vfprintf+0x294>
    49f6:	28 e0       	ldi	r18, 0x08	; 8
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	05 c0       	rjmp	.+10     	; 0x4a06 <vfprintf+0x298>
    49fc:	20 e1       	ldi	r18, 0x10	; 16
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <vfprintf+0x298>
    4a02:	20 e1       	ldi	r18, 0x10	; 16
    4a04:	32 e0       	ldi	r19, 0x02	; 2
    4a06:	f8 01       	movw	r30, r16
    4a08:	b7 fe       	sbrs	r11, 7
    4a0a:	07 c0       	rjmp	.+14     	; 0x4a1a <vfprintf+0x2ac>
    4a0c:	60 81       	ld	r22, Z
    4a0e:	71 81       	ldd	r23, Z+1	; 0x01
    4a10:	82 81       	ldd	r24, Z+2	; 0x02
    4a12:	93 81       	ldd	r25, Z+3	; 0x03
    4a14:	0c 5f       	subi	r16, 0xFC	; 252
    4a16:	1f 4f       	sbci	r17, 0xFF	; 255
    4a18:	06 c0       	rjmp	.+12     	; 0x4a26 <vfprintf+0x2b8>
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	80 e0       	ldi	r24, 0x00	; 0
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	0e 5f       	subi	r16, 0xFE	; 254
    4a24:	1f 4f       	sbci	r17, 0xFF	; 255
    4a26:	a3 01       	movw	r20, r6
    4a28:	f1 d0       	rcall	.+482    	; 0x4c0c <__ultoa_invert>
    4a2a:	88 2e       	mov	r8, r24
    4a2c:	86 18       	sub	r8, r6
    4a2e:	fb 2d       	mov	r31, r11
    4a30:	ff 77       	andi	r31, 0x7F	; 127
    4a32:	3f 2e       	mov	r3, r31
    4a34:	36 fe       	sbrs	r3, 6
    4a36:	0d c0       	rjmp	.+26     	; 0x4a52 <vfprintf+0x2e4>
    4a38:	23 2d       	mov	r18, r3
    4a3a:	2e 7f       	andi	r18, 0xFE	; 254
    4a3c:	a2 2e       	mov	r10, r18
    4a3e:	89 14       	cp	r8, r9
    4a40:	58 f4       	brcc	.+22     	; 0x4a58 <vfprintf+0x2ea>
    4a42:	34 fe       	sbrs	r3, 4
    4a44:	0b c0       	rjmp	.+22     	; 0x4a5c <vfprintf+0x2ee>
    4a46:	32 fc       	sbrc	r3, 2
    4a48:	09 c0       	rjmp	.+18     	; 0x4a5c <vfprintf+0x2ee>
    4a4a:	83 2d       	mov	r24, r3
    4a4c:	8e 7e       	andi	r24, 0xEE	; 238
    4a4e:	a8 2e       	mov	r10, r24
    4a50:	05 c0       	rjmp	.+10     	; 0x4a5c <vfprintf+0x2ee>
    4a52:	b8 2c       	mov	r11, r8
    4a54:	a3 2c       	mov	r10, r3
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <vfprintf+0x2f0>
    4a58:	b8 2c       	mov	r11, r8
    4a5a:	01 c0       	rjmp	.+2      	; 0x4a5e <vfprintf+0x2f0>
    4a5c:	b9 2c       	mov	r11, r9
    4a5e:	a4 fe       	sbrs	r10, 4
    4a60:	0f c0       	rjmp	.+30     	; 0x4a80 <vfprintf+0x312>
    4a62:	fe 01       	movw	r30, r28
    4a64:	e8 0d       	add	r30, r8
    4a66:	f1 1d       	adc	r31, r1
    4a68:	80 81       	ld	r24, Z
    4a6a:	80 33       	cpi	r24, 0x30	; 48
    4a6c:	21 f4       	brne	.+8      	; 0x4a76 <vfprintf+0x308>
    4a6e:	9a 2d       	mov	r25, r10
    4a70:	99 7e       	andi	r25, 0xE9	; 233
    4a72:	a9 2e       	mov	r10, r25
    4a74:	09 c0       	rjmp	.+18     	; 0x4a88 <vfprintf+0x31a>
    4a76:	a2 fe       	sbrs	r10, 2
    4a78:	06 c0       	rjmp	.+12     	; 0x4a86 <vfprintf+0x318>
    4a7a:	b3 94       	inc	r11
    4a7c:	b3 94       	inc	r11
    4a7e:	04 c0       	rjmp	.+8      	; 0x4a88 <vfprintf+0x31a>
    4a80:	8a 2d       	mov	r24, r10
    4a82:	86 78       	andi	r24, 0x86	; 134
    4a84:	09 f0       	breq	.+2      	; 0x4a88 <vfprintf+0x31a>
    4a86:	b3 94       	inc	r11
    4a88:	a3 fc       	sbrc	r10, 3
    4a8a:	10 c0       	rjmp	.+32     	; 0x4aac <vfprintf+0x33e>
    4a8c:	a0 fe       	sbrs	r10, 0
    4a8e:	06 c0       	rjmp	.+12     	; 0x4a9c <vfprintf+0x32e>
    4a90:	b2 14       	cp	r11, r2
    4a92:	80 f4       	brcc	.+32     	; 0x4ab4 <vfprintf+0x346>
    4a94:	28 0c       	add	r2, r8
    4a96:	92 2c       	mov	r9, r2
    4a98:	9b 18       	sub	r9, r11
    4a9a:	0d c0       	rjmp	.+26     	; 0x4ab6 <vfprintf+0x348>
    4a9c:	b2 14       	cp	r11, r2
    4a9e:	58 f4       	brcc	.+22     	; 0x4ab6 <vfprintf+0x348>
    4aa0:	b6 01       	movw	r22, r12
    4aa2:	80 e2       	ldi	r24, 0x20	; 32
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	76 d0       	rcall	.+236    	; 0x4b94 <fputc>
    4aa8:	b3 94       	inc	r11
    4aaa:	f8 cf       	rjmp	.-16     	; 0x4a9c <vfprintf+0x32e>
    4aac:	b2 14       	cp	r11, r2
    4aae:	18 f4       	brcc	.+6      	; 0x4ab6 <vfprintf+0x348>
    4ab0:	2b 18       	sub	r2, r11
    4ab2:	02 c0       	rjmp	.+4      	; 0x4ab8 <vfprintf+0x34a>
    4ab4:	98 2c       	mov	r9, r8
    4ab6:	21 2c       	mov	r2, r1
    4ab8:	a4 fe       	sbrs	r10, 4
    4aba:	0f c0       	rjmp	.+30     	; 0x4ada <vfprintf+0x36c>
    4abc:	b6 01       	movw	r22, r12
    4abe:	80 e3       	ldi	r24, 0x30	; 48
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	68 d0       	rcall	.+208    	; 0x4b94 <fputc>
    4ac4:	a2 fe       	sbrs	r10, 2
    4ac6:	16 c0       	rjmp	.+44     	; 0x4af4 <vfprintf+0x386>
    4ac8:	a1 fc       	sbrc	r10, 1
    4aca:	03 c0       	rjmp	.+6      	; 0x4ad2 <vfprintf+0x364>
    4acc:	88 e7       	ldi	r24, 0x78	; 120
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	02 c0       	rjmp	.+4      	; 0x4ad6 <vfprintf+0x368>
    4ad2:	88 e5       	ldi	r24, 0x58	; 88
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	b6 01       	movw	r22, r12
    4ad8:	0c c0       	rjmp	.+24     	; 0x4af2 <vfprintf+0x384>
    4ada:	8a 2d       	mov	r24, r10
    4adc:	86 78       	andi	r24, 0x86	; 134
    4ade:	51 f0       	breq	.+20     	; 0x4af4 <vfprintf+0x386>
    4ae0:	a1 fe       	sbrs	r10, 1
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <vfprintf+0x37a>
    4ae4:	8b e2       	ldi	r24, 0x2B	; 43
    4ae6:	01 c0       	rjmp	.+2      	; 0x4aea <vfprintf+0x37c>
    4ae8:	80 e2       	ldi	r24, 0x20	; 32
    4aea:	a7 fc       	sbrc	r10, 7
    4aec:	8d e2       	ldi	r24, 0x2D	; 45
    4aee:	b6 01       	movw	r22, r12
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	50 d0       	rcall	.+160    	; 0x4b94 <fputc>
    4af4:	89 14       	cp	r8, r9
    4af6:	30 f4       	brcc	.+12     	; 0x4b04 <vfprintf+0x396>
    4af8:	b6 01       	movw	r22, r12
    4afa:	80 e3       	ldi	r24, 0x30	; 48
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	4a d0       	rcall	.+148    	; 0x4b94 <fputc>
    4b00:	9a 94       	dec	r9
    4b02:	f8 cf       	rjmp	.-16     	; 0x4af4 <vfprintf+0x386>
    4b04:	8a 94       	dec	r8
    4b06:	f3 01       	movw	r30, r6
    4b08:	e8 0d       	add	r30, r8
    4b0a:	f1 1d       	adc	r31, r1
    4b0c:	80 81       	ld	r24, Z
    4b0e:	b6 01       	movw	r22, r12
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	40 d0       	rcall	.+128    	; 0x4b94 <fputc>
    4b14:	81 10       	cpse	r8, r1
    4b16:	f6 cf       	rjmp	.-20     	; 0x4b04 <vfprintf+0x396>
    4b18:	22 20       	and	r2, r2
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <vfprintf+0x3b0>
    4b1c:	4e ce       	rjmp	.-868    	; 0x47ba <vfprintf+0x4c>
    4b1e:	b6 01       	movw	r22, r12
    4b20:	80 e2       	ldi	r24, 0x20	; 32
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	37 d0       	rcall	.+110    	; 0x4b94 <fputc>
    4b26:	2a 94       	dec	r2
    4b28:	f7 cf       	rjmp	.-18     	; 0x4b18 <vfprintf+0x3aa>
    4b2a:	f6 01       	movw	r30, r12
    4b2c:	86 81       	ldd	r24, Z+6	; 0x06
    4b2e:	97 81       	ldd	r25, Z+7	; 0x07
    4b30:	02 c0       	rjmp	.+4      	; 0x4b36 <vfprintf+0x3c8>
    4b32:	8f ef       	ldi	r24, 0xFF	; 255
    4b34:	9f ef       	ldi	r25, 0xFF	; 255
    4b36:	2b 96       	adiw	r28, 0x0b	; 11
    4b38:	0f b6       	in	r0, 0x3f	; 63
    4b3a:	f8 94       	cli
    4b3c:	de bf       	out	0x3e, r29	; 62
    4b3e:	0f be       	out	0x3f, r0	; 63
    4b40:	cd bf       	out	0x3d, r28	; 61
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	1f 91       	pop	r17
    4b48:	0f 91       	pop	r16
    4b4a:	ff 90       	pop	r15
    4b4c:	ef 90       	pop	r14
    4b4e:	df 90       	pop	r13
    4b50:	cf 90       	pop	r12
    4b52:	bf 90       	pop	r11
    4b54:	af 90       	pop	r10
    4b56:	9f 90       	pop	r9
    4b58:	8f 90       	pop	r8
    4b5a:	7f 90       	pop	r7
    4b5c:	6f 90       	pop	r6
    4b5e:	5f 90       	pop	r5
    4b60:	4f 90       	pop	r4
    4b62:	3f 90       	pop	r3
    4b64:	2f 90       	pop	r2
    4b66:	08 95       	ret

00004b68 <strnlen_P>:
    4b68:	fc 01       	movw	r30, r24
    4b6a:	05 90       	lpm	r0, Z+
    4b6c:	61 50       	subi	r22, 0x01	; 1
    4b6e:	70 40       	sbci	r23, 0x00	; 0
    4b70:	01 10       	cpse	r0, r1
    4b72:	d8 f7       	brcc	.-10     	; 0x4b6a <strnlen_P+0x2>
    4b74:	80 95       	com	r24
    4b76:	90 95       	com	r25
    4b78:	8e 0f       	add	r24, r30
    4b7a:	9f 1f       	adc	r25, r31
    4b7c:	08 95       	ret

00004b7e <strnlen>:
    4b7e:	fc 01       	movw	r30, r24
    4b80:	61 50       	subi	r22, 0x01	; 1
    4b82:	70 40       	sbci	r23, 0x00	; 0
    4b84:	01 90       	ld	r0, Z+
    4b86:	01 10       	cpse	r0, r1
    4b88:	d8 f7       	brcc	.-10     	; 0x4b80 <strnlen+0x2>
    4b8a:	80 95       	com	r24
    4b8c:	90 95       	com	r25
    4b8e:	8e 0f       	add	r24, r30
    4b90:	9f 1f       	adc	r25, r31
    4b92:	08 95       	ret

00004b94 <fputc>:
    4b94:	0f 93       	push	r16
    4b96:	1f 93       	push	r17
    4b98:	cf 93       	push	r28
    4b9a:	df 93       	push	r29
    4b9c:	fb 01       	movw	r30, r22
    4b9e:	23 81       	ldd	r18, Z+3	; 0x03
    4ba0:	21 fd       	sbrc	r18, 1
    4ba2:	03 c0       	rjmp	.+6      	; 0x4baa <fputc+0x16>
    4ba4:	8f ef       	ldi	r24, 0xFF	; 255
    4ba6:	9f ef       	ldi	r25, 0xFF	; 255
    4ba8:	2c c0       	rjmp	.+88     	; 0x4c02 <fputc+0x6e>
    4baa:	22 ff       	sbrs	r18, 2
    4bac:	16 c0       	rjmp	.+44     	; 0x4bda <fputc+0x46>
    4bae:	46 81       	ldd	r20, Z+6	; 0x06
    4bb0:	57 81       	ldd	r21, Z+7	; 0x07
    4bb2:	24 81       	ldd	r18, Z+4	; 0x04
    4bb4:	35 81       	ldd	r19, Z+5	; 0x05
    4bb6:	42 17       	cp	r20, r18
    4bb8:	53 07       	cpc	r21, r19
    4bba:	44 f4       	brge	.+16     	; 0x4bcc <fputc+0x38>
    4bbc:	a0 81       	ld	r26, Z
    4bbe:	b1 81       	ldd	r27, Z+1	; 0x01
    4bc0:	9d 01       	movw	r18, r26
    4bc2:	2f 5f       	subi	r18, 0xFF	; 255
    4bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc6:	31 83       	std	Z+1, r19	; 0x01
    4bc8:	20 83       	st	Z, r18
    4bca:	8c 93       	st	X, r24
    4bcc:	26 81       	ldd	r18, Z+6	; 0x06
    4bce:	37 81       	ldd	r19, Z+7	; 0x07
    4bd0:	2f 5f       	subi	r18, 0xFF	; 255
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	37 83       	std	Z+7, r19	; 0x07
    4bd6:	26 83       	std	Z+6, r18	; 0x06
    4bd8:	14 c0       	rjmp	.+40     	; 0x4c02 <fputc+0x6e>
    4bda:	8b 01       	movw	r16, r22
    4bdc:	ec 01       	movw	r28, r24
    4bde:	fb 01       	movw	r30, r22
    4be0:	00 84       	ldd	r0, Z+8	; 0x08
    4be2:	f1 85       	ldd	r31, Z+9	; 0x09
    4be4:	e0 2d       	mov	r30, r0
    4be6:	09 95       	icall
    4be8:	89 2b       	or	r24, r25
    4bea:	e1 f6       	brne	.-72     	; 0x4ba4 <fputc+0x10>
    4bec:	d8 01       	movw	r26, r16
    4bee:	16 96       	adiw	r26, 0x06	; 6
    4bf0:	8d 91       	ld	r24, X+
    4bf2:	9c 91       	ld	r25, X
    4bf4:	17 97       	sbiw	r26, 0x07	; 7
    4bf6:	01 96       	adiw	r24, 0x01	; 1
    4bf8:	17 96       	adiw	r26, 0x07	; 7
    4bfa:	9c 93       	st	X, r25
    4bfc:	8e 93       	st	-X, r24
    4bfe:	16 97       	sbiw	r26, 0x06	; 6
    4c00:	ce 01       	movw	r24, r28
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	1f 91       	pop	r17
    4c08:	0f 91       	pop	r16
    4c0a:	08 95       	ret

00004c0c <__ultoa_invert>:
    4c0c:	fa 01       	movw	r30, r20
    4c0e:	aa 27       	eor	r26, r26
    4c10:	28 30       	cpi	r18, 0x08	; 8
    4c12:	51 f1       	breq	.+84     	; 0x4c68 <__ultoa_invert+0x5c>
    4c14:	20 31       	cpi	r18, 0x10	; 16
    4c16:	81 f1       	breq	.+96     	; 0x4c78 <__ultoa_invert+0x6c>
    4c18:	e8 94       	clt
    4c1a:	6f 93       	push	r22
    4c1c:	6e 7f       	andi	r22, 0xFE	; 254
    4c1e:	6e 5f       	subi	r22, 0xFE	; 254
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255
    4c22:	8f 4f       	sbci	r24, 0xFF	; 255
    4c24:	9f 4f       	sbci	r25, 0xFF	; 255
    4c26:	af 4f       	sbci	r26, 0xFF	; 255
    4c28:	b1 e0       	ldi	r27, 0x01	; 1
    4c2a:	3e d0       	rcall	.+124    	; 0x4ca8 <__ultoa_invert+0x9c>
    4c2c:	b4 e0       	ldi	r27, 0x04	; 4
    4c2e:	3c d0       	rcall	.+120    	; 0x4ca8 <__ultoa_invert+0x9c>
    4c30:	67 0f       	add	r22, r23
    4c32:	78 1f       	adc	r23, r24
    4c34:	89 1f       	adc	r24, r25
    4c36:	9a 1f       	adc	r25, r26
    4c38:	a1 1d       	adc	r26, r1
    4c3a:	68 0f       	add	r22, r24
    4c3c:	79 1f       	adc	r23, r25
    4c3e:	8a 1f       	adc	r24, r26
    4c40:	91 1d       	adc	r25, r1
    4c42:	a1 1d       	adc	r26, r1
    4c44:	6a 0f       	add	r22, r26
    4c46:	71 1d       	adc	r23, r1
    4c48:	81 1d       	adc	r24, r1
    4c4a:	91 1d       	adc	r25, r1
    4c4c:	a1 1d       	adc	r26, r1
    4c4e:	20 d0       	rcall	.+64     	; 0x4c90 <__ultoa_invert+0x84>
    4c50:	09 f4       	brne	.+2      	; 0x4c54 <__ultoa_invert+0x48>
    4c52:	68 94       	set
    4c54:	3f 91       	pop	r19
    4c56:	2a e0       	ldi	r18, 0x0A	; 10
    4c58:	26 9f       	mul	r18, r22
    4c5a:	11 24       	eor	r1, r1
    4c5c:	30 19       	sub	r19, r0
    4c5e:	30 5d       	subi	r19, 0xD0	; 208
    4c60:	31 93       	st	Z+, r19
    4c62:	de f6       	brtc	.-74     	; 0x4c1a <__ultoa_invert+0xe>
    4c64:	cf 01       	movw	r24, r30
    4c66:	08 95       	ret
    4c68:	46 2f       	mov	r20, r22
    4c6a:	47 70       	andi	r20, 0x07	; 7
    4c6c:	40 5d       	subi	r20, 0xD0	; 208
    4c6e:	41 93       	st	Z+, r20
    4c70:	b3 e0       	ldi	r27, 0x03	; 3
    4c72:	0f d0       	rcall	.+30     	; 0x4c92 <__ultoa_invert+0x86>
    4c74:	c9 f7       	brne	.-14     	; 0x4c68 <__ultoa_invert+0x5c>
    4c76:	f6 cf       	rjmp	.-20     	; 0x4c64 <__ultoa_invert+0x58>
    4c78:	46 2f       	mov	r20, r22
    4c7a:	4f 70       	andi	r20, 0x0F	; 15
    4c7c:	40 5d       	subi	r20, 0xD0	; 208
    4c7e:	4a 33       	cpi	r20, 0x3A	; 58
    4c80:	18 f0       	brcs	.+6      	; 0x4c88 <__ultoa_invert+0x7c>
    4c82:	49 5d       	subi	r20, 0xD9	; 217
    4c84:	31 fd       	sbrc	r19, 1
    4c86:	40 52       	subi	r20, 0x20	; 32
    4c88:	41 93       	st	Z+, r20
    4c8a:	02 d0       	rcall	.+4      	; 0x4c90 <__ultoa_invert+0x84>
    4c8c:	a9 f7       	brne	.-22     	; 0x4c78 <__ultoa_invert+0x6c>
    4c8e:	ea cf       	rjmp	.-44     	; 0x4c64 <__ultoa_invert+0x58>
    4c90:	b4 e0       	ldi	r27, 0x04	; 4
    4c92:	a6 95       	lsr	r26
    4c94:	97 95       	ror	r25
    4c96:	87 95       	ror	r24
    4c98:	77 95       	ror	r23
    4c9a:	67 95       	ror	r22
    4c9c:	ba 95       	dec	r27
    4c9e:	c9 f7       	brne	.-14     	; 0x4c92 <__ultoa_invert+0x86>
    4ca0:	00 97       	sbiw	r24, 0x00	; 0
    4ca2:	61 05       	cpc	r22, r1
    4ca4:	71 05       	cpc	r23, r1
    4ca6:	08 95       	ret
    4ca8:	9b 01       	movw	r18, r22
    4caa:	ac 01       	movw	r20, r24
    4cac:	0a 2e       	mov	r0, r26
    4cae:	06 94       	lsr	r0
    4cb0:	57 95       	ror	r21
    4cb2:	47 95       	ror	r20
    4cb4:	37 95       	ror	r19
    4cb6:	27 95       	ror	r18
    4cb8:	ba 95       	dec	r27
    4cba:	c9 f7       	brne	.-14     	; 0x4cae <__ultoa_invert+0xa2>
    4cbc:	62 0f       	add	r22, r18
    4cbe:	73 1f       	adc	r23, r19
    4cc0:	84 1f       	adc	r24, r20
    4cc2:	95 1f       	adc	r25, r21
    4cc4:	a0 1d       	adc	r26, r0
    4cc6:	08 95       	ret

00004cc8 <eeprom_read_byte>:
    4cc8:	f9 99       	sbic	0x1f, 1	; 31
    4cca:	fe cf       	rjmp	.-4      	; 0x4cc8 <eeprom_read_byte>
    4ccc:	92 bd       	out	0x22, r25	; 34
    4cce:	81 bd       	out	0x21, r24	; 33
    4cd0:	f8 9a       	sbi	0x1f, 0	; 31
    4cd2:	99 27       	eor	r25, r25
    4cd4:	80 b5       	in	r24, 0x20	; 32
    4cd6:	08 95       	ret

00004cd8 <eeprom_update_byte>:
    4cd8:	26 2f       	mov	r18, r22

00004cda <eeprom_update_r18>:
    4cda:	f9 99       	sbic	0x1f, 1	; 31
    4cdc:	fe cf       	rjmp	.-4      	; 0x4cda <eeprom_update_r18>
    4cde:	92 bd       	out	0x22, r25	; 34
    4ce0:	81 bd       	out	0x21, r24	; 33
    4ce2:	f8 9a       	sbi	0x1f, 0	; 31
    4ce4:	01 97       	sbiw	r24, 0x01	; 1
    4ce6:	00 b4       	in	r0, 0x20	; 32
    4ce8:	02 16       	cp	r0, r18
    4cea:	39 f0       	breq	.+14     	; 0x4cfa <eeprom_update_r18+0x20>
    4cec:	1f ba       	out	0x1f, r1	; 31
    4cee:	20 bd       	out	0x20, r18	; 32
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	fa 9a       	sbi	0x1f, 2	; 31
    4cf6:	f9 9a       	sbi	0x1f, 1	; 31
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	08 95       	ret

00004cfc <_exit>:
    4cfc:	f8 94       	cli

00004cfe <__stop_program>:
    4cfe:	ff cf       	rjmp	.-2      	; 0x4cfe <__stop_program>
