
BootloaderHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0001f7d6  0000086a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d6  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  000008b4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046a2  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000192a  00000000  00000000  000051c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026dc  00000000  00000000  00006aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  000091c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e13  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002775  00000000  00000000  0000b673  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000dde8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	55 c0       	rjmp	.+170    	; 0x1f0ac <__ctors_end>
   1f002:	00 00       	nop
   1f004:	70 c0       	rjmp	.+224    	; 0x1f0e6 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	6e c0       	rjmp	.+220    	; 0x1f0e6 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	6c c0       	rjmp	.+216    	; 0x1f0e6 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	6a c0       	rjmp	.+212    	; 0x1f0e6 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	68 c0       	rjmp	.+208    	; 0x1f0e6 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	66 c0       	rjmp	.+204    	; 0x1f0e6 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	64 c0       	rjmp	.+200    	; 0x1f0e6 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	62 c0       	rjmp	.+196    	; 0x1f0e6 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	60 c0       	rjmp	.+192    	; 0x1f0e6 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	b0 c1       	rjmp	.+864    	; 0x1f38a <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	5c c0       	rjmp	.+184    	; 0x1f0e6 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	5a c0       	rjmp	.+180    	; 0x1f0e6 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	58 c0       	rjmp	.+176    	; 0x1f0e6 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	56 c0       	rjmp	.+172    	; 0x1f0e6 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	54 c0       	rjmp	.+168    	; 0x1f0e6 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	52 c0       	rjmp	.+164    	; 0x1f0e6 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	50 c0       	rjmp	.+160    	; 0x1f0e6 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	4e c0       	rjmp	.+156    	; 0x1f0e6 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	4c c0       	rjmp	.+152    	; 0x1f0e6 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	4a c0       	rjmp	.+148    	; 0x1f0e6 <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	48 c0       	rjmp	.+144    	; 0x1f0e6 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	46 c0       	rjmp	.+140    	; 0x1f0e6 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	44 c0       	rjmp	.+136    	; 0x1f0e6 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	42 c0       	rjmp	.+132    	; 0x1f0e6 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	40 c0       	rjmp	.+128    	; 0x1f0e6 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	3e c0       	rjmp	.+124    	; 0x1f0e6 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	3c c0       	rjmp	.+120    	; 0x1f0e6 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	3a c0       	rjmp	.+116    	; 0x1f0e6 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	38 c0       	rjmp	.+112    	; 0x1f0e6 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	36 c0       	rjmp	.+108    	; 0x1f0e6 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	34 c0       	rjmp	.+104    	; 0x1f0e6 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	32 c0       	rjmp	.+100    	; 0x1f0e6 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	30 c0       	rjmp	.+96     	; 0x1f0e6 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	2e c0       	rjmp	.+92     	; 0x1f0e6 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	2c c0       	rjmp	.+88     	; 0x1f0e6 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	2a c0       	rjmp	.+84     	; 0x1f0e6 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	28 c0       	rjmp	.+80     	; 0x1f0e6 <__bad_interrupt>
   1f096:	00 00       	nop
   1f098:	f4 fa       	bst	r15, 4
   1f09a:	0d fb       	.word	0xfb0d	; ????
   1f09c:	b9 fb       	.word	0xfbb9	; ????
   1f09e:	0d fb       	.word	0xfb0d	; ????
   1f0a0:	b9 fb       	.word	0xfbb9	; ????
   1f0a2:	45 fb       	bst	r20, 5
   1f0a4:	67 fb       	bst	r22, 7
   1f0a6:	b9 fb       	.word	0xfbb9	; ????
   1f0a8:	87 fb       	bst	r24, 7
   1f0aa:	99 fb       	.word	0xfb99	; ????

0001f0ac <__ctors_end>:
   1f0ac:	11 24       	eor	r1, r1
   1f0ae:	1f be       	out	0x3f, r1	; 63
   1f0b0:	cf ef       	ldi	r28, 0xFF	; 255
   1f0b2:	d0 e2       	ldi	r29, 0x20	; 32
   1f0b4:	de bf       	out	0x3e, r29	; 62
   1f0b6:	cd bf       	out	0x3d, r28	; 61

0001f0b8 <__do_copy_data>:
   1f0b8:	11 e0       	ldi	r17, 0x01	; 1
   1f0ba:	a0 e0       	ldi	r26, 0x00	; 0
   1f0bc:	b1 e0       	ldi	r27, 0x01	; 1
   1f0be:	e6 ed       	ldi	r30, 0xD6	; 214
   1f0c0:	f7 ef       	ldi	r31, 0xF7	; 247
   1f0c2:	01 e0       	ldi	r16, 0x01	; 1
   1f0c4:	0b bf       	out	0x3b, r16	; 59
   1f0c6:	02 c0       	rjmp	.+4      	; 0x1f0cc <__do_copy_data+0x14>
   1f0c8:	07 90       	elpm	r0, Z+
   1f0ca:	0d 92       	st	X+, r0
   1f0cc:	aa 34       	cpi	r26, 0x4A	; 74
   1f0ce:	b1 07       	cpc	r27, r17
   1f0d0:	d9 f7       	brne	.-10     	; 0x1f0c8 <__do_copy_data+0x10>

0001f0d2 <__do_clear_bss>:
   1f0d2:	21 e0       	ldi	r18, 0x01	; 1
   1f0d4:	aa e4       	ldi	r26, 0x4A	; 74
   1f0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1f0d8:	01 c0       	rjmp	.+2      	; 0x1f0dc <.do_clear_bss_start>

0001f0da <.do_clear_bss_loop>:
   1f0da:	1d 92       	st	X+, r1

0001f0dc <.do_clear_bss_start>:
   1f0dc:	a4 35       	cpi	r26, 0x54	; 84
   1f0de:	b2 07       	cpc	r27, r18
   1f0e0:	e1 f7       	brne	.-8      	; 0x1f0da <.do_clear_bss_loop>
   1f0e2:	15 d0       	rcall	.+42     	; 0x1f10e <main>
   1f0e4:	76 c3       	rjmp	.+1772   	; 0x1f7d2 <_exit>

0001f0e6 <__bad_interrupt>:
   1f0e6:	8c cf       	rjmp	.-232    	; 0x1f000 <__vectors>

0001f0e8 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f0e8:	84 b7       	in	r24, 0x34	; 52
   1f0ea:	87 7f       	andi	r24, 0xF7	; 247
   1f0ec:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1f0ee:	0f b6       	in	r0, 0x3f	; 63
   1f0f0:	f8 94       	cli
   1f0f2:	a8 95       	wdr
   1f0f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f0f8:	88 61       	ori	r24, 0x18	; 24
   1f0fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f0fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f102:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f104:	81 e0       	ldi	r24, 0x01	; 1
   1f106:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1f108:	82 e0       	ldi	r24, 0x02	; 2
   1f10a:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB subsystem */
	USB_Init();
   1f10c:	28 c1       	rjmp	.+592    	; 0x1f35e <USB_Init>

0001f10e <main>:
 *  runs the bootloader processing routine until instructed to soft-exit.
 */
int main(void)
{
	/* Setup hardware required for the bootloader */
	SetupHardware();
   1f10e:	ec df       	rcall	.-40     	; 0x1f0e8 <SetupHardware>
	
	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f110:	78 94       	sei

	while (RunBootloader)
   1f112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f116:	88 23       	and	r24, r24
	  USB_USBTask();
   1f118:	11 f0       	breq	.+4      	; 0x1f11e <main+0x10>
   1f11a:	41 d3       	rcall	.+1666   	; 0x1f79e <USB_USBTask>
   1f11c:	fa cf       	rjmp	.-12     	; 0x1f112 <main+0x4>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f11e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1f122:	81 60       	ori	r24, 0x01	; 1
   1f124:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1f128:	9c e0       	ldi	r25, 0x0C	; 12
   1f12a:	88 e1       	ldi	r24, 0x18	; 24
   1f12c:	0f b6       	in	r0, 0x3f	; 63
   1f12e:	f8 94       	cli
   1f130:	a8 95       	wdr
   1f132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f136:	0f be       	out	0x3f, r0	; 63
   1f138:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1f13c:	ff cf       	rjmp	.-2      	; 0x1f13c <main+0x2e>

0001f13e <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f13e:	42 e3       	ldi	r20, 0x32	; 50
   1f140:	61 ec       	ldi	r22, 0xC1	; 193
   1f142:	81 e0       	ldi	r24, 0x01	; 1
   1f144:	9c c0       	rjmp	.+312    	; 0x1f27e <Endpoint_ConfigureEndpoint_Prv>

0001f146 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1f146:	cf 92       	push	r12
   1f148:	df 92       	push	r13
   1f14a:	ef 92       	push	r14
   1f14c:	ff 92       	push	r15
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f14e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
   1f152:	8f 77       	andi	r24, 0x7F	; 127
   1f154:	81 32       	cpi	r24, 0x21	; 33
   1f156:	09 f0       	breq	.+2      	; 0x1f15a <EVENT_USB_Device_ControlRequest+0x14>
   1f158:	70 c0       	rjmp	.+224    	; 0x1f23a <EVENT_USB_Device_ControlRequest+0xf4>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
   1f15a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
   1f15e:	89 30       	cpi	r24, 0x09	; 9
   1f160:	09 f0       	breq	.+2      	; 0x1f164 <EVENT_USB_Device_ControlRequest+0x1e>
   1f162:	6b c0       	rjmp	.+214    	; 0x1f23a <EVENT_USB_Device_ControlRequest+0xf4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f164:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f168:	87 7f       	andi	r24, 0xF7	; 247
   1f16a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f16e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();
			
			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
   1f172:	82 ff       	sbrs	r24, 2
   1f174:	fc cf       	rjmp	.-8      	; 0x1f16e <EVENT_USB_Device_ControlRequest+0x28>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f176:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1f17a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

				return Data.Value;
   1f17e:	83 2f       	mov	r24, r19
   1f180:	92 2f       	mov	r25, r18
		
			/* Read in the write destination address */
			#if (FLASHEND > 0xFFFF)
			uint32_t PageAddress = ((uint32_t)Endpoint_Read_16_LE() << 8);
   1f182:	a0 e0       	ldi	r26, 0x00	; 0
   1f184:	b0 e0       	ldi	r27, 0x00	; 0
			uint16_t PageAddress = Endpoint_Read_16_LE();
			#endif
			
			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
   1f186:	44 27       	eor	r20, r20
   1f188:	58 2f       	mov	r21, r24
   1f18a:	69 2f       	mov	r22, r25
   1f18c:	7a 2f       	mov	r23, r26
   1f18e:	01 96       	adiw	r24, 0x01	; 1
   1f190:	19 f4       	brne	.+6      	; 0x1f198 <EVENT_USB_Device_ControlRequest+0x52>
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
			#endif
			{
				RunBootloader = false;
   1f192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
   1f196:	47 c0       	rjmp	.+142    	; 0x1f226 <EVENT_USB_Device_ControlRequest+0xe0>
			}
			else
			{
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
   1f198:	83 e0       	ldi	r24, 0x03	; 3
   1f19a:	fa 01       	movw	r30, r20
   1f19c:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f1a0:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f1a4:	e8 95       	spm
				boot_spm_busy_wait();
   1f1a6:	07 b6       	in	r0, 0x37	; 55
   1f1a8:	00 fc       	sbrc	r0, 0
   1f1aa:	fd cf       	rjmp	.-6      	; 0x1f1a6 <EVENT_USB_Device_ControlRequest+0x60>
   1f1ac:	80 e0       	ldi	r24, 0x00	; 0
   1f1ae:	90 e0       	ldi	r25, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1f1b0:	a1 e0       	ldi	r26, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f1b2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f1b6:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
   1f1ba:	23 2b       	or	r18, r19
   1f1bc:	19 f1       	breq	.+70     	; 0x1f204 <EVENT_USB_Device_ControlRequest+0xbe>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f1be:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1f1c2:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

				return Data.Value;
   1f1c6:	2f 2f       	mov	r18, r31
   1f1c8:	3e 2f       	mov	r19, r30
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1f1ca:	fc 01       	movw	r30, r24
   1f1cc:	ee 0f       	add	r30, r30
   1f1ce:	ff 1f       	adc	r31, r31
   1f1d0:	6a 01       	movw	r12, r20
   1f1d2:	7b 01       	movw	r14, r22
   1f1d4:	ce 0e       	add	r12, r30
   1f1d6:	df 1e       	adc	r13, r31
   1f1d8:	e1 1c       	adc	r14, r1
   1f1da:	f1 1c       	adc	r15, r1
   1f1dc:	09 01       	movw	r0, r18
   1f1de:	f6 01       	movw	r30, r12
   1f1e0:	e0 92 5b 00 	sts	0x005B, r14	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f1e4:	a0 93 57 00 	sts	0x0057, r26	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f1e8:	e8 95       	spm
   1f1ea:	11 24       	eor	r1, r1
   1f1ec:	01 96       	adiw	r24, 0x01	; 1
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
   1f1ee:	80 38       	cpi	r24, 0x80	; 128
   1f1f0:	91 05       	cpc	r25, r1
   1f1f2:	f9 f6       	brne	.-66     	; 0x1f1b2 <EVENT_USB_Device_ControlRequest+0x6c>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
   1f1f4:	85 e0       	ldi	r24, 0x05	; 5
   1f1f6:	fa 01       	movw	r30, r20
   1f1f8:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1f1fc:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f200:	e8 95       	spm
   1f202:	0a c0       	rjmp	.+20     	; 0x1f218 <EVENT_USB_Device_ControlRequest+0xd2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f204:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f208:	2b 77       	andi	r18, 0x7B	; 123
   1f20a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f20e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
   1f212:	22 ff       	sbrs	r18, 2
   1f214:	fc cf       	rjmp	.-8      	; 0x1f20e <EVENT_USB_Device_ControlRequest+0xc8>
   1f216:	d3 cf       	rjmp	.-90     	; 0x1f1be <EVENT_USB_Device_ControlRequest+0x78>
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
				boot_spm_busy_wait();
   1f218:	07 b6       	in	r0, 0x37	; 55
   1f21a:	00 fc       	sbrc	r0, 0
   1f21c:	fd cf       	rjmp	.-6      	; 0x1f218 <EVENT_USB_Device_ControlRequest+0xd2>

				/* Re-enable RWW section */
				boot_rww_enable();
   1f21e:	81 e1       	ldi	r24, 0x11	; 17
   1f220:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1f224:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f226:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f22a:	8b 77       	andi	r24, 0x7B	; 123
   1f22c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
			break;
	}
}
   1f230:	ff 90       	pop	r15
   1f232:	ef 90       	pop	r14
   1f234:	df 90       	pop	r13
   1f236:	cf 90       	pop	r12
				boot_rww_enable();
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
   1f238:	35 c0       	rjmp	.+106    	; 0x1f2a4 <Endpoint_ClearStatusStage>
			break;
	}
}
   1f23a:	ff 90       	pop	r15
   1f23c:	ef 90       	pop	r14
   1f23e:	df 90       	pop	r13
   1f240:	cf 90       	pop	r12
   1f242:	08 95       	ret

0001f244 <CALLBACK_USB_GetDescriptor>:

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
   1f244:	91 30       	cpi	r25, 0x01	; 1
   1f246:	49 f0       	breq	.+18     	; 0x1f25a <CALLBACK_USB_GetDescriptor+0x16>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);	
	}
	else if (DescriptorType == DTYPE_Configuration)
   1f248:	92 30       	cpi	r25, 0x02	; 2
   1f24a:	61 f0       	breq	.+24     	; 0x1f264 <CALLBACK_USB_GetDescriptor+0x20>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);	
	}
	else if (DescriptorType == HID_DTYPE_HID)
   1f24c:	91 32       	cpi	r25, 0x21	; 33
   1f24e:	79 f0       	breq	.+30     	; 0x1f26e <CALLBACK_USB_GetDescriptor+0x2a>
		Size    = sizeof(USB_HID_Descriptor_HID_t);
	}
	else
	{
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
   1f250:	85 e1       	ldi	r24, 0x15	; 21
   1f252:	90 e0       	ldi	r25, 0x00	; 0
		Address = &ConfigurationDescriptor.HID_VendorHID;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
	}
	else
	{
		Address = &HIDReport;
   1f254:	25 e3       	ldi	r18, 0x35	; 53
   1f256:	31 e0       	ldi	r19, 0x01	; 1
   1f258:	0e c0       	rjmp	.+28     	; 0x1f276 <CALLBACK_USB_GetDescriptor+0x32>
	
	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);	
   1f25a:	82 e1       	ldi	r24, 0x12	; 18
   1f25c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;
	
	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
   1f25e:	23 e2       	ldi	r18, 0x23	; 35
   1f260:	31 e0       	ldi	r19, 0x01	; 1
   1f262:	09 c0       	rjmp	.+18     	; 0x1f276 <CALLBACK_USB_GetDescriptor+0x32>
		Size    = sizeof(USB_Descriptor_Device_t);	
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);	
   1f264:	82 e2       	ldi	r24, 0x22	; 34
   1f266:	90 e0       	ldi	r25, 0x00	; 0
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);	
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
   1f268:	21 e0       	ldi	r18, 0x01	; 1
   1f26a:	31 e0       	ldi	r19, 0x01	; 1
   1f26c:	04 c0       	rjmp	.+8      	; 0x1f276 <CALLBACK_USB_GetDescriptor+0x32>
		Size    = sizeof(USB_Descriptor_Configuration_t);	
	}
	else if (DescriptorType == HID_DTYPE_HID)
	{
		Address = &ConfigurationDescriptor.HID_VendorHID;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
   1f26e:	89 e0       	ldi	r24, 0x09	; 9
   1f270:	90 e0       	ldi	r25, 0x00	; 0
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);	
	}
	else if (DescriptorType == HID_DTYPE_HID)
	{
		Address = &ConfigurationDescriptor.HID_VendorHID;
   1f272:	23 e1       	ldi	r18, 0x13	; 19
   1f274:	31 e0       	ldi	r19, 0x01	; 1
	{
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
	}

	*DescriptorAddress = Address;
   1f276:	fa 01       	movw	r30, r20
   1f278:	31 83       	std	Z+1, r19	; 0x01
   1f27a:	20 83       	st	Z, r18
	return Size;
}
   1f27c:	08 95       	ret

0001f27e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1f27e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f282:	eb ee       	ldi	r30, 0xEB	; 235
   1f284:	f0 e0       	ldi	r31, 0x00	; 0
   1f286:	80 81       	ld	r24, Z
   1f288:	81 60       	ori	r24, 0x01	; 1
   1f28a:	80 83       	st	Z, r24
   1f28c:	ed ee       	ldi	r30, 0xED	; 237
   1f28e:	f0 e0       	ldi	r31, 0x00	; 0
   1f290:	10 82       	st	Z, r1
   1f292:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1f296:	40 83       	st	Z, r20
   1f298:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1f29c:	88 1f       	adc	r24, r24
   1f29e:	88 27       	eor	r24, r24
   1f2a0:	88 1f       	adc	r24, r24
   1f2a2:	08 95       	ret

0001f2a4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f2a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
   1f2a8:	87 ff       	sbrs	r24, 7
   1f2aa:	0f c0       	rjmp	.+30     	; 0x1f2ca <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f2ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1f2b0:	82 fd       	sbrc	r24, 2
   1f2b2:	04 c0       	rjmp	.+8      	; 0x1f2bc <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f2b4:	8e b3       	in	r24, 0x1e	; 30
   1f2b6:	81 11       	cpse	r24, r1
   1f2b8:	f9 cf       	rjmp	.-14     	; 0x1f2ac <Endpoint_ClearStatusStage+0x8>
   1f2ba:	10 c0       	rjmp	.+32     	; 0x1f2dc <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f2bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f2c0:	8b 77       	andi	r24, 0x7B	; 123
   1f2c2:	0a c0       	rjmp	.+20     	; 0x1f2d8 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f2c4:	8e b3       	in	r24, 0x1e	; 30
   1f2c6:	88 23       	and	r24, r24
   1f2c8:	49 f0       	breq	.+18     	; 0x1f2dc <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f2ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f2ce:	80 ff       	sbrs	r24, 0
   1f2d0:	f9 cf       	rjmp	.-14     	; 0x1f2c4 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f2d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f2d6:	8e 77       	andi	r24, 0x7E	; 126
   1f2d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f2dc:	08 95       	ret

0001f2de <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1f2de:	0f 93       	push	r16
   1f2e0:	1f 93       	push	r17
   1f2e2:	cf 93       	push	r28
   1f2e4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f2e6:	44 d0       	rcall	.+136    	; 0x1f370 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f2e8:	4b d0       	rcall	.+150    	; 0x1f380 <USB_INT_ClearAllInterrupts>
   1f2ea:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f2ec:	d0 e0       	ldi	r29, 0x00	; 0
   1f2ee:	88 81       	ld	r24, Y
   1f2f0:	8f 77       	andi	r24, 0x7F	; 127
   1f2f2:	88 83       	st	Y, r24
   1f2f4:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1f2f6:	80 68       	ori	r24, 0x80	; 128
   1f2f8:	88 83       	st	Y, r24
   1f2fa:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f2fc:	8f 7d       	andi	r24, 0xDF	; 223
   1f2fe:	88 83       	st	Y, r24
   1f300:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f302:	f0 e0       	ldi	r31, 0x00	; 0
   1f304:	80 81       	ld	r24, Z
   1f306:	80 68       	ori	r24, 0x80	; 128
   1f308:	80 83       	st	Z, r24
   1f30a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f30c:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f30e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
	USB_Device_ConfigurationNumber  = 0;
   1f312:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f314:	10 e0       	ldi	r17, 0x00	; 0
   1f316:	f8 01       	movw	r30, r16
   1f318:	80 81       	ld	r24, Z
   1f31a:	8b 7f       	andi	r24, 0xFB	; 251
   1f31c:	80 83       	st	Z, r24
   1f31e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f320:	81 60       	ori	r24, 0x01	; 1
   1f322:	88 83       	st	Y, r24
   1f324:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f326:	60 e0       	ldi	r22, 0x00	; 0
   1f328:	80 e0       	ldi	r24, 0x00	; 0
   1f32a:	a9 df       	rcall	.-174    	; 0x1f27e <Endpoint_ConfigureEndpoint_Prv>
   1f32c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f32e:	f0 e0       	ldi	r31, 0x00	; 0
   1f330:	80 81       	ld	r24, Z
   1f332:	8e 7f       	andi	r24, 0xFE	; 254
   1f334:	80 83       	st	Z, r24
   1f336:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f338:	f0 e0       	ldi	r31, 0x00	; 0
   1f33a:	80 81       	ld	r24, Z
   1f33c:	81 60       	ori	r24, 0x01	; 1
   1f33e:	80 83       	st	Z, r24
   1f340:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f342:	88 60       	ori	r24, 0x08	; 8
   1f344:	80 83       	st	Z, r24
   1f346:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f348:	80 81       	ld	r24, Z
   1f34a:	8e 7f       	andi	r24, 0xFE	; 254
   1f34c:	80 83       	st	Z, r24
   1f34e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f350:	80 61       	ori	r24, 0x10	; 16
   1f352:	88 83       	st	Y, r24
   1f354:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f356:	cf 91       	pop	r28
   1f358:	1f 91       	pop	r17
   1f35a:	0f 91       	pop	r16
   1f35c:	08 95       	ret

0001f35e <USB_Init>:
   1f35e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f360:	f0 e0       	ldi	r31, 0x00	; 0
   1f362:	80 81       	ld	r24, Z
   1f364:	81 60       	ori	r24, 0x01	; 1
   1f366:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f368:	81 e0       	ldi	r24, 0x01	; 1
   1f36a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <USB_IsInitialized>

	USB_ResetInterface();
   1f36e:	b7 cf       	rjmp	.-146    	; 0x1f2de <USB_ResetInterface>

0001f370 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f370:	e8 ed       	ldi	r30, 0xD8	; 216
   1f372:	f0 e0       	ldi	r31, 0x00	; 0
   1f374:	80 81       	ld	r24, Z
   1f376:	8c 7f       	andi	r24, 0xFC	; 252
   1f378:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f37a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f37e:	08 95       	ret

0001f380 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f380:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f384:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f388:	08 95       	ret

0001f38a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f38a:	1f 92       	push	r1
   1f38c:	0f 92       	push	r0
   1f38e:	0f b6       	in	r0, 0x3f	; 63
   1f390:	0f 92       	push	r0
   1f392:	11 24       	eor	r1, r1
   1f394:	0b b6       	in	r0, 0x3b	; 59
   1f396:	0f 92       	push	r0
   1f398:	2f 93       	push	r18
   1f39a:	3f 93       	push	r19
   1f39c:	4f 93       	push	r20
   1f39e:	5f 93       	push	r21
   1f3a0:	6f 93       	push	r22
   1f3a2:	7f 93       	push	r23
   1f3a4:	8f 93       	push	r24
   1f3a6:	9f 93       	push	r25
   1f3a8:	af 93       	push	r26
   1f3aa:	bf 93       	push	r27
   1f3ac:	ef 93       	push	r30
   1f3ae:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f3b0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f3b4:	80 ff       	sbrs	r24, 0
   1f3b6:	1b c0       	rjmp	.+54     	; 0x1f3ee <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f3b8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f3bc:	80 ff       	sbrs	r24, 0
   1f3be:	17 c0       	rjmp	.+46     	; 0x1f3ee <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f3c0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1f3c4:	8e 7f       	andi	r24, 0xFE	; 254
   1f3c6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f3ca:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f3ce:	80 ff       	sbrs	r24, 0
   1f3d0:	0b c0       	rjmp	.+22     	; 0x1f3e8 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f3d2:	8c e0       	ldi	r24, 0x0C	; 12
   1f3d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f3d6:	8e e0       	ldi	r24, 0x0E	; 14
   1f3d8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f3da:	09 b4       	in	r0, 0x29	; 41
   1f3dc:	00 fe       	sbrs	r0, 0
   1f3de:	fd cf       	rjmp	.-6      	; 0x1f3da <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f3e0:	81 e0       	ldi	r24, 0x01	; 1
   1f3e2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f3e4:	db d1       	rcall	.+950    	; 0x1f79c <USB_Event_Stub>
   1f3e6:	03 c0       	rjmp	.+6      	; 0x1f3ee <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f3e8:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1f3ea:	1e ba       	out	0x1e, r1	; 30
   1f3ec:	d7 d1       	rcall	.+942    	; 0x1f79c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f3ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f3f2:	80 ff       	sbrs	r24, 0
   1f3f4:	17 c0       	rjmp	.+46     	; 0x1f424 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f3f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f3fa:	80 ff       	sbrs	r24, 0
   1f3fc:	13 c0       	rjmp	.+38     	; 0x1f424 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f3fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f402:	8e 7f       	andi	r24, 0xFE	; 254
   1f404:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f408:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f40c:	80 61       	ori	r24, 0x10	; 16
   1f40e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1f412:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f416:	80 62       	ori	r24, 0x20	; 32
   1f418:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f41c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f41e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1f420:	8e bb       	out	0x1e, r24	; 30
   1f422:	bc d1       	rcall	.+888    	; 0x1f79c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f424:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f428:	84 ff       	sbrs	r24, 4
   1f42a:	2c c0       	rjmp	.+88     	; 0x1f484 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f42c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f430:	84 ff       	sbrs	r24, 4
   1f432:	28 c0       	rjmp	.+80     	; 0x1f484 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f434:	8c e0       	ldi	r24, 0x0C	; 12
   1f436:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f438:	8e e0       	ldi	r24, 0x0E	; 14
   1f43a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f43c:	09 b4       	in	r0, 0x29	; 41
   1f43e:	00 fe       	sbrs	r0, 0
   1f440:	fd cf       	rjmp	.-6      	; 0x1f43c <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f442:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f446:	8f 7d       	andi	r24, 0xDF	; 223
   1f448:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f44c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f450:	8f 7e       	andi	r24, 0xEF	; 239
   1f452:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f456:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f45a:	8f 7e       	andi	r24, 0xEF	; 239
   1f45c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f460:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f464:	81 60       	ori	r24, 0x01	; 1
   1f466:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f46a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
   1f46e:	81 11       	cpse	r24, r1
   1f470:	06 c0       	rjmp	.+12     	; 0x1f47e <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f472:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f476:	87 fd       	sbrc	r24, 7
   1f478:	02 c0       	rjmp	.+4      	; 0x1f47e <__vector_10+0xf4>
   1f47a:	81 e0       	ldi	r24, 0x01	; 1
   1f47c:	01 c0       	rjmp	.+2      	; 0x1f480 <__vector_10+0xf6>
   1f47e:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f480:	8e bb       	out	0x1e, r24	; 30
   1f482:	8c d1       	rcall	.+792    	; 0x1f79c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f484:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f488:	83 ff       	sbrs	r24, 3
   1f48a:	21 c0       	rjmp	.+66     	; 0x1f4ce <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f48c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f490:	83 ff       	sbrs	r24, 3
   1f492:	1d c0       	rjmp	.+58     	; 0x1f4ce <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1f494:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f498:	87 7f       	andi	r24, 0xF7	; 247
   1f49a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1f49e:	82 e0       	ldi	r24, 0x02	; 2
   1f4a0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1f4a2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f4a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f4aa:	8e 7f       	andi	r24, 0xFE	; 254
   1f4ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f4b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f4b4:	8e 7f       	andi	r24, 0xFE	; 254
   1f4b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f4ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f4be:	80 61       	ori	r24, 0x10	; 16
   1f4c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f4c4:	42 e0       	ldi	r20, 0x02	; 2
   1f4c6:	60 e0       	ldi	r22, 0x00	; 0
   1f4c8:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1f4ca:	d9 de       	rcall	.-590    	; 0x1f27e <Endpoint_ConfigureEndpoint_Prv>
   1f4cc:	67 d1       	rcall	.+718    	; 0x1f79c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1f4ce:	ff 91       	pop	r31
   1f4d0:	ef 91       	pop	r30
   1f4d2:	bf 91       	pop	r27
   1f4d4:	af 91       	pop	r26
   1f4d6:	9f 91       	pop	r25
   1f4d8:	8f 91       	pop	r24
   1f4da:	7f 91       	pop	r23
   1f4dc:	6f 91       	pop	r22
   1f4de:	5f 91       	pop	r21
   1f4e0:	4f 91       	pop	r20
   1f4e2:	3f 91       	pop	r19
   1f4e4:	2f 91       	pop	r18
   1f4e6:	0f 90       	pop	r0
   1f4e8:	0b be       	out	0x3b, r0	; 59
   1f4ea:	0f 90       	pop	r0
   1f4ec:	0f be       	out	0x3f, r0	; 63
   1f4ee:	0f 90       	pop	r0
   1f4f0:	1f 90       	pop	r1
   1f4f2:	18 95       	reti

0001f4f4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1f4f4:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USB_ControlRequest+0x6>
   1f4f8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <USB_ControlRequest+0x7>
   1f4fc:	26 17       	cp	r18, r22
   1f4fe:	37 07       	cpc	r19, r23
   1f500:	48 f0       	brcs	.+18     	; 0x1f514 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1f502:	61 15       	cp	r22, r1
   1f504:	71 05       	cpc	r23, r1
   1f506:	39 f4       	brne	.+14     	; 0x1f516 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f508:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f50c:	2e 77       	andi	r18, 0x7E	; 126
   1f50e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f512:	01 c0       	rjmp	.+2      	; 0x1f516 <Endpoint_Write_Control_Stream_LE+0x22>
   1f514:	b9 01       	movw	r22, r18
   1f516:	fc 01       	movw	r30, r24
   1f518:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1f51a:	61 15       	cp	r22, r1
   1f51c:	71 05       	cpc	r23, r1
   1f51e:	61 f1       	breq	.+88     	; 0x1f578 <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1f520:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1f522:	88 23       	and	r24, r24
   1f524:	c9 f1       	breq	.+114    	; 0x1f598 <Endpoint_Write_Control_Stream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1f526:	85 30       	cpi	r24, 0x05	; 5
   1f528:	c9 f1       	breq	.+114    	; 0x1f59c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f52a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1f52e:	83 fd       	sbrc	r24, 3
   1f530:	31 c0       	rjmp	.+98     	; 0x1f594 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f532:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1f536:	82 fd       	sbrc	r24, 2
   1f538:	27 c0       	rjmp	.+78     	; 0x1f588 <Endpoint_Write_Control_Stream_LE+0x94>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f53a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1f53e:	80 ff       	sbrs	r24, 0
   1f540:	ec cf       	rjmp	.-40     	; 0x1f51a <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f542:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1f546:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1f54a:	61 15       	cp	r22, r1
   1f54c:	71 05       	cpc	r23, r1
   1f54e:	51 f0       	breq	.+20     	; 0x1f564 <Endpoint_Write_Control_Stream_LE+0x70>
   1f550:	88 30       	cpi	r24, 0x08	; 8
   1f552:	91 05       	cpc	r25, r1
   1f554:	38 f4       	brcc	.+14     	; 0x1f564 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1f556:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f558:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1f55c:	61 50       	subi	r22, 0x01	; 1
   1f55e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1f560:	01 96       	adiw	r24, 0x01	; 1
   1f562:	f3 cf       	rjmp	.-26     	; 0x1f54a <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1f564:	21 e0       	ldi	r18, 0x01	; 1
   1f566:	08 97       	sbiw	r24, 0x08	; 8
   1f568:	09 f0       	breq	.+2      	; 0x1f56c <Endpoint_Write_Control_Stream_LE+0x78>
   1f56a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f570:	8e 77       	andi	r24, 0x7E	; 126
   1f572:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f576:	d1 cf       	rjmp	.-94     	; 0x1f51a <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1f578:	21 11       	cpse	r18, r1
   1f57a:	d2 cf       	rjmp	.-92     	; 0x1f520 <Endpoint_Write_Control_Stream_LE+0x2c>
   1f57c:	05 c0       	rjmp	.+10     	; 0x1f588 <Endpoint_Write_Control_Stream_LE+0x94>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1f57e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1f580:	88 23       	and	r24, r24
   1f582:	51 f0       	breq	.+20     	; 0x1f598 <Endpoint_Write_Control_Stream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1f584:	85 30       	cpi	r24, 0x05	; 5
   1f586:	51 f0       	breq	.+20     	; 0x1f59c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1f58c:	82 ff       	sbrs	r24, 2
   1f58e:	f7 cf       	rjmp	.-18     	; 0x1f57e <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1f590:	80 e0       	ldi	r24, 0x00	; 0
   1f592:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1f594:	81 e0       	ldi	r24, 0x01	; 1
   1f596:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1f598:	82 e0       	ldi	r24, 0x02	; 2
   1f59a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1f59c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1f59e:	08 95       	ret

0001f5a0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1f5a0:	0f 93       	push	r16
   1f5a2:	1f 93       	push	r17
   1f5a4:	cf 93       	push	r28
   1f5a6:	df 93       	push	r29
   1f5a8:	00 d0       	rcall	.+0      	; 0x1f5aa <USB_Device_ProcessControlRequest+0xa>
   1f5aa:	cd b7       	in	r28, 0x3d	; 61
   1f5ac:	de b7       	in	r29, 0x3e	; 62
   1f5ae:	ec e4       	ldi	r30, 0x4C	; 76
   1f5b0:	f1 e0       	ldi	r31, 0x01	; 1
   1f5b2:	84 e5       	ldi	r24, 0x54	; 84
   1f5b4:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f5b6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1f5ba:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1f5bc:	8e 17       	cp	r24, r30
   1f5be:	9f 07       	cpc	r25, r31
   1f5c0:	d1 f7       	brne	.-12     	; 0x1f5b6 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1f5c2:	c1 dd       	rcall	.-1150   	; 0x1f146 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f5c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1f5c8:	83 ff       	sbrs	r24, 3
   1f5ca:	d3 c0       	rjmp	.+422    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1f5cc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1f5d0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
   1f5d4:	49 2f       	mov	r20, r25
   1f5d6:	50 e0       	ldi	r21, 0x00	; 0
   1f5d8:	4a 30       	cpi	r20, 0x0A	; 10
   1f5da:	51 05       	cpc	r21, r1
   1f5dc:	08 f0       	brcs	.+2      	; 0x1f5e0 <USB_Device_ProcessControlRequest+0x40>
   1f5de:	c9 c0       	rjmp	.+402    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
   1f5e0:	fa 01       	movw	r30, r20
   1f5e2:	e4 5b       	subi	r30, 0xB4	; 180
   1f5e4:	f7 40       	sbci	r31, 0x07	; 7
   1f5e6:	ec c0       	rjmp	.+472    	; 0x1f7c0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f5e8:	82 38       	cpi	r24, 0x82	; 130
   1f5ea:	09 f0       	breq	.+2      	; 0x1f5ee <USB_Device_ProcessControlRequest+0x4e>
   1f5ec:	c2 c0       	rjmp	.+388    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f5ee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1f5f2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f5f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f5f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f5fc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f600:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f604:	97 7f       	andi	r25, 0xF7	; 247
   1f606:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f60a:	85 fb       	bst	r24, 5
   1f60c:	88 27       	eor	r24, r24
   1f60e:	80 f9       	bld	r24, 0
   1f610:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1f614:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f618:	85 c0       	rjmp	.+266    	; 0x1f724 <USB_Device_ProcessControlRequest+0x184>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f61a:	28 2f       	mov	r18, r24
   1f61c:	2d 7f       	andi	r18, 0xFD	; 253
   1f61e:	09 f0       	breq	.+2      	; 0x1f622 <USB_Device_ProcessControlRequest+0x82>
   1f620:	a8 c0       	rjmp	.+336    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1f622:	82 30       	cpi	r24, 0x02	; 2
   1f624:	09 f0       	breq	.+2      	; 0x1f628 <USB_Device_ProcessControlRequest+0x88>
   1f626:	a5 c0       	rjmp	.+330    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1f628:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1f62c:	81 11       	cpse	r24, r1
   1f62e:	27 c0       	rjmp	.+78     	; 0x1f67e <USB_Device_ProcessControlRequest+0xde>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f630:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1f634:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1f636:	09 f4       	brne	.+2      	; 0x1f63a <USB_Device_ProcessControlRequest+0x9a>
   1f638:	9c c0       	rjmp	.+312    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f63a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1f63e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1f642:	20 ff       	sbrs	r18, 0
   1f644:	1c c0       	rjmp	.+56     	; 0x1f67e <USB_Device_ProcessControlRequest+0xde>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1f646:	93 30       	cpi	r25, 0x03	; 3
   1f648:	21 f4       	brne	.+8      	; 0x1f652 <USB_Device_ProcessControlRequest+0xb2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f64a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f64e:	80 62       	ori	r24, 0x20	; 32
   1f650:	14 c0       	rjmp	.+40     	; 0x1f67a <USB_Device_ProcessControlRequest+0xda>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f652:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f656:	90 61       	ori	r25, 0x10	; 16
   1f658:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
   1f65c:	21 e0       	ldi	r18, 0x01	; 1
   1f65e:	30 e0       	ldi	r19, 0x00	; 0
   1f660:	a9 01       	movw	r20, r18
   1f662:	02 c0       	rjmp	.+4      	; 0x1f668 <USB_Device_ProcessControlRequest+0xc8>
   1f664:	44 0f       	add	r20, r20
   1f666:	55 1f       	adc	r21, r21
   1f668:	8a 95       	dec	r24
   1f66a:	e2 f7       	brpl	.-8      	; 0x1f664 <USB_Device_ProcessControlRequest+0xc4>
   1f66c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1f670:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f674:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f678:	88 60       	ori	r24, 0x08	; 8
   1f67a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f67e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f682:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f686:	87 7f       	andi	r24, 0xF7	; 247
   1f688:	50 c0       	rjmp	.+160    	; 0x1f72a <USB_Device_ProcessControlRequest+0x18a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f68a:	81 11       	cpse	r24, r1
   1f68c:	72 c0       	rjmp	.+228    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1f68e:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1f692:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1f694:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1f696:	f8 94       	cli
   1f698:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f69c:	87 7f       	andi	r24, 0xF7	; 247
   1f69e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f6a2:	00 de       	rcall	.-1024   	; 0x1f2a4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1f6a8:	80 ff       	sbrs	r24, 0
   1f6aa:	fc cf       	rjmp	.-8      	; 0x1f6a4 <USB_Device_ProcessControlRequest+0x104>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1f6ac:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1f6b0:	80 78       	andi	r24, 0x80	; 128
   1f6b2:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1f6b4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
   1f6b8:	80 68       	ori	r24, 0x80	; 128
   1f6ba:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1f6be:	11 11       	cpse	r17, r1
   1f6c0:	02 c0       	rjmp	.+4      	; 0x1f6c6 <USB_Device_ProcessControlRequest+0x126>
   1f6c2:	82 e0       	ldi	r24, 0x02	; 2
   1f6c4:	01 c0       	rjmp	.+2      	; 0x1f6c8 <USB_Device_ProcessControlRequest+0x128>
   1f6c6:	83 e0       	ldi	r24, 0x03	; 3
   1f6c8:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1f6ca:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1f6cc:	52 c0       	rjmp	.+164    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f6ce:	80 58       	subi	r24, 0x80	; 128
   1f6d0:	82 30       	cpi	r24, 0x02	; 2
   1f6d2:	08 f0       	brcs	.+2      	; 0x1f6d6 <USB_Device_ProcessControlRequest+0x136>
   1f6d4:	4e c0       	rjmp	.+156    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1f6d6:	ae 01       	movw	r20, r28
   1f6d8:	4f 5f       	subi	r20, 0xFF	; 255
   1f6da:	5f 4f       	sbci	r21, 0xFF	; 255
   1f6dc:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1f6e0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1f6e4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
   1f6e8:	ad dd       	rcall	.-1190   	; 0x1f244 <CALLBACK_USB_GetDescriptor>
   1f6ea:	bc 01       	movw	r22, r24
   1f6ec:	89 2b       	or	r24, r25
   1f6ee:	09 f4       	brne	.+2      	; 0x1f6f2 <USB_Device_ProcessControlRequest+0x152>
   1f6f0:	40 c0       	rjmp	.+128    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f6f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f6f6:	97 7f       	andi	r25, 0xF7	; 247
   1f6f8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1f6fc:	89 81       	ldd	r24, Y+1	; 0x01
   1f6fe:	9a 81       	ldd	r25, Y+2	; 0x02
   1f700:	f9 de       	rcall	.-526    	; 0x1f4f4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f702:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f706:	8b 77       	andi	r24, 0x7B	; 123
   1f708:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f70c:	32 c0       	rjmp	.+100    	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1f70e:	80 38       	cpi	r24, 0x80	; 128
   1f710:	81 f5       	brne	.+96     	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f712:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f716:	87 7f       	andi	r24, 0xF7	; 247
   1f718:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1f71c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f720:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f728:	8e 77       	andi	r24, 0x7E	; 126
   1f72a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1f72e:	ba dd       	rcall	.-1164   	; 0x1f2a4 <Endpoint_ClearStatusStage>
   1f730:	20 c0       	rjmp	.+64     	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f732:	81 11       	cpse	r24, r1
   1f734:	1e c0       	rjmp	.+60     	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1f736:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1f73a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
   1f73e:	99 27       	eor	r25, r25
   1f740:	02 97       	sbiw	r24, 0x02	; 2
   1f742:	bc f4       	brge	.+46     	; 0x1f772 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f744:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f748:	87 7f       	andi	r24, 0xF7	; 247
   1f74a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1f74e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1f752:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>

	Endpoint_ClearStatusStage();
   1f756:	a6 dd       	rcall	.-1204   	; 0x1f2a4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1f758:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
   1f75c:	81 11       	cpse	r24, r1
   1f75e:	06 c0       	rjmp	.+12     	; 0x1f76c <USB_Device_ProcessControlRequest+0x1cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f760:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f764:	87 fd       	sbrc	r24, 7
   1f766:	02 c0       	rjmp	.+4      	; 0x1f76c <USB_Device_ProcessControlRequest+0x1cc>
   1f768:	81 e0       	ldi	r24, 0x01	; 1
   1f76a:	01 c0       	rjmp	.+2      	; 0x1f76e <USB_Device_ProcessControlRequest+0x1ce>
   1f76c:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1f76e:	8e bb       	out	0x1e, r24	; 30
   1f770:	e6 dc       	rcall	.-1588   	; 0x1f13e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f772:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1f776:	83 ff       	sbrs	r24, 3
   1f778:	0a c0       	rjmp	.+20     	; 0x1f78e <USB_Device_ProcessControlRequest+0x1ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f77a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f77e:	80 62       	ori	r24, 0x20	; 32
   1f780:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f784:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f788:	87 7f       	andi	r24, 0xF7	; 247
   1f78a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1f78e:	0f 90       	pop	r0
   1f790:	0f 90       	pop	r0
   1f792:	df 91       	pop	r29
   1f794:	cf 91       	pop	r28
   1f796:	1f 91       	pop	r17
   1f798:	0f 91       	pop	r16
   1f79a:	08 95       	ret

0001f79c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1f79c:	08 95       	ret

0001f79e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1f79e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1f7a0:	8e b3       	in	r24, 0x1e	; 30
   1f7a2:	88 23       	and	r24, r24
   1f7a4:	59 f0       	breq	.+22     	; 0x1f7bc <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1f7a6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f7aa:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f7ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f7b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1f7b4:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
   1f7b6:	f4 de       	rcall	.-536    	; 0x1f5a0 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f7b8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
   1f7bc:	cf 91       	pop	r28
   1f7be:	08 95       	ret

0001f7c0 <__tablejump2__>:
   1f7c0:	ee 0f       	add	r30, r30
   1f7c2:	ff 1f       	adc	r31, r31
   1f7c4:	00 24       	eor	r0, r0
   1f7c6:	00 1c       	adc	r0, r0
   1f7c8:	0b be       	out	0x3b, r0	; 59
   1f7ca:	07 90       	elpm	r0, Z+
   1f7cc:	f6 91       	elpm	r31, Z
   1f7ce:	e0 2d       	mov	r30, r0
   1f7d0:	09 94       	ijmp

0001f7d2 <_exit>:
   1f7d2:	f8 94       	cli

0001f7d4 <__stop_program>:
   1f7d4:	ff cf       	rjmp	.-2      	; 0x1f7d4 <__stop_program>
