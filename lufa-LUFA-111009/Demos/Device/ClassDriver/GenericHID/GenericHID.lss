
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000fcc  00001060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010e  0080010e  0000106e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056aa  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c90  00000000  00000000  000069e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002edb  00000000  00000000  00008672  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  0000b550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022f3  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030b2  00000000  00000000  0000e03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  000110ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
   2:	00 00       	nop
   4:	c0 c0       	rjmp	.+384    	; 0x186 <__bad_interrupt>
   6:	00 00       	nop
   8:	be c0       	rjmp	.+380    	; 0x186 <__bad_interrupt>
   a:	00 00       	nop
   c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
   e:	00 00       	nop
  10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
  12:	00 00       	nop
  14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
  16:	00 00       	nop
  18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
  22:	00 00       	nop
  24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c2       	rjmp	.+1178   	; 0x4c4 <__vector_10>
  2a:	00 00       	nop
  2c:	ac c0       	rjmp	.+344    	; 0x186 <__bad_interrupt>
  2e:	00 00       	nop
  30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
  32:	00 00       	nop
  34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
  36:	00 00       	nop
  38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
  42:	00 00       	nop
  44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
  46:	00 00       	nop
  48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
  52:	00 00       	nop
  54:	98 c0       	rjmp	.+304    	; 0x186 <__bad_interrupt>
  56:	00 00       	nop
  58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
  5e:	00 00       	nop
  60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
  62:	00 00       	nop
  64:	90 c0       	rjmp	.+288    	; 0x186 <__bad_interrupt>
  66:	00 00       	nop
  68:	8e c0       	rjmp	.+284    	; 0x186 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
  72:	00 00       	nop
  74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
  76:	00 00       	nop
  78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
  7e:	00 00       	nop
  80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
  82:	00 00       	nop
  84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
  86:	00 00       	nop
  88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
  92:	00 00       	nop
  94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
  96:	00 00       	nop
  98:	8b 04       	cpc	r8, r11
  9a:	ad 04       	cpc	r10, r13
  9c:	9a 05       	cpc	r25, r10
  9e:	ad 04       	cpc	r10, r13
  a0:	9a 05       	cpc	r25, r10
  a2:	f2 04       	cpc	r15, r2
  a4:	15 05       	cpc	r17, r5
  a6:	9a 05       	cpc	r25, r10
  a8:	67 05       	cpc	r22, r7
  aa:	79 05       	cpc	r23, r9

000000ac <ProductString>:
  ac:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
  bc:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
  cc:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000da <ManufacturerString>:
  da:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ea:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f4 <LanguageString>:
  f4:	04 03 09 04                                         ....

000000f8 <ConfigurationDescriptor>:
  f8:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 108:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
 118:	00 01                                               ..

0000011a <DeviceDescriptor>:
 11a:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
 12a:	00 01                                               ..

0000012c <GenericReport>:
 12c:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
 13c:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

0000014c <__ctors_end>:
 14c:	11 24       	eor	r1, r1
 14e:	1f be       	out	0x3f, r1	; 63
 150:	cf ef       	ldi	r28, 0xFF	; 255
 152:	d0 e2       	ldi	r29, 0x20	; 32
 154:	de bf       	out	0x3e, r29	; 62
 156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	b1 e0       	ldi	r27, 0x01	; 1
 15e:	ec ec       	ldi	r30, 0xCC	; 204
 160:	ff e0       	ldi	r31, 0x0F	; 15
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	0b bf       	out	0x3b, r16	; 59
 166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
 168:	07 90       	elpm	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	ae 30       	cpi	r26, 0x0E	; 14
 16e:	b1 07       	cpc	r27, r17
 170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	ae e0       	ldi	r26, 0x0E	; 14
 176:	b1 e0       	ldi	r27, 0x01	; 1
 178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
 17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
 17c:	a3 32       	cpi	r26, 0x23	; 35
 17e:	b2 07       	cpc	r27, r18
 180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
 182:	25 d0       	rcall	.+74     	; 0x1ce <main>
 184:	21 c7       	rjmp	.+3650   	; 0xfc8 <_exit>

00000186 <__bad_interrupt>:
 186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	9f 70       	andi	r25, 0x0F	; 15
 18c:	89 2b       	or	r24, r25
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 192:	84 b7       	in	r24, 0x34	; 52
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	a8 95       	wdr
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1ac:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1be:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1c0:	8a b1       	in	r24, 0x0a	; 10
 1c2:	80 6f       	ori	r24, 0xF0	; 240
 1c4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 1cc:	65 c1       	rjmp	.+714    	; 0x498 <USB_Init>

000001ce <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1ce:	e1 df       	rcall	.-62     	; 0x192 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	da df       	rcall	.-76     	; 0x188 <LEDs_SetAllLEDs>
	sei();
 1d4:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 1da:	2a d6       	rcall	.+3156   	; 0xe30 <HID_Device_USBTask>
 1dc:	c5 d4       	rcall	.+2442   	; 0xb68 <USB_USBTask>
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <main+0x8>

000001e0 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1e0:	80 ea       	ldi	r24, 0xA0	; 160
 1e2:	d2 cf       	rjmp	.-92     	; 0x188 <LEDs_SetAllLEDs>

000001e4 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1e4:	80 e1       	ldi	r24, 0x10	; 16
 1e6:	d0 cf       	rjmp	.-96     	; 0x188 <LEDs_SetAllLEDs>

000001e8 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	f6 d5       	rcall	.+3052   	; 0xdda <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 1ee:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1f2:	94 60       	ori	r25, 0x04	; 4
 1f4:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1f8:	81 11       	cpse	r24, r1
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <EVENT_USB_Device_ConfigurationChanged+0x18>
 1fc:	80 e9       	ldi	r24, 0x90	; 144
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x1a>
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	c2 cf       	rjmp	.-124    	; 0x188 <LEDs_SetAllLEDs>

00000204 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	c1 c4       	rjmp	.+2434   	; 0xb8c <HID_Device_ProcessControlRequest>

0000020a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 20a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 20e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	29 f0       	breq	.+10     	; 0x220 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 21c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 220:	08 95       	ret

00000222 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	f9 01       	movw	r30, r18
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
 228:	8b b1       	in	r24, 0x0b	; 11
	uint8_t* Data = (uint8_t*)ReportData;
	uint8_t  CurrLEDMask = LEDs_GetLEDs();
		
	Data[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
 22a:	84 fb       	bst	r24, 4
 22c:	99 27       	eor	r25, r25
 22e:	90 f9       	bld	r25, 0
 230:	90 83       	st	Z, r25
	Data[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
 232:	85 fb       	bst	r24, 5
 234:	99 27       	eor	r25, r25
 236:	90 f9       	bld	r25, 0
 238:	91 83       	std	Z+1, r25	; 0x01
	Data[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
 23a:	98 2f       	mov	r25, r24
 23c:	99 1f       	adc	r25, r25
 23e:	99 27       	eor	r25, r25
 240:	99 1f       	adc	r25, r25
 242:	92 83       	std	Z+2, r25	; 0x02
	Data[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
 244:	86 fb       	bst	r24, 6
 246:	88 27       	eor	r24, r24
 248:	80 f9       	bld	r24, 0
 24a:	83 83       	std	Z+3, r24	; 0x03

	*ReportSize = GENERIC_REPORT_SIZE;
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	f8 01       	movw	r30, r16
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
	return false;
}
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 25e:	f9 01       	movw	r30, r18
	uint8_t* Data = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;
	
	if (Data[0])
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	11 f0       	breq	.+4      	; 0x26a <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  NewLEDMask |= LEDS_LED1;
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	01 c0       	rjmp	.+2      	; 0x26c <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t* Data = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;
 26a:	80 e0       	ldi	r24, 0x00	; 0
	
	if (Data[0])
	  NewLEDMask |= LEDS_LED1;

	if (Data[1])
 26c:	91 81       	ldd	r25, Z+1	; 0x01
 26e:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 270:	80 e1       	ldi	r24, 0x10	; 16

	if (Data[2])
 272:	92 81       	ldd	r25, Z+2	; 0x02
 274:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 276:	80 e1       	ldi	r24, 0x10	; 16

	if (Data[3])
 278:	93 81       	ldd	r25, Z+3	; 0x03
 27a:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED1;
 27c:	80 e1       	ldi	r24, 0x10	; 16
	  
	LEDs_SetAllLEDs(NewLEDMask);
 27e:	84 cf       	rjmp	.-248    	; 0x188 <LEDs_SetAllLEDs>

00000280 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 280:	29 2f       	mov	r18, r25
 282:	33 27       	eor	r19, r19
 284:	23 30       	cpi	r18, 0x03	; 3
 286:	31 05       	cpc	r19, r1
 288:	e1 f0       	breq	.+56     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x42>
 28a:	58 f4       	brcc	.+22     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x22>
 28c:	21 30       	cpi	r18, 0x01	; 1
 28e:	31 05       	cpc	r19, r1
 290:	99 f0       	breq	.+38     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x38>
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	69 f5       	brne	.+90     	; 0x2f2 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 298:	82 e2       	ldi	r24, 0x22	; 34
 29a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 29c:	28 ef       	ldi	r18, 0xF8	; 248
 29e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 2a0:	2c c0       	rjmp	.+88     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2a2:	21 32       	cpi	r18, 0x21	; 33
 2a4:	31 05       	cpc	r19, r1
 2a6:	01 f1       	breq	.+64     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x68>
 2a8:	22 32       	cpi	r18, 0x22	; 34
 2aa:	31 05       	cpc	r19, r1
 2ac:	11 f5       	brne	.+68     	; 0x2f2 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
 2ae:	80 e2       	ldi	r24, 0x20	; 32
 2b0:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
 2b2:	2c e2       	ldi	r18, 0x2C	; 44
 2b4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
 2b6:	21 c0       	rjmp	.+66     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2b8:	82 e1       	ldi	r24, 0x12	; 18
 2ba:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 2bc:	2a e1       	ldi	r18, 0x1A	; 26
 2be:	31 e0       	ldi	r19, 0x01	; 1
 2c0:	1c c0       	rjmp	.+56     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 2c2:	99 27       	eor	r25, r25
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	49 f0       	breq	.+18     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x5c>
 2ca:	28 f0       	brcs	.+10     	; 0x2d6 <CALLBACK_USB_GetDescriptor+0x56>
 2cc:	02 97       	sbiw	r24, 0x02	; 2
 2ce:	89 f4       	brne	.+34     	; 0x2f2 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2d0:	ec ea       	ldi	r30, 0xAC	; 172
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2d6:	e4 ef       	ldi	r30, 0xF4	; 244
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2dc:	ea ed       	ldi	r30, 0xDA	; 218
 2de:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2e0:	84 91       	lpm	r24, Z
 2e2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 2e4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
 2ec:	2a e0       	ldi	r18, 0x0A	; 10
 2ee:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
 2fa:	fa 01       	movw	r30, r20
 2fc:	31 83       	std	Z+1, r19	; 0x01
 2fe:	20 83       	st	Z, r18
	return Size;
}
 300:	08 95       	ret

00000302 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 302:	98 2f       	mov	r25, r24
 304:	97 30       	cpi	r25, 0x07	; 7
 306:	68 f5       	brcc	.+90     	; 0x362 <Endpoint_ConfigureEndpoint_Prv+0x60>
 308:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 30c:	98 17       	cp	r25, r24
 30e:	39 f0       	breq	.+14     	; 0x31e <Endpoint_ConfigureEndpoint_Prv+0x1c>
 310:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 314:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 318:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 31c:	03 c0       	rjmp	.+6      	; 0x324 <Endpoint_ConfigureEndpoint_Prv+0x22>
 31e:	24 2f       	mov	r18, r20
 320:	76 2f       	mov	r23, r22
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	21 fd       	sbrc	r18, 1
 326:	02 c0       	rjmp	.+4      	; 0x32c <Endpoint_ConfigureEndpoint_Prv+0x2a>
 328:	9f 5f       	subi	r25, 0xFF	; 255
 32a:	ec cf       	rjmp	.-40     	; 0x304 <Endpoint_ConfigureEndpoint_Prv+0x2>
 32c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 330:	3e 7f       	andi	r19, 0xFE	; 254
 332:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 336:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 33a:	3d 7f       	andi	r19, 0xFD	; 253
 33c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 340:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 344:	31 60       	ori	r19, 0x01	; 1
 346:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 34a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 34e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 352:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 356:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 35a:	27 fd       	sbrc	r18, 7
 35c:	e5 cf       	rjmp	.-54     	; 0x328 <Endpoint_ConfigureEndpoint_Prv+0x26>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret
 362:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret

0000036a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 36a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 36e:	87 ff       	sbrs	r24, 7
 370:	11 c0       	rjmp	.+34     	; 0x394 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 372:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 376:	82 fd       	sbrc	r24, 2
 378:	05 c0       	rjmp	.+10     	; 0x384 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 37a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 37e:	81 11       	cpse	r24, r1
 380:	f8 cf       	rjmp	.-16     	; 0x372 <Endpoint_ClearStatusStage+0x8>
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 384:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 388:	8b 77       	andi	r24, 0x7B	; 123
 38a:	0b c0       	rjmp	.+22     	; 0x3a2 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 38c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 390:	88 23       	and	r24, r24
 392:	49 f0       	breq	.+18     	; 0x3a6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 394:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 398:	80 ff       	sbrs	r24, 0
 39a:	f8 cf       	rjmp	.-16     	; 0x38c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 39c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3a0:	8e 77       	andi	r24, 0x7E	; 126
 3a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3a6:	08 95       	ret

000003a8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 3a8:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 3ac:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 3b0:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 3b2:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3b6:	84 2f       	mov	r24, r20
 3b8:	81 70       	andi	r24, 0x01	; 1
 3ba:	40 ff       	sbrs	r20, 0
 3bc:	23 c0       	rjmp	.+70     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 3c2:	80 fd       	sbrc	r24, 0
 3c4:	1d c0       	rjmp	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3c6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3ca:	88 23       	and	r24, r24
 3cc:	99 f0       	breq	.+38     	; 0x3f4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3ce:	85 30       	cpi	r24, 0x05	; 5
 3d0:	99 f0       	breq	.+38     	; 0x3f8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 3d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 3d6:	85 fd       	sbrc	r24, 5
 3d8:	11 c0       	rjmp	.+34     	; 0x3fc <Endpoint_WaitUntilReady+0x54>
 3da:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 3de:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 3e2:	24 17       	cp	r18, r20
 3e4:	35 07       	cpc	r19, r21
 3e6:	29 f3       	breq	.-54     	; 0x3b2 <Endpoint_WaitUntilReady+0xa>
 3e8:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <Endpoint_WaitUntilReady+0x48>
 3ec:	9a 01       	movw	r18, r20
 3ee:	e1 cf       	rjmp	.-62     	; 0x3b2 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 404:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 408:	42 ff       	sbrs	r20, 2
 40a:	dd cf       	rjmp	.-70     	; 0x3c6 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 40c:	08 95       	ret

0000040e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 416:	49 d0       	rcall	.+146    	; 0x4aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 418:	50 d0       	rcall	.+160    	; 0x4ba <USB_INT_ClearAllInterrupts>
 41a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	88 81       	ld	r24, Y
 420:	8f 77       	andi	r24, 0x7F	; 127
 422:	88 83       	st	Y, r24
 424:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 426:	80 68       	ori	r24, 0x80	; 128
 428:	88 83       	st	Y, r24
 42a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	88 83       	st	Y, r24
 430:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	80 68       	ori	r24, 0x80	; 128
 438:	80 83       	st	Z, r24
 43a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 43c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 440:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 444:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 448:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 44c:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	f8 01       	movw	r30, r16
 452:	80 81       	ld	r24, Z
 454:	8b 7f       	andi	r24, 0xFB	; 251
 456:	80 83       	st	Z, r24
 458:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	88 83       	st	Y, r24
 45e:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	4e df       	rcall	.-356    	; 0x302 <Endpoint_ConfigureEndpoint_Prv>
 466:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	80 83       	st	Z, r24
 470:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	81 60       	ori	r24, 0x01	; 1
 478:	80 83       	st	Z, r24
 47a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 47c:	88 60       	ori	r24, 0x08	; 8
 47e:	80 83       	st	Z, r24
 480:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 482:	80 81       	ld	r24, Z
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	80 83       	st	Z, r24
 488:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	88 83       	st	Y, r24
 48e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	08 95       	ret

00000498 <USB_Init>:
 498:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_IsInitialized>

	USB_ResetInterface();
 4a8:	b2 cf       	rjmp	.-156    	; 0x40e <USB_ResetInterface>

000004aa <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4aa:	e8 ed       	ldi	r30, 0xD8	; 216
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	8c 7f       	andi	r24, 0xFC	; 252
 4b2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4b4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4b8:	08 95       	ret

000004ba <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 4ba:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 4be:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 4c2:	08 95       	ret

000004c4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	0b b6       	in	r0, 0x3b	; 59
 4d0:	0f 92       	push	r0
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 4ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 4ee:	82 ff       	sbrs	r24, 2
 4f0:	0a c0       	rjmp	.+20     	; 0x506 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 4f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4f6:	82 ff       	sbrs	r24, 2
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 4fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 4fe:	8b 7f       	andi	r24, 0xFB	; 251
 500:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 504:	82 de       	rcall	.-764    	; 0x20a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 506:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 50a:	80 ff       	sbrs	r24, 0
 50c:	1d c0       	rjmp	.+58     	; 0x548 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 50e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 512:	80 ff       	sbrs	r24, 0
 514:	19 c0       	rjmp	.+50     	; 0x548 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 516:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 51a:	8e 7f       	andi	r24, 0xFE	; 254
 51c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 520:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 524:	80 ff       	sbrs	r24, 0
 526:	0c c0       	rjmp	.+24     	; 0x540 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 528:	8c e0       	ldi	r24, 0x0C	; 12
 52a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 530:	09 b4       	in	r0, 0x29	; 41
 532:	00 fe       	sbrs	r0, 0
 534:	fd cf       	rjmp	.-6      	; 0x530 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
			EVENT_USB_Device_Connect();
 53c:	51 de       	rcall	.-862    	; 0x1e0 <EVENT_USB_Device_Connect>
 53e:	04 c0       	rjmp	.+8      	; 0x548 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 540:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 542:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 546:	4e de       	rcall	.-868    	; 0x1e4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 548:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 54c:	80 ff       	sbrs	r24, 0
 54e:	18 c0       	rjmp	.+48     	; 0x580 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 550:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 554:	80 ff       	sbrs	r24, 0
 556:	14 c0       	rjmp	.+40     	; 0x580 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 558:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 562:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 566:	80 61       	ori	r24, 0x10	; 16
 568:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 56c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 570:	80 62       	ori	r24, 0x20	; 32
 572:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 576:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 57e:	f3 d2       	rcall	.+1510   	; 0xb66 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 580:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 584:	84 ff       	sbrs	r24, 4
 586:	2d c0       	rjmp	.+90     	; 0x5e2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 588:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 58c:	84 ff       	sbrs	r24, 4
 58e:	29 c0       	rjmp	.+82     	; 0x5e2 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 590:	8c e0       	ldi	r24, 0x0C	; 12
 592:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 594:	8e e0       	ldi	r24, 0x0E	; 14
 596:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 598:	09 b4       	in	r0, 0x29	; 41
 59a:	00 fe       	sbrs	r0, 0
 59c:	fd cf       	rjmp	.-6      	; 0x598 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 59e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5a2:	8f 7d       	andi	r24, 0xDF	; 223
 5a4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 5a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5ac:	8f 7e       	andi	r24, 0xEF	; 239
 5ae:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 5b2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5b6:	8f 7e       	andi	r24, 0xEF	; 239
 5b8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5c0:	81 60       	ori	r24, 0x01	; 1
 5c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 5c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
 5ca:	81 11       	cpse	r24, r1
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5ce:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 5d2:	87 fd       	sbrc	r24, 7
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <__vector_10+0x116>
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__vector_10+0x118>
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 5e0:	c2 d2       	rcall	.+1412   	; 0xb66 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 5e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5e6:	83 ff       	sbrs	r24, 3
 5e8:	22 c0       	rjmp	.+68     	; 0x62e <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 5ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5ee:	83 ff       	sbrs	r24, 3
 5f0:	1e c0       	rjmp	.+60     	; 0x62e <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 5f2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 602:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 606:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 60a:	8e 7f       	andi	r24, 0xFE	; 254
 60c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 610:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 614:	8e 7f       	andi	r24, 0xFE	; 254
 616:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 61a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 61e:	80 61       	ori	r24, 0x10	; 16
 620:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 624:	42 e0       	ldi	r20, 0x02	; 2
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	6b de       	rcall	.-810    	; 0x302 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 62c:	9c d2       	rcall	.+1336   	; 0xb66 <USB_Event_Stub>
 62e:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0b be       	out	0x3b, r0	; 59
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <Endpoint_Write_Stream_LE>:
 654:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 656:	df 92       	push	r13
 658:	ef 92       	push	r14
 65a:	ff 92       	push	r15
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
 666:	8b 01       	movw	r16, r22
 668:	7a 01       	movw	r14, r20
 66a:	9e de       	rcall	.-708    	; 0x3a8 <Endpoint_WaitUntilReady>
 66c:	81 11       	cpse	r24, r1
 66e:	33 c0       	rjmp	.+102    	; 0x6d6 <Endpoint_Write_Stream_LE+0x82>
 670:	e1 14       	cp	r14, r1
 672:	f1 04       	cpc	r15, r1
 674:	39 f0       	breq	.+14     	; 0x684 <Endpoint_Write_Stream_LE+0x30>
 676:	f7 01       	movw	r30, r14
 678:	80 81       	ld	r24, Z
 67a:	91 81       	ldd	r25, Z+1	; 0x01
 67c:	08 1b       	sub	r16, r24
 67e:	19 0b       	sbc	r17, r25
 680:	c8 0f       	add	r28, r24
 682:	d9 1f       	adc	r29, r25
 684:	c1 2c       	mov	r12, r1
 686:	d1 2c       	mov	r13, r1
 688:	01 15       	cp	r16, r1
 68a:	11 05       	cpc	r17, r1
 68c:	19 f1       	breq	.+70     	; 0x6d4 <Endpoint_Write_Stream_LE+0x80>
 68e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 692:	85 fd       	sbrc	r24, 5
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <Endpoint_Write_Stream_LE+0x6e>
 696:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 69a:	8e 77       	andi	r24, 0x7E	; 126
 69c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a0:	63 d2       	rcall	.+1222   	; 0xb68 <USB_USBTask>
 6a2:	e1 14       	cp	r14, r1
 6a4:	f1 04       	cpc	r15, r1
 6a6:	49 f0       	breq	.+18     	; 0x6ba <Endpoint_Write_Stream_LE+0x66>
 6a8:	f7 01       	movw	r30, r14
 6aa:	80 81       	ld	r24, Z
 6ac:	91 81       	ldd	r25, Z+1	; 0x01
 6ae:	c8 0e       	add	r12, r24
 6b0:	d9 1e       	adc	r13, r25
 6b2:	d1 82       	std	Z+1, r13	; 0x01
 6b4:	c0 82       	st	Z, r12
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <Endpoint_Write_Stream_LE+0x82>
 6ba:	76 de       	rcall	.-788    	; 0x3a8 <Endpoint_WaitUntilReady>
 6bc:	88 23       	and	r24, r24
 6be:	21 f3       	breq	.-56     	; 0x688 <Endpoint_Write_Stream_LE+0x34>
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <Endpoint_Write_Stream_LE+0x82>
 6c2:	89 91       	ld	r24, Y+
 6c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6c8:	01 50       	subi	r16, 0x01	; 1
 6ca:	11 09       	sbc	r17, r1
 6cc:	ff ef       	ldi	r31, 0xFF	; 255
 6ce:	cf 1a       	sub	r12, r31
 6d0:	df 0a       	sbc	r13, r31
 6d2:	da cf       	rjmp	.-76     	; 0x688 <Endpoint_Write_Stream_LE+0x34>
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	08 95       	ret

000006e8 <Endpoint_Write_Control_Stream_LE>:
 6e8:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 6ec:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
 6f0:	26 17       	cp	r18, r22
 6f2:	37 07       	cpc	r19, r23
 6f4:	48 f0       	brcs	.+18     	; 0x708 <Endpoint_Write_Control_Stream_LE+0x20>
 6f6:	61 15       	cp	r22, r1
 6f8:	71 05       	cpc	r23, r1
 6fa:	39 f4       	brne	.+14     	; 0x70a <Endpoint_Write_Control_Stream_LE+0x22>
 6fc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 700:	2e 77       	andi	r18, 0x7E	; 126
 702:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 706:	01 c0       	rjmp	.+2      	; 0x70a <Endpoint_Write_Control_Stream_LE+0x22>
 708:	b9 01       	movw	r22, r18
 70a:	fc 01       	movw	r30, r24
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	61 15       	cp	r22, r1
 710:	71 05       	cpc	r23, r1
 712:	69 f1       	breq	.+90     	; 0x76e <Endpoint_Write_Control_Stream_LE+0x86>
 714:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 718:	88 23       	and	r24, r24
 71a:	d1 f1       	breq	.+116    	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa8>
 71c:	85 30       	cpi	r24, 0x05	; 5
 71e:	d1 f1       	breq	.+116    	; 0x794 <Endpoint_Write_Control_Stream_LE+0xac>
 720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 724:	83 fd       	sbrc	r24, 3
 726:	32 c0       	rjmp	.+100    	; 0x78c <Endpoint_Write_Control_Stream_LE+0xa4>
 728:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 72c:	82 fd       	sbrc	r24, 2
 72e:	28 c0       	rjmp	.+80     	; 0x780 <Endpoint_Write_Control_Stream_LE+0x98>
 730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 734:	80 ff       	sbrs	r24, 0
 736:	eb cf       	rjmp	.-42     	; 0x70e <Endpoint_Write_Control_Stream_LE+0x26>
 738:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 73c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 740:	61 15       	cp	r22, r1
 742:	71 05       	cpc	r23, r1
 744:	51 f0       	breq	.+20     	; 0x75a <Endpoint_Write_Control_Stream_LE+0x72>
 746:	88 30       	cpi	r24, 0x08	; 8
 748:	91 05       	cpc	r25, r1
 74a:	38 f4       	brcc	.+14     	; 0x75a <Endpoint_Write_Control_Stream_LE+0x72>
 74c:	21 91       	ld	r18, Z+
 74e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 752:	61 50       	subi	r22, 0x01	; 1
 754:	71 09       	sbc	r23, r1
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	f3 cf       	rjmp	.-26     	; 0x740 <Endpoint_Write_Control_Stream_LE+0x58>
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	08 97       	sbiw	r24, 0x08	; 8
 75e:	09 f0       	breq	.+2      	; 0x762 <Endpoint_Write_Control_Stream_LE+0x7a>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 766:	8e 77       	andi	r24, 0x7E	; 126
 768:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 76c:	d0 cf       	rjmp	.-96     	; 0x70e <Endpoint_Write_Control_Stream_LE+0x26>
 76e:	21 11       	cpse	r18, r1
 770:	d1 cf       	rjmp	.-94     	; 0x714 <Endpoint_Write_Control_Stream_LE+0x2c>
 772:	06 c0       	rjmp	.+12     	; 0x780 <Endpoint_Write_Control_Stream_LE+0x98>
 774:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 778:	88 23       	and	r24, r24
 77a:	51 f0       	breq	.+20     	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa8>
 77c:	85 30       	cpi	r24, 0x05	; 5
 77e:	51 f0       	breq	.+20     	; 0x794 <Endpoint_Write_Control_Stream_LE+0xac>
 780:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 784:	82 ff       	sbrs	r24, 2
 786:	f6 cf       	rjmp	.-20     	; 0x774 <Endpoint_Write_Control_Stream_LE+0x8c>
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	08 95       	ret
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	08 95       	ret
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	08 95       	ret
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	08 95       	ret

00000798 <Endpoint_Read_Control_Stream_LE>:
 798:	61 15       	cp	r22, r1
 79a:	71 05       	cpc	r23, r1
 79c:	29 f4       	brne	.+10     	; 0x7a8 <Endpoint_Read_Control_Stream_LE+0x10>
 79e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7a2:	2b 77       	andi	r18, 0x7B	; 123
 7a4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7a8:	fc 01       	movw	r30, r24
 7aa:	61 15       	cp	r22, r1
 7ac:	71 05       	cpc	r23, r1
 7ae:	31 f1       	breq	.+76     	; 0x7fc <Endpoint_Read_Control_Stream_LE+0x64>
 7b0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 7b4:	88 23       	and	r24, r24
 7b6:	51 f1       	breq	.+84     	; 0x80c <Endpoint_Read_Control_Stream_LE+0x74>
 7b8:	85 30       	cpi	r24, 0x05	; 5
 7ba:	51 f1       	breq	.+84     	; 0x810 <Endpoint_Read_Control_Stream_LE+0x78>
 7bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c0:	83 fd       	sbrc	r24, 3
 7c2:	22 c0       	rjmp	.+68     	; 0x808 <Endpoint_Read_Control_Stream_LE+0x70>
 7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c8:	82 ff       	sbrs	r24, 2
 7ca:	ef cf       	rjmp	.-34     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x12>
 7cc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7d0:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 7d4:	89 2b       	or	r24, r25
 7d6:	31 f0       	breq	.+12     	; 0x7e4 <Endpoint_Read_Control_Stream_LE+0x4c>
 7d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7dc:	81 93       	st	Z+, r24
 7de:	61 50       	subi	r22, 0x01	; 1
 7e0:	71 09       	sbc	r23, r1
 7e2:	a1 f7       	brne	.-24     	; 0x7cc <Endpoint_Read_Control_Stream_LE+0x34>
 7e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7e8:	8b 77       	andi	r24, 0x7B	; 123
 7ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7ee:	dd cf       	rjmp	.-70     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x12>
 7f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 7f4:	88 23       	and	r24, r24
 7f6:	51 f0       	breq	.+20     	; 0x80c <Endpoint_Read_Control_Stream_LE+0x74>
 7f8:	85 30       	cpi	r24, 0x05	; 5
 7fa:	51 f0       	breq	.+20     	; 0x810 <Endpoint_Read_Control_Stream_LE+0x78>
 7fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 800:	80 ff       	sbrs	r24, 0
 802:	f6 cf       	rjmp	.-20     	; 0x7f0 <Endpoint_Read_Control_Stream_LE+0x58>
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	08 95       	ret
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	08 95       	ret
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	08 95       	ret

00000814 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 814:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 818:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
 81c:	26 17       	cp	r18, r22
 81e:	37 07       	cpc	r19, r23
 820:	48 f0       	brcs	.+18     	; 0x834 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	39 f4       	brne	.+14     	; 0x836 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 828:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 82c:	2e 77       	andi	r18, 0x7E	; 126
 82e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 832:	01 c0       	rjmp	.+2      	; 0x836 <Endpoint_Write_Control_PStream_LE+0x22>
 834:	b9 01       	movw	r22, r18
 836:	fc 01       	movw	r30, r24
 838:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	71 f1       	breq	.+92     	; 0x89c <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 840:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 844:	88 23       	and	r24, r24
 846:	d9 f1       	breq	.+118    	; 0x8be <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 848:	85 30       	cpi	r24, 0x05	; 5
 84a:	d9 f1       	breq	.+118    	; 0x8c2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 84c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 850:	83 fd       	sbrc	r24, 3
 852:	33 c0       	rjmp	.+102    	; 0x8ba <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 854:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 858:	82 fd       	sbrc	r24, 2
 85a:	29 c0       	rjmp	.+82     	; 0x8ae <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 85c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 860:	80 ff       	sbrs	r24, 0
 862:	eb cf       	rjmp	.-42     	; 0x83a <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 864:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 868:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 86c:	61 15       	cp	r22, r1
 86e:	71 05       	cpc	r23, r1
 870:	59 f0       	breq	.+22     	; 0x888 <Endpoint_Write_Control_PStream_LE+0x74>
 872:	88 30       	cpi	r24, 0x08	; 8
 874:	91 05       	cpc	r25, r1
 876:	40 f4       	brcc	.+16     	; 0x888 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 878:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 87a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 87e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 880:	61 50       	subi	r22, 0x01	; 1
 882:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	f2 cf       	rjmp	.-28     	; 0x86c <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 888:	21 e0       	ldi	r18, 0x01	; 1
 88a:	08 97       	sbiw	r24, 0x08	; 8
 88c:	09 f0       	breq	.+2      	; 0x890 <Endpoint_Write_Control_PStream_LE+0x7c>
 88e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 890:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 894:	8e 77       	andi	r24, 0x7E	; 126
 896:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89a:	cf cf       	rjmp	.-98     	; 0x83a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 89c:	21 11       	cpse	r18, r1
 89e:	d0 cf       	rjmp	.-96     	; 0x840 <Endpoint_Write_Control_PStream_LE+0x2c>
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8a6:	88 23       	and	r24, r24
 8a8:	51 f0       	breq	.+20     	; 0x8be <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8aa:	85 30       	cpi	r24, 0x05	; 5
 8ac:	51 f0       	breq	.+20     	; 0x8c2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8b2:	82 ff       	sbrs	r24, 2
 8b4:	f6 cf       	rjmp	.-20     	; 0x8a2 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 8c2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8c4:	08 95       	ret

000008c6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	aa 97       	sbiw	r28, 0x2a	; 42
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	eb e1       	ldi	r30, 0x1B	; 27
 8e0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8e2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8e6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8e8:	21 e0       	ldi	r18, 0x01	; 1
 8ea:	e3 32       	cpi	r30, 0x23	; 35
 8ec:	f2 07       	cpc	r31, r18
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 8f0:	89 dc       	rcall	.-1774   	; 0x204 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 8f6:	83 ff       	sbrs	r24, 3
 8f8:	1d c1       	rjmp	.+570    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 8fe:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x1>
 902:	49 2f       	mov	r20, r25
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	4a 30       	cpi	r20, 0x0A	; 10
 908:	51 05       	cpc	r21, r1
 90a:	08 f0       	brcs	.+2      	; 0x90e <USB_Device_ProcessControlRequest+0x48>
 90c:	13 c1       	rjmp	.+550    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
 90e:	fa 01       	movw	r30, r20
 910:	e4 5b       	subi	r30, 0xB4	; 180
 912:	ff 4f       	sbci	r31, 0xFF	; 255
 914:	33 c3       	rjmp	.+1638   	; 0xf7c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 916:	80 38       	cpi	r24, 0x80	; 128
 918:	81 f0       	breq	.+32     	; 0x93a <USB_Device_ProcessControlRequest+0x74>
 91a:	82 38       	cpi	r24, 0x82	; 130
 91c:	09 f0       	breq	.+2      	; 0x920 <USB_Device_ProcessControlRequest+0x5a>
 91e:	0a c1       	rjmp	.+532    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 920:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 924:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 926:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 92a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 92e:	85 fb       	bst	r24, 5
 930:	88 27       	eor	r24, r24
 932:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 934:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 938:	06 c0       	rjmp	.+12     	; 0x946 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 93a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 93e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_Device_RemoteWakeupEnabled>
 942:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 944:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 946:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94a:	97 7f       	andi	r25, 0xF7	; 247
 94c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 950:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 954:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 958:	c5 c0       	rjmp	.+394    	; 0xae4 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 95a:	28 2f       	mov	r18, r24
 95c:	2d 7f       	andi	r18, 0xFD	; 253
 95e:	09 f0       	breq	.+2      	; 0x962 <USB_Device_ProcessControlRequest+0x9c>
 960:	e9 c0       	rjmp	.+466    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 962:	88 23       	and	r24, r24
 964:	19 f0       	breq	.+6      	; 0x96c <USB_Device_ProcessControlRequest+0xa6>
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	61 f0       	breq	.+24     	; 0x982 <USB_Device_ProcessControlRequest+0xbc>
 96a:	e4 c0       	rjmp	.+456    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 96c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	09 f0       	breq	.+2      	; 0x976 <USB_Device_ProcessControlRequest+0xb0>
 974:	df c0       	rjmp	.+446    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 976:	93 30       	cpi	r25, 0x03	; 3
 978:	09 f0       	breq	.+2      	; 0x97c <USB_Device_ProcessControlRequest+0xb6>
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_Device_RemoteWakeupEnabled>
 980:	2b c0       	rjmp	.+86     	; 0x9d8 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 982:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 986:	81 11       	cpse	r24, r1
 988:	27 c0       	rjmp	.+78     	; 0x9d8 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 98a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 98e:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 990:	09 f4       	brne	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0xce>
 992:	d0 c0       	rjmp	.+416    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 994:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 998:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 99c:	20 ff       	sbrs	r18, 0
 99e:	1c c0       	rjmp	.+56     	; 0x9d8 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9a0:	93 30       	cpi	r25, 0x03	; 3
 9a2:	21 f4       	brne	.+8      	; 0x9ac <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9a4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9a8:	80 62       	ori	r24, 0x20	; 32
 9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9ac:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9b0:	90 61       	ori	r25, 0x10	; 16
 9b2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	a9 01       	movw	r20, r18
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <USB_Device_ProcessControlRequest+0xfc>
 9be:	44 0f       	add	r20, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	8a 95       	dec	r24
 9c4:	e2 f7       	brpl	.-8      	; 0x9be <USB_Device_ProcessControlRequest+0xf8>
 9c6:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 9ca:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9d2:	88 60       	ori	r24, 0x08	; 8
 9d4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9d8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9e0:	87 7f       	andi	r24, 0xF7	; 247
 9e2:	83 c0       	rjmp	.+262    	; 0xaea <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9e4:	81 11       	cpse	r24, r1
 9e6:	a6 c0       	rjmp	.+332    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 9e8:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 9ec:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9ee:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9f0:	f8 94       	cli
 9f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9f6:	87 7f       	andi	r24, 0xF7	; 247
 9f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9fc:	b6 dc       	rcall	.-1684   	; 0x36a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 a02:	80 ff       	sbrs	r24, 0
 a04:	fc cf       	rjmp	.-8      	; 0x9fe <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a06:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a0a:	80 78       	andi	r24, 0x80	; 128
 a0c:	81 2b       	or	r24, r17

				UDADDR = Temp;
 a0e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 a12:	80 68       	ori	r24, 0x80	; 128
 a14:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a18:	11 11       	cpse	r17, r1
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <USB_Device_ProcessControlRequest+0x15a>
 a1c:	82 e0       	ldi	r24, 0x02	; 2
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <USB_Device_ProcessControlRequest+0x15c>
 a20:	83 e0       	ldi	r24, 0x03	; 3
 a22:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a26:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 a28:	85 c0       	rjmp	.+266    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a2a:	80 58       	subi	r24, 0x80	; 128
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	08 f0       	brcs	.+2      	; 0xa32 <USB_Device_ProcessControlRequest+0x16c>
 a30:	81 c0       	rjmp	.+258    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a32:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 a36:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 a3a:	8c 3d       	cpi	r24, 0xDC	; 220
 a3c:	53 e0       	ldi	r21, 0x03	; 3
 a3e:	95 07       	cpc	r25, r21
 a40:	71 f5       	brne	.+92     	; 0xa9e <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a42:	83 e0       	ldi	r24, 0x03	; 3
 a44:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a46:	8a e2       	ldi	r24, 0x2A	; 42
 a48:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a4a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a4c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a4e:	de 01       	movw	r26, r28
 a50:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a52:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a54:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a56:	51 e2       	ldi	r21, 0x21	; 33
 a58:	e3 2f       	mov	r30, r19
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 a60:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a62:	20 ff       	sbrs	r18, 0
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 a66:	e2 95       	swap	r30
 a68:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a6a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a6c:	ef 70       	andi	r30, 0x0F	; 15
 a6e:	8e 2f       	mov	r24, r30
 a70:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a72:	ea 30       	cpi	r30, 0x0A	; 10
 a74:	10 f0       	brcs	.+4      	; 0xa7a <USB_Device_ProcessControlRequest+0x1b4>
 a76:	c7 96       	adiw	r24, 0x37	; 55
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <USB_Device_ProcessControlRequest+0x1b6>
 a7a:	c0 96       	adiw	r24, 0x30	; 48
 a7c:	8d 93       	st	X+, r24
 a7e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a80:	2f 5f       	subi	r18, 0xFF	; 255
 a82:	24 31       	cpi	r18, 0x14	; 20
 a84:	49 f7       	brne	.-46     	; 0xa58 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a86:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a8c:	87 7f       	andi	r24, 0xF7	; 247
 a8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a92:	6a e2       	ldi	r22, 0x2A	; 42
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	ce 01       	movw	r24, r28
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	26 de       	rcall	.-948    	; 0x6e8 <Endpoint_Write_Control_Stream_LE>
 a9c:	12 c0       	rjmp	.+36     	; 0xac2 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a9e:	ae 01       	movw	r20, r28
 aa0:	4f 5f       	subi	r20, 0xFF	; 255
 aa2:	5f 4f       	sbci	r21, 0xFF	; 255
 aa4:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 aa8:	eb db       	rcall	.-2090   	; 0x280 <CALLBACK_USB_GetDescriptor>
 aaa:	bc 01       	movw	r22, r24
 aac:	89 2b       	or	r24, r25
 aae:	09 f4       	brne	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x1ec>
 ab0:	41 c0       	rjmp	.+130    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
 ab2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ab6:	97 7f       	andi	r25, 0xF7	; 247
 ab8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	9a 81       	ldd	r25, Y+2	; 0x02
 ac0:	a9 de       	rcall	.-686    	; 0x814 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ac2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ac6:	8b 77       	andi	r24, 0x7B	; 123
 ac8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 acc:	33 c0       	rjmp	.+102    	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ace:	80 38       	cpi	r24, 0x80	; 128
 ad0:	89 f5       	brne	.+98     	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ad6:	87 7f       	andi	r24, 0xF7	; 247
 ad8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 adc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ae0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ae4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ae8:	8e 77       	andi	r24, 0x7E	; 126
 aea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 aee:	3d dc       	rcall	.-1926   	; 0x36a <Endpoint_ClearStatusStage>
 af0:	21 c0       	rjmp	.+66     	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 af2:	81 11       	cpse	r24, r1
 af4:	1f c0       	rjmp	.+62     	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 af6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 afa:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 afe:	99 27       	eor	r25, r25
 b00:	02 97       	sbiw	r24, 0x02	; 2
 b02:	c4 f4       	brge	.+48     	; 0xb34 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b08:	87 7f       	andi	r24, 0xF7	; 247
 b0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b0e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 b12:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 b16:	29 dc       	rcall	.-1966   	; 0x36a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b18:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
 b1c:	81 11       	cpse	r24, r1
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b20:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b24:	87 fd       	sbrc	r24, 7
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <USB_Device_ProcessControlRequest+0x266>
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x268>
 b2c:	84 e0       	ldi	r24, 0x04	; 4
 b2e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 b32:	5a db       	rcall	.-2380   	; 0x1e8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b38:	83 ff       	sbrs	r24, 3
 b3a:	0a c0       	rjmp	.+20     	; 0xb50 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b3c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b40:	80 62       	ori	r24, 0x20	; 32
 b42:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b4a:	87 7f       	andi	r24, 0xF7	; 247
 b4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 b50:	aa 96       	adiw	r28, 0x2a	; 42
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	08 95       	ret

00000b66 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b66:	08 95       	ret

00000b68 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b68:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b6a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 b6e:	88 23       	and	r24, r24
 b70:	59 f0       	breq	.+22     	; 0xb88 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b72:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b76:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b78:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b80:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 b82:	a1 de       	rcall	.-702    	; 0x8c6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b84:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b8c:	6f 92       	push	r6
 b8e:	7f 92       	push	r7
 b90:	8f 92       	push	r8
 b92:	9f 92       	push	r9
 b94:	af 92       	push	r10
 b96:	bf 92       	push	r11
 b98:	cf 92       	push	r12
 b9a:	df 92       	push	r13
 b9c:	ef 92       	push	r14
 b9e:	ff 92       	push	r15
 ba0:	0f 93       	push	r16
 ba2:	1f 93       	push	r17
 ba4:	cf 93       	push	r28
 ba6:	df 93       	push	r29
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <HID_Device_ProcessControlRequest+0x1e>
 baa:	1f 92       	push	r1
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
 bb0:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 bb2:	ad b6       	in	r10, 0x3d	; 61
 bb4:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 bba:	83 ff       	sbrs	r24, 3
 bbc:	f7 c0       	rjmp	.+494    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 bbe:	f7 01       	movw	r30, r14
 bc0:	80 81       	ld	r24, Z
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 bc8:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x5>
 bcc:	28 17       	cp	r18, r24
 bce:	39 07       	cpc	r19, r25
 bd0:	09 f0       	breq	.+2      	; 0xbd4 <HID_Device_ProcessControlRequest+0x48>
 bd2:	ec c0       	rjmp	.+472    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
	  return;

	switch (USB_ControlRequest.bRequest)
 bd4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x1>
 bd8:	83 30       	cpi	r24, 0x03	; 3
 bda:	09 f4       	brne	.+2      	; 0xbde <HID_Device_ProcessControlRequest+0x52>
 bdc:	96 c0       	rjmp	.+300    	; 0xd0a <HID_Device_ProcessControlRequest+0x17e>
 bde:	30 f4       	brcc	.+12     	; 0xbec <HID_Device_ProcessControlRequest+0x60>
 be0:	81 30       	cpi	r24, 0x01	; 1
 be2:	71 f0       	breq	.+28     	; 0xc00 <HID_Device_ProcessControlRequest+0x74>
 be4:	82 30       	cpi	r24, 0x02	; 2
 be6:	09 f4       	brne	.+2      	; 0xbea <HID_Device_ProcessControlRequest+0x5e>
 be8:	c9 c0       	rjmp	.+402    	; 0xd7c <HID_Device_ProcessControlRequest+0x1f0>
 bea:	e0 c0       	rjmp	.+448    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
 bec:	8a 30       	cpi	r24, 0x0A	; 10
 bee:	09 f4       	brne	.+2      	; 0xbf2 <HID_Device_ProcessControlRequest+0x66>
 bf0:	ad c0       	rjmp	.+346    	; 0xd4c <HID_Device_ProcessControlRequest+0x1c0>
 bf2:	8b 30       	cpi	r24, 0x0B	; 11
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <HID_Device_ProcessControlRequest+0x6c>
 bf6:	96 c0       	rjmp	.+300    	; 0xd24 <HID_Device_ProcessControlRequest+0x198>
 bf8:	89 30       	cpi	r24, 0x09	; 9
 bfa:	09 f0       	breq	.+2      	; 0xbfe <HID_Device_ProcessControlRequest+0x72>
 bfc:	d7 c0       	rjmp	.+430    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
 bfe:	48 c0       	rjmp	.+144    	; 0xc90 <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c00:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 c04:	81 3a       	cpi	r24, 0xA1	; 161
 c06:	09 f0       	breq	.+2      	; 0xc0a <HID_Device_ProcessControlRequest+0x7e>
 c08:	d1 c0       	rjmp	.+418    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
			{
 c0a:	8d b6       	in	r8, 0x3d	; 61
 c0c:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
 c0e:	1a 82       	std	Y+2, r1	; 0x02
 c10:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c12:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 c16:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 c1a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 c1c:	f7 01       	movw	r30, r14
 c1e:	87 81       	ldd	r24, Z+7	; 0x07
 c20:	48 2f       	mov	r20, r24
 c22:	50 e0       	ldi	r21, 0x00	; 0
 c24:	8d b7       	in	r24, 0x3d	; 61
 c26:	9e b7       	in	r25, 0x3e	; 62
 c28:	84 1b       	sub	r24, r20
 c2a:	95 0b       	sbc	r25, r21
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	f8 94       	cli
 c30:	9e bf       	out	0x3e, r25	; 62
 c32:	0f be       	out	0x3f, r0	; 63
 c34:	8d bf       	out	0x3d, r24	; 61
 c36:	ed b7       	in	r30, 0x3d	; 61
 c38:	fe b7       	in	r31, 0x3e	; 62
 c3a:	31 96       	adiw	r30, 0x01	; 1
 c3c:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	70 e0       	ldi	r23, 0x00	; 0
 c42:	cf 01       	movw	r24, r30
 c44:	ba d1       	rcall	.+884    	; 0xfba <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 c46:	4f ef       	ldi	r20, 0xFF	; 255
 c48:	41 0f       	add	r20, r17
 c4a:	8e 01       	movw	r16, r28
 c4c:	0f 5f       	subi	r16, 0xFF	; 255
 c4e:	1f 4f       	sbci	r17, 0xFF	; 255
 c50:	96 01       	movw	r18, r12
 c52:	be 01       	movw	r22, r28
 c54:	6d 5f       	subi	r22, 0xFD	; 253
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	c7 01       	movw	r24, r14
 c5a:	e3 da       	rcall	.-2618   	; 0x222 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 c5c:	f7 01       	movw	r30, r14
 c5e:	85 81       	ldd	r24, Z+5	; 0x05
 c60:	96 81       	ldd	r25, Z+6	; 0x06
 c62:	00 97       	sbiw	r24, 0x00	; 0
 c64:	21 f0       	breq	.+8      	; 0xc6e <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 c66:	47 81       	ldd	r20, Z+7	; 0x07
 c68:	50 e0       	ldi	r21, 0x00	; 0
 c6a:	b6 01       	movw	r22, r12
 c6c:	9d d1       	rcall	.+826    	; 0xfa8 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c6e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c76:	87 7f       	andi	r24, 0xF7	; 247
 c78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 c7c:	69 81       	ldd	r22, Y+1	; 0x01
 c7e:	7a 81       	ldd	r23, Y+2	; 0x02
 c80:	c6 01       	movw	r24, r12
 c82:	32 dd       	rcall	.-1436   	; 0x6e8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c88:	8b 77       	andi	r24, 0x7B	; 123
 c8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c8e:	37 c0       	rjmp	.+110    	; 0xcfe <HID_Device_ProcessControlRequest+0x172>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c90:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 c94:	81 32       	cpi	r24, 0x21	; 33
 c96:	09 f0       	breq	.+2      	; 0xc9a <HID_Device_ProcessControlRequest+0x10e>
 c98:	89 c0       	rjmp	.+274    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
			{
 c9a:	8d b6       	in	r8, 0x3d	; 61
 c9c:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
 c9e:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 ca2:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 ca6:	70 90 1d 01 	lds	r7, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 caa:	60 90 1e 01 	lds	r6, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 cae:	8d b7       	in	r24, 0x3d	; 61
 cb0:	9e b7       	in	r25, 0x3e	; 62
 cb2:	80 1b       	sub	r24, r16
 cb4:	91 0b       	sbc	r25, r17
 cb6:	0f b6       	in	r0, 0x3f	; 63
 cb8:	f8 94       	cli
 cba:	9e bf       	out	0x3e, r25	; 62
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	8d bf       	out	0x3d, r24	; 61
 cc0:	ed b7       	in	r30, 0x3d	; 61
 cc2:	fe b7       	in	r31, 0x3e	; 62
 cc4:	31 96       	adiw	r30, 0x01	; 1
 cc6:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ccc:	87 7f       	andi	r24, 0xF7	; 247
 cce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 cd2:	b8 01       	movw	r22, r16
 cd4:	cf 01       	movw	r24, r30
 cd6:	60 dd       	rcall	.-1344   	; 0x798 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cdc:	8e 77       	andi	r24, 0x7E	; 126
 cde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 ce2:	21 e0       	ldi	r18, 0x01	; 1
 ce4:	71 10       	cpse	r7, r1
 ce6:	01 c0       	rjmp	.+2      	; 0xcea <HID_Device_ProcessControlRequest+0x15e>
 ce8:	20 e0       	ldi	r18, 0x00	; 0
 cea:	30 e0       	ldi	r19, 0x00	; 0
 cec:	02 1b       	sub	r16, r18
 cee:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 cf0:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 cf2:	3d 1d       	adc	r19, r13
 cf4:	4f ef       	ldi	r20, 0xFF	; 255
 cf6:	46 0d       	add	r20, r6
 cf8:	67 2d       	mov	r22, r7
 cfa:	c7 01       	movw	r24, r14
 cfc:	b0 da       	rcall	.-2720   	; 0x25e <CALLBACK_HID_Device_ProcessHIDReport>
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	9e be       	out	0x3e, r9	; 62
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	8d be       	out	0x3d, r8	; 61
 d08:	51 c0       	rjmp	.+162    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d0a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 d0e:	81 3a       	cpi	r24, 0xA1	; 161
 d10:	09 f0       	breq	.+2      	; 0xd14 <HID_Device_ProcessControlRequest+0x188>
 d12:	4c c0       	rjmp	.+152    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d18:	87 7f       	andi	r24, 0xF7	; 247
 d1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 d1e:	f7 01       	movw	r30, r14
 d20:	80 85       	ldd	r24, Z+8	; 0x08
 d22:	3c c0       	rjmp	.+120    	; 0xd9c <HID_Device_ProcessControlRequest+0x210>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d24:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 d28:	81 32       	cpi	r24, 0x21	; 33
 d2a:	09 f0       	breq	.+2      	; 0xd2e <HID_Device_ProcessControlRequest+0x1a2>
 d2c:	3f c0       	rjmp	.+126    	; 0xdac <HID_Device_ProcessControlRequest+0x220>
 d2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d32:	87 7f       	andi	r24, 0xF7	; 247
 d34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d38:	18 db       	rcall	.-2512   	; 0x36a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 d3a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 d3e:	81 e0       	ldi	r24, 0x01	; 1
 d40:	91 11       	cpse	r25, r1
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <HID_Device_ProcessControlRequest+0x1ba>
 d44:	80 e0       	ldi	r24, 0x00	; 0
 d46:	f7 01       	movw	r30, r14
 d48:	80 87       	std	Z+8, r24	; 0x08
 d4a:	30 c0       	rjmp	.+96     	; 0xdac <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d4c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 d50:	81 32       	cpi	r24, 0x21	; 33
 d52:	61 f5       	brne	.+88     	; 0xdac <HID_Device_ProcessControlRequest+0x220>
 d54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d58:	87 7f       	andi	r24, 0xF7	; 247
 d5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d5e:	05 db       	rcall	.-2550   	; 0x36a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d60:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 d64:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 d68:	88 27       	eor	r24, r24
 d6a:	36 e0       	ldi	r19, 0x06	; 6
 d6c:	96 95       	lsr	r25
 d6e:	87 95       	ror	r24
 d70:	3a 95       	dec	r19
 d72:	e1 f7       	brne	.-8      	; 0xd6c <HID_Device_ProcessControlRequest+0x1e0>
 d74:	f7 01       	movw	r30, r14
 d76:	92 87       	std	Z+10, r25	; 0x0a
 d78:	81 87       	std	Z+9, r24	; 0x09
 d7a:	18 c0       	rjmp	.+48     	; 0xdac <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d7c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 d80:	81 3a       	cpi	r24, 0xA1	; 161
 d82:	a1 f4       	brne	.+40     	; 0xdac <HID_Device_ProcessControlRequest+0x220>
 d84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d88:	87 7f       	andi	r24, 0xF7	; 247
 d8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 d8e:	f7 01       	movw	r30, r14
 d90:	81 85       	ldd	r24, Z+9	; 0x09
 d92:	92 85       	ldd	r25, Z+10	; 0x0a
 d94:	96 95       	lsr	r25
 d96:	87 95       	ror	r24
 d98:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d9a:	87 95       	ror	r24
 d9c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 da0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da4:	8e 77       	andi	r24, 0x7E	; 126
 da6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 daa:	df da       	rcall	.-2626   	; 0x36a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 dac:	0f b6       	in	r0, 0x3f	; 63
 dae:	f8 94       	cli
 db0:	be be       	out	0x3e, r11	; 62
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	ad be       	out	0x3d, r10	; 61
 db6:	0f 90       	pop	r0
 db8:	0f 90       	pop	r0
 dba:	0f 90       	pop	r0
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	ff 90       	pop	r15
 dc6:	ef 90       	pop	r14
 dc8:	df 90       	pop	r13
 dca:	cf 90       	pop	r12
 dcc:	bf 90       	pop	r11
 dce:	af 90       	pop	r10
 dd0:	9f 90       	pop	r9
 dd2:	8f 90       	pop	r8
 dd4:	7f 90       	pop	r7
 dd6:	6f 90       	pop	r6
 dd8:	08 95       	ret

00000dda <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 dda:	cf 93       	push	r28
 ddc:	df 93       	push	r29
 dde:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 de0:	dc 01       	movw	r26, r24
 de2:	18 96       	adiw	r26, 0x08	; 8
 de4:	85 e0       	ldi	r24, 0x05	; 5
 de6:	ed 01       	movw	r28, r26
 de8:	19 92       	st	Y+, r1
 dea:	8a 95       	dec	r24
 dec:	e9 f7       	brne	.-6      	; 0xde8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 dee:	81 e0       	ldi	r24, 0x01	; 1
 df0:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
 df2:	84 ef       	ldi	r24, 0xF4	; 244
 df4:	91 e0       	ldi	r25, 0x01	; 1
 df6:	92 87       	std	Z+10, r25	; 0x0a
 df8:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 dfa:	84 81       	ldd	r24, Z+4	; 0x04
 dfc:	81 11       	cpse	r24, r1
 dfe:	02 c0       	rjmp	.+4      	; 0xe04 <HID_Device_ConfigureEndpoints+0x2a>
 e00:	40 e0       	ldi	r20, 0x00	; 0
 e02:	01 c0       	rjmp	.+2      	; 0xe06 <HID_Device_ConfigureEndpoints+0x2c>
 e04:	44 e0       	ldi	r20, 0x04	; 4
 e06:	62 81       	ldd	r22, Z+2	; 0x02
 e08:	73 81       	ldd	r23, Z+3	; 0x03
 e0a:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 e0c:	28 e0       	ldi	r18, 0x08	; 8
 e0e:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 e10:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e12:	26 17       	cp	r18, r22
 e14:	37 07       	cpc	r19, r23
 e16:	20 f4       	brcc	.+8      	; 0xe20 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
 e18:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
 e1a:	22 0f       	add	r18, r18
 e1c:	33 1f       	adc	r19, r19
 e1e:	f9 cf       	rjmp	.-14     	; 0xe12 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 e20:	42 60       	ori	r20, 0x02	; 2
 e22:	92 95       	swap	r25
 e24:	90 7f       	andi	r25, 0xF0	; 240
 e26:	49 2b       	or	r20, r25
 e28:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	69 ca       	rjmp	.-2862   	; 0x302 <Endpoint_ConfigureEndpoint_Prv>

00000e30 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 e30:	5f 92       	push	r5
 e32:	6f 92       	push	r6
 e34:	7f 92       	push	r7
 e36:	8f 92       	push	r8
 e38:	9f 92       	push	r9
 e3a:	af 92       	push	r10
 e3c:	bf 92       	push	r11
 e3e:	cf 92       	push	r12
 e40:	df 92       	push	r13
 e42:	ef 92       	push	r14
 e44:	ff 92       	push	r15
 e46:	0f 93       	push	r16
 e48:	1f 93       	push	r17
 e4a:	cf 93       	push	r28
 e4c:	df 93       	push	r29
 e4e:	00 d0       	rcall	.+0      	; 0xe50 <HID_Device_USBTask+0x20>
 e50:	1f 92       	push	r1
 e52:	cd b7       	in	r28, 0x3d	; 61
 e54:	de b7       	in	r29, 0x3e	; 62
 e56:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
 e58:	ad b6       	in	r10, 0x3d	; 61
 e5a:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e5c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
 e60:	84 30       	cpi	r24, 0x04	; 4
 e62:	09 f0       	breq	.+2      	; 0xe66 <HID_Device_USBTask+0x36>
 e64:	73 c0       	rjmp	.+230    	; 0xf4c <HID_Device_USBTask+0x11c>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e66:	f7 01       	movw	r30, r14
 e68:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e6a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
 e72:	85 ff       	sbrs	r24, 5
 e74:	6b c0       	rjmp	.+214    	; 0xf4c <HID_Device_USBTask+0x11c>
	{
 e76:	8d b6       	in	r8, 0x3d	; 61
 e78:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 e7a:	47 81       	ldd	r20, Z+7	; 0x07
 e7c:	50 e0       	ldi	r21, 0x00	; 0
 e7e:	8d b7       	in	r24, 0x3d	; 61
 e80:	9e b7       	in	r25, 0x3e	; 62
 e82:	84 1b       	sub	r24, r20
 e84:	95 0b       	sbc	r25, r21
 e86:	0f b6       	in	r0, 0x3f	; 63
 e88:	f8 94       	cli
 e8a:	9e bf       	out	0x3e, r25	; 62
 e8c:	0f be       	out	0x3f, r0	; 63
 e8e:	8d bf       	out	0x3d, r24	; 61
 e90:	ed b7       	in	r30, 0x3d	; 61
 e92:	fe b7       	in	r31, 0x3e	; 62
 e94:	31 96       	adiw	r30, 0x01	; 1
 e96:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 e98:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 e9a:	1a 82       	std	Y+2, r1	; 0x02
 e9c:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 e9e:	60 e0       	ldi	r22, 0x00	; 0
 ea0:	70 e0       	ldi	r23, 0x00	; 0
 ea2:	cf 01       	movw	r24, r30
 ea4:	8a d0       	rcall	.+276    	; 0xfba <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 ea6:	8e 01       	movw	r16, r28
 ea8:	0f 5f       	subi	r16, 0xFF	; 255
 eaa:	1f 4f       	sbci	r17, 0xFF	; 255
 eac:	96 01       	movw	r18, r12
 eae:	40 e0       	ldi	r20, 0x00	; 0
 eb0:	be 01       	movw	r22, r28
 eb2:	6d 5f       	subi	r22, 0xFD	; 253
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	c7 01       	movw	r24, r14
 eb8:	b4 d9       	rcall	.-3224   	; 0x222 <CALLBACK_HID_Device_CreateHIDReport>
 eba:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 ebc:	f7 01       	movw	r30, r14
 ebe:	81 85       	ldd	r24, Z+9	; 0x09
 ec0:	92 85       	ldd	r25, Z+10	; 0x0a
 ec2:	89 2b       	or	r24, r25
 ec4:	29 f0       	breq	.+10     	; 0xed0 <HID_Device_USBTask+0xa0>
 ec6:	11 e0       	ldi	r17, 0x01	; 1
 ec8:	83 85       	ldd	r24, Z+11	; 0x0b
 eca:	94 85       	ldd	r25, Z+12	; 0x0c
 ecc:	89 2b       	or	r24, r25
 ece:	09 f0       	breq	.+2      	; 0xed2 <HID_Device_USBTask+0xa2>
 ed0:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 ed2:	f7 01       	movw	r30, r14
 ed4:	65 80       	ldd	r6, Z+5	; 0x05
 ed6:	76 80       	ldd	r7, Z+6	; 0x06
 ed8:	61 14       	cp	r6, r1
 eda:	71 04       	cpc	r7, r1
 edc:	81 f0       	breq	.+32     	; 0xefe <HID_Device_USBTask+0xce>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 ede:	49 81       	ldd	r20, Y+1	; 0x01
 ee0:	5a 81       	ldd	r21, Y+2	; 0x02
 ee2:	b3 01       	movw	r22, r6
 ee4:	c6 01       	movw	r24, r12
 ee6:	53 d0       	rcall	.+166    	; 0xf8e <memcmp>
 ee8:	01 e0       	ldi	r16, 0x01	; 1
 eea:	89 2b       	or	r24, r25
 eec:	09 f4       	brne	.+2      	; 0xef0 <HID_Device_USBTask+0xc0>
 eee:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 ef0:	f7 01       	movw	r30, r14
 ef2:	47 81       	ldd	r20, Z+7	; 0x07
 ef4:	50 e0       	ldi	r21, 0x00	; 0
 ef6:	b6 01       	movw	r22, r12
 ef8:	c3 01       	movw	r24, r6
 efa:	56 d0       	rcall	.+172    	; 0xfa8 <memcpy>
 efc:	01 c0       	rjmp	.+2      	; 0xf00 <HID_Device_USBTask+0xd0>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 efe:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 f00:	89 81       	ldd	r24, Y+1	; 0x01
 f02:	9a 81       	ldd	r25, Y+2	; 0x02
 f04:	89 2b       	or	r24, r25
 f06:	e9 f0       	breq	.+58     	; 0xf42 <HID_Device_USBTask+0x112>
 f08:	51 10       	cpse	r5, r1
 f0a:	04 c0       	rjmp	.+8      	; 0xf14 <HID_Device_USBTask+0xe4>
 f0c:	01 11       	cpse	r16, r1
 f0e:	02 c0       	rjmp	.+4      	; 0xf14 <HID_Device_USBTask+0xe4>
 f10:	10 ff       	sbrs	r17, 0
 f12:	17 c0       	rjmp	.+46     	; 0xf42 <HID_Device_USBTask+0x112>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 f14:	f7 01       	movw	r30, r14
 f16:	81 85       	ldd	r24, Z+9	; 0x09
 f18:	92 85       	ldd	r25, Z+10	; 0x0a
 f1a:	94 87       	std	Z+12, r25	; 0x0c
 f1c:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 f1e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f20:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
 f24:	8b 81       	ldd	r24, Y+3	; 0x03
 f26:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 f28:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 f2c:	69 81       	ldd	r22, Y+1	; 0x01
 f2e:	7a 81       	ldd	r23, Y+2	; 0x02
 f30:	40 e0       	ldi	r20, 0x00	; 0
 f32:	50 e0       	ldi	r21, 0x00	; 0
 f34:	c6 01       	movw	r24, r12
 f36:	8e db       	rcall	.-2276   	; 0x654 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 f3c:	8e 77       	andi	r24, 0x7E	; 126
 f3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 f42:	0f b6       	in	r0, 0x3f	; 63
 f44:	f8 94       	cli
 f46:	9e be       	out	0x3e, r9	; 62
 f48:	0f be       	out	0x3f, r0	; 63
 f4a:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
 f4c:	0f b6       	in	r0, 0x3f	; 63
 f4e:	f8 94       	cli
 f50:	be be       	out	0x3e, r11	; 62
 f52:	0f be       	out	0x3f, r0	; 63
 f54:	ad be       	out	0x3d, r10	; 61
 f56:	0f 90       	pop	r0
 f58:	0f 90       	pop	r0
 f5a:	0f 90       	pop	r0
 f5c:	df 91       	pop	r29
 f5e:	cf 91       	pop	r28
 f60:	1f 91       	pop	r17
 f62:	0f 91       	pop	r16
 f64:	ff 90       	pop	r15
 f66:	ef 90       	pop	r14
 f68:	df 90       	pop	r13
 f6a:	cf 90       	pop	r12
 f6c:	bf 90       	pop	r11
 f6e:	af 90       	pop	r10
 f70:	9f 90       	pop	r9
 f72:	8f 90       	pop	r8
 f74:	7f 90       	pop	r7
 f76:	6f 90       	pop	r6
 f78:	5f 90       	pop	r5
 f7a:	08 95       	ret

00000f7c <__tablejump2__>:
 f7c:	ee 0f       	add	r30, r30
 f7e:	ff 1f       	adc	r31, r31
 f80:	00 24       	eor	r0, r0
 f82:	00 1c       	adc	r0, r0
 f84:	0b be       	out	0x3b, r0	; 59
 f86:	07 90       	elpm	r0, Z+
 f88:	f6 91       	elpm	r31, Z
 f8a:	e0 2d       	mov	r30, r0
 f8c:	09 94       	ijmp

00000f8e <memcmp>:
 f8e:	fb 01       	movw	r30, r22
 f90:	dc 01       	movw	r26, r24
 f92:	04 c0       	rjmp	.+8      	; 0xf9c <memcmp+0xe>
 f94:	8d 91       	ld	r24, X+
 f96:	01 90       	ld	r0, Z+
 f98:	80 19       	sub	r24, r0
 f9a:	21 f4       	brne	.+8      	; 0xfa4 <memcmp+0x16>
 f9c:	41 50       	subi	r20, 0x01	; 1
 f9e:	50 40       	sbci	r21, 0x00	; 0
 fa0:	c8 f7       	brcc	.-14     	; 0xf94 <memcmp+0x6>
 fa2:	88 1b       	sub	r24, r24
 fa4:	99 0b       	sbc	r25, r25
 fa6:	08 95       	ret

00000fa8 <memcpy>:
 fa8:	fb 01       	movw	r30, r22
 faa:	dc 01       	movw	r26, r24
 fac:	02 c0       	rjmp	.+4      	; 0xfb2 <memcpy+0xa>
 fae:	01 90       	ld	r0, Z+
 fb0:	0d 92       	st	X+, r0
 fb2:	41 50       	subi	r20, 0x01	; 1
 fb4:	50 40       	sbci	r21, 0x00	; 0
 fb6:	d8 f7       	brcc	.-10     	; 0xfae <memcpy+0x6>
 fb8:	08 95       	ret

00000fba <memset>:
 fba:	dc 01       	movw	r26, r24
 fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <memset+0x6>
 fbe:	6d 93       	st	X+, r22
 fc0:	41 50       	subi	r20, 0x01	; 1
 fc2:	50 40       	sbci	r21, 0x00	; 0
 fc4:	e0 f7       	brcc	.-8      	; 0xfbe <memset+0x4>
 fc6:	08 95       	ret

00000fc8 <_exit>:
 fc8:	f8 94       	cli

00000fca <__stop_program>:
 fca:	ff cf       	rjmp	.-2      	; 0xfca <__stop_program>
