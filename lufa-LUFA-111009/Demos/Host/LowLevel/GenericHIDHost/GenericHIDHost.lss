
GenericHIDHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000183e  000018d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000183e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  000018e4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac7  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021dd  00000000  00000000  000076ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ed4  00000000  00000000  000098dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  0000c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002425  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035b8  00000000  00000000  0000f549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00012b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	38 c1       	rjmp	.+624    	; 0x272 <__ctors_end>
       2:	00 00       	nop
       4:	54 c1       	rjmp	.+680    	; 0x2ae <__bad_interrupt>
       6:	00 00       	nop
       8:	52 c1       	rjmp	.+676    	; 0x2ae <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c1       	rjmp	.+672    	; 0x2ae <__bad_interrupt>
       e:	00 00       	nop
      10:	4e c1       	rjmp	.+668    	; 0x2ae <__bad_interrupt>
      12:	00 00       	nop
      14:	4c c1       	rjmp	.+664    	; 0x2ae <__bad_interrupt>
      16:	00 00       	nop
      18:	4a c1       	rjmp	.+660    	; 0x2ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	48 c1       	rjmp	.+656    	; 0x2ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	46 c1       	rjmp	.+652    	; 0x2ae <__bad_interrupt>
      22:	00 00       	nop
      24:	44 c1       	rjmp	.+648    	; 0x2ae <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c6       	rjmp	.+3076   	; 0xc2e <__vector_10>
      2a:	00 00       	nop
      2c:	40 c1       	rjmp	.+640    	; 0x2ae <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c1       	rjmp	.+636    	; 0x2ae <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c1       	rjmp	.+632    	; 0x2ae <__bad_interrupt>
      36:	00 00       	nop
      38:	3a c1       	rjmp	.+628    	; 0x2ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	38 c1       	rjmp	.+624    	; 0x2ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	36 c1       	rjmp	.+620    	; 0x2ae <__bad_interrupt>
      42:	00 00       	nop
      44:	34 c1       	rjmp	.+616    	; 0x2ae <__bad_interrupt>
      46:	00 00       	nop
      48:	32 c1       	rjmp	.+612    	; 0x2ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c1       	rjmp	.+608    	; 0x2ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	2e c1       	rjmp	.+604    	; 0x2ae <__bad_interrupt>
      52:	00 00       	nop
      54:	2c c1       	rjmp	.+600    	; 0x2ae <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c1       	rjmp	.+596    	; 0x2ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	28 c1       	rjmp	.+592    	; 0x2ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	26 c1       	rjmp	.+588    	; 0x2ae <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c1       	rjmp	.+584    	; 0x2ae <__bad_interrupt>
      66:	00 00       	nop
      68:	22 c1       	rjmp	.+580    	; 0x2ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	20 c1       	rjmp	.+576    	; 0x2ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c1       	rjmp	.+572    	; 0x2ae <__bad_interrupt>
      72:	00 00       	nop
      74:	1c c1       	rjmp	.+568    	; 0x2ae <__bad_interrupt>
      76:	00 00       	nop
      78:	1a c1       	rjmp	.+564    	; 0x2ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	18 c1       	rjmp	.+560    	; 0x2ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	16 c1       	rjmp	.+556    	; 0x2ae <__bad_interrupt>
      82:	00 00       	nop
      84:	14 c1       	rjmp	.+552    	; 0x2ae <__bad_interrupt>
      86:	00 00       	nop
      88:	12 c1       	rjmp	.+548    	; 0x2ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	10 c1       	rjmp	.+544    	; 0x2ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	0e c1       	rjmp	.+540    	; 0x2ae <__bad_interrupt>
      92:	00 00       	nop
      94:	0c c1       	rjmp	.+536    	; 0x2ae <__bad_interrupt>
      96:	00 00       	nop
      98:	fe 03       	fmulsu	r23, r22
      9a:	ef 04       	cpc	r14, r15
      9c:	1c 04       	cpc	r1, r12
      9e:	26 04       	cpc	r2, r6
      a0:	51 04       	cpc	r5, r1
      a2:	79 04       	cpc	r7, r9
      a4:	84 04       	cpc	r8, r4
      a6:	95 04       	cpc	r9, r5
      a8:	b1 04       	cpc	r11, r1
      aa:	d8 04       	cpc	r13, r8

000000ac <__trampolines_end>:
      ac:	0d 0a       	sbc	r0, r29
      ae:	00 30       	Address 0x00000000000000ae is out of bounds.
.word	0xffff	; ????

000000af <__c.4533>:
      af:	30 78 25 30 32 58 20 00                             0x%02X .

000000b7 <__c.4526>:
      b7:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      c7:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      d7:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      e7:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      f7:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     107:	1b 5b 33 37 6d 00                                   .[37m.

0000010d <__c.4519>:
     10d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     11d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     12d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000013c <__c.4514>:
     13c:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     14c:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000155 <__c.4512>:
     155:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     165:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     175:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     185:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     195:	37 6d 00                                            7m.

00000198 <__c.4510>:
     198:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1a8:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001b2 <__c.4508>:
     1b2:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1c2:	69 63 65 2e 0d 0a 00                                ice....

000001c9 <__c.4506>:
     1c9:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1d9:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1e9:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001f3 <__c.4503>:
     1f3:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     203:	61 74 61 2e 0d 0a 00                                ata....

0000020a <__c.4498>:
     20a:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     21a:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000229 <__c.4493>:
     229:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     239:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000246 <__c.4484>:
     246:	1b 5b 33 36 6d 47 65 6e 65 72 69 63 20 48 49 44     .[36mGeneric HID
     256:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     266:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000272 <__ctors_end>:
     272:	11 24       	eor	r1, r1
     274:	1f be       	out	0x3f, r1	; 63
     276:	cf ef       	ldi	r28, 0xFF	; 255
     278:	d0 e2       	ldi	r29, 0x20	; 32
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	cd bf       	out	0x3d, r28	; 61

0000027e <__do_copy_data>:
     27e:	11 e0       	ldi	r17, 0x01	; 1
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b1 e0       	ldi	r27, 0x01	; 1
     284:	ee e3       	ldi	r30, 0x3E	; 62
     286:	f8 e1       	ldi	r31, 0x18	; 24
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	0b bf       	out	0x3b, r16	; 59
     28c:	02 c0       	rjmp	.+4      	; 0x292 <__do_copy_data+0x14>
     28e:	07 90       	elpm	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	a2 31       	cpi	r26, 0x12	; 18
     294:	b1 07       	cpc	r27, r17
     296:	d9 f7       	brne	.-10     	; 0x28e <__do_copy_data+0x10>

00000298 <__do_clear_bss>:
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	a2 e1       	ldi	r26, 0x12	; 18
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <.do_clear_bss_start>

000002a0 <.do_clear_bss_loop>:
     2a0:	1d 92       	st	X+, r1

000002a2 <.do_clear_bss_start>:
     2a2:	a4 33       	cpi	r26, 0x34	; 52
     2a4:	b2 07       	cpc	r27, r18
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <.do_clear_bss_loop>
     2a8:	25 d1       	rcall	.+586    	; 0x4f4 <main>
     2aa:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <_exit>

000002ae <__bad_interrupt>:
     2ae:	a8 ce       	rjmp	.-688    	; 0x0 <__vectors>

000002b0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2b0:	9b b1       	in	r25, 0x0b	; 11
     2b2:	9f 70       	andi	r25, 0x0F	; 15
     2b4:	89 2b       	or	r24, r25
     2b6:	8b b9       	out	0x0b, r24	; 11
     2b8:	08 95       	ret

000002ba <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ba:	84 b7       	in	r24, 0x34	; 52
     2bc:	87 7f       	andi	r24, 0xF7	; 247
     2be:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	a8 95       	wdr
     2c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ca:	88 61       	ori	r24, 0x18	; 24
     2cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2d4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	80 e8       	ldi	r24, 0x80	; 128
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2e6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2e8:	83 e3       	ldi	r24, 0x33	; 51
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     2f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2fa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2fe:	88 e1       	ldi	r24, 0x18	; 24
     300:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     304:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     306:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     308:	8a b1       	in	r24, 0x0a	; 10
     30a:	80 6f       	ori	r24, 0xF0	; 240
     30c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     314:	76 d4       	rcall	.+2284   	; 0xc02 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     316:	ae e2       	ldi	r26, 0x2E	; 46
     318:	b1 e0       	ldi	r27, 0x01	; 1
     31a:	e0 e2       	ldi	r30, 0x20	; 32
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	11 96       	adiw	r26, 0x01	; 1
     320:	fc 93       	st	X, r31
     322:	ee 93       	st	-X, r30
					stdout = Stream;
     324:	13 96       	adiw	r26, 0x03	; 3
     326:	fc 93       	st	X, r31
     328:	ee 93       	st	-X, r30
     32a:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     32c:	8e e0       	ldi	r24, 0x0E	; 14
     32e:	df 01       	movw	r26, r30
     330:	1d 92       	st	X+, r1
     332:	8a 95       	dec	r24
     334:	e9 f7       	brne	.-6      	; 0x330 <SetupHardware+0x76>
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	83 83       	std	Z+3, r24	; 0x03
     33a:	84 ef       	ldi	r24, 0xF4	; 244
     33c:	98 e0       	ldi	r25, 0x08	; 8
     33e:	91 87       	std	Z+9, r25	; 0x09
     340:	80 87       	std	Z+8, r24	; 0x08
     342:	8d ef       	ldi	r24, 0xFD	; 253
     344:	98 e0       	ldi	r25, 0x08	; 8
     346:	93 87       	std	Z+11, r25	; 0x0b
     348:	82 87       	std	Z+10, r24	; 0x0a
     34a:	08 95       	ret

0000034c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     34c:	89 e2       	ldi	r24, 0x29	; 41
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	96 d7       	rcall	.+3884   	; 0x127e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     352:	80 ea       	ldi	r24, 0xA0	; 160
     354:	ad cf       	rjmp	.-166    	; 0x2b0 <LEDs_SetAllLEDs>

00000356 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     356:	8a e0       	ldi	r24, 0x0A	; 10
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	91 d7       	rcall	.+3874   	; 0x127e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	a8 cf       	rjmp	.-176    	; 0x2b0 <LEDs_SetAllLEDs>

00000360 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     360:	cf 93       	push	r28
	puts_P(PSTR("Getting Config Data.\r\n"));
     362:	83 ef       	ldi	r24, 0xF3	; 243
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	8b d7       	rcall	.+3862   	; 0x127e <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     368:	e6 d0       	rcall	.+460    	; 0x536 <ProcessConfigurationDescriptor>
     36a:	c8 2f       	mov	r28, r24
     36c:	88 23       	and	r24, r24
     36e:	a9 f0       	breq	.+42     	; 0x39a <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     370:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     372:	19 f4       	brne	.+6      	; 0x37a <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
     374:	89 ec       	ldi	r24, 0xC9	; 201
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	02 c0       	rjmp	.+4      	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
     37a:	82 eb       	ldi	r24, 0xB2	; 178
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	7f d7       	rcall	.+3838   	; 0x127e <puts_P>
     380:	1f 92       	push	r1

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     382:	cf 93       	push	r28
     384:	88 e9       	ldi	r24, 0x98	; 152
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	51 d7       	rcall	.+3746   	; 0x1230 <printf_P>
     38e:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	80 e9       	ldi	r24, 0x90	; 144
     398:	0d c0       	rjmp	.+26     	; 0x3b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	f0 d6       	rcall	.+3552   	; 0x117e <USB_Host_SetDeviceConfiguration>
     39e:	88 23       	and	r24, r24
     3a0:	29 f0       	breq	.+10     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     3a2:	1f 92       	push	r1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3a4:	8f 93       	push	r24
     3a6:	85 e5       	ldi	r24, 0x55	; 85
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	ee cf       	rjmp	.-36     	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     3ac:	8c e3       	ldi	r24, 0x3C	; 60
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	66 d7       	rcall	.+3788   	; 0x127e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3b2:	80 e6       	ldi	r24, 0x60	; 96
}
     3b4:	cf 91       	pop	r28
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3b6:	7c cf       	rjmp	.-264    	; 0x2b0 <LEDs_SetAllLEDs>

000003b8 <EVENT_USB_Host_HostError>:
     3b8:	c8 2f       	mov	r28, r24
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     3ba:	bb d3       	rcall	.+1910   	; 0xb32 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3bc:	1f 92       	push	r1
     3be:	cf 93       	push	r28
     3c0:	8d e0       	ldi	r24, 0x0D	; 13
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	33 d7       	rcall	.+3686   	; 0x1230 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3ca:	80 e9       	ldi	r24, 0x90	; 144
     3cc:	71 df       	rcall	.-286    	; 0x2b0 <LEDs_SetAllLEDs>
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <EVENT_USB_Host_HostError+0x1e>

000003d8 <EVENT_USB_Host_DeviceEnumerationFailed>:
     3d8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3dc:	1f 92       	push	r1
     3de:	9f 93       	push	r25
     3e0:	1f 92       	push	r1
     3e2:	6f 93       	push	r22
     3e4:	1f 92       	push	r1
     3e6:	8f 93       	push	r24
     3e8:	87 eb       	ldi	r24, 0xB7	; 183
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	1f d7       	rcall	.+3646   	; 0x1230 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3f2:	8d b7       	in	r24, 0x3d	; 61
     3f4:	9e b7       	in	r25, 0x3e	; 62
     3f6:	08 96       	adiw	r24, 0x08	; 8
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	9e bf       	out	0x3e, r25	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	8d bf       	out	0x3d, r24	; 61
     402:	80 e9       	ldi	r24, 0x90	; 144
     404:	55 cf       	rjmp	.-342    	; 0x2b0 <LEDs_SetAllLEDs>

00000406 <ReadNextReport>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     422:	ed b6       	in	r14, 0x3d	; 61
     424:	fe b6       	in	r15, 0x3e	; 62
/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     426:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_HostState>
     42a:	8b 30       	cpi	r24, 0x0B	; 11
     42c:	09 f0       	breq	.+2      	; 0x430 <ReadNextReport+0x2a>
     42e:	50 c0       	rjmp	.+160    	; 0x4d0 <ReadNextReport+0xca>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     436:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     43a:	8f 7b       	andi	r24, 0xBF	; 191
     43c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     440:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	/* Select and unfreeze HID data IN pipe */
	Pipe_SelectPipe(HID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     444:	80 ff       	sbrs	r24, 0
     446:	3f c0       	rjmp	.+126    	; 0x4c6 <ReadNextReport+0xc0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     448:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     44c:	85 ff       	sbrs	r24, 5
     44e:	36 c0       	rjmp	.+108    	; 0x4bc <ReadNextReport+0xb6>
	{
     450:	ad b6       	in	r10, 0x3d	; 61
     452:	be b6       	in	r11, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     454:	c0 90 f6 00 	lds	r12, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     458:	d0 90 f7 00 	lds	r13, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		uint8_t ReportINData[Pipe_BytesInPipe()];
     45c:	8d b7       	in	r24, 0x3d	; 61
     45e:	9e b7       	in	r25, 0x3e	; 62
     460:	8c 19       	sub	r24, r12
     462:	9d 09       	sbc	r25, r13
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	9e bf       	out	0x3e, r25	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	8d bf       	out	0x3d, r24	; 61
     46e:	0d b7       	in	r16, 0x3d	; 61
     470:	1e b7       	in	r17, 0x3e	; 62
     472:	0f 5f       	subi	r16, 0xFF	; 255
     474:	1f 4f       	sbci	r17, 0xFF	; 255

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData), NULL);
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	b6 01       	movw	r22, r12
     47c:	c8 01       	movw	r24, r16
     47e:	6a d4       	rcall	.+2260   	; 0xd54 <Pipe_Read_Stream_LE>
     480:	c0 0e       	add	r12, r16
     482:	d1 1e       	adc	r13, r17

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);
     484:	8f ea       	ldi	r24, 0xAF	; 175
     486:	88 2e       	mov	r8, r24
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	98 2e       	mov	r9, r24

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData), NULL);

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
     48c:	0c 15       	cp	r16, r12
     48e:	1d 05       	cpc	r17, r13
     490:	69 f0       	breq	.+26     	; 0x4ac <ReadNextReport+0xa6>
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);
     492:	f8 01       	movw	r30, r16
     494:	81 91       	ld	r24, Z+
     496:	8f 01       	movw	r16, r30
     498:	1f 92       	push	r1
     49a:	8f 93       	push	r24
     49c:	9f 92       	push	r9
     49e:	8f 92       	push	r8
     4a0:	c7 d6       	rcall	.+3470   	; 0x1230 <printf_P>
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	f0 cf       	rjmp	.-32     	; 0x48c <ReadNextReport+0x86>

		puts_P(PSTR("\r\n"));
     4ac:	8c ea       	ldi	r24, 0xAC	; 172
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	e6 d6       	rcall	.+3532   	; 0x127e <puts_P>
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	be be       	out	0x3e, r11	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	ad be       	out	0x3d, r10	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4bc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     4c0:	8e 77       	andi	r24, 0x7E	; 126
     4c2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4c6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	fe be       	out	0x3e, r15	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	ed be       	out	0x3d, r14	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	bf 90       	pop	r11
     4ec:	af 90       	pop	r10
     4ee:	9f 90       	pop	r9
     4f0:	8f 90       	pop	r8
     4f2:	08 95       	ret

000004f4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     4f4:	e2 de       	rcall	.-572    	; 0x2ba <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Generic HID Host Demo running.\r\n" ESC_FG_WHITE));
     4f6:	86 e4       	ldi	r24, 0x46	; 70
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	c1 d6       	rcall	.+3458   	; 0x127e <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4fc:	80 e1       	ldi	r24, 0x10	; 16
     4fe:	d8 de       	rcall	.-592    	; 0x2b0 <LEDs_SetAllLEDs>
	sei();
     500:	78 94       	sei

	for (;;)
	{
		ReadNextReport();
     502:	81 df       	rcall	.-254    	; 0x406 <ReadNextReport>
     504:	63 d6       	rcall	.+3270   	; 0x11cc <USB_USBTask>
		
		USB_USBTask();
     506:	fd cf       	rjmp	.-6      	; 0x502 <main+0xe>

00000508 <DComp_NextHIDInterface>:
uint8_t DComp_NextHIDInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     508:	fc 01       	movw	r30, r24
     50a:	21 81       	ldd	r18, Z+1	; 0x01
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	29 f4       	brne	.+10     	; 0x51a <DComp_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     510:	85 81       	ldd	r24, Z+5	; 0x05
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	11 f4       	brne	.+4      	; 0x51a <DComp_NextHIDInterface+0x12>
		{
			/* Indicate that the descriptor being searched for has been found */
			return DESCRIPTOR_SEARCH_Found;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
     51a:	82 e0       	ldi	r24, 0x02	; 2
}
     51c:	08 95       	ret

0000051e <DComp_NextHIDInterfaceDataEndpoint>:
uint8_t DComp_NextHIDInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     51e:	fc 01       	movw	r30, r24
     520:	81 81       	ldd	r24, Z+1	; 0x01
     522:	85 30       	cpi	r24, 0x05	; 5
     524:	21 f0       	breq	.+8      	; 0x52e <DComp_NextHIDInterfaceDataEndpoint+0x10>
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     526:	84 30       	cpi	r24, 0x04	; 4
     528:	21 f0       	breq	.+8      	; 0x532 <DComp_NextHIDInterfaceDataEndpoint+0x14>
		/* Indicate that the search has failed prematurely and should be aborted */
		return DESCRIPTOR_SEARCH_Fail;
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	08 95       	ret

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		/* Indicate that the search has failed prematurely and should be aborted */
		return DESCRIPTOR_SEARCH_Fail;
     532:	81 e0       	ldi	r24, 0x01	; 1
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     534:	08 95       	ret

00000536 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref GenericHIDHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	c4 50       	subi	r28, 0x04	; 4
     550:	d2 40       	sbci	r29, 0x02	; 2
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     55c:	ae 01       	movw	r20, r28
     55e:	4f 5f       	subi	r20, 0xFF	; 255
     560:	5f 4f       	sbci	r21, 0xFF	; 255
     562:	cd 5f       	subi	r28, 0xFD	; 253
     564:	dd 4f       	sbci	r29, 0xFD	; 253
     566:	59 83       	std	Y+1, r21	; 0x01
     568:	48 83       	st	Y, r20
     56a:	c3 50       	subi	r28, 0x03	; 3
     56c:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	32 e0       	ldi	r19, 0x02	; 2
     572:	be 01       	movw	r22, r28
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	7d 4f       	sbci	r23, 0xFD	; 253
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	59 d4       	rcall	.+2226   	; 0xe2e <USB_Host_GetDeviceConfigDescriptor>
     57c:	f8 2e       	mov	r15, r24
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	f8 16       	cp	r15, r24
     582:	69 f0       	breq	.+26     	; 0x59e <ProcessConfigurationDescriptor+0x68>
     584:	e6 e0       	ldi	r30, 0x06	; 6
     586:	fe 16       	cp	r15, r30
     588:	09 f4       	brne	.+2      	; 0x58c <ProcessConfigurationDescriptor+0x56>
     58a:	57 c0       	rjmp	.+174    	; 0x63a <ProcessConfigurationDescriptor+0x104>
     58c:	f1 10       	cpse	r15, r1
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <ProcessConfigurationDescriptor+0x6e>
     590:	a1 2c       	mov	r10, r1
     592:	b1 2c       	mov	r11, r1
     594:	c1 2c       	mov	r12, r1
     596:	d1 2c       	mov	r13, r1
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	2e c0       	rjmp	.+92     	; 0x5fa <ProcessConfigurationDescriptor+0xc4>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     59e:	22 e0       	ldi	r18, 0x02	; 2
     5a0:	f2 2e       	mov	r15, r18
     5a2:	62 c0       	rjmp	.+196    	; 0x668 <ProcessConfigurationDescriptor+0x132>
		default:
			return ControlError;
     5a4:	ff 24       	eor	r15, r15
     5a6:	f3 94       	inc	r15
     5a8:	5f c0       	rjmp	.+190    	; 0x668 <ProcessConfigurationDescriptor+0x132>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     5aa:	01 15       	cp	r16, r1
     5ac:	11 05       	cpc	r17, r1
     5ae:	79 f0       	breq	.+30     	; 0x5ce <ProcessConfigurationDescriptor+0x98>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     5b0:	4f e8       	ldi	r20, 0x8F	; 143
     5b2:	52 e0       	ldi	r21, 0x02	; 2
     5b4:	be 01       	movw	r22, r28
     5b6:	6d 5f       	subi	r22, 0xFD	; 253
     5b8:	7d 4f       	sbci	r23, 0xFD	; 253
     5ba:	ce 01       	movw	r24, r28
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	9d 4f       	sbci	r25, 0xFD	; 253
     5c0:	8f d4       	rcall	.+2334   	; 0xee0 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <ProcessConfigurationDescriptor+0x92>
     5c6:	3c c0       	rjmp	.+120    	; 0x640 <ProcessConfigurationDescriptor+0x10a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextHIDInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Not all HID devices have an OUT endpoint - if we've reached the end of the HID descriptor
			 * but only found the mandatory IN endpoint, it's safe to continue with the device enumeration */
			if (DataINEndpoint)
     5c8:	c1 14       	cp	r12, r1
     5ca:	d1 04       	cpc	r13, r1
     5cc:	e1 f4       	brne	.+56     	; 0x606 <ProcessConfigurationDescriptor+0xd0>
			  break;

			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     5ce:	44 e8       	ldi	r20, 0x84	; 132
     5d0:	52 e0       	ldi	r21, 0x02	; 2
     5d2:	be 01       	movw	r22, r28
     5d4:	6d 5f       	subi	r22, 0xFD	; 253
     5d6:	7d 4f       	sbci	r23, 0xFD	; 253
     5d8:	ce 01       	movw	r24, r28
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	9d 4f       	sbci	r25, 0xFD	; 253
     5de:	80 d4       	rcall	.+2304   	; 0xee0 <USB_GetNextDescriptorComp>
     5e0:	81 11       	cpse	r24, r1
     5e2:	3a c0       	rjmp	.+116    	; 0x658 <ProcessConfigurationDescriptor+0x122>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     5e4:	cd 5f       	subi	r28, 0xFD	; 253
     5e6:	dd 4f       	sbci	r29, 0xFD	; 253
     5e8:	08 81       	ld	r16, Y
     5ea:	19 81       	ldd	r17, Y+1	; 0x01
     5ec:	c3 50       	subi	r28, 0x03	; 3
     5ee:	d2 40       	sbci	r29, 0x02	; 2

			/* Clear any found endpoints */
			DataOUTEndpoint = NULL;
     5f0:	a1 2c       	mov	r10, r1
     5f2:	b1 2c       	mov	r11, r1

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
     5f6:	f0 e0       	ldi	r31, 0x00	; 0

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     5f8:	6f 01       	movw	r12, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     5fa:	c1 14       	cp	r12, r1
     5fc:	d1 04       	cpc	r13, r1
     5fe:	a9 f2       	breq	.-86     	; 0x5aa <ProcessConfigurationDescriptor+0x74>
     600:	a1 14       	cp	r10, r1
     602:	b1 04       	cpc	r11, r1
     604:	61 f1       	breq	.+88     	; 0x65e <ProcessConfigurationDescriptor+0x128>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(HID_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     606:	f6 01       	movw	r30, r12
     608:	04 81       	ldd	r16, Z+4	; 0x04
     60a:	15 81       	ldd	r17, Z+5	; 0x05
     60c:	e1 2c       	mov	r14, r1
     60e:	22 81       	ldd	r18, Z+2	; 0x02
     610:	40 e1       	ldi	r20, 0x10	; 16
     612:	63 e0       	ldi	r22, 0x03	; 3
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	ef d1       	rcall	.+990    	; 0x9f6 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     618:	f6 01       	movw	r30, r12
     61a:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     61c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>

	/* Check if the HID interface contained an optional OUT data endpoint */
	if (DataOUTEndpoint)
     620:	a1 14       	cp	r10, r1
     622:	b1 04       	cpc	r11, r1
     624:	09 f1       	breq	.+66     	; 0x668 <ProcessConfigurationDescriptor+0x132>
	{
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
     626:	f5 01       	movw	r30, r10
     628:	04 81       	ldd	r16, Z+4	; 0x04
     62a:	15 81       	ldd	r17, Z+5	; 0x05
     62c:	e1 2c       	mov	r14, r1
     62e:	22 81       	ldd	r18, Z+2	; 0x02
     630:	40 e2       	ldi	r20, 0x20	; 32
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	df d1       	rcall	.+958    	; 0x9f6 <Pipe_ConfigurePipe>
     638:	17 c0       	rjmp	.+46     	; 0x668 <ProcessConfigurationDescriptor+0x132>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	f9 2e       	mov	r15, r25
     63e:	14 c0       	rjmp	.+40     	; 0x668 <ProcessConfigurationDescriptor+0x132>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     640:	cd 5f       	subi	r28, 0xFD	; 253
     642:	dd 4f       	sbci	r29, 0xFD	; 253
     644:	e8 81       	ld	r30, Y
     646:	f9 81       	ldd	r31, Y+1	; 0x01
     648:	c3 50       	subi	r28, 0x03	; 3
     64a:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     64c:	82 81       	ldd	r24, Z+2	; 0x02
     64e:	87 fd       	sbrc	r24, 7
     650:	d3 cf       	rjmp	.-90     	; 0x5f8 <ProcessConfigurationDescriptor+0xc2>
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
     652:	5f 01       	movw	r10, r30

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     654:	f6 01       	movw	r30, r12
     656:	d0 cf       	rjmp	.-96     	; 0x5f8 <ProcessConfigurationDescriptor+0xc2>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	f8 2e       	mov	r15, r24
     65c:	05 c0       	rjmp	.+10     	; 0x668 <ProcessConfigurationDescriptor+0x132>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     65e:	01 15       	cp	r16, r1
     660:	11 05       	cpc	r17, r1
     662:	09 f0       	breq	.+2      	; 0x666 <ProcessConfigurationDescriptor+0x130>
     664:	a5 cf       	rjmp	.-182    	; 0x5b0 <ProcessConfigurationDescriptor+0x7a>
     666:	cf cf       	rjmp	.-98     	; 0x606 <ProcessConfigurationDescriptor+0xd0>
						   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	}

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     668:	8f 2d       	mov	r24, r15
     66a:	cc 5f       	subi	r28, 0xFC	; 252
     66c:	dd 4f       	sbci	r29, 0xFD	; 253
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	bf 90       	pop	r11
     68a:	af 90       	pop	r10
     68c:	08 95       	ret

0000068e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     692:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     694:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     698:	9d 7f       	andi	r25, 0xFD	; 253
     69a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6a2:	92 60       	ori	r25, 0x02	; 2
     6a4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6ac:	91 fd       	sbrc	r25, 1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6b0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6b4:	91 60       	ori	r25, 0x01	; 1
     6b6:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6ba:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6be:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6c2:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6c4:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6c8:	2f 7d       	andi	r18, 0xDF	; 223
     6ca:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ce:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6d2:	2f 7d       	andi	r18, 0xDF	; 223
     6d4:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6d8:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6da:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6de:	35 ff       	sbrs	r19, 5
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e2:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6e6:	2f 7d       	andi	r18, 0xDF	; 223
     6e8:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6ec:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6f0:	2d 7f       	andi	r18, 0xFD	; 253
     6f2:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6f6:	08 c0       	rjmp	.+16     	; 0x708 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f8:	ef ec       	ldi	r30, 0xCF	; 207
     6fa:	f7 e0       	ldi	r31, 0x07	; 7
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <USB_Host_ResetDevice+0x6e>
     700:	00 c0       	rjmp	.+0      	; 0x702 <USB_Host_ResetDevice+0x74>
     702:	00 00       	nop
     704:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     706:	49 f7       	brne	.-46     	; 0x6da <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     708:	99 23       	and	r25, r25
     70a:	29 f0       	breq	.+10     	; 0x716 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     70c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     710:	90 62       	ori	r25, 0x20	; 32
     712:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     716:	81 11       	cpse	r24, r1
     718:	05 c0       	rjmp	.+10     	; 0x724 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     71a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     71e:	8e 7f       	andi	r24, 0xFE	; 254
     720:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     724:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     72e:	08 95       	ret

00000730 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     730:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     734:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     736:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     73a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     73c:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     740:	3f 7d       	andi	r19, 0xDF	; 223
     742:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     746:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     74a:	3f 7d       	andi	r19, 0xDF	; 223
     74c:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     750:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     754:	31 60       	ori	r19, 0x01	; 1
     756:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     75a:	88 23       	and	r24, r24
     75c:	39 f1       	breq	.+78     	; 0x7ac <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     75e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     762:	35 ff       	sbrs	r19, 5
     764:	06 c0       	rjmp	.+12     	; 0x772 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     766:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     76a:	3f 7d       	andi	r19, 0xDF	; 223
     76c:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     770:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     772:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <USB_HostState>
     776:	31 30       	cpi	r19, 0x01	; 1
     778:	c1 f0       	breq	.+48     	; 0x7aa <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     77a:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     77e:	34 ff       	sbrs	r19, 4
     780:	09 c0       	rjmp	.+18     	; 0x794 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     782:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     786:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     78a:	8f 7e       	andi	r24, 0xEF	; 239
     78c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     790:	82 e0       	ldi	r24, 0x02	; 2

			break;
     792:	0c c0       	rjmp	.+24     	; 0x7ac <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     794:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     798:	31 ff       	sbrs	r19, 1
     79a:	df cf       	rjmp	.-66     	; 0x75a <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     79c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     7a0:	8d 7f       	andi	r24, 0xFD	; 253
     7a2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7a6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     7aa:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     7ac:	21 11       	cpse	r18, r1
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7b0:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     7b4:	2e 7f       	andi	r18, 0xFE	; 254
     7b6:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7ba:	99 23       	and	r25, r25
     7bc:	29 f0       	breq	.+10     	; 0x7c8 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7be:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     7c2:	90 62       	ori	r25, 0x20	; 32
     7c4:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7c8:	08 95       	ret

000007ca <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7ca:	ef 92       	push	r14
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	28 97       	sbiw	r28, 0x08	; 8
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7e4:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <USB_HostState>
     7e8:	8e 2f       	mov	r24, r30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8a 30       	cpi	r24, 0x0A	; 10
     7ee:	91 05       	cpc	r25, r1
     7f0:	08 f0       	brcs	.+2      	; 0x7f4 <USB_Host_ProcessNextHostState+0x2a>
     7f2:	f5 c0       	rjmp	.+490    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 5b       	subi	r30, 0xB4	; 180
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	11 c5       	rjmp	.+2594   	; 0x121e <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7fc:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     800:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     804:	01 15       	cp	r16, r1
     806:	11 05       	cpc	r17, r1
     808:	09 f4       	brne	.+2      	; 0x80c <USB_Host_ProcessNextHostState+0x42>
     80a:	e9 c0       	rjmp	.+466    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 df       	rcall	.-224    	; 0x730 <USB_Host_WaitMS>
     810:	88 23       	and	r24, r24
     812:	31 f0       	breq	.+12     	; 0x820 <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     814:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
     818:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     81c:	91 e0       	ldi	r25, 0x01	; 1
					break;
     81e:	d1 c0       	rjmp	.+418    	; 0x9c2 <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     820:	01 50       	subi	r16, 0x01	; 1
     822:	11 09       	sbc	r17, r1
     824:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <WaitMSRemaining.2935+0x1>
     828:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <WaitMSRemaining.2935>
     82c:	01 2b       	or	r16, r17
     82e:	09 f0       	breq	.+2      	; 0x832 <USB_Host_ProcessNextHostState+0x68>
     830:	d6 c0       	rjmp	.+428    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     832:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     836:	07 c0       	rjmp	.+14     	; 0x846 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     838:	88 ee       	ldi	r24, 0xE8	; 232
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     840:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
			break;
     84a:	c9 c0       	rjmp	.+402    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     84c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <WaitMSRemaining.2935>
     850:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <WaitMSRemaining.2935+0x1>
     854:	9c 01       	movw	r18, r24
     856:	21 50       	subi	r18, 0x01	; 1
     858:	31 09       	sbc	r19, r1
     85a:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <WaitMSRemaining.2935+0x1>
     85e:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <WaitMSRemaining.2935>
     862:	89 2b       	or	r24, r25
     864:	39 f0       	breq	.+14     	; 0x874 <USB_Host_ProcessNextHostState+0xaa>
     866:	8f ec       	ldi	r24, 0xCF	; 207
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <USB_Host_ProcessNextHostState+0xa0>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <USB_Host_ProcessNextHostState+0xa6>
     870:	00 00       	nop
     872:	b5 c0       	rjmp	.+362    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     874:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     876:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     87a:	80 61       	ori	r24, 0x10	; 16
     87c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     880:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     884:	8b 7f       	andi	r24, 0xFB	; 251
     886:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     88a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     88e:	80 61       	ori	r24, 0x10	; 16
     890:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     894:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	d2 cf       	rjmp	.-92     	; 0x846 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8a2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     8a6:	80 ff       	sbrs	r24, 0
     8a8:	9a c0       	rjmp	.+308    	; 0x9de <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8aa:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     8ae:	8e 7f       	andi	r24, 0xFE	; 254
     8b0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8b4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     8b8:	8d 7f       	andi	r24, 0xFD	; 253
     8ba:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     8be:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     8c2:	8d 7f       	andi	r24, 0xFD	; 253
     8c4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8c8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     8cc:	82 60       	ori	r24, 0x02	; 2
     8ce:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8d2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8dc:	e8 d0       	rcall	.+464    	; 0xaae <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8de:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     8e2:	84 e6       	ldi	r24, 0x64	; 100
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     8ea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     8ee:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8f0:	5c c0       	rjmp	.+184    	; 0x9aa <USB_Host_ProcessNextHostState+0x1e0>
     8f2:	cd de       	rcall	.-614    	; 0x68e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8f4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     8f8:	88 ec       	ldi	r24, 0xC8	; 200
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     900:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	51 c0       	rjmp	.+162    	; 0x9aa <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     908:	e1 2c       	mov	r14, r1
     90a:	00 e4       	ldi	r16, 0x40	; 64
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	6f d0       	rcall	.+222    	; 0x9f6 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     918:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     91c:	87 fd       	sbrc	r24, 7
     91e:	03 c0       	rjmp	.+6      	; 0x926 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     920:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	4e c0       	rjmp	.+156    	; 0x9c2 <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	8e cf       	rjmp	.-228    	; 0x846 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	e1 e0       	ldi	r30, 0x01	; 1
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	a7 e1       	ldi	r26, 0x17	; 23
     932:	b1 e0       	ldi	r27, 0x01	; 1
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     93a:	e1 f7       	brne	.-8      	; 0x934 <USB_Host_ProcessNextHostState+0x16a>
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	28 d3       	rcall	.+1616   	; 0xf92 <USB_Host_SendControlRequest>
     942:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     944:	3d c0       	rjmp	.+122    	; 0x9c0 <USB_Host_ProcessNextHostState+0x1f6>
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

			USB_Host_ResetDevice();
     94c:	a0 de       	rcall	.-704    	; 0x68e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     94e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     952:	88 ec       	ldi	r24, 0xC8	; 200
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     95a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     95e:	88 e0       	ldi	r24, 0x08	; 8
     960:	24 c0       	rjmp	.+72     	; 0x9aa <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     962:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	e1 2c       	mov	r14, r1
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	41 d0       	rcall	.+130    	; 0x9f6 <Pipe_ConfigurePipe>
     974:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     978:	87 ff       	sbrs	r24, 7
     97a:	d2 cf       	rjmp	.-92     	; 0x920 <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	e9 e0       	ldi	r30, 0x09	; 9
     980:	f1 e0       	ldi	r31, 0x01	; 1
     982:	a7 e1       	ldi	r26, 0x17	; 23
     984:	b1 e0       	ldi	r27, 0x01	; 1
     986:	01 90       	ld	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     98c:	e1 f7       	brne	.-8      	; 0x986 <USB_Host_ProcessNextHostState+0x1bc>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	ff d2       	rcall	.+1534   	; 0xf92 <USB_Host_SendControlRequest>
     994:	81 11       	cpse	r24, r1
     996:	14 c0       	rjmp	.+40     	; 0x9c0 <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     998:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <USB_HostState>
     99c:	84 e6       	ldi	r24, 0x64	; 100
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <WaitMSRemaining.2935+0x1>
     9a4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WaitMSRemaining.2935>
     9a8:	89 e0       	ldi	r24, 0x09	; 9
     9aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     9ae:	17 c0       	rjmp	.+46     	; 0x9de <USB_Host_ProcessNextHostState+0x214>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     9bc:	d1 dc       	rcall	.-1630   	; 0x360 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     9be:	0f c0       	rjmp	.+30     	; 0x9de <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9c6:	21 30       	cpi	r18, 0x01	; 1
     9c8:	51 f0       	breq	.+20     	; 0x9de <USB_Host_ProcessNextHostState+0x214>
     9ca:	68 2f       	mov	r22, r24
     9cc:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9ce:	04 dd       	rcall	.-1528   	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationFailed>
     9d0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9da:	bd dc       	rcall	.-1670   	; 0x356 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     9dc:	c2 d0       	rcall	.+388    	; 0xb62 <USB_ResetInterface>
     9de:	28 96       	adiw	r28, 0x08	; 8
	}
}
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ef 90       	pop	r14
     9f4:	08 95       	ret

000009f6 <Pipe_ConfigurePipe>:
     9f6:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	2f 70       	andi	r18, 0x0F	; 15
     9fe:	42 2b       	or	r20, r18
     a00:	90 e4       	ldi	r25, 0x40	; 64
     a02:	69 9f       	mul	r22, r25
     a04:	b0 01       	movw	r22, r0
     a06:	11 24       	eor	r1, r1
     a08:	64 2b       	or	r22, r20
     a0a:	38 2f       	mov	r19, r24
     a0c:	2e 2d       	mov	r18, r14
     a0e:	22 60       	ori	r18, 0x02	; 2
     a10:	37 30       	cpi	r19, 0x07	; 7
     a12:	08 f0       	brcs	.+2      	; 0xa16 <Pipe_ConfigurePipe+0x20>
     a14:	45 c0       	rjmp	.+138    	; 0xaa0 <Pipe_ConfigurePipe+0xaa>
     a16:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     a1a:	38 13       	cpse	r19, r24
     a1c:	13 c0       	rjmp	.+38     	; 0xa44 <Pipe_ConfigurePipe+0x4e>
     a1e:	48 e0       	ldi	r20, 0x08	; 8
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	40 17       	cp	r20, r16
     a26:	51 07       	cpc	r21, r17
     a28:	38 f0       	brcs	.+14     	; 0xa38 <Pipe_ConfigurePipe+0x42>
     a2a:	92 95       	swap	r25
     a2c:	90 7f       	andi	r25, 0xF0	; 240
     a2e:	92 2b       	or	r25, r18
     a30:	e6 2f       	mov	r30, r22
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e c0       	rjmp	.+28     	; 0xa54 <Pipe_ConfigurePipe+0x5e>
     a38:	95 30       	cpi	r25, 0x05	; 5
     a3a:	b9 f3       	breq	.-18     	; 0xa2a <Pipe_ConfigurePipe+0x34>
     a3c:	9f 5f       	subi	r25, 0xFF	; 255
     a3e:	44 0f       	add	r20, r20
     a40:	55 1f       	adc	r21, r21
     a42:	f0 cf       	rjmp	.-32     	; 0xa24 <Pipe_ConfigurePipe+0x2e>
     a44:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a48:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a4c:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     a50:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     a54:	91 fd       	sbrc	r25, 1
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <Pipe_ConfigurePipe+0x66>
     a58:	3f 5f       	subi	r19, 0xFF	; 255
     a5a:	da cf       	rjmp	.-76     	; 0xa10 <Pipe_ConfigurePipe+0x1a>
     a5c:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a60:	4e 7f       	andi	r20, 0xFE	; 254
     a62:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a66:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a6a:	4d 7f       	andi	r20, 0xFD	; 253
     a6c:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a70:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a74:	41 60       	ori	r20, 0x01	; 1
     a76:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a7a:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     a7e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a82:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     a86:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     a8a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a8e:	90 62       	ori	r25, 0x20	; 32
     a90:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a94:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     a98:	97 fd       	sbrc	r25, 7
     a9a:	de cf       	rjmp	.-68     	; 0xa58 <Pipe_ConfigurePipe+0x62>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <Pipe_ConfigurePipe+0xb0>
     aa0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ef 90       	pop	r14
     aac:	08 95       	ret

00000aae <Pipe_ClearPipes>:
     aae:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     ab8:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     abc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ac0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     ac4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ac8:	9e 7f       	andi	r25, 0xFE	; 254
     aca:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	87 30       	cpi	r24, 0x07	; 7
     ad2:	81 f7       	brne	.-32     	; 0xab4 <Pipe_ClearPipes+0x6>
     ad4:	08 95       	ret

00000ad6 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ad6:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     ada:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     ade:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ae0:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ae4:	90 73       	andi	r25, 0x30	; 48
     ae6:	90 31       	cpi	r25, 0x10	; 16
     ae8:	29 f4       	brne	.+10     	; 0xaf4 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aea:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     aee:	90 ff       	sbrs	r25, 0
     af0:	05 c0       	rjmp	.+10     	; 0xafc <Pipe_WaitUntilReady+0x26>
     af2:	19 c0       	rjmp	.+50     	; 0xb26 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     af4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     af8:	92 fd       	sbrc	r25, 2
     afa:	15 c0       	rjmp	.+42     	; 0xb26 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     afc:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b00:	91 fd       	sbrc	r25, 1
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b04:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_HostState>
     b08:	91 30       	cpi	r25, 0x01	; 1
     b0a:	89 f0       	breq	.+34     	; 0xb2e <Pipe_WaitUntilReady+0x58>
     b0c:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     b10:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b14:	42 17       	cp	r20, r18
     b16:	53 07       	cpc	r21, r19
     b18:	19 f3       	breq	.-58     	; 0xae0 <Pipe_WaitUntilReady+0xa>
     b1a:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b1c:	11 f0       	breq	.+4      	; 0xb22 <Pipe_WaitUntilReady+0x4c>
     b1e:	a9 01       	movw	r20, r18
     b20:	df cf       	rjmp	.-66     	; 0xae0 <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b2e:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b30:	08 95       	ret

00000b32 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b32:	70 d0       	rcall	.+224    	; 0xc14 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b34:	77 d0       	rcall	.+238    	; 0xc24 <USB_INT_ClearAllInterrupts>
     b36:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	80 83       	st	Z, r24
     b40:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	80 83       	st	Z, r24
     b4a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b4c:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	8c 91       	ld	r24, X
     b52:	8e 7f       	andi	r24, 0xFE	; 254
     b54:	8c 93       	st	X, r24
     b56:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b58:	8f 7e       	andi	r24, 0xEF	; 239
     b5a:	80 83       	st	Z, r24
     b5c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b60:	08 95       	ret

00000b62 <USB_ResetInterface>:
     b62:	58 d0       	rcall	.+176    	; 0xc14 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b64:	5f d0       	rcall	.+190    	; 0xc24 <USB_INT_ClearAllInterrupts>
     b66:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b70:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b7a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b7e:	8f 7d       	andi	r24, 0xDF	; 223
     b80:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b84:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b88:	8f 77       	andi	r24, 0x7F	; 127
     b8a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b8e:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b90:	89 bd       	out	0x29, r24	; 41
     b92:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b94:	89 bd       	out	0x29, r24	; 41
     b96:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b98:	00 fe       	sbrs	r0, 0
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <USB_ResetInterface+0x34>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b9e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     ba2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     ba6:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ba8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     bac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     bb6:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bc0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bca:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     bce:	8f 7e       	andi	r24, 0xEF	; 239
     bd0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     bd4:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     bd6:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     bd8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     be2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     bec:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     bf6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bfa:	80 61       	ori	r24, 0x10	; 16
     bfc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c00:	08 95       	ret

00000c02 <USB_Init>:
     c02:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_IsInitialized>

	USB_ResetInterface();
     c12:	a7 cf       	rjmp	.-178    	; 0xb62 <USB_ResetInterface>

00000c14 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c14:	e8 ed       	ldi	r30, 0xD8	; 216
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8c 7f       	andi	r24, 0xFC	; 252
     c1c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c1e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c22:	08 95       	ret

00000c24 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c24:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c28:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c2c:	08 95       	ret

00000c2e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	0b b6       	in	r0, 0x3b	; 59
     c3a:	0f 92       	push	r0
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c54:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c58:	85 ff       	sbrs	r24, 5
     c5a:	0a c0       	rjmp	.+20     	; 0xc70 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c5c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c60:	85 ff       	sbrs	r24, 5
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c64:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c68:	8f 7d       	andi	r24, 0xDF	; 223
     c6a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c6e:	6a d1       	rcall	.+724    	; 0xf44 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c70:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c74:	81 ff       	sbrs	r24, 1
     c76:	15 c0       	rjmp	.+42     	; 0xca2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c78:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	11 c0       	rjmp	.+34     	; 0xca2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c80:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c8a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c94:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     c9e:	5b db       	rcall	.-2378   	; 0x356 <EVENT_USB_Host_DeviceUnattached>
     ca0:	60 df       	rcall	.-320    	; 0xb62 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ca2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ca6:	81 ff       	sbrs	r24, 1
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     caa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     cae:	81 ff       	sbrs	r24, 1
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cb2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cbc:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cbe:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	76 db       	rcall	.-2324   	; 0x3b8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ccc:	44 db       	rcall	.-2424   	; 0x356 <EVENT_USB_Host_DeviceUnattached>
     cce:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     cd0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     cd4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cd8:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cda:	17 c0       	rjmp	.+46     	; 0xd0a <__vector_10+0xdc>
     cdc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ce0:	80 ff       	sbrs	r24, 0
     ce2:	13 c0       	rjmp	.+38     	; 0xd0a <__vector_10+0xdc>
     ce4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     cee:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cf8:	29 db       	rcall	.-2478   	; 0x34c <EVENT_USB_Host_DeviceAttached>
     cfa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     d04:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d06:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_HostState>
     d0a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d0e:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <__vector_10+0x100>
     d12:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d16:	82 ff       	sbrs	r24, 2
     d18:	0a c0       	rjmp	.+20     	; 0xd2e <__vector_10+0x100>
     d1a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	57 db       	rcall	.-2386   	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d2a:	15 db       	rcall	.-2518   	; 0x356 <EVENT_USB_Host_DeviceUnattached>
     d2c:	1a df       	rcall	.-460    	; 0xb62 <USB_ResetInterface>

		USB_ResetInterface();
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <Pipe_Read_Stream_LE>:
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
     d66:	8b 01       	movw	r16, r22
     d68:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d6a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     d6e:	8f 7c       	andi	r24, 0xCF	; 207
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d76:	af de       	rcall	.-674    	; 0xad6 <Pipe_WaitUntilReady>
     d78:	81 11       	cpse	r24, r1
     d7a:	32 c0       	rjmp	.+100    	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d7c:	e1 14       	cp	r14, r1
     d7e:	f1 04       	cpc	r15, r1
     d80:	39 f0       	breq	.+14     	; 0xd90 <Pipe_Read_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     d82:	f7 01       	movw	r30, r14
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	08 1b       	sub	r16, r24
     d8a:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d8c:	c8 0f       	add	r28, r24
     d8e:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d90:	c1 2c       	mov	r12, r1
     d92:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d94:	01 15       	cp	r16, r1
     d96:	11 05       	cpc	r17, r1
     d98:	11 f1       	breq	.+68     	; 0xdde <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d9a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d9e:	85 fd       	sbrc	r24, 5
     da0:	15 c0       	rjmp	.+42     	; 0xdcc <Pipe_Read_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     da2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     da6:	8e 77       	andi	r24, 0x7E	; 126
     da8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dac:	e1 14       	cp	r14, r1
     dae:	f1 04       	cpc	r15, r1
     db0:	49 f0       	breq	.+18     	; 0xdc4 <Pipe_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     db2:	f7 01       	movw	r30, r14
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	c8 0e       	add	r12, r24
     dba:	d9 1e       	adc	r13, r25
     dbc:	d1 82       	std	Z+1, r13	; 0x01
     dbe:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     dc0:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
     dc4:	88 de       	rcall	.-752    	; 0xad6 <Pipe_WaitUntilReady>
     dc6:	88 23       	and	r24, r24
     dc8:	29 f3       	breq	.-54     	; 0xd94 <Pipe_Read_Stream_LE+0x40>
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <Pipe_Read_Stream_LE+0x8c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     dcc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dd0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dd2:	01 50       	subi	r16, 0x01	; 1
     dd4:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     dd6:	ff ef       	ldi	r31, 0xFF	; 255
     dd8:	cf 1a       	sub	r12, r31
     dda:	df 0a       	sbc	r13, r31
     ddc:	db cf       	rjmp	.-74     	; 0xd94 <Pipe_Read_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     dde:	80 e0       	ldi	r24, 0x00	; 0
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	08 95       	ret

00000df2 <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	dc 01       	movw	r26, r24
     df8:	eb 01       	movw	r28, r22
     dfa:	e8 81       	ld	r30, Y
     dfc:	f9 81       	ldd	r31, Y+1	; 0x01
     dfe:	20 81       	ld	r18, Z
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <USB_GetNextDescriptor+0x1e>
     e0e:	9c 01       	movw	r18, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	eb 01       	movw	r28, r22
     e16:	f9 83       	std	Y+1, r31	; 0x01
     e18:	e8 83       	st	Y, r30
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 1b       	sub	r24, r18
     e22:	93 0b       	sbc	r25, r19
     e24:	8d 93       	st	X+, r24
     e26:	9c 93       	st	X, r25
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <USB_Host_GetDeviceConfigDescriptor>:
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	29 97       	sbiw	r28, 0x09	; 9
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	6b 01       	movw	r12, r22
     e50:	8a 01       	movw	r16, r20
     e52:	79 01       	movw	r14, r18
     e54:	90 e8       	ldi	r25, 0x80	; 128
     e56:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <USB_ControlRequest>
     e5a:	96 e0       	ldi	r25, 0x06	; 6
     e5c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <USB_ControlRequest+0x1>
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	92 60       	ori	r25, 0x02	; 2
     e66:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_ControlRequest+0x3>
     e6a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_ControlRequest+0x2>
     e6e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_ControlRequest+0x5>
     e72:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_ControlRequest+0x4>
     e76:	89 e0       	ldi	r24, 0x09	; 9
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <USB_ControlRequest+0x7>
     e7e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_ControlRequest+0x6>
     e82:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	83 d0       	rcall	.+262    	; 0xf92 <USB_Host_SendControlRequest>
     e8c:	81 11       	cpse	r24, r1
     e8e:	19 c0       	rjmp	.+50     	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	f6 01       	movw	r30, r12
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
     e9a:	e8 16       	cp	r14, r24
     e9c:	f9 06       	cpc	r15, r25
     e9e:	70 f0       	brcs	.+28     	; 0xebc <USB_Host_GetDeviceConfigDescriptor+0x8e>
     ea0:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <USB_ControlRequest+0x7>
     ea4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <USB_ControlRequest+0x6>
     ea8:	c8 01       	movw	r24, r16
     eaa:	73 d0       	rcall	.+230    	; 0xf92 <USB_Host_SendControlRequest>
     eac:	81 11       	cpse	r24, r1
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     eb0:	f8 01       	movw	r30, r16
     eb2:	81 81       	ldd	r24, Z+1	; 0x01
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	21 f4       	brne	.+8      	; 0xec0 <USB_Host_GetDeviceConfigDescriptor+0x92>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	29 96       	adiw	r28, 0x09	; 9
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	08 95       	ret

00000ee0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ee0:	af 92       	push	r10
     ee2:	bf 92       	push	r11
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	8c 01       	movw	r16, r24
     ef6:	eb 01       	movw	r28, r22
     ef8:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     efa:	f8 01       	movw	r30, r16
     efc:	e0 80       	ld	r14, Z
     efe:	f1 80       	ldd	r15, Z+1	; 0x01
     f00:	e1 14       	cp	r14, r1
     f02:	f1 04       	cpc	r15, r1
     f04:	99 f0       	breq	.+38     	; 0xf2c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f06:	a8 80       	ld	r10, Y
     f08:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f0a:	be 01       	movw	r22, r28
     f0c:	c8 01       	movw	r24, r16
     f0e:	71 df       	rcall	.-286    	; 0xdf2 <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f10:	88 81       	ld	r24, Y
     f12:	99 81       	ldd	r25, Y+1	; 0x01
     f14:	f6 01       	movw	r30, r12
     f16:	09 95       	icall
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	79 f3       	breq	.-34     	; 0xefa <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	39 f4       	brne	.+14     	; 0xf2e <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     f20:	b9 82       	std	Y+1, r11	; 0x01
     f22:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     f24:	f8 01       	movw	r30, r16
     f26:	f1 82       	std	Z+1, r15	; 0x01
     f28:	e0 82       	st	Z, r14
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	08 95       	ret

00000f44 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f44:	08 95       	ret

00000f46 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f4e:	c9 ee       	ldi	r28, 0xE9	; 233
     f50:	d3 e0       	ldi	r29, 0x03	; 3
     f52:	11 11       	cpse	r17, r1
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <USB_Host_WaitForIOS+0x28>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f56:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f5a:	83 fd       	sbrc	r24, 3
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <USB_Host_WaitForIOS+0x42>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	e7 db       	rcall	.-2098   	; 0x730 <USB_Host_WaitMS>
     f62:	81 11       	cpse	r24, r1
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <USB_Host_WaitForIOS+0x44>
     f66:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f68:	a1 f7       	brne	.-24     	; 0xf52 <USB_Host_WaitForIOS+0xc>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f6e:	11 30       	cpi	r17, 0x01	; 1
     f70:	29 f4       	brne	.+10     	; 0xf7c <USB_Host_WaitForIOS+0x36>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f72:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f76:	80 ff       	sbrs	r24, 0
     f78:	f2 cf       	rjmp	.-28     	; 0xf5e <USB_Host_WaitForIOS+0x18>
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <USB_Host_WaitForIOS+0x42>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f7c:	12 30       	cpi	r17, 0x02	; 2
     f7e:	79 f7       	brne	.-34     	; 0xf5e <USB_Host_WaitForIOS+0x18>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f80:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f84:	82 ff       	sbrs	r24, 2
     f86:	eb cf       	rjmp	.-42     	; 0xf5e <USB_Host_WaitForIOS+0x18>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f88:	80 e0       	ldi	r24, 0x00	; 0
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f9e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	f8 2e       	mov	r15, r24
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fa6:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <USB_ControlRequest+0x6>
     faa:	d0 91 1e 01 	lds	r29, 0x011E	; 0x80011e <USB_ControlRequest+0x7>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fae:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	ba db       	rcall	.-2188   	; 0x730 <USB_Host_WaitMS>
     fbc:	81 11       	cpse	r24, r1
     fbe:	c8 c0       	rjmp	.+400    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     fc4:	8f 7c       	andi	r24, 0xCF	; 207
     fc6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fca:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     fce:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fd2:	8f 7e       	andi	r24, 0xEF	; 239
     fd4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fe2:	e7 e1       	ldi	r30, 0x17	; 23
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	8f e1       	ldi	r24, 0x1F	; 31
     fe8:	91 e0       	ldi	r25, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     fea:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fec:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ff0:	8e 17       	cp	r24, r30
     ff2:	9f 07       	cpc	r25, r31
     ff4:	d1 f7       	brne	.-12     	; 0xfea <USB_Host_SendControlRequest+0x58>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ff6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ffa:	87 77       	andi	r24, 0x77	; 119
     ffc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	a1 df       	rcall	.-190    	; 0xf46 <USB_Host_WaitForIOS>
    1004:	81 11       	cpse	r24, r1
    1006:	a4 c0       	rjmp	.+328    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1008:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	8d db       	rcall	.-2278   	; 0x730 <USB_Host_WaitMS>
    1016:	81 11       	cpse	r24, r1
    1018:	9b c0       	rjmp	.+310    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    101a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest>
    101e:	87 ff       	sbrs	r24, 7
    1020:	4e c0       	rjmp	.+156    	; 0x10be <__EEPROM_REGION_LENGTH__+0xbe>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1022:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1026:	8f 7c       	andi	r24, 0xCF	; 207
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    102e:	01 15       	cp	r16, r1
    1030:	11 05       	cpc	r17, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1034:	3a c0       	rjmp	.+116    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
    1036:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    103a:	8f 7c       	andi	r24, 0xCF	; 207
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1042:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	7b df       	rcall	.-266    	; 0xf46 <USB_Host_WaitForIOS>
    1050:	81 11       	cpse	r24, r1
    1052:	7e c0       	rjmp	.+252    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1054:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1058:	8b 77       	andi	r24, 0x7B	; 123
    105a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	72 df       	rcall	.-284    	; 0xf46 <USB_Host_WaitForIOS>
    1062:	76 c0       	rjmp	.+236    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1064:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1068:	8f 7b       	andi	r24, 0xBF	; 191
    106a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	6a df       	rcall	.-300    	; 0xf46 <USB_Host_WaitForIOS>
    1072:	81 11       	cpse	r24, r1
    1074:	6d c0       	rjmp	.+218    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1076:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    107a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    107e:	89 2b       	or	r24, r25
    1080:	11 f4       	brne	.+4      	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
				  DataLen = 0;
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	f8 01       	movw	r30, r16
    1088:	8f 01       	movw	r16, r30
    108a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    108e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

				while (Pipe_BytesInPipe() && DataLen)
    1092:	89 2b       	or	r24, r25
    1094:	69 f4       	brne	.+26     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1096:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10a0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    10a4:	8e 77       	andi	r24, 0x7E	; 126
    10a6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10aa:	20 97       	sbiw	r28, 0x00	; 0
    10ac:	d9 f6       	brne	.-74     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    10ae:	c3 cf       	rjmp	.-122    	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10b0:	20 97       	sbiw	r28, 0x00	; 0
    10b2:	89 f3       	breq	.-30     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10b4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
				{
					*(DataStream++) = Pipe_Read_8();
    10b8:	81 93       	st	Z+, r24
					DataLen--;
    10ba:	21 97       	sbiw	r28, 0x01	; 1
    10bc:	e5 cf       	rjmp	.-54     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10be:	01 15       	cp	r16, r1
    10c0:	11 05       	cpc	r17, r1
    10c2:	91 f1       	breq	.+100    	; 0x1128 <__EEPROM_REGION_LENGTH__+0x128>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10c4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    10c8:	8f 7c       	andi	r24, 0xCF	; 207
    10ca:	80 62       	ori	r24, 0x20	; 32
    10cc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    10d4:	8f 7b       	andi	r24, 0xBF	; 191
    10d6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	20 97       	sbiw	r28, 0x00	; 0
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10de:	e1 f0       	breq	.+56     	; 0x1118 <__EEPROM_REGION_LENGTH__+0x118>
    10e0:	32 df       	rcall	.-412    	; 0xf46 <USB_Host_WaitForIOS>
    10e2:	81 11       	cpse	r24, r1
    10e4:	35 c0       	rjmp	.+106    	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    10ea:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	28 17       	cp	r18, r24
    10f6:	39 07       	cpc	r19, r25
    10f8:	48 f4       	brcc	.+18     	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
				{
					Pipe_Write_8(*(DataStream++));
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	f8 01       	movw	r30, r16
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1104:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
					DataLen--;
    1108:	21 97       	sbiw	r28, 0x01	; 1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    110a:	69 f7       	brne	.-38     	; 0x10e6 <__EEPROM_REGION_LENGTH__+0xe6>
    110c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1110:	8b 77       	andi	r24, 0x7B	; 123
    1112:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1116:	e1 cf       	rjmp	.-62     	; 0x10da <__EEPROM_REGION_LENGTH__+0xda>
    1118:	16 df       	rcall	.-468    	; 0xf46 <USB_Host_WaitForIOS>
    111a:	81 11       	cpse	r24, r1
    111c:	19 c0       	rjmp	.+50     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    111e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1128:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    112c:	8f 7c       	andi	r24, 0xCF	; 207
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1134:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1138:	8f 7b       	andi	r24, 0xBF	; 191
    113a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	02 df       	rcall	.-508    	; 0xf46 <USB_Host_WaitForIOS>
    1142:	81 11       	cpse	r24, r1
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1146:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    114a:	9e 77       	andi	r25, 0x7E	; 126
    114c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1150:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1154:	90 64       	ori	r25, 0x40	; 64
    1156:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    115a:	f1 10       	cpse	r15, r1
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <__EEPROM_REGION_LENGTH__+0x168>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    115e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    1162:	9e 7f       	andi	r25, 0xFE	; 254
    1164:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
				UPRST = 0;
    116e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	08 95       	ret

0000117e <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    117e:	cf 93       	push	r28
    1180:	c8 2f       	mov	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1182:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_ControlRequest>
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_ControlRequest+0x1>
    118c:	8c 2f       	mov	r24, r28
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_ControlRequest+0x3>
    1194:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_ControlRequest+0x2>
    1198:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_ControlRequest+0x5>
    119c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <USB_ControlRequest+0x4>
    11a0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_ControlRequest+0x7>
    11a4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11a8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	f0 de       	rcall	.-544    	; 0xf92 <USB_Host_SendControlRequest>
    11b2:	81 11       	cpse	r24, r1
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <USB_Host_SetDeviceConfiguration+0x4a>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11b6:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <USB_Host_ConfigurationNumber>
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11ba:	c1 11       	cpse	r28, r1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <USB_Host_SetDeviceConfiguration+0x44>
    11be:	9a e0       	ldi	r25, 0x0A	; 10
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <USB_Host_SetDeviceConfiguration+0x46>
    11c2:	9b e0       	ldi	r25, 0x0B	; 11
    11c4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <USB_HostState>
	}

	return ErrorCode;
}
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11d2:	c7 ea       	ldi	r28, 0xA7	; 167
    11d4:	d0 e0       	ldi	r29, 0x00	; 0
    11d6:	18 81       	ld	r17, Y
    11d8:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11da:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11dc:	f6 da       	rcall	.-2580   	; 0x7ca <USB_Host_ProcessNextHostState>
    11de:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	08 95       	ret

000011e8 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    11e8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    11ec:	95 ff       	sbrs	r25, 5
    11ee:	fc cf       	rjmp	.-8      	; 0x11e8 <Serial_putchar>
				UDR1 = DataByte;
    11f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	08 95       	ret

000011fa <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11fa:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11fe:	87 ff       	sbrs	r24, 7
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <Serial_getchar+0x18>
    1202:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1206:	87 ff       	sbrs	r24, 7
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    120a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	08 95       	ret
	  return _FDEV_EOF;
    1212:	8e ef       	ldi	r24, 0xFE	; 254
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    121c:	08 95       	ret

0000121e <__tablejump2__>:
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	00 24       	eor	r0, r0
    1224:	00 1c       	adc	r0, r0
    1226:	0b be       	out	0x3b, r0	; 59
    1228:	07 90       	elpm	r0, Z+
    122a:	f6 91       	elpm	r31, Z
    122c:	e0 2d       	mov	r30, r0
    122e:	09 94       	ijmp

00001230 <printf_P>:
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	ae 01       	movw	r20, r28
    123e:	49 5f       	subi	r20, 0xF9	; 249
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	da 01       	movw	r26, r20
    1244:	6d 91       	ld	r22, X+
    1246:	7d 91       	ld	r23, X+
    1248:	ad 01       	movw	r20, r26
    124a:	0e e2       	ldi	r16, 0x2E	; 46
    124c:	11 e0       	ldi	r17, 0x01	; 1
    124e:	f8 01       	movw	r30, r16
    1250:	82 81       	ldd	r24, Z+2	; 0x02
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	dc 01       	movw	r26, r24
    1256:	13 96       	adiw	r26, 0x03	; 3
    1258:	2c 91       	ld	r18, X
    125a:	13 97       	sbiw	r26, 0x03	; 3
    125c:	28 60       	ori	r18, 0x08	; 8
    125e:	13 96       	adiw	r26, 0x03	; 3
    1260:	2c 93       	st	X, r18
    1262:	3e d0       	rcall	.+124    	; 0x12e0 <vfprintf>
    1264:	d8 01       	movw	r26, r16
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	ed 91       	ld	r30, X+
    126a:	fc 91       	ld	r31, X
    126c:	13 97       	sbiw	r26, 0x03	; 3
    126e:	23 81       	ldd	r18, Z+3	; 0x03
    1270:	27 7f       	andi	r18, 0xF7	; 247
    1272:	23 83       	std	Z+3, r18	; 0x03
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <puts_P>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
    1288:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__iob+0x2>
    128c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__iob+0x3>
    1290:	83 81       	ldd	r24, Z+3	; 0x03
    1292:	81 ff       	sbrs	r24, 1
    1294:	1b c0       	rjmp	.+54     	; 0x12cc <puts_P+0x4e>
    1296:	d0 e0       	ldi	r29, 0x00	; 0
    1298:	c0 e0       	ldi	r28, 0x00	; 0
    129a:	f8 01       	movw	r30, r16
    129c:	84 91       	lpm	r24, Z
    129e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__iob+0x2>
    12a2:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__iob+0x3>
    12a6:	db 01       	movw	r26, r22
    12a8:	18 96       	adiw	r26, 0x08	; 8
    12aa:	ed 91       	ld	r30, X+
    12ac:	fc 91       	ld	r31, X
    12ae:	19 97       	sbiw	r26, 0x09	; 9
    12b0:	88 23       	and	r24, r24
    12b2:	41 f0       	breq	.+16     	; 0x12c4 <puts_P+0x46>
    12b4:	09 95       	icall
    12b6:	89 2b       	or	r24, r25
    12b8:	11 f0       	breq	.+4      	; 0x12be <puts_P+0x40>
    12ba:	df ef       	ldi	r29, 0xFF	; 255
    12bc:	cf ef       	ldi	r28, 0xFF	; 255
    12be:	0f 5f       	subi	r16, 0xFF	; 255
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	eb cf       	rjmp	.-42     	; 0x129a <puts_P+0x1c>
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	09 95       	icall
    12c8:	89 2b       	or	r24, r25
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <puts_P+0x54>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <puts_P+0x58>
    12d2:	8d 2f       	mov	r24, r29
    12d4:	9c 2f       	mov	r25, r28
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <vfprintf>:
    12e0:	2f 92       	push	r2
    12e2:	3f 92       	push	r3
    12e4:	4f 92       	push	r4
    12e6:	5f 92       	push	r5
    12e8:	6f 92       	push	r6
    12ea:	7f 92       	push	r7
    12ec:	8f 92       	push	r8
    12ee:	9f 92       	push	r9
    12f0:	af 92       	push	r10
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2b 97       	sbiw	r28, 0x0b	; 11
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	6c 01       	movw	r12, r24
    1316:	7b 01       	movw	r14, r22
    1318:	8a 01       	movw	r16, r20
    131a:	fc 01       	movw	r30, r24
    131c:	17 82       	std	Z+7, r1	; 0x07
    131e:	16 82       	std	Z+6, r1	; 0x06
    1320:	83 81       	ldd	r24, Z+3	; 0x03
    1322:	81 ff       	sbrs	r24, 1
    1324:	bf c1       	rjmp	.+894    	; 0x16a4 <vfprintf+0x3c4>
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	3c 01       	movw	r6, r24
    132c:	f6 01       	movw	r30, r12
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	f7 01       	movw	r30, r14
    1332:	93 fd       	sbrc	r25, 3
    1334:	85 91       	lpm	r24, Z+
    1336:	93 ff       	sbrs	r25, 3
    1338:	81 91       	ld	r24, Z+
    133a:	7f 01       	movw	r14, r30
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <vfprintf+0x62>
    1340:	ad c1       	rjmp	.+858    	; 0x169c <vfprintf+0x3bc>
    1342:	85 32       	cpi	r24, 0x25	; 37
    1344:	39 f4       	brne	.+14     	; 0x1354 <vfprintf+0x74>
    1346:	93 fd       	sbrc	r25, 3
    1348:	85 91       	lpm	r24, Z+
    134a:	93 ff       	sbrs	r25, 3
    134c:	81 91       	ld	r24, Z+
    134e:	7f 01       	movw	r14, r30
    1350:	85 32       	cpi	r24, 0x25	; 37
    1352:	21 f4       	brne	.+8      	; 0x135c <vfprintf+0x7c>
    1354:	b6 01       	movw	r22, r12
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	d6 d1       	rcall	.+940    	; 0x1706 <fputc>
    135a:	e8 cf       	rjmp	.-48     	; 0x132c <vfprintf+0x4c>
    135c:	91 2c       	mov	r9, r1
    135e:	21 2c       	mov	r2, r1
    1360:	31 2c       	mov	r3, r1
    1362:	ff e1       	ldi	r31, 0x1F	; 31
    1364:	f3 15       	cp	r31, r3
    1366:	d8 f0       	brcs	.+54     	; 0x139e <vfprintf+0xbe>
    1368:	8b 32       	cpi	r24, 0x2B	; 43
    136a:	79 f0       	breq	.+30     	; 0x138a <vfprintf+0xaa>
    136c:	38 f4       	brcc	.+14     	; 0x137c <vfprintf+0x9c>
    136e:	80 32       	cpi	r24, 0x20	; 32
    1370:	79 f0       	breq	.+30     	; 0x1390 <vfprintf+0xb0>
    1372:	83 32       	cpi	r24, 0x23	; 35
    1374:	a1 f4       	brne	.+40     	; 0x139e <vfprintf+0xbe>
    1376:	23 2d       	mov	r18, r3
    1378:	20 61       	ori	r18, 0x10	; 16
    137a:	1d c0       	rjmp	.+58     	; 0x13b6 <vfprintf+0xd6>
    137c:	8d 32       	cpi	r24, 0x2D	; 45
    137e:	61 f0       	breq	.+24     	; 0x1398 <vfprintf+0xb8>
    1380:	80 33       	cpi	r24, 0x30	; 48
    1382:	69 f4       	brne	.+26     	; 0x139e <vfprintf+0xbe>
    1384:	23 2d       	mov	r18, r3
    1386:	21 60       	ori	r18, 0x01	; 1
    1388:	16 c0       	rjmp	.+44     	; 0x13b6 <vfprintf+0xd6>
    138a:	83 2d       	mov	r24, r3
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	38 2e       	mov	r3, r24
    1390:	e3 2d       	mov	r30, r3
    1392:	e4 60       	ori	r30, 0x04	; 4
    1394:	3e 2e       	mov	r3, r30
    1396:	2a c0       	rjmp	.+84     	; 0x13ec <vfprintf+0x10c>
    1398:	f3 2d       	mov	r31, r3
    139a:	f8 60       	ori	r31, 0x08	; 8
    139c:	1d c0       	rjmp	.+58     	; 0x13d8 <vfprintf+0xf8>
    139e:	37 fc       	sbrc	r3, 7
    13a0:	2d c0       	rjmp	.+90     	; 0x13fc <vfprintf+0x11c>
    13a2:	20 ed       	ldi	r18, 0xD0	; 208
    13a4:	28 0f       	add	r18, r24
    13a6:	2a 30       	cpi	r18, 0x0A	; 10
    13a8:	40 f0       	brcs	.+16     	; 0x13ba <vfprintf+0xda>
    13aa:	8e 32       	cpi	r24, 0x2E	; 46
    13ac:	b9 f4       	brne	.+46     	; 0x13dc <vfprintf+0xfc>
    13ae:	36 fc       	sbrc	r3, 6
    13b0:	75 c1       	rjmp	.+746    	; 0x169c <vfprintf+0x3bc>
    13b2:	23 2d       	mov	r18, r3
    13b4:	20 64       	ori	r18, 0x40	; 64
    13b6:	32 2e       	mov	r3, r18
    13b8:	19 c0       	rjmp	.+50     	; 0x13ec <vfprintf+0x10c>
    13ba:	36 fe       	sbrs	r3, 6
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vfprintf+0xea>
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	98 9e       	mul	r9, r24
    13c2:	20 0d       	add	r18, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	92 2e       	mov	r9, r18
    13c8:	11 c0       	rjmp	.+34     	; 0x13ec <vfprintf+0x10c>
    13ca:	ea e0       	ldi	r30, 0x0A	; 10
    13cc:	2e 9e       	mul	r2, r30
    13ce:	20 0d       	add	r18, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	22 2e       	mov	r2, r18
    13d4:	f3 2d       	mov	r31, r3
    13d6:	f0 62       	ori	r31, 0x20	; 32
    13d8:	3f 2e       	mov	r3, r31
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <vfprintf+0x10c>
    13dc:	8c 36       	cpi	r24, 0x6C	; 108
    13de:	21 f4       	brne	.+8      	; 0x13e8 <vfprintf+0x108>
    13e0:	83 2d       	mov	r24, r3
    13e2:	80 68       	ori	r24, 0x80	; 128
    13e4:	38 2e       	mov	r3, r24
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x10c>
    13e8:	88 36       	cpi	r24, 0x68	; 104
    13ea:	41 f4       	brne	.+16     	; 0x13fc <vfprintf+0x11c>
    13ec:	f7 01       	movw	r30, r14
    13ee:	93 fd       	sbrc	r25, 3
    13f0:	85 91       	lpm	r24, Z+
    13f2:	93 ff       	sbrs	r25, 3
    13f4:	81 91       	ld	r24, Z+
    13f6:	7f 01       	movw	r14, r30
    13f8:	81 11       	cpse	r24, r1
    13fa:	b3 cf       	rjmp	.-154    	; 0x1362 <vfprintf+0x82>
    13fc:	98 2f       	mov	r25, r24
    13fe:	9f 7d       	andi	r25, 0xDF	; 223
    1400:	95 54       	subi	r25, 0x45	; 69
    1402:	93 30       	cpi	r25, 0x03	; 3
    1404:	28 f4       	brcc	.+10     	; 0x1410 <vfprintf+0x130>
    1406:	0c 5f       	subi	r16, 0xFC	; 252
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	9f e3       	ldi	r25, 0x3F	; 63
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	0d c0       	rjmp	.+26     	; 0x142a <vfprintf+0x14a>
    1410:	83 36       	cpi	r24, 0x63	; 99
    1412:	31 f0       	breq	.+12     	; 0x1420 <vfprintf+0x140>
    1414:	83 37       	cpi	r24, 0x73	; 115
    1416:	71 f0       	breq	.+28     	; 0x1434 <vfprintf+0x154>
    1418:	83 35       	cpi	r24, 0x53	; 83
    141a:	09 f0       	breq	.+2      	; 0x141e <vfprintf+0x13e>
    141c:	55 c0       	rjmp	.+170    	; 0x14c8 <vfprintf+0x1e8>
    141e:	20 c0       	rjmp	.+64     	; 0x1460 <vfprintf+0x180>
    1420:	f8 01       	movw	r30, r16
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	0e 5f       	subi	r16, 0xFE	; 254
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	88 24       	eor	r8, r8
    142c:	83 94       	inc	r8
    142e:	91 2c       	mov	r9, r1
    1430:	53 01       	movw	r10, r6
    1432:	12 c0       	rjmp	.+36     	; 0x1458 <vfprintf+0x178>
    1434:	28 01       	movw	r4, r16
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	4f 0e       	add	r4, r31
    143a:	51 1c       	adc	r5, r1
    143c:	f8 01       	movw	r30, r16
    143e:	a0 80       	ld	r10, Z
    1440:	b1 80       	ldd	r11, Z+1	; 0x01
    1442:	36 fe       	sbrs	r3, 6
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x16c>
    1446:	69 2d       	mov	r22, r9
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x170>
    144c:	6f ef       	ldi	r22, 0xFF	; 255
    144e:	7f ef       	ldi	r23, 0xFF	; 255
    1450:	c5 01       	movw	r24, r10
    1452:	4e d1       	rcall	.+668    	; 0x16f0 <strnlen>
    1454:	4c 01       	movw	r8, r24
    1456:	82 01       	movw	r16, r4
    1458:	f3 2d       	mov	r31, r3
    145a:	ff 77       	andi	r31, 0x7F	; 127
    145c:	3f 2e       	mov	r3, r31
    145e:	15 c0       	rjmp	.+42     	; 0x148a <vfprintf+0x1aa>
    1460:	28 01       	movw	r4, r16
    1462:	22 e0       	ldi	r18, 0x02	; 2
    1464:	42 0e       	add	r4, r18
    1466:	51 1c       	adc	r5, r1
    1468:	f8 01       	movw	r30, r16
    146a:	a0 80       	ld	r10, Z
    146c:	b1 80       	ldd	r11, Z+1	; 0x01
    146e:	36 fe       	sbrs	r3, 6
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <vfprintf+0x198>
    1472:	69 2d       	mov	r22, r9
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <vfprintf+0x19c>
    1478:	6f ef       	ldi	r22, 0xFF	; 255
    147a:	7f ef       	ldi	r23, 0xFF	; 255
    147c:	c5 01       	movw	r24, r10
    147e:	2d d1       	rcall	.+602    	; 0x16da <strnlen_P>
    1480:	4c 01       	movw	r8, r24
    1482:	f3 2d       	mov	r31, r3
    1484:	f0 68       	ori	r31, 0x80	; 128
    1486:	3f 2e       	mov	r3, r31
    1488:	82 01       	movw	r16, r4
    148a:	33 fc       	sbrc	r3, 3
    148c:	19 c0       	rjmp	.+50     	; 0x14c0 <vfprintf+0x1e0>
    148e:	82 2d       	mov	r24, r2
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	88 16       	cp	r8, r24
    1494:	99 06       	cpc	r9, r25
    1496:	a0 f4       	brcc	.+40     	; 0x14c0 <vfprintf+0x1e0>
    1498:	b6 01       	movw	r22, r12
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	33 d1       	rcall	.+614    	; 0x1706 <fputc>
    14a0:	2a 94       	dec	r2
    14a2:	f5 cf       	rjmp	.-22     	; 0x148e <vfprintf+0x1ae>
    14a4:	f5 01       	movw	r30, r10
    14a6:	37 fc       	sbrc	r3, 7
    14a8:	85 91       	lpm	r24, Z+
    14aa:	37 fe       	sbrs	r3, 7
    14ac:	81 91       	ld	r24, Z+
    14ae:	5f 01       	movw	r10, r30
    14b0:	b6 01       	movw	r22, r12
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	28 d1       	rcall	.+592    	; 0x1706 <fputc>
    14b6:	21 10       	cpse	r2, r1
    14b8:	2a 94       	dec	r2
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	82 1a       	sub	r8, r18
    14be:	91 08       	sbc	r9, r1
    14c0:	81 14       	cp	r8, r1
    14c2:	91 04       	cpc	r9, r1
    14c4:	79 f7       	brne	.-34     	; 0x14a4 <vfprintf+0x1c4>
    14c6:	e1 c0       	rjmp	.+450    	; 0x168a <vfprintf+0x3aa>
    14c8:	84 36       	cpi	r24, 0x64	; 100
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <vfprintf+0x1f0>
    14cc:	89 36       	cpi	r24, 0x69	; 105
    14ce:	39 f5       	brne	.+78     	; 0x151e <vfprintf+0x23e>
    14d0:	f8 01       	movw	r30, r16
    14d2:	37 fe       	sbrs	r3, 7
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <vfprintf+0x204>
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	0c 5f       	subi	r16, 0xFC	; 252
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	08 c0       	rjmp	.+16     	; 0x14f4 <vfprintf+0x214>
    14e4:	60 81       	ld	r22, Z
    14e6:	71 81       	ldd	r23, Z+1	; 0x01
    14e8:	07 2e       	mov	r0, r23
    14ea:	00 0c       	add	r0, r0
    14ec:	88 0b       	sbc	r24, r24
    14ee:	99 0b       	sbc	r25, r25
    14f0:	0e 5f       	subi	r16, 0xFE	; 254
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	f3 2d       	mov	r31, r3
    14f6:	ff 76       	andi	r31, 0x6F	; 111
    14f8:	3f 2e       	mov	r3, r31
    14fa:	97 ff       	sbrs	r25, 7
    14fc:	09 c0       	rjmp	.+18     	; 0x1510 <vfprintf+0x230>
    14fe:	90 95       	com	r25
    1500:	80 95       	com	r24
    1502:	70 95       	com	r23
    1504:	61 95       	neg	r22
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	8f 4f       	sbci	r24, 0xFF	; 255
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	f0 68       	ori	r31, 0x80	; 128
    150e:	3f 2e       	mov	r3, r31
    1510:	2a e0       	ldi	r18, 0x0A	; 10
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	a3 01       	movw	r20, r6
    1516:	33 d1       	rcall	.+614    	; 0x177e <__ultoa_invert>
    1518:	88 2e       	mov	r8, r24
    151a:	86 18       	sub	r8, r6
    151c:	44 c0       	rjmp	.+136    	; 0x15a6 <vfprintf+0x2c6>
    151e:	85 37       	cpi	r24, 0x75	; 117
    1520:	31 f4       	brne	.+12     	; 0x152e <vfprintf+0x24e>
    1522:	23 2d       	mov	r18, r3
    1524:	2f 7e       	andi	r18, 0xEF	; 239
    1526:	b2 2e       	mov	r11, r18
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	25 c0       	rjmp	.+74     	; 0x1578 <vfprintf+0x298>
    152e:	93 2d       	mov	r25, r3
    1530:	99 7f       	andi	r25, 0xF9	; 249
    1532:	b9 2e       	mov	r11, r25
    1534:	8f 36       	cpi	r24, 0x6F	; 111
    1536:	c1 f0       	breq	.+48     	; 0x1568 <vfprintf+0x288>
    1538:	18 f4       	brcc	.+6      	; 0x1540 <vfprintf+0x260>
    153a:	88 35       	cpi	r24, 0x58	; 88
    153c:	79 f0       	breq	.+30     	; 0x155c <vfprintf+0x27c>
    153e:	ae c0       	rjmp	.+348    	; 0x169c <vfprintf+0x3bc>
    1540:	80 37       	cpi	r24, 0x70	; 112
    1542:	19 f0       	breq	.+6      	; 0x154a <vfprintf+0x26a>
    1544:	88 37       	cpi	r24, 0x78	; 120
    1546:	21 f0       	breq	.+8      	; 0x1550 <vfprintf+0x270>
    1548:	a9 c0       	rjmp	.+338    	; 0x169c <vfprintf+0x3bc>
    154a:	e9 2f       	mov	r30, r25
    154c:	e0 61       	ori	r30, 0x10	; 16
    154e:	be 2e       	mov	r11, r30
    1550:	b4 fe       	sbrs	r11, 4
    1552:	0d c0       	rjmp	.+26     	; 0x156e <vfprintf+0x28e>
    1554:	fb 2d       	mov	r31, r11
    1556:	f4 60       	ori	r31, 0x04	; 4
    1558:	bf 2e       	mov	r11, r31
    155a:	09 c0       	rjmp	.+18     	; 0x156e <vfprintf+0x28e>
    155c:	34 fe       	sbrs	r3, 4
    155e:	0a c0       	rjmp	.+20     	; 0x1574 <vfprintf+0x294>
    1560:	29 2f       	mov	r18, r25
    1562:	26 60       	ori	r18, 0x06	; 6
    1564:	b2 2e       	mov	r11, r18
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0x294>
    1568:	28 e0       	ldi	r18, 0x08	; 8
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <vfprintf+0x298>
    156e:	20 e1       	ldi	r18, 0x10	; 16
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <vfprintf+0x298>
    1574:	20 e1       	ldi	r18, 0x10	; 16
    1576:	32 e0       	ldi	r19, 0x02	; 2
    1578:	f8 01       	movw	r30, r16
    157a:	b7 fe       	sbrs	r11, 7
    157c:	07 c0       	rjmp	.+14     	; 0x158c <vfprintf+0x2ac>
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	0c 5f       	subi	r16, 0xFC	; 252
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <vfprintf+0x2b8>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 5f       	subi	r16, 0xFE	; 254
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	a3 01       	movw	r20, r6
    159a:	f1 d0       	rcall	.+482    	; 0x177e <__ultoa_invert>
    159c:	88 2e       	mov	r8, r24
    159e:	86 18       	sub	r8, r6
    15a0:	fb 2d       	mov	r31, r11
    15a2:	ff 77       	andi	r31, 0x7F	; 127
    15a4:	3f 2e       	mov	r3, r31
    15a6:	36 fe       	sbrs	r3, 6
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <vfprintf+0x2e4>
    15aa:	23 2d       	mov	r18, r3
    15ac:	2e 7f       	andi	r18, 0xFE	; 254
    15ae:	a2 2e       	mov	r10, r18
    15b0:	89 14       	cp	r8, r9
    15b2:	58 f4       	brcc	.+22     	; 0x15ca <vfprintf+0x2ea>
    15b4:	34 fe       	sbrs	r3, 4
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <vfprintf+0x2ee>
    15b8:	32 fc       	sbrc	r3, 2
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x2ee>
    15bc:	83 2d       	mov	r24, r3
    15be:	8e 7e       	andi	r24, 0xEE	; 238
    15c0:	a8 2e       	mov	r10, r24
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <vfprintf+0x2ee>
    15c4:	b8 2c       	mov	r11, r8
    15c6:	a3 2c       	mov	r10, r3
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <vfprintf+0x2f0>
    15ca:	b8 2c       	mov	r11, r8
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <vfprintf+0x2f0>
    15ce:	b9 2c       	mov	r11, r9
    15d0:	a4 fe       	sbrs	r10, 4
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <vfprintf+0x312>
    15d4:	fe 01       	movw	r30, r28
    15d6:	e8 0d       	add	r30, r8
    15d8:	f1 1d       	adc	r31, r1
    15da:	80 81       	ld	r24, Z
    15dc:	80 33       	cpi	r24, 0x30	; 48
    15de:	21 f4       	brne	.+8      	; 0x15e8 <vfprintf+0x308>
    15e0:	9a 2d       	mov	r25, r10
    15e2:	99 7e       	andi	r25, 0xE9	; 233
    15e4:	a9 2e       	mov	r10, r25
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x31a>
    15e8:	a2 fe       	sbrs	r10, 2
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <vfprintf+0x318>
    15ec:	b3 94       	inc	r11
    15ee:	b3 94       	inc	r11
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <vfprintf+0x31a>
    15f2:	8a 2d       	mov	r24, r10
    15f4:	86 78       	andi	r24, 0x86	; 134
    15f6:	09 f0       	breq	.+2      	; 0x15fa <vfprintf+0x31a>
    15f8:	b3 94       	inc	r11
    15fa:	a3 fc       	sbrc	r10, 3
    15fc:	10 c0       	rjmp	.+32     	; 0x161e <vfprintf+0x33e>
    15fe:	a0 fe       	sbrs	r10, 0
    1600:	06 c0       	rjmp	.+12     	; 0x160e <vfprintf+0x32e>
    1602:	b2 14       	cp	r11, r2
    1604:	80 f4       	brcc	.+32     	; 0x1626 <vfprintf+0x346>
    1606:	28 0c       	add	r2, r8
    1608:	92 2c       	mov	r9, r2
    160a:	9b 18       	sub	r9, r11
    160c:	0d c0       	rjmp	.+26     	; 0x1628 <vfprintf+0x348>
    160e:	b2 14       	cp	r11, r2
    1610:	58 f4       	brcc	.+22     	; 0x1628 <vfprintf+0x348>
    1612:	b6 01       	movw	r22, r12
    1614:	80 e2       	ldi	r24, 0x20	; 32
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	76 d0       	rcall	.+236    	; 0x1706 <fputc>
    161a:	b3 94       	inc	r11
    161c:	f8 cf       	rjmp	.-16     	; 0x160e <vfprintf+0x32e>
    161e:	b2 14       	cp	r11, r2
    1620:	18 f4       	brcc	.+6      	; 0x1628 <vfprintf+0x348>
    1622:	2b 18       	sub	r2, r11
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x34a>
    1626:	98 2c       	mov	r9, r8
    1628:	21 2c       	mov	r2, r1
    162a:	a4 fe       	sbrs	r10, 4
    162c:	0f c0       	rjmp	.+30     	; 0x164c <vfprintf+0x36c>
    162e:	b6 01       	movw	r22, r12
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	68 d0       	rcall	.+208    	; 0x1706 <fputc>
    1636:	a2 fe       	sbrs	r10, 2
    1638:	16 c0       	rjmp	.+44     	; 0x1666 <vfprintf+0x386>
    163a:	a1 fc       	sbrc	r10, 1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x364>
    163e:	88 e7       	ldi	r24, 0x78	; 120
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x368>
    1644:	88 e5       	ldi	r24, 0x58	; 88
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	b6 01       	movw	r22, r12
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <vfprintf+0x384>
    164c:	8a 2d       	mov	r24, r10
    164e:	86 78       	andi	r24, 0x86	; 134
    1650:	51 f0       	breq	.+20     	; 0x1666 <vfprintf+0x386>
    1652:	a1 fe       	sbrs	r10, 1
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0x37a>
    1656:	8b e2       	ldi	r24, 0x2B	; 43
    1658:	01 c0       	rjmp	.+2      	; 0x165c <vfprintf+0x37c>
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	a7 fc       	sbrc	r10, 7
    165e:	8d e2       	ldi	r24, 0x2D	; 45
    1660:	b6 01       	movw	r22, r12
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	50 d0       	rcall	.+160    	; 0x1706 <fputc>
    1666:	89 14       	cp	r8, r9
    1668:	30 f4       	brcc	.+12     	; 0x1676 <vfprintf+0x396>
    166a:	b6 01       	movw	r22, r12
    166c:	80 e3       	ldi	r24, 0x30	; 48
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	4a d0       	rcall	.+148    	; 0x1706 <fputc>
    1672:	9a 94       	dec	r9
    1674:	f8 cf       	rjmp	.-16     	; 0x1666 <vfprintf+0x386>
    1676:	8a 94       	dec	r8
    1678:	f3 01       	movw	r30, r6
    167a:	e8 0d       	add	r30, r8
    167c:	f1 1d       	adc	r31, r1
    167e:	80 81       	ld	r24, Z
    1680:	b6 01       	movw	r22, r12
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	40 d0       	rcall	.+128    	; 0x1706 <fputc>
    1686:	81 10       	cpse	r8, r1
    1688:	f6 cf       	rjmp	.-20     	; 0x1676 <vfprintf+0x396>
    168a:	22 20       	and	r2, r2
    168c:	09 f4       	brne	.+2      	; 0x1690 <vfprintf+0x3b0>
    168e:	4e ce       	rjmp	.-868    	; 0x132c <vfprintf+0x4c>
    1690:	b6 01       	movw	r22, r12
    1692:	80 e2       	ldi	r24, 0x20	; 32
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	37 d0       	rcall	.+110    	; 0x1706 <fputc>
    1698:	2a 94       	dec	r2
    169a:	f7 cf       	rjmp	.-18     	; 0x168a <vfprintf+0x3aa>
    169c:	f6 01       	movw	r30, r12
    169e:	86 81       	ldd	r24, Z+6	; 0x06
    16a0:	97 81       	ldd	r25, Z+7	; 0x07
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x3c8>
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    16a8:	2b 96       	adiw	r28, 0x0b	; 11
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	9f 90       	pop	r9
    16ca:	8f 90       	pop	r8
    16cc:	7f 90       	pop	r7
    16ce:	6f 90       	pop	r6
    16d0:	5f 90       	pop	r5
    16d2:	4f 90       	pop	r4
    16d4:	3f 90       	pop	r3
    16d6:	2f 90       	pop	r2
    16d8:	08 95       	ret

000016da <strnlen_P>:
    16da:	fc 01       	movw	r30, r24
    16dc:	05 90       	lpm	r0, Z+
    16de:	61 50       	subi	r22, 0x01	; 1
    16e0:	70 40       	sbci	r23, 0x00	; 0
    16e2:	01 10       	cpse	r0, r1
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <strnlen_P+0x2>
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	8e 0f       	add	r24, r30
    16ec:	9f 1f       	adc	r25, r31
    16ee:	08 95       	ret

000016f0 <strnlen>:
    16f0:	fc 01       	movw	r30, r24
    16f2:	61 50       	subi	r22, 0x01	; 1
    16f4:	70 40       	sbci	r23, 0x00	; 0
    16f6:	01 90       	ld	r0, Z+
    16f8:	01 10       	cpse	r0, r1
    16fa:	d8 f7       	brcc	.-10     	; 0x16f2 <strnlen+0x2>
    16fc:	80 95       	com	r24
    16fe:	90 95       	com	r25
    1700:	8e 0f       	add	r24, r30
    1702:	9f 1f       	adc	r25, r31
    1704:	08 95       	ret

00001706 <fputc>:
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	fb 01       	movw	r30, r22
    1710:	23 81       	ldd	r18, Z+3	; 0x03
    1712:	21 fd       	sbrc	r18, 1
    1714:	03 c0       	rjmp	.+6      	; 0x171c <fputc+0x16>
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	9f ef       	ldi	r25, 0xFF	; 255
    171a:	2c c0       	rjmp	.+88     	; 0x1774 <fputc+0x6e>
    171c:	22 ff       	sbrs	r18, 2
    171e:	16 c0       	rjmp	.+44     	; 0x174c <fputc+0x46>
    1720:	46 81       	ldd	r20, Z+6	; 0x06
    1722:	57 81       	ldd	r21, Z+7	; 0x07
    1724:	24 81       	ldd	r18, Z+4	; 0x04
    1726:	35 81       	ldd	r19, Z+5	; 0x05
    1728:	42 17       	cp	r20, r18
    172a:	53 07       	cpc	r21, r19
    172c:	44 f4       	brge	.+16     	; 0x173e <fputc+0x38>
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	9d 01       	movw	r18, r26
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	31 83       	std	Z+1, r19	; 0x01
    173a:	20 83       	st	Z, r18
    173c:	8c 93       	st	X, r24
    173e:	26 81       	ldd	r18, Z+6	; 0x06
    1740:	37 81       	ldd	r19, Z+7	; 0x07
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	37 83       	std	Z+7, r19	; 0x07
    1748:	26 83       	std	Z+6, r18	; 0x06
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <fputc+0x6e>
    174c:	8b 01       	movw	r16, r22
    174e:	ec 01       	movw	r28, r24
    1750:	fb 01       	movw	r30, r22
    1752:	00 84       	ldd	r0, Z+8	; 0x08
    1754:	f1 85       	ldd	r31, Z+9	; 0x09
    1756:	e0 2d       	mov	r30, r0
    1758:	09 95       	icall
    175a:	89 2b       	or	r24, r25
    175c:	e1 f6       	brne	.-72     	; 0x1716 <fputc+0x10>
    175e:	d8 01       	movw	r26, r16
    1760:	16 96       	adiw	r26, 0x06	; 6
    1762:	8d 91       	ld	r24, X+
    1764:	9c 91       	ld	r25, X
    1766:	17 97       	sbiw	r26, 0x07	; 7
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	17 96       	adiw	r26, 0x07	; 7
    176c:	9c 93       	st	X, r25
    176e:	8e 93       	st	-X, r24
    1770:	16 97       	sbiw	r26, 0x06	; 6
    1772:	ce 01       	movw	r24, r28
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <__ultoa_invert>:
    177e:	fa 01       	movw	r30, r20
    1780:	aa 27       	eor	r26, r26
    1782:	28 30       	cpi	r18, 0x08	; 8
    1784:	51 f1       	breq	.+84     	; 0x17da <__ultoa_invert+0x5c>
    1786:	20 31       	cpi	r18, 0x10	; 16
    1788:	81 f1       	breq	.+96     	; 0x17ea <__ultoa_invert+0x6c>
    178a:	e8 94       	clt
    178c:	6f 93       	push	r22
    178e:	6e 7f       	andi	r22, 0xFE	; 254
    1790:	6e 5f       	subi	r22, 0xFE	; 254
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	af 4f       	sbci	r26, 0xFF	; 255
    179a:	b1 e0       	ldi	r27, 0x01	; 1
    179c:	3e d0       	rcall	.+124    	; 0x181a <__ultoa_invert+0x9c>
    179e:	b4 e0       	ldi	r27, 0x04	; 4
    17a0:	3c d0       	rcall	.+120    	; 0x181a <__ultoa_invert+0x9c>
    17a2:	67 0f       	add	r22, r23
    17a4:	78 1f       	adc	r23, r24
    17a6:	89 1f       	adc	r24, r25
    17a8:	9a 1f       	adc	r25, r26
    17aa:	a1 1d       	adc	r26, r1
    17ac:	68 0f       	add	r22, r24
    17ae:	79 1f       	adc	r23, r25
    17b0:	8a 1f       	adc	r24, r26
    17b2:	91 1d       	adc	r25, r1
    17b4:	a1 1d       	adc	r26, r1
    17b6:	6a 0f       	add	r22, r26
    17b8:	71 1d       	adc	r23, r1
    17ba:	81 1d       	adc	r24, r1
    17bc:	91 1d       	adc	r25, r1
    17be:	a1 1d       	adc	r26, r1
    17c0:	20 d0       	rcall	.+64     	; 0x1802 <__ultoa_invert+0x84>
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <__ultoa_invert+0x48>
    17c4:	68 94       	set
    17c6:	3f 91       	pop	r19
    17c8:	2a e0       	ldi	r18, 0x0A	; 10
    17ca:	26 9f       	mul	r18, r22
    17cc:	11 24       	eor	r1, r1
    17ce:	30 19       	sub	r19, r0
    17d0:	30 5d       	subi	r19, 0xD0	; 208
    17d2:	31 93       	st	Z+, r19
    17d4:	de f6       	brtc	.-74     	; 0x178c <__ultoa_invert+0xe>
    17d6:	cf 01       	movw	r24, r30
    17d8:	08 95       	ret
    17da:	46 2f       	mov	r20, r22
    17dc:	47 70       	andi	r20, 0x07	; 7
    17de:	40 5d       	subi	r20, 0xD0	; 208
    17e0:	41 93       	st	Z+, r20
    17e2:	b3 e0       	ldi	r27, 0x03	; 3
    17e4:	0f d0       	rcall	.+30     	; 0x1804 <__ultoa_invert+0x86>
    17e6:	c9 f7       	brne	.-14     	; 0x17da <__ultoa_invert+0x5c>
    17e8:	f6 cf       	rjmp	.-20     	; 0x17d6 <__ultoa_invert+0x58>
    17ea:	46 2f       	mov	r20, r22
    17ec:	4f 70       	andi	r20, 0x0F	; 15
    17ee:	40 5d       	subi	r20, 0xD0	; 208
    17f0:	4a 33       	cpi	r20, 0x3A	; 58
    17f2:	18 f0       	brcs	.+6      	; 0x17fa <__ultoa_invert+0x7c>
    17f4:	49 5d       	subi	r20, 0xD9	; 217
    17f6:	31 fd       	sbrc	r19, 1
    17f8:	40 52       	subi	r20, 0x20	; 32
    17fa:	41 93       	st	Z+, r20
    17fc:	02 d0       	rcall	.+4      	; 0x1802 <__ultoa_invert+0x84>
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__ultoa_invert+0x6c>
    1800:	ea cf       	rjmp	.-44     	; 0x17d6 <__ultoa_invert+0x58>
    1802:	b4 e0       	ldi	r27, 0x04	; 4
    1804:	a6 95       	lsr	r26
    1806:	97 95       	ror	r25
    1808:	87 95       	ror	r24
    180a:	77 95       	ror	r23
    180c:	67 95       	ror	r22
    180e:	ba 95       	dec	r27
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__ultoa_invert+0x86>
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	61 05       	cpc	r22, r1
    1816:	71 05       	cpc	r23, r1
    1818:	08 95       	ret
    181a:	9b 01       	movw	r18, r22
    181c:	ac 01       	movw	r20, r24
    181e:	0a 2e       	mov	r0, r26
    1820:	06 94       	lsr	r0
    1822:	57 95       	ror	r21
    1824:	47 95       	ror	r20
    1826:	37 95       	ror	r19
    1828:	27 95       	ror	r18
    182a:	ba 95       	dec	r27
    182c:	c9 f7       	brne	.-14     	; 0x1820 <__ultoa_invert+0xa2>
    182e:	62 0f       	add	r22, r18
    1830:	73 1f       	adc	r23, r19
    1832:	84 1f       	adc	r24, r20
    1834:	95 1f       	adc	r25, r21
    1836:	a0 1d       	adc	r26, r0
    1838:	08 95       	ret

0000183a <_exit>:
    183a:	f8 94       	cli

0000183c <__stop_program>:
    183c:	ff cf       	rjmp	.-2      	; 0x183c <__stop_program>
