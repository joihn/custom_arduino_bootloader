
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000018d8  0000196c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080016e  0080016e  000019da  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000836d  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022c2  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040de  00000000  00000000  0000c35b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a70  00000000  00000000  0001043c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002790  00000000  00000000  00010eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004149  00000000  00000000  0001363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  00017785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c6       	rjmp	.+3322   	; 0xd24 <__vector_10>
      2a:	00 00       	nop
      2c:	48 c7       	rjmp	.+3728   	; 0xebe <__vector_11>
      2e:	00 00       	nop
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6b c0       	rjmp	.+214    	; 0x168 <__bad_interrupt>
      92:	00 00       	nop
      94:	69 c0       	rjmp	.+210    	; 0x168 <__bad_interrupt>
      96:	00 00       	nop
      98:	9c 09       	sbc	r25, r12
      9a:	be 09       	sbc	r27, r14
      9c:	ad 0a       	sbc	r10, r29
      9e:	be 09       	sbc	r27, r14
      a0:	ad 0a       	sbc	r10, r29
      a2:	03 0a       	sbc	r0, r19
      a4:	26 0a       	sbc	r2, r22
      a6:	ad 0a       	sbc	r10, r29
      a8:	79 0a       	sbc	r7, r25
      aa:	8b 0a       	sbc	r8, r27

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      bc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      cc:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     10a:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

0000011a <DeviceDescriptor>:
     11a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     12a:	dc 01                                               ..

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e2       	ldi	r29, 0x20	; 32
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e8 ed       	ldi	r30, 0xD8	; 216
     140:	f8 e1       	ldi	r31, 0x18	; 24
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	ae 36       	cpi	r26, 0x6E	; 110
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	ae e6       	ldi	r26, 0x6E	; 110
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ab 37       	cpi	r26, 0x7B	; 123
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	3a d0       	rcall	.+116    	; 0x1d8 <main>
     164:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     16a:	9b b1       	in	r25, 0x0b	; 11
     16c:	9f 70       	andi	r25, 0x0F	; 15
     16e:	89 2b       	or	r24, r25
     170:	8b b9       	out	0x0b, r24	; 11
     172:	08 95       	ret

00000174 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     174:	84 b7       	in	r24, 0x34	; 52
     176:	87 7f       	andi	r24, 0xF7	; 247
     178:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	a8 95       	wdr
     180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     184:	88 61       	ori	r24, 0x18	; 24
     186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     19c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1a2:	8a b1       	in	r24, 0x0a	; 10
     1a4:	80 6f       	ori	r24, 0xF0	; 240
     1a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1a8:	8b b1       	in	r24, 0x0b	; 11
     1aa:	8f 70       	andi	r24, 0x0F	; 15
     1ac:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1ae:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1b0:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1b2:	84 b1       	in	r24, 0x04	; 4
     1b4:	86 60       	ori	r24, 0x06	; 6
     1b6:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1b8:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1ba:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1bc:	8d b5       	in	r24, 0x2d	; 45
     1be:	81 60       	ori	r24, 0x01	; 1
     1c0:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1c2:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1c4:	8c e5       	ldi	r24, 0x5C	; 92
     1c6:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1c8:	8d b1       	in	r24, 0x0d	; 13
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1ce:	8e b1       	in	r24, 0x0e	; 14
     1d0:	83 60       	ori	r24, 0x03	; 3
     1d2:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1d4:	91 d5       	rcall	.+2850   	; 0xcf8 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1d6:	ea c2       	rjmp	.+1492   	; 0x7ac <DataflashManager_ResetDataflashProtections>

000001d8 <main>:
     1d8:	cd df       	rcall	.-102    	; 0x174 <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1da:	80 e1       	ldi	r24, 0x10	; 16
     1dc:	c6 df       	rcall	.-116    	; 0x16a <LEDs_SetAllLEDs>
	sei();
     1de:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <MS_Device_USBTask>
		USB_USBTask();
     1e8:	0e 94 c7 0a 	call	0x158e	; 0x158e <USB_USBTask>
     1ec:	f9 cf       	rjmp	.-14     	; 0x1e0 <main+0x8>

000001ee <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1ee:	80 ea       	ldi	r24, 0xA0	; 160
     1f0:	bc cf       	rjmp	.-136    	; 0x16a <LEDs_SetAllLEDs>

000001f2 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	ba cf       	rjmp	.-140    	; 0x16a <LEDs_SetAllLEDs>

000001f6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 16 0b 	call	0x162c	; 0x162c <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1fe:	81 11       	cpse	r24, r1
     200:	02 c0       	rjmp	.+4      	; 0x206 <EVENT_USB_Device_ConfigurationChanged+0x10>
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	01 c0       	rjmp	.+2      	; 0x208 <EVENT_USB_Device_ConfigurationChanged+0x12>
     206:	80 e6       	ldi	r24, 0x60	; 96
     208:	b0 cf       	rjmp	.-160    	; 0x16a <LEDs_SetAllLEDs>

0000020a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <MS_Device_ProcessControlRequest>

00000212 <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     218:	80 e2       	ldi	r24, 0x20	; 32
     21a:	a7 df       	rcall	.-178    	; 0x16a <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     21c:	ce 01       	movw	r24, r28
     21e:	85 d3       	rcall	.+1802   	; 0x92a <SCSI_DecodeSCSICommand>
     220:	c8 2f       	mov	r28, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     222:	80 e6       	ldi	r24, 0x60	; 96
     224:	a2 df       	rcall	.-188    	; 0x16a <LEDs_SetAllLEDs>
     226:	8c 2f       	mov	r24, r28

	return CommandSuccess;
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <CALLBACK_USB_GetDescriptor>:
     22e:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     230:	33 27       	eor	r19, r19
     232:	22 30       	cpi	r18, 0x02	; 2
     234:	31 05       	cpc	r19, r1
     236:	59 f0       	breq	.+22     	; 0x24e <CALLBACK_USB_GetDescriptor+0x20>
     238:	23 30       	cpi	r18, 0x03	; 3
     23a:	31 05       	cpc	r19, r1
     23c:	69 f0       	breq	.+26     	; 0x258 <CALLBACK_USB_GetDescriptor+0x2a>
     23e:	21 30       	cpi	r18, 0x01	; 1
     240:	31 05       	cpc	r19, r1
     242:	e9 f4       	brne	.+58     	; 0x27e <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     244:	82 e1       	ldi	r24, 0x12	; 18
     246:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     248:	2a e1       	ldi	r18, 0x1A	; 26
     24a:	31 e0       	ldi	r19, 0x01	; 1
     24c:	1c c0       	rjmp	.+56     	; 0x286 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     24e:	80 e2       	ldi	r24, 0x20	; 32
     250:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     252:	2a ef       	ldi	r18, 0xFA	; 250
     254:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     256:	17 c0       	rjmp	.+46     	; 0x286 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     258:	99 27       	eor	r25, r25
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	91 05       	cpc	r25, r1
     25e:	49 f0       	breq	.+18     	; 0x272 <CALLBACK_USB_GetDescriptor+0x44>
     260:	28 f0       	brcs	.+10     	; 0x26c <CALLBACK_USB_GetDescriptor+0x3e>
     262:	02 97       	sbiw	r24, 0x02	; 2
     264:	61 f4       	brne	.+24     	; 0x27e <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     266:	ec ea       	ldi	r30, 0xAC	; 172
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	05 c0       	rjmp	.+10     	; 0x276 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     26c:	e6 ef       	ldi	r30, 0xF6	; 246
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	02 c0       	rjmp	.+4      	; 0x276 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     272:	ec ed       	ldi	r30, 0xDC	; 220
     274:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     276:	84 91       	lpm	r24, Z
     278:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     27a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     27c:	04 c0       	rjmp	.+8      	; 0x286 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     286:	fa 01       	movw	r30, r20
     288:	31 83       	std	Z+1, r19	; 0x01
     28a:	20 83       	st	Z, r18
	return Size;
}
     28c:	08 95       	ret

0000028e <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     28e:	8e b1       	in	r24, 0x0e	; 14
     290:	9e b1       	in	r25, 0x0e	; 14
     292:	93 60       	ori	r25, 0x03	; 3
     294:	9e b9       	out	0x0e, r25	; 14
     296:	9e b1       	in	r25, 0x0e	; 14
     298:	9c 7f       	andi	r25, 0xFC	; 252
     29a:	83 70       	andi	r24, 0x03	; 3
     29c:	89 2b       	or	r24, r25
     29e:	8e b9       	out	0x0e, r24	; 14
     2a0:	08 95       	ret

000002a2 <Dataflash_WaitWhileBusy>:
     2a2:	f5 df       	rcall	.-22     	; 0x28e <Dataflash_ToggleSelectedChipCS>
     2a4:	87 ed       	ldi	r24, 0xD7	; 215
     2a6:	8e bd       	out	0x2e, r24	; 46
     2a8:	0d b4       	in	r0, 0x2d	; 45
     2aa:	07 fe       	sbrs	r0, 7
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <Dataflash_WaitWhileBusy+0x6>
     2ae:	1e bc       	out	0x2e, r1	; 46
     2b0:	0d b4       	in	r0, 0x2d	; 45
     2b2:	07 fe       	sbrs	r0, 7
     2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <Dataflash_WaitWhileBusy+0xe>
     2b6:	0e b4       	in	r0, 0x2e	; 46
     2b8:	07 fe       	sbrs	r0, 7
     2ba:	f9 cf       	rjmp	.-14     	; 0x2ae <Dataflash_WaitWhileBusy+0xc>
     2bc:	e8 cf       	rjmp	.-48     	; 0x28e <Dataflash_ToggleSelectedChipCS>

000002be <Dataflash_SendAddressBytes>:
     2be:	9c 01       	movw	r18, r24
     2c0:	36 95       	lsr	r19
     2c2:	27 95       	ror	r18
     2c4:	56 e0       	ldi	r21, 0x06	; 6
     2c6:	96 95       	lsr	r25
     2c8:	87 95       	ror	r24
     2ca:	5a 95       	dec	r21
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <Dataflash_SendAddressBytes+0x8>
     2ce:	8e bd       	out	0x2e, r24	; 46
     2d0:	0d b4       	in	r0, 0x2d	; 45
     2d2:	07 fe       	sbrs	r0, 7
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <Dataflash_SendAddressBytes+0x12>
     2d6:	22 0f       	add	r18, r18
     2d8:	22 0f       	add	r18, r18
     2da:	22 0f       	add	r18, r18
     2dc:	72 2b       	or	r23, r18
     2de:	7e bd       	out	0x2e, r23	; 46
     2e0:	0d b4       	in	r0, 0x2d	; 45
     2e2:	07 fe       	sbrs	r0, 7
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <Dataflash_SendAddressBytes+0x22>
     2e6:	6e bd       	out	0x2e, r22	; 46
     2e8:	0d b4       	in	r0, 0x2d	; 45
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <Dataflash_SendAddressBytes+0x2a>
     2ee:	08 95       	ret

000002f0 <Dataflash_SelectChipFromPage>:
     2f0:	9c 01       	movw	r18, r24
     2f2:	9e b1       	in	r25, 0x0e	; 14
     2f4:	93 60       	ori	r25, 0x03	; 3
     2f6:	9e b9       	out	0x0e, r25	; 14
     2f8:	21 15       	cp	r18, r1
     2fa:	80 e4       	ldi	r24, 0x40	; 64
     2fc:	38 07       	cpc	r19, r24
     2fe:	40 f4       	brcc	.+16     	; 0x310 <Dataflash_SelectChipFromPage+0x20>
     300:	8e b1       	in	r24, 0x0e	; 14
     302:	8c 7f       	andi	r24, 0xFC	; 252
     304:	20 ff       	sbrs	r18, 0
     306:	02 c0       	rjmp	.+4      	; 0x30c <Dataflash_SelectChipFromPage+0x1c>
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	01 c0       	rjmp	.+2      	; 0x30e <Dataflash_SelectChipFromPage+0x1e>
     30c:	82 60       	ori	r24, 0x02	; 2
     30e:	8e b9       	out	0x0e, r24	; 14
     310:	08 95       	ret

00000312 <DataflashManager_WriteBlocks>:
     312:	4f 92       	push	r4
     314:	5f 92       	push	r5
     316:	6f 92       	push	r6
     318:	7f 92       	push	r7
     31a:	8f 92       	push	r8
     31c:	9f 92       	push	r9
     31e:	af 92       	push	r10
     320:	bf 92       	push	r11
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	4c 01       	movw	r8, r24
     334:	89 01       	movw	r16, r18
     336:	2a 01       	movw	r4, r20
     338:	3b 01       	movw	r6, r22
     33a:	39 e0       	ldi	r19, 0x09	; 9
     33c:	44 0c       	add	r4, r4
     33e:	55 1c       	adc	r5, r5
     340:	66 1c       	adc	r6, r6
     342:	77 1c       	adc	r7, r7
     344:	3a 95       	dec	r19
     346:	d1 f7       	brne	.-12     	; 0x33c <DataflashManager_WriteBlocks+0x2a>
     348:	6a e0       	ldi	r22, 0x0A	; 10
     34a:	76 94       	lsr	r7
     34c:	67 94       	ror	r6
     34e:	57 94       	ror	r5
     350:	47 94       	ror	r4
     352:	6a 95       	dec	r22
     354:	d1 f7       	brne	.-12     	; 0x34a <DataflashManager_WriteBlocks+0x38>
     356:	e2 01       	movw	r28, r4
     358:	54 2f       	mov	r21, r20
     35a:	44 27       	eor	r20, r20
     35c:	55 0f       	add	r21, r21
     35e:	7a 01       	movw	r14, r20
     360:	ee 24       	eor	r14, r14
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	f8 22       	and	r15, r24
     366:	c2 01       	movw	r24, r4
     368:	c3 df       	rcall	.-122    	; 0x2f0 <Dataflash_SelectChipFromPage>
     36a:	83 e5       	ldi	r24, 0x53	; 83
     36c:	8e bd       	out	0x2e, r24	; 46
     36e:	0d b4       	in	r0, 0x2d	; 45
     370:	07 fe       	sbrs	r0, 7
     372:	fd cf       	rjmp	.-6      	; 0x36e <DataflashManager_WriteBlocks+0x5c>
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	c2 01       	movw	r24, r4
     37a:	a1 df       	rcall	.-190    	; 0x2be <Dataflash_SendAddressBytes>
     37c:	92 df       	rcall	.-220    	; 0x2a2 <Dataflash_WaitWhileBusy>
     37e:	84 e8       	ldi	r24, 0x84	; 132
     380:	8e bd       	out	0x2e, r24	; 46
     382:	0d b4       	in	r0, 0x2d	; 45
     384:	07 fe       	sbrs	r0, 7
     386:	fd cf       	rjmp	.-6      	; 0x382 <DataflashManager_WriteBlocks+0x70>
     388:	b7 01       	movw	r22, r14
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	97 df       	rcall	.-210    	; 0x2be <Dataflash_SendAddressBytes>
     390:	3b d4       	rcall	.+2166   	; 0xc08 <Endpoint_WaitUntilReady>
     392:	81 11       	cpse	r24, r1
     394:	ea c0       	rjmp	.+468    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     396:	94 e0       	ldi	r25, 0x04	; 4
     398:	f6 94       	lsr	r15
     39a:	e7 94       	ror	r14
     39c:	9a 95       	dec	r25
     39e:	e1 f7       	brne	.-8      	; 0x398 <DataflashManager_WriteBlocks+0x86>
     3a0:	7e 2c       	mov	r7, r14
     3a2:	58 01       	movw	r10, r16
     3a4:	25 e0       	ldi	r18, 0x05	; 5
     3a6:	aa 0c       	add	r10, r10
     3a8:	bb 1c       	adc	r11, r11
     3aa:	2a 95       	dec	r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <DataflashManager_WriteBlocks+0x94>
     3ae:	e1 2c       	mov	r14, r1
     3b0:	f1 2c       	mov	r15, r1
     3b2:	61 2c       	mov	r6, r1
     3b4:	01 15       	cp	r16, r1
     3b6:	11 05       	cpc	r17, r1
     3b8:	09 f4       	brne	.+2      	; 0x3bc <DataflashManager_WriteBlocks+0xaa>
     3ba:	bc c0       	rjmp	.+376    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     3bc:	65 01       	movw	r12, r10
     3be:	ce 0c       	add	r12, r14
     3c0:	df 1c       	adc	r13, r15
     3c2:	80 e2       	ldi	r24, 0x20	; 32
     3c4:	58 2e       	mov	r5, r24
     3c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3ca:	85 ff       	sbrs	r24, 5
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <DataflashManager_WriteBlocks+0xc4>
     3ce:	e0 e4       	ldi	r30, 0x40	; 64
     3d0:	7e 12       	cpse	r7, r30
     3d2:	42 c0       	rjmp	.+132    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <DataflashManager_WriteBlocks+0xd6>
     3d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3da:	8b 77       	andi	r24, 0x7B	; 123
     3dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3e0:	13 d4       	rcall	.+2086   	; 0xc08 <Endpoint_WaitUntilReady>
     3e2:	88 23       	and	r24, r24
     3e4:	a1 f3       	breq	.-24     	; 0x3ce <DataflashManager_WriteBlocks+0xbc>
     3e6:	c1 c0       	rjmp	.+386    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     3e8:	5c df       	rcall	.-328    	; 0x2a2 <Dataflash_WaitWhileBusy>
     3ea:	61 10       	cpse	r6, r1
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DataflashManager_WriteBlocks+0xe0>
     3ee:	83 e8       	ldi	r24, 0x83	; 131
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <DataflashManager_WriteBlocks+0xe2>
     3f2:	86 e8       	ldi	r24, 0x86	; 134
     3f4:	8e bd       	out	0x2e, r24	; 46
     3f6:	0d b4       	in	r0, 0x2d	; 45
     3f8:	07 fe       	sbrs	r0, 7
     3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <DataflashManager_WriteBlocks+0xe4>
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	ce 01       	movw	r24, r28
     402:	5d df       	rcall	.-326    	; 0x2be <Dataflash_SendAddressBytes>
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	8e b1       	in	r24, 0x0e	; 14
     408:	83 70       	andi	r24, 0x03	; 3
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	68 26       	eor	r6, r24
     410:	ce 01       	movw	r24, r28
     412:	6e df       	rcall	.-292    	; 0x2f0 <Dataflash_SelectChipFromPage>
     414:	f0 e4       	ldi	r31, 0x40	; 64
     416:	cf 16       	cp	r12, r31
     418:	d1 04       	cpc	r13, r1
     41a:	78 f4       	brcc	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     41c:	42 df       	rcall	.-380    	; 0x2a2 <Dataflash_WaitWhileBusy>
     41e:	61 10       	cpse	r6, r1
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	83 e5       	ldi	r24, 0x53	; 83
     424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	85 e5       	ldi	r24, 0x55	; 85
     428:	8e bd       	out	0x2e, r24	; 46
     42a:	0d b4       	in	r0, 0x2d	; 45
     42c:	07 fe       	sbrs	r0, 7
     42e:	fd cf       	rjmp	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	ce 01       	movw	r24, r28
     436:	43 df       	rcall	.-378    	; 0x2be <Dataflash_SendAddressBytes>
     438:	34 df       	rcall	.-408    	; 0x2a2 <Dataflash_WaitWhileBusy>
     43a:	61 10       	cpse	r6, r1
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	84 e8       	ldi	r24, 0x84	; 132
     440:	01 c0       	rjmp	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	87 e8       	ldi	r24, 0x87	; 135
     444:	8e bd       	out	0x2e, r24	; 46
     446:	0d b4       	in	r0, 0x2d	; 45
     448:	07 fe       	sbrs	r0, 7
     44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	34 df       	rcall	.-408    	; 0x2be <Dataflash_SendAddressBytes>
     456:	71 2c       	mov	r7, r1
     458:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     45c:	8e bd       	out	0x2e, r24	; 46
     45e:	0d b4       	in	r0, 0x2d	; 45
     460:	07 fe       	sbrs	r0, 7
     462:	fd cf       	rjmp	.-6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     464:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     468:	8e bd       	out	0x2e, r24	; 46
     46a:	0d b4       	in	r0, 0x2d	; 45
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     470:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     474:	8e bd       	out	0x2e, r24	; 46
     476:	0d b4       	in	r0, 0x2d	; 45
     478:	07 fe       	sbrs	r0, 7
     47a:	fd cf       	rjmp	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     480:	8e bd       	out	0x2e, r24	; 46
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     488:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     48c:	8e bd       	out	0x2e, r24	; 46
     48e:	0d b4       	in	r0, 0x2d	; 45
     490:	07 fe       	sbrs	r0, 7
     492:	fd cf       	rjmp	.-6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     494:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     498:	8e bd       	out	0x2e, r24	; 46
     49a:	0d b4       	in	r0, 0x2d	; 45
     49c:	07 fe       	sbrs	r0, 7
     49e:	fd cf       	rjmp	.-6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     4a0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4a4:	8e bd       	out	0x2e, r24	; 46
     4a6:	0d b4       	in	r0, 0x2d	; 45
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4ac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4b0:	8e bd       	out	0x2e, r24	; 46
     4b2:	0d b4       	in	r0, 0x2d	; 45
     4b4:	07 fe       	sbrs	r0, 7
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4bc:	8e bd       	out	0x2e, r24	; 46
     4be:	0d b4       	in	r0, 0x2d	; 45
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4c8:	8e bd       	out	0x2e, r24	; 46
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4d4:	8e bd       	out	0x2e, r24	; 46
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4dc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4e0:	8e bd       	out	0x2e, r24	; 46
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4ec:	8e bd       	out	0x2e, r24	; 46
     4ee:	0d b4       	in	r0, 0x2d	; 45
     4f0:	07 fe       	sbrs	r0, 7
     4f2:	fd cf       	rjmp	.-6      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4f4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4f8:	8e bd       	out	0x2e, r24	; 46
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     500:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     504:	8e bd       	out	0x2e, r24	; 46
     506:	0d b4       	in	r0, 0x2d	; 45
     508:	07 fe       	sbrs	r0, 7
     50a:	fd cf       	rjmp	.-6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     50c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     510:	8e bd       	out	0x2e, r24	; 46
     512:	0d b4       	in	r0, 0x2d	; 45
     514:	07 fe       	sbrs	r0, 7
     516:	fd cf       	rjmp	.-6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     518:	73 94       	inc	r7
     51a:	f4 01       	movw	r30, r8
     51c:	86 a9       	ldd	r24, Z+54	; 0x36
     51e:	81 11       	cpse	r24, r1
     520:	24 c0       	rjmp	.+72     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     522:	5a 94       	dec	r5
     524:	51 10       	cpse	r5, r1
     526:	4f cf       	rjmp	.-354    	; 0x3c6 <DataflashManager_WriteBlocks+0xb4>
     528:	01 50       	subi	r16, 0x01	; 1
     52a:	11 09       	sbc	r17, r1
     52c:	f0 e2       	ldi	r31, 0x20	; 32
     52e:	ef 1a       	sub	r14, r31
     530:	f1 08       	sbc	r15, r1
     532:	40 cf       	rjmp	.-384    	; 0x3b4 <DataflashManager_WriteBlocks+0xa2>
     534:	b6 de       	rcall	.-660    	; 0x2a2 <Dataflash_WaitWhileBusy>
     536:	61 10       	cpse	r6, r1
     538:	02 c0       	rjmp	.+4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53a:	83 e8       	ldi	r24, 0x83	; 131
     53c:	01 c0       	rjmp	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     53e:	86 e8       	ldi	r24, 0x86	; 134
     540:	8e bd       	out	0x2e, r24	; 46
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	ce 01       	movw	r24, r28
     54e:	b7 de       	rcall	.-658    	; 0x2be <Dataflash_SendAddressBytes>
     550:	a8 de       	rcall	.-688    	; 0x2a2 <Dataflash_WaitWhileBusy>
     552:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     556:	85 fd       	sbrc	r24, 5
     558:	05 c0       	rjmp	.+10     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     55a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     55e:	8b 77       	andi	r24, 0x7B	; 123
     560:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     564:	8e b1       	in	r24, 0x0e	; 14
     566:	83 60       	ori	r24, 0x03	; 3
     568:	8e b9       	out	0x0e, r24	; 14
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	7f 90       	pop	r7
     584:	6f 90       	pop	r6
     586:	5f 90       	pop	r5
     588:	4f 90       	pop	r4
     58a:	08 95       	ret

0000058c <DataflashManager_ReadBlocks>:
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	6c 01       	movw	r12, r24
     5a6:	79 01       	movw	r14, r18
     5a8:	4a 01       	movw	r8, r20
     5aa:	5b 01       	movw	r10, r22
     5ac:	29 e0       	ldi	r18, 0x09	; 9
     5ae:	88 0c       	add	r8, r8
     5b0:	99 1c       	adc	r9, r9
     5b2:	aa 1c       	adc	r10, r10
     5b4:	bb 1c       	adc	r11, r11
     5b6:	2a 95       	dec	r18
     5b8:	d1 f7       	brne	.-12     	; 0x5ae <DataflashManager_ReadBlocks+0x22>
     5ba:	3a e0       	ldi	r19, 0x0A	; 10
     5bc:	b6 94       	lsr	r11
     5be:	a7 94       	ror	r10
     5c0:	97 94       	ror	r9
     5c2:	87 94       	ror	r8
     5c4:	3a 95       	dec	r19
     5c6:	d1 f7       	brne	.-12     	; 0x5bc <DataflashManager_ReadBlocks+0x30>
     5c8:	84 01       	movw	r16, r8
     5ca:	ea 01       	movw	r28, r20
     5cc:	dc 2f       	mov	r29, r28
     5ce:	cc 27       	eor	r28, r28
     5d0:	dd 0f       	add	r29, r29
     5d2:	cc 27       	eor	r28, r28
     5d4:	d2 70       	andi	r29, 0x02	; 2
     5d6:	c4 01       	movw	r24, r8
     5d8:	8b de       	rcall	.-746    	; 0x2f0 <Dataflash_SelectChipFromPage>
     5da:	82 ed       	ldi	r24, 0xD2	; 210
     5dc:	8e bd       	out	0x2e, r24	; 46
     5de:	0d b4       	in	r0, 0x2d	; 45
     5e0:	07 fe       	sbrs	r0, 7
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <DataflashManager_ReadBlocks+0x52>
     5e4:	be 01       	movw	r22, r28
     5e6:	c4 01       	movw	r24, r8
     5e8:	6a de       	rcall	.-812    	; 0x2be <Dataflash_SendAddressBytes>
     5ea:	1e bc       	out	0x2e, r1	; 46
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <DataflashManager_ReadBlocks+0x60>
     5f2:	1e bc       	out	0x2e, r1	; 46
     5f4:	0d b4       	in	r0, 0x2d	; 45
     5f6:	07 fe       	sbrs	r0, 7
     5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <DataflashManager_ReadBlocks+0x68>
     5fa:	1e bc       	out	0x2e, r1	; 46
     5fc:	0d b4       	in	r0, 0x2d	; 45
     5fe:	07 fe       	sbrs	r0, 7
     600:	fd cf       	rjmp	.-6      	; 0x5fc <DataflashManager_ReadBlocks+0x70>
     602:	1e bc       	out	0x2e, r1	; 46
     604:	0d b4       	in	r0, 0x2d	; 45
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <DataflashManager_ReadBlocks+0x78>
     60a:	fe d2       	rcall	.+1532   	; 0xc08 <Endpoint_WaitUntilReady>
     60c:	81 11       	cpse	r24, r1
     60e:	c1 c0       	rjmp	.+386    	; 0x792 <DataflashManager_ReadBlocks+0x206>
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	d6 95       	lsr	r29
     614:	c7 95       	ror	r28
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <DataflashManager_ReadBlocks+0x86>
     61a:	92 ed       	ldi	r25, 0xD2	; 210
     61c:	b9 2e       	mov	r11, r25
     61e:	e1 14       	cp	r14, r1
     620:	f1 04       	cpc	r15, r1
     622:	09 f4       	brne	.+2      	; 0x626 <DataflashManager_ReadBlocks+0x9a>
     624:	aa c0       	rjmp	.+340    	; 0x77a <DataflashManager_ReadBlocks+0x1ee>
     626:	d0 e2       	ldi	r29, 0x20	; 32
     628:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     62c:	85 ff       	sbrs	r24, 5
     62e:	08 c0       	rjmp	.+16     	; 0x640 <DataflashManager_ReadBlocks+0xb4>
     630:	c0 34       	cpi	r28, 0x40	; 64
     632:	39 f5       	brne	.+78     	; 0x682 <DataflashManager_ReadBlocks+0xf6>
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	c8 01       	movw	r24, r16
     63a:	5a de       	rcall	.-844    	; 0x2f0 <Dataflash_SelectChipFromPage>
     63c:	be bc       	out	0x2e, r11	; 46
     63e:	09 c0       	rjmp	.+18     	; 0x652 <DataflashManager_ReadBlocks+0xc6>
     640:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     644:	8e 77       	andi	r24, 0x7E	; 126
     646:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     64a:	de d2       	rcall	.+1468   	; 0xc08 <Endpoint_WaitUntilReady>
     64c:	88 23       	and	r24, r24
     64e:	81 f3       	breq	.-32     	; 0x630 <DataflashManager_ReadBlocks+0xa4>
     650:	a0 c0       	rjmp	.+320    	; 0x792 <DataflashManager_ReadBlocks+0x206>
     652:	0d b4       	in	r0, 0x2d	; 45
     654:	07 fe       	sbrs	r0, 7
     656:	fd cf       	rjmp	.-6      	; 0x652 <DataflashManager_ReadBlocks+0xc6>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	c8 01       	movw	r24, r16
     65e:	2f de       	rcall	.-930    	; 0x2be <Dataflash_SendAddressBytes>
     660:	1e bc       	out	0x2e, r1	; 46
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <DataflashManager_ReadBlocks+0xd6>
     668:	1e bc       	out	0x2e, r1	; 46
     66a:	0d b4       	in	r0, 0x2d	; 45
     66c:	07 fe       	sbrs	r0, 7
     66e:	fd cf       	rjmp	.-6      	; 0x66a <DataflashManager_ReadBlocks+0xde>
     670:	1e bc       	out	0x2e, r1	; 46
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <DataflashManager_ReadBlocks+0xe6>
     678:	1e bc       	out	0x2e, r1	; 46
     67a:	0d b4       	in	r0, 0x2d	; 45
     67c:	07 fe       	sbrs	r0, 7
     67e:	fd cf       	rjmp	.-6      	; 0x67a <DataflashManager_ReadBlocks+0xee>
     680:	c0 e0       	ldi	r28, 0x00	; 0
     682:	1e bc       	out	0x2e, r1	; 46
     684:	0d b4       	in	r0, 0x2d	; 45
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <DataflashManager_ReadBlocks+0xf8>
     68a:	8e b5       	in	r24, 0x2e	; 46
     68c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     690:	1e bc       	out	0x2e, r1	; 46
     692:	0d b4       	in	r0, 0x2d	; 45
     694:	07 fe       	sbrs	r0, 7
     696:	fd cf       	rjmp	.-6      	; 0x692 <DataflashManager_ReadBlocks+0x106>
     698:	8e b5       	in	r24, 0x2e	; 46
     69a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     69e:	1e bc       	out	0x2e, r1	; 46
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <DataflashManager_ReadBlocks+0x114>
     6a6:	8e b5       	in	r24, 0x2e	; 46
     6a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ac:	1e bc       	out	0x2e, r1	; 46
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_ReadBlocks+0x122>
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ba:	1e bc       	out	0x2e, r1	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_ReadBlocks+0x130>
     6c2:	8e b5       	in	r24, 0x2e	; 46
     6c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6c8:	1e bc       	out	0x2e, r1	; 46
     6ca:	0d b4       	in	r0, 0x2d	; 45
     6cc:	07 fe       	sbrs	r0, 7
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <DataflashManager_ReadBlocks+0x13e>
     6d0:	8e b5       	in	r24, 0x2e	; 46
     6d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6d6:	1e bc       	out	0x2e, r1	; 46
     6d8:	0d b4       	in	r0, 0x2d	; 45
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <DataflashManager_ReadBlocks+0x14c>
     6de:	8e b5       	in	r24, 0x2e	; 46
     6e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6e4:	1e bc       	out	0x2e, r1	; 46
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <DataflashManager_ReadBlocks+0x15a>
     6ec:	8e b5       	in	r24, 0x2e	; 46
     6ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6f2:	1e bc       	out	0x2e, r1	; 46
     6f4:	0d b4       	in	r0, 0x2d	; 45
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <DataflashManager_ReadBlocks+0x168>
     6fa:	8e b5       	in	r24, 0x2e	; 46
     6fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     700:	1e bc       	out	0x2e, r1	; 46
     702:	0d b4       	in	r0, 0x2d	; 45
     704:	07 fe       	sbrs	r0, 7
     706:	fd cf       	rjmp	.-6      	; 0x702 <DataflashManager_ReadBlocks+0x176>
     708:	8e b5       	in	r24, 0x2e	; 46
     70a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     70e:	1e bc       	out	0x2e, r1	; 46
     710:	0d b4       	in	r0, 0x2d	; 45
     712:	07 fe       	sbrs	r0, 7
     714:	fd cf       	rjmp	.-6      	; 0x710 <DataflashManager_ReadBlocks+0x184>
     716:	8e b5       	in	r24, 0x2e	; 46
     718:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     71c:	1e bc       	out	0x2e, r1	; 46
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <DataflashManager_ReadBlocks+0x192>
     724:	8e b5       	in	r24, 0x2e	; 46
     726:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     72a:	1e bc       	out	0x2e, r1	; 46
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
     730:	fd cf       	rjmp	.-6      	; 0x72c <DataflashManager_ReadBlocks+0x1a0>
     732:	8e b5       	in	r24, 0x2e	; 46
     734:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     738:	1e bc       	out	0x2e, r1	; 46
     73a:	0d b4       	in	r0, 0x2d	; 45
     73c:	07 fe       	sbrs	r0, 7
     73e:	fd cf       	rjmp	.-6      	; 0x73a <DataflashManager_ReadBlocks+0x1ae>
     740:	8e b5       	in	r24, 0x2e	; 46
     742:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     746:	1e bc       	out	0x2e, r1	; 46
     748:	0d b4       	in	r0, 0x2d	; 45
     74a:	07 fe       	sbrs	r0, 7
     74c:	fd cf       	rjmp	.-6      	; 0x748 <DataflashManager_ReadBlocks+0x1bc>
     74e:	8e b5       	in	r24, 0x2e	; 46
     750:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     754:	1e bc       	out	0x2e, r1	; 46
     756:	0d b4       	in	r0, 0x2d	; 45
     758:	07 fe       	sbrs	r0, 7
     75a:	fd cf       	rjmp	.-6      	; 0x756 <DataflashManager_ReadBlocks+0x1ca>
     75c:	8e b5       	in	r24, 0x2e	; 46
     75e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     762:	cf 5f       	subi	r28, 0xFF	; 255
     764:	f6 01       	movw	r30, r12
     766:	86 a9       	ldd	r24, Z+54	; 0x36
     768:	81 11       	cpse	r24, r1
     76a:	13 c0       	rjmp	.+38     	; 0x792 <DataflashManager_ReadBlocks+0x206>
     76c:	d1 50       	subi	r29, 0x01	; 1
     76e:	09 f0       	breq	.+2      	; 0x772 <DataflashManager_ReadBlocks+0x1e6>
     770:	5b cf       	rjmp	.-330    	; 0x628 <DataflashManager_ReadBlocks+0x9c>
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	ef 1a       	sub	r14, r31
     776:	f1 08       	sbc	r15, r1
     778:	52 cf       	rjmp	.-348    	; 0x61e <DataflashManager_ReadBlocks+0x92>
     77a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     77e:	85 fd       	sbrc	r24, 5
     780:	05 c0       	rjmp	.+10     	; 0x78c <DataflashManager_ReadBlocks+0x200>
     782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     786:	8e 77       	andi	r24, 0x7E	; 126
     788:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     78c:	8e b1       	in	r24, 0x0e	; 14
     78e:	83 60       	ori	r24, 0x03	; 3
     790:	8e b9       	out	0x0e, r24	; 14
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	08 95       	ret

000007ac <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     7ac:	8e b1       	in	r24, 0x0e	; 14
     7ae:	8c 7f       	andi	r24, 0xFC	; 252
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b4:	87 ed       	ldi	r24, 0xD7	; 215
     7b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c0:	0d b4       	in	r0, 0x2d	; 45
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7c6:	0e b4       	in	r0, 0x2e	; 46
     7c8:	01 fc       	sbrc	r0, 1
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <DataflashManager_ResetDataflashProtections+0x2e>
     7cc:	8e b1       	in	r24, 0x0e	; 14
     7ce:	8c 7f       	andi	r24, 0xFC	; 252
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d4:	87 ed       	ldi	r24, 0xD7	; 215
     7d6:	8e bd       	out	0x2e, r24	; 46
     7d8:	16 c0       	rjmp	.+44     	; 0x806 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     7da:	59 dd       	rcall	.-1358   	; 0x28e <Dataflash_ToggleSelectedChipCS>
     7dc:	8d e3       	ldi	r24, 0x3D	; 61
     7de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7e0:	0d b4       	in	r0, 0x2d	; 45
     7e2:	07 fe       	sbrs	r0, 7
     7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e6:	8a e2       	ldi	r24, 0x2A	; 42
     7e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ea:	0d b4       	in	r0, 0x2d	; 45
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <DataflashManager_ResetDataflashProtections+0x3e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f0:	8f e7       	ldi	r24, 0x7F	; 127
     7f2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f4:	0d b4       	in	r0, 0x2d	; 45
     7f6:	07 fe       	sbrs	r0, 7
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <DataflashManager_ResetDataflashProtections+0x48>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fa:	8a e9       	ldi	r24, 0x9A	; 154
     7fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_ResetDataflashProtections+0x52>
     804:	e3 cf       	rjmp	.-58     	; 0x7cc <DataflashManager_ResetDataflashProtections+0x20>
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ResetDataflashProtections+0x5a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     80c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_ResetDataflashProtections+0x62>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     814:	0e b4       	in	r0, 0x2e	; 46
     816:	01 fc       	sbrc	r0, 1
     818:	04 c0       	rjmp	.+8      	; 0x822 <DataflashManager_ResetDataflashProtections+0x76>
     81a:	8e b1       	in	r24, 0x0e	; 14
     81c:	83 60       	ori	r24, 0x03	; 3
     81e:	8e b9       	out	0x0e, r24	; 14
	{
		Dataflash_ToggleSelectedChipCS();
     820:	08 95       	ret
     822:	35 dd       	rcall	.-1430   	; 0x28e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     824:	8d e3       	ldi	r24, 0x3D	; 61
     826:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <DataflashManager_ResetDataflashProtections+0x7c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ResetDataflashProtections+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     838:	8f e7       	ldi	r24, 0x7F	; 127
     83a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <DataflashManager_ResetDataflashProtections+0x90>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     842:	8a e9       	ldi	r24, 0x9A	; 154
     844:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     846:	0d b4       	in	r0, 0x2d	; 45
     848:	07 fe       	sbrs	r0, 7
     84a:	fd cf       	rjmp	.-6      	; 0x846 <DataflashManager_ResetDataflashProtections+0x9a>
     84c:	e6 cf       	rjmp	.-52     	; 0x81a <DataflashManager_ResetDataflashProtections+0x6e>

0000084e <DataflashManager_CheckDataflashOperation>:
     84e:	8e b1       	in	r24, 0x0e	; 14
     850:	8c 7f       	andi	r24, 0xFC	; 252
     852:	82 60       	ori	r24, 0x02	; 2
     854:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     856:	8f e9       	ldi	r24, 0x9F	; 159
     858:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     85a:	0d b4       	in	r0, 0x2d	; 45
     85c:	07 fe       	sbrs	r0, 7
     85e:	fd cf       	rjmp	.-6      	; 0x85a <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     860:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     862:	0d b4       	in	r0, 0x2d	; 45
     864:	07 fe       	sbrs	r0, 7
     866:	fd cf       	rjmp	.-6      	; 0x862 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     868:	9e b5       	in	r25, 0x2e	; 46
     86a:	8e b1       	in	r24, 0x0e	; 14
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     870:	9f 31       	cpi	r25, 0x1F	; 31
     872:	a1 f4       	brne	.+40     	; 0x89c <DataflashManager_CheckDataflashOperation+0x4e>
     874:	8e b1       	in	r24, 0x0e	; 14
     876:	8c 7f       	andi	r24, 0xFC	; 252
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     87c:	8f e9       	ldi	r24, 0x9F	; 159
     87e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     880:	0d b4       	in	r0, 0x2d	; 45
     882:	07 fe       	sbrs	r0, 7
     884:	fd cf       	rjmp	.-6      	; 0x880 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     886:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     88e:	9e b5       	in	r25, 0x2e	; 46
     890:	8e b1       	in	r24, 0x0e	; 14
     892:	83 60       	ori	r24, 0x03	; 3
     894:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	9f 31       	cpi	r25, 0x1F	; 31
     89a:	09 f0       	breq	.+2      	; 0x89e <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     89c:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     89e:	08 95       	ret

000008a0 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     8ac:	4e 8d       	ldd	r20, Y+30	; 0x1e
     8ae:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8b0:	6c 8d       	ldd	r22, Y+28	; 0x1c
     8b2:	7b 8d       	ldd	r23, Y+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8b4:	09 a1       	ldd	r16, Y+33	; 0x21
     8b6:	18 a1       	ldd	r17, Y+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8b8:	41 15       	cp	r20, r1
     8ba:	20 e8       	ldi	r18, 0x80	; 128
     8bc:	52 07       	cpc	r21, r18
     8be:	61 05       	cpc	r22, r1
     8c0:	71 05       	cpc	r23, r1
     8c2:	68 f0       	brcs	.+26     	; 0x8de <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8c4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SenseData+0x2>
     8c8:	80 7f       	andi	r24, 0xF0	; 240
     8ca:	85 60       	ori	r24, 0x05	; 5
     8cc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SenseData+0x2>
     8d0:	81 e2       	ldi	r24, 0x21	; 33
     8d2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <SenseData+0xc>
     8d6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	21 c0       	rjmp	.+66     	; 0x920 <SCSI_Command_ReadWrite_10+0x80>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8de:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8e0:	88 23       	and	r24, r24
     8e2:	19 f0       	breq	.+6      	; 0x8ea <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8e4:	ce 01       	movw	r24, r28
     8e6:	52 de       	rcall	.-860    	; 0x58c <DataflashManager_ReadBlocks>
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <SCSI_Command_ReadWrite_10+0x4e>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8ea:	ce 01       	movw	r24, r28
     8ec:	12 dd       	rcall	.-1500   	; 0x312 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8ee:	c8 01       	movw	r24, r16
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	29 e0       	ldi	r18, 0x09	; 9
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	aa 1f       	adc	r26, r26
     8fc:	bb 1f       	adc	r27, r27
     8fe:	2a 95       	dec	r18
     900:	d1 f7       	brne	.-12     	; 0x8f6 <SCSI_Command_ReadWrite_10+0x56>
     902:	4a 89       	ldd	r20, Y+18	; 0x12
     904:	5b 89       	ldd	r21, Y+19	; 0x13
     906:	6c 89       	ldd	r22, Y+20	; 0x14
     908:	7d 89       	ldd	r23, Y+21	; 0x15
     90a:	8a 01       	movw	r16, r20
     90c:	9b 01       	movw	r18, r22
     90e:	08 1b       	sub	r16, r24
     910:	19 0b       	sbc	r17, r25
     912:	2a 0b       	sbc	r18, r26
     914:	3b 0b       	sbc	r19, r27
     916:	0a 8b       	std	Y+18, r16	; 0x12
     918:	1b 8b       	std	Y+19, r17	; 0x13
     91a:	2c 8b       	std	Y+20, r18	; 0x14
     91c:	3d 8b       	std	Y+21, r19	; 0x15

	return true;
     91e:	81 e0       	ldi	r24, 0x01	; 1
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	28 97       	sbiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     94c:	fc 01       	movw	r30, r24
     94e:	81 8d       	ldd	r24, Z+25	; 0x19
     950:	8d 31       	cpi	r24, 0x1D	; 29
     952:	09 f4       	brne	.+2      	; 0x956 <SCSI_DecodeSCSICommand+0x2c>
     954:	bc c0       	rjmp	.+376    	; 0xace <SCSI_DecodeSCSICommand+0x1a4>
     956:	20 f5       	brcc	.+72     	; 0x9a0 <SCSI_DecodeSCSICommand+0x76>
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	09 f4       	brne	.+2      	; 0x95e <SCSI_DecodeSCSICommand+0x34>
     95c:	92 c0       	rjmp	.+292    	; 0xa82 <SCSI_DecodeSCSICommand+0x158>
     95e:	20 f4       	brcc	.+8      	; 0x968 <SCSI_DecodeSCSICommand+0x3e>
     960:	88 23       	and	r24, r24
     962:	09 f4       	brne	.+2      	; 0x966 <SCSI_DecodeSCSICommand+0x3c>
     964:	d3 c0       	rjmp	.+422    	; 0xb0c <SCSI_DecodeSCSICommand+0x1e2>
     966:	d8 c0       	rjmp	.+432    	; 0xb18 <SCSI_DecodeSCSICommand+0x1ee>
     968:	82 31       	cpi	r24, 0x12	; 18
     96a:	09 f4       	brne	.+2      	; 0x96e <SCSI_DecodeSCSICommand+0x44>
     96c:	56 c0       	rjmp	.+172    	; 0xa1a <SCSI_DecodeSCSICommand+0xf0>
     96e:	8a 31       	cpi	r24, 0x1A	; 26
     970:	09 f0       	breq	.+2      	; 0x974 <SCSI_DecodeSCSICommand+0x4a>
     972:	d2 c0       	rjmp	.+420    	; 0xb18 <SCSI_DecodeSCSICommand+0x1ee>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     974:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     978:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     97c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     980:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     984:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     988:	8e 77       	andi	r24, 0x7E	; 126
     98a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     98e:	f8 01       	movw	r30, r16
     990:	82 89       	ldd	r24, Z+18	; 0x12
     992:	93 89       	ldd	r25, Z+19	; 0x13
     994:	a4 89       	ldd	r26, Z+20	; 0x14
     996:	b5 89       	ldd	r27, Z+21	; 0x15
     998:	04 97       	sbiw	r24, 0x04	; 4
     99a:	a1 09       	sbc	r26, r1
     99c:	b1 09       	sbc	r27, r1
     99e:	b1 c0       	rjmp	.+354    	; 0xb02 <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     9a0:	88 32       	cpi	r24, 0x28	; 40
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <SCSI_DecodeSCSICommand+0x7c>
     9a4:	a8 c0       	rjmp	.+336    	; 0xaf6 <SCSI_DecodeSCSICommand+0x1cc>
     9a6:	90 f5       	brcc	.+100    	; 0xa0c <SCSI_DecodeSCSICommand+0xe2>
     9a8:	8e 31       	cpi	r24, 0x1E	; 30
     9aa:	09 f4       	brne	.+2      	; 0x9ae <SCSI_DecodeSCSICommand+0x84>
     9ac:	af c0       	rjmp	.+350    	; 0xb0c <SCSI_DecodeSCSICommand+0x1e2>
     9ae:	85 32       	cpi	r24, 0x25	; 37
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <SCSI_DecodeSCSICommand+0x8a>
     9b2:	b2 c0       	rjmp	.+356    	; 0xb18 <SCSI_DecodeSCSICommand+0x1ee>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	9f e7       	ldi	r25, 0x7F	; 127
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	8d 83       	std	Y+5, r24	; 0x05
     9be:	9e 83       	std	Y+6, r25	; 0x06
     9c0:	af 83       	std	Y+7, r26	; 0x07
     9c2:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	64 e0       	ldi	r22, 0x04	; 4
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	ce 01       	movw	r24, r28
     9de:	05 96       	adiw	r24, 0x05	; 5
     9e0:	3a d3       	rcall	.+1652   	; 0x1056 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	ce 01       	movw	r24, r28
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	33 d3       	rcall	.+1638   	; 0x1056 <Endpoint_Write_Stream_BE>
     9f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f4:	8e 77       	andi	r24, 0x7E	; 126
     9f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     9fa:	f8 01       	movw	r30, r16
     9fc:	82 89       	ldd	r24, Z+18	; 0x12
     9fe:	93 89       	ldd	r25, Z+19	; 0x13
     a00:	a4 89       	ldd	r26, Z+20	; 0x14
     a02:	b5 89       	ldd	r27, Z+21	; 0x15
     a04:	08 97       	sbiw	r24, 0x08	; 8
     a06:	a1 09       	sbc	r26, r1
     a08:	b1 09       	sbc	r27, r1
     a0a:	7b c0       	rjmp	.+246    	; 0xb02 <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a0c:	8a 32       	cpi	r24, 0x2A	; 42
     a0e:	09 f4       	brne	.+2      	; 0xa12 <SCSI_DecodeSCSICommand+0xe8>
     a10:	70 c0       	rjmp	.+224    	; 0xaf2 <SCSI_DecodeSCSICommand+0x1c8>
     a12:	8f 32       	cpi	r24, 0x2F	; 47
     a14:	09 f4       	brne	.+2      	; 0xa18 <SCSI_DecodeSCSICommand+0xee>
     a16:	7a c0       	rjmp	.+244    	; 0xb0c <SCSI_DecodeSCSICommand+0x1e2>
     a18:	7f c0       	rjmp	.+254    	; 0xb18 <SCSI_DecodeSCSICommand+0x1ee>
     a1a:	f8 01       	movw	r30, r16
     a1c:	e5 8c       	ldd	r14, Z+29	; 0x1d
     a1e:	f4 8c       	ldd	r15, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     a20:	82 8d       	ldd	r24, Z+26	; 0x1a
     a22:	83 70       	andi	r24, 0x03	; 3
     a24:	19 f4       	brne	.+6      	; 0xa2c <SCSI_DecodeSCSICommand+0x102>
     a26:	83 8d       	ldd	r24, Z+27	; 0x1b
     a28:	88 23       	and	r24, r24
     a2a:	41 f0       	breq	.+16     	; 0xa3c <SCSI_DecodeSCSICommand+0x112>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a2c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SenseData+0x2>
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	85 60       	ori	r24, 0x05	; 5
     a34:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SenseData+0x2>
     a38:	84 e2       	ldi	r24, 0x24	; 36
     a3a:	75 c0       	rjmp	.+234    	; 0xb26 <SCSI_DecodeSCSICommand+0x1fc>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     a3c:	67 01       	movw	r12, r14
     a3e:	f5 e2       	ldi	r31, 0x25	; 37
     a40:	ef 16       	cp	r14, r31
     a42:	f1 04       	cpc	r15, r1
     a44:	18 f0       	brcs	.+6      	; 0xa4c <SCSI_DecodeSCSICommand+0x122>
     a46:	94 e2       	ldi	r25, 0x24	; 36
     a48:	c9 2e       	mov	r12, r25
     a4a:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	b6 01       	movw	r22, r12
     a52:	89 e4       	ldi	r24, 0x49	; 73
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	b6 d2       	rcall	.+1388   	; 0xfc4 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	c7 01       	movw	r24, r14
     a5e:	8c 19       	sub	r24, r12
     a60:	9d 09       	sbc	r25, r13
     a62:	71 d2       	rcall	.+1250   	; 0xf46 <Endpoint_Null_Stream>
     a64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a68:	8e 77       	andi	r24, 0x7E	; 126
     a6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a6e:	f8 01       	movw	r30, r16
     a70:	82 89       	ldd	r24, Z+18	; 0x12
     a72:	93 89       	ldd	r25, Z+19	; 0x13
     a74:	a4 89       	ldd	r26, Z+20	; 0x14
     a76:	b5 89       	ldd	r27, Z+21	; 0x15
     a78:	8c 19       	sub	r24, r12
     a7a:	9d 09       	sbc	r25, r13
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	40 c0       	rjmp	.+128    	; 0xb02 <SCSI_DecodeSCSICommand+0x1d8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     a82:	f8 01       	movw	r30, r16
     a84:	f5 8c       	ldd	r15, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     a86:	ef 2c       	mov	r14, r15
     a88:	f2 e1       	ldi	r31, 0x12	; 18
     a8a:	ff 15       	cp	r31, r15
     a8c:	10 f4       	brcc	.+4      	; 0xa92 <SCSI_DecodeSCSICommand+0x168>
     a8e:	82 e1       	ldi	r24, 0x12	; 18
     a90:	e8 2e       	mov	r14, r24

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a92:	ce 2c       	mov	r12, r14
     a94:	d1 2c       	mov	r13, r1
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	b6 01       	movw	r22, r12
     a9c:	87 e3       	ldi	r24, 0x37	; 55
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	91 d2       	rcall	.+1314   	; 0xfc4 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     aa2:	8f 2d       	mov	r24, r15
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	8c 19       	sub	r24, r12
     aac:	9d 09       	sbc	r25, r13
     aae:	4b d2       	rcall	.+1174   	; 0xf46 <Endpoint_Null_Stream>
     ab0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ab4:	8e 77       	andi	r24, 0x7E	; 126
     ab6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     aba:	f8 01       	movw	r30, r16
     abc:	82 89       	ldd	r24, Z+18	; 0x12
     abe:	93 89       	ldd	r25, Z+19	; 0x13
     ac0:	a4 89       	ldd	r26, Z+20	; 0x14
     ac2:	b5 89       	ldd	r27, Z+21	; 0x15
     ac4:	8e 19       	sub	r24, r14
     ac6:	91 09       	sbc	r25, r1
     ac8:	a1 09       	sbc	r26, r1
     aca:	b1 09       	sbc	r27, r1
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     acc:	1a c0       	rjmp	.+52     	; 0xb02 <SCSI_DecodeSCSICommand+0x1d8>
     ace:	f8 01       	movw	r30, r16
     ad0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ad2:	82 ff       	sbrs	r24, 2

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     ad4:	ab cf       	rjmp	.-170    	; 0xa2c <SCSI_DecodeSCSICommand+0x102>
     ad6:	bb de       	rcall	.-650    	; 0x84e <DataflashManager_CheckDataflashOperation>
     ad8:	81 11       	cpse	r24, r1
     ada:	18 c0       	rjmp	.+48     	; 0xb0c <SCSI_DecodeSCSICommand+0x1e2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     adc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SenseData+0x2>
     ae0:	80 7f       	andi	r24, 0xF0	; 240
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SenseData+0x2>
     ae8:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <SenseData+0xc>
     aec:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SenseData+0xd>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     af0:	28 c0       	rjmp	.+80     	; 0xb42 <SCSI_DecodeSCSICommand+0x218>
     af2:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <SCSI_DecodeSCSICommand+0x1ce>
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	c8 01       	movw	r24, r16
     afa:	d2 de       	rcall	.-604    	; 0x8a0 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     afc:	81 11       	cpse	r24, r1
     afe:	16 c0       	rjmp	.+44     	; 0xb2c <SCSI_DecodeSCSICommand+0x202>
     b00:	20 c0       	rjmp	.+64     	; 0xb42 <SCSI_DecodeSCSICommand+0x218>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     b02:	82 8b       	std	Z+18, r24	; 0x12
     b04:	93 8b       	std	Z+19, r25	; 0x13
     b06:	a4 8b       	std	Z+20, r26	; 0x14
     b08:	b5 8b       	std	Z+21, r27	; 0x15
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     b0a:	10 c0       	rjmp	.+32     	; 0xb2c <SCSI_DecodeSCSICommand+0x202>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b0c:	f8 01       	movw	r30, r16
     b0e:	12 8a       	std	Z+18, r1	; 0x12
     b10:	13 8a       	std	Z+19, r1	; 0x13
     b12:	14 8a       	std	Z+20, r1	; 0x14
     b14:	15 8a       	std	Z+21, r1	; 0x15
			break;
     b16:	0a c0       	rjmp	.+20     	; 0xb2c <SCSI_DecodeSCSICommand+0x202>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b18:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SenseData+0x2>
     b1c:	80 7f       	andi	r24, 0xF0	; 240
     b1e:	85 60       	ori	r24, 0x05	; 5
     b20:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SenseData+0x2>
     b24:	80 e2       	ldi	r24, 0x20	; 32
     b26:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <SenseData+0xc>
     b2a:	e0 cf       	rjmp	.-64     	; 0xaec <SCSI_DecodeSCSICommand+0x1c2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b2c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SenseData+0x2>
     b30:	80 7f       	andi	r24, 0xF0	; 240
     b32:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SenseData+0x2>
     b36:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <SenseData+0xc>
     b3a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <SCSI_DecodeSCSICommand+0x21a>
	}

	return false;
     b42:	80 e0       	ldi	r24, 0x00	; 0
}
     b44:	28 96       	adiw	r28, 0x08	; 8
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	08 95       	ret

00000b62 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     b62:	98 2f       	mov	r25, r24
     b64:	97 30       	cpi	r25, 0x07	; 7
     b66:	68 f5       	brcc	.+90     	; 0xbc2 <Endpoint_ConfigureEndpoint_Prv+0x60>
     b68:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b6c:	98 17       	cp	r25, r24
     b6e:	39 f0       	breq	.+14     	; 0xb7e <Endpoint_ConfigureEndpoint_Prv+0x1c>
     b70:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     b74:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     b78:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <Endpoint_ConfigureEndpoint_Prv+0x22>
     b7e:	24 2f       	mov	r18, r20
     b80:	76 2f       	mov	r23, r22
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	21 fd       	sbrc	r18, 1
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <Endpoint_ConfigureEndpoint_Prv+0x2a>
     b88:	9f 5f       	subi	r25, 0xFF	; 255
     b8a:	ec cf       	rjmp	.-40     	; 0xb64 <Endpoint_ConfigureEndpoint_Prv+0x2>
     b8c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b90:	3e 7f       	andi	r19, 0xFE	; 254
     b92:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     b96:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     b9a:	3d 7f       	andi	r19, 0xFD	; 253
     b9c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     ba0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ba4:	31 60       	ori	r19, 0x01	; 1
     ba6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     baa:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     bae:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     bb2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     bb6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     bba:	27 fd       	sbrc	r18, 7
     bbc:	e5 cf       	rjmp	.-54     	; 0xb88 <Endpoint_ConfigureEndpoint_Prv+0x26>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	08 95       	ret
     bc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	08 95       	ret

00000bca <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     bca:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <USB_ControlRequest>
     bce:	87 ff       	sbrs	r24, 7
     bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     bd6:	82 fd       	sbrc	r24, 2
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bda:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>
     bde:	81 11       	cpse	r24, r1
     be0:	f8 cf       	rjmp	.-16     	; 0xbd2 <Endpoint_ClearStatusStage+0x8>
     be2:	11 c0       	rjmp	.+34     	; 0xc06 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     be8:	8b 77       	andi	r24, 0x7B	; 123
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bec:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>
     bf0:	88 23       	and	r24, r24
     bf2:	49 f0       	breq	.+18     	; 0xc06 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     bf8:	80 ff       	sbrs	r24, 0
     bfa:	f8 cf       	rjmp	.-16     	; 0xbec <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c00:	8e 77       	andi	r24, 0x7E	; 126
     c02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c06:	08 95       	ret

00000c08 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c08:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c0c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     c10:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c12:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c16:	84 2f       	mov	r24, r20
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	40 ff       	sbrs	r20, 0
     c1c:	23 c0       	rjmp	.+70     	; 0xc64 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c22:	80 fd       	sbrc	r24, 0
     c24:	1d c0       	rjmp	.+58     	; 0xc60 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c26:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c2a:	88 23       	and	r24, r24
     c2c:	99 f0       	breq	.+38     	; 0xc54 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	99 f0       	breq	.+38     	; 0xc58 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c32:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c36:	85 fd       	sbrc	r24, 5
     c38:	11 c0       	rjmp	.+34     	; 0xc5c <Endpoint_WaitUntilReady+0x54>
     c3a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c3e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c42:	24 17       	cp	r18, r20
     c44:	35 07       	cpc	r19, r21
     c46:	29 f3       	breq	.-54     	; 0xc12 <Endpoint_WaitUntilReady+0xa>
     c48:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c4a:	11 f0       	breq	.+4      	; 0xc50 <Endpoint_WaitUntilReady+0x48>
     c4c:	9a 01       	movw	r18, r20
     c4e:	e1 cf       	rjmp	.-62     	; 0xc12 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c64:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c68:	42 ff       	sbrs	r20, 2
     c6a:	dd cf       	rjmp	.-70     	; 0xc26 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c6c:	08 95       	ret

00000c6e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c76:	49 d0       	rcall	.+146    	; 0xd0a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c78:	50 d0       	rcall	.+160    	; 0xd1a <USB_INT_ClearAllInterrupts>
     c7a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	88 81       	ld	r24, Y
     c80:	8f 77       	andi	r24, 0x7F	; 127
     c82:	88 83       	st	Y, r24
     c84:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     c86:	80 68       	ori	r24, 0x80	; 128
     c88:	88 83       	st	Y, r24
     c8a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c8c:	8f 7d       	andi	r24, 0xDF	; 223
     c8e:	88 83       	st	Y, r24
     c90:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	80 83       	st	Z, r24
     c9a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c9c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     ca0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
	USB_Device_ConfigurationNumber  = 0;
     ca4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     ca8:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     cac:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     cae:	10 e0       	ldi	r17, 0x00	; 0
     cb0:	f8 01       	movw	r30, r16
     cb2:	80 81       	ld	r24, Z
     cb4:	8b 7f       	andi	r24, 0xFB	; 251
     cb6:	80 83       	st	Z, r24
     cb8:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	88 83       	st	Y, r24
     cbe:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	4e df       	rcall	.-356    	; 0xb62 <Endpoint_ConfigureEndpoint_Prv>
     cc6:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8e 7f       	andi	r24, 0xFE	; 254
     cce:	80 83       	st	Z, r24
     cd0:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	80 83       	st	Z, r24
     cda:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     cdc:	88 60       	ori	r24, 0x08	; 8
     cde:	80 83       	st	Z, r24
     ce0:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ce2:	80 81       	ld	r24, Z
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	80 83       	st	Z, r24
     ce8:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	88 83       	st	Y, r24
     cee:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	08 95       	ret

00000cf8 <USB_Init>:
     cf8:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <USB_IsInitialized>

	USB_ResetInterface();
     d08:	b2 cf       	rjmp	.-156    	; 0xc6e <USB_ResetInterface>

00000d0a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d0a:	e8 ed       	ldi	r30, 0xD8	; 216
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8c 7f       	andi	r24, 0xFC	; 252
     d12:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d14:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d18:	08 95       	ret

00000d1a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d1a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d1e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d22:	08 95       	ret

00000d24 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0b b6       	in	r0, 0x3b	; 59
     d30:	0f 92       	push	r0
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d4a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d4e:	82 ff       	sbrs	r24, 2
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d52:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d56:	82 ff       	sbrs	r24, 2
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d64:	13 d4       	rcall	.+2086   	; 0x158c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     d66:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     d6a:	80 ff       	sbrs	r24, 0
     d6c:	1d c0       	rjmp	.+58     	; 0xda8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     d6e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d72:	80 ff       	sbrs	r24, 0
     d74:	19 c0       	rjmp	.+50     	; 0xda8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     d76:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     d80:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     d84:	80 ff       	sbrs	r24, 0
     d86:	0c c0       	rjmp	.+24     	; 0xda0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d88:	8c e0       	ldi	r24, 0x0C	; 12
     d8a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d8c:	8e e0       	ldi	r24, 0x0E	; 14
     d8e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     d90:	09 b4       	in	r0, 0x29	; 41
     d92:	00 fe       	sbrs	r0, 0
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     d9c:	28 da       	rcall	.-2992   	; 0x1ee <EVENT_USB_Device_Connect>
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     da0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     da2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     da6:	25 da       	rcall	.-2998   	; 0x1f2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     da8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     dac:	80 ff       	sbrs	r24, 0
     dae:	18 c0       	rjmp	.+48     	; 0xde0 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     db0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     db4:	80 ff       	sbrs	r24, 0
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     db8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dbc:	8e 7f       	andi	r24, 0xFE	; 254
     dbe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     dc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dc6:	80 61       	ori	r24, 0x10	; 16
     dc8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     dcc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dd0:	80 62       	ori	r24, 0x20	; 32
     dd2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     dd6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     dd8:	85 e0       	ldi	r24, 0x05	; 5
     dda:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     dde:	d6 d3       	rcall	.+1964   	; 0x158c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     de0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     de4:	84 ff       	sbrs	r24, 4
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     de8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dec:	84 ff       	sbrs	r24, 4
     dee:	29 c0       	rjmp	.+82     	; 0xe42 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     df0:	8c e0       	ldi	r24, 0x0C	; 12
     df2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     df4:	8e e0       	ldi	r24, 0x0E	; 14
     df6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     df8:	09 b4       	in	r0, 0x29	; 41
     dfa:	00 fe       	sbrs	r0, 0
     dfc:	fd cf       	rjmp	.-6      	; 0xdf8 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     dfe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     e02:	8f 7d       	andi	r24, 0xDF	; 223
     e04:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e08:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e16:	8f 7e       	andi	r24, 0xEF	; 239
     e18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e26:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     e2a:	81 11       	cpse	r24, r1
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e2e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e32:	87 fd       	sbrc	r24, 7
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <__vector_10+0x116>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <__vector_10+0x118>
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e40:	a5 d3       	rcall	.+1866   	; 0x158c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     e42:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e46:	83 ff       	sbrs	r24, 3
     e48:	27 c0       	rjmp	.+78     	; 0xe98 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     e4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e4e:	83 ff       	sbrs	r24, 3
     e50:	23 c0       	rjmp	.+70     	; 0xe98 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     e52:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e56:	87 7f       	andi	r24, 0xF7	; 247
     e58:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     e62:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e70:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e74:	8e 7f       	andi	r24, 0xFE	; 254
     e76:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e84:	42 e0       	ldi	r20, 0x02	; 2
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e8a:	6b de       	rcall	.-810    	; 0xb62 <Endpoint_ConfigureEndpoint_Prv>
     e8c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e96:	7a d3       	rcall	.+1780   	; 0x158c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	0b b6       	in	r0, 0x3b	; 59
     eca:	0f 92       	push	r0
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     eee:	c9 ee       	ldi	r28, 0xE9	; 233
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	88 81       	ld	r24, Y
     ef4:	87 70       	andi	r24, 0x07	; 7
     ef6:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ef8:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     efa:	00 ef       	ldi	r16, 0xF0	; 240
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	f8 01       	movw	r30, r16
     f00:	80 81       	ld	r24, Z
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     f06:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     f08:	ee d1       	rcall	.+988    	; 0x12e6 <USB_Device_ProcessControlRequest>
     f0a:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f0c:	f8 01       	movw	r30, r16
     f0e:	80 81       	ld	r24, Z
     f10:	88 60       	ori	r24, 0x08	; 8
     f12:	80 83       	st	Z, r24
     f14:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	0f 90       	pop	r0
     f3a:	0b be       	out	0x3b, r0	; 59
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
     f54:	8b 01       	movw	r16, r22
     f56:	58 de       	rcall	.-848    	; 0xc08 <Endpoint_WaitUntilReady>
     f58:	81 11       	cpse	r24, r1
     f5a:	2d c0       	rjmp	.+90     	; 0xfb6 <Endpoint_Null_Stream+0x70>
     f5c:	01 15       	cp	r16, r1
     f5e:	11 05       	cpc	r17, r1
     f60:	29 f0       	breq	.+10     	; 0xf6c <Endpoint_Null_Stream+0x26>
     f62:	f8 01       	movw	r30, r16
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	c8 1b       	sub	r28, r24
     f6a:	d9 0b       	sbc	r29, r25
     f6c:	e1 2c       	mov	r14, r1
     f6e:	f1 2c       	mov	r15, r1
     f70:	20 97       	sbiw	r28, 0x00	; 0
     f72:	01 f1       	breq	.+64     	; 0xfb4 <Endpoint_Null_Stream+0x6e>
     f74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f78:	85 fd       	sbrc	r24, 5
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <Endpoint_Null_Stream+0x60>
     f7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f80:	8e 77       	andi	r24, 0x7E	; 126
     f82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f86:	01 15       	cp	r16, r1
     f88:	11 05       	cpc	r17, r1
     f8a:	49 f0       	breq	.+18     	; 0xf9e <Endpoint_Null_Stream+0x58>
     f8c:	f8 01       	movw	r30, r16
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	e8 0e       	add	r14, r24
     f94:	f9 1e       	adc	r15, r25
     f96:	f1 82       	std	Z+1, r15	; 0x01
     f98:	e0 82       	st	Z, r14
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <Endpoint_Null_Stream+0x70>
     f9e:	34 de       	rcall	.-920    	; 0xc08 <Endpoint_WaitUntilReady>
     fa0:	88 23       	and	r24, r24
     fa2:	31 f3       	breq	.-52     	; 0xf70 <Endpoint_Null_Stream+0x2a>
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <Endpoint_Null_Stream+0x70>
     fa6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     faa:	21 97       	sbiw	r28, 0x01	; 1
     fac:	ff ef       	ldi	r31, 0xFF	; 255
     fae:	ef 1a       	sub	r14, r31
     fb0:	ff 0a       	sbc	r15, r31
     fb2:	de cf       	rjmp	.-68     	; 0xf70 <Endpoint_Null_Stream+0x2a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	08 95       	ret

00000fc4 <Endpoint_Write_Stream_LE>:
     fc4:	cf 92       	push	r12
     fc6:	df 92       	push	r13
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	8b 01       	movw	r16, r22
     fd8:	7a 01       	movw	r14, r20
     fda:	16 de       	rcall	.-980    	; 0xc08 <Endpoint_WaitUntilReady>
     fdc:	81 11       	cpse	r24, r1
     fde:	32 c0       	rjmp	.+100    	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
     fe0:	e1 14       	cp	r14, r1
     fe2:	f1 04       	cpc	r15, r1
     fe4:	39 f0       	breq	.+14     	; 0xff4 <Endpoint_Write_Stream_LE+0x30>
     fe6:	f7 01       	movw	r30, r14
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	08 1b       	sub	r16, r24
     fee:	19 0b       	sbc	r17, r25
     ff0:	c8 0f       	add	r28, r24
     ff2:	d9 1f       	adc	r29, r25
     ff4:	c1 2c       	mov	r12, r1
     ff6:	d1 2c       	mov	r13, r1
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	11 f1       	breq	.+68     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
     ffe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1002:	85 fd       	sbrc	r24, 5
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1006:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    100a:	8e 77       	andi	r24, 0x7E	; 126
    100c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1010:	e1 14       	cp	r14, r1
    1012:	f1 04       	cpc	r15, r1
    1014:	49 f0       	breq	.+18     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1016:	f7 01       	movw	r30, r14
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	c8 0e       	add	r12, r24
    101e:	d9 1e       	adc	r13, r25
    1020:	d1 82       	std	Z+1, r13	; 0x01
    1022:	c0 82       	st	Z, r12
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1028:	ef dd       	rcall	.-1058   	; 0xc08 <Endpoint_WaitUntilReady>
    102a:	88 23       	and	r24, r24
    102c:	29 f3       	breq	.-54     	; 0xff8 <Endpoint_Write_Stream_LE+0x34>
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1030:	89 91       	ld	r24, Y+
    1032:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1036:	01 50       	subi	r16, 0x01	; 1
    1038:	11 09       	sbc	r17, r1
    103a:	ff ef       	ldi	r31, 0xFF	; 255
    103c:	cf 1a       	sub	r12, r31
    103e:	df 0a       	sbc	r13, r31
    1040:	db cf       	rjmp	.-74     	; 0xff8 <Endpoint_Write_Stream_LE+0x34>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	08 95       	ret

00001056 <Endpoint_Write_Stream_BE>:
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	ec 01       	movw	r28, r24
    1068:	8b 01       	movw	r16, r22
    106a:	7a 01       	movw	r14, r20
    106c:	cd dd       	rcall	.-1126   	; 0xc08 <Endpoint_WaitUntilReady>
    106e:	81 11       	cpse	r24, r1
    1070:	37 c0       	rjmp	.+110    	; 0x10e0 <Endpoint_Write_Stream_BE+0x8a>
    1072:	c8 01       	movw	r24, r16
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	c8 0f       	add	r28, r24
    1078:	d9 1f       	adc	r29, r25
    107a:	e1 14       	cp	r14, r1
    107c:	f1 04       	cpc	r15, r1
    107e:	39 f0       	breq	.+14     	; 0x108e <Endpoint_Write_Stream_BE+0x38>
    1080:	f7 01       	movw	r30, r14
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	08 1b       	sub	r16, r24
    1088:	19 0b       	sbc	r17, r25
    108a:	c8 1b       	sub	r28, r24
    108c:	d9 0b       	sbc	r29, r25
    108e:	c1 2c       	mov	r12, r1
    1090:	d1 2c       	mov	r13, r1
    1092:	01 15       	cp	r16, r1
    1094:	11 05       	cpc	r17, r1
    1096:	19 f1       	breq	.+70     	; 0x10de <Endpoint_Write_Stream_BE+0x88>
    1098:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    109c:	85 fd       	sbrc	r24, 5
    109e:	15 c0       	rjmp	.+42     	; 0x10ca <Endpoint_Write_Stream_BE+0x74>
    10a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10a4:	8e 77       	andi	r24, 0x7E	; 126
    10a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10aa:	e1 14       	cp	r14, r1
    10ac:	f1 04       	cpc	r15, r1
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <Endpoint_Write_Stream_BE+0x6c>
    10b0:	f7 01       	movw	r30, r14
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	c8 0e       	add	r12, r24
    10b8:	d9 1e       	adc	r13, r25
    10ba:	d1 82       	std	Z+1, r13	; 0x01
    10bc:	c0 82       	st	Z, r12
    10be:	85 e0       	ldi	r24, 0x05	; 5
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <Endpoint_Write_Stream_BE+0x8a>
    10c2:	a2 dd       	rcall	.-1212   	; 0xc08 <Endpoint_WaitUntilReady>
    10c4:	88 23       	and	r24, r24
    10c6:	29 f3       	breq	.-54     	; 0x1092 <Endpoint_Write_Stream_BE+0x3c>
    10c8:	0b c0       	rjmp	.+22     	; 0x10e0 <Endpoint_Write_Stream_BE+0x8a>
    10ca:	88 81       	ld	r24, Y
    10cc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10d0:	21 97       	sbiw	r28, 0x01	; 1
    10d2:	01 50       	subi	r16, 0x01	; 1
    10d4:	11 09       	sbc	r17, r1
    10d6:	ff ef       	ldi	r31, 0xFF	; 255
    10d8:	cf 1a       	sub	r12, r31
    10da:	df 0a       	sbc	r13, r31
    10dc:	da cf       	rjmp	.-76     	; 0x1092 <Endpoint_Write_Stream_BE+0x3c>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <Endpoint_Read_Stream_LE>:
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ec 01       	movw	r28, r24
    1104:	8b 01       	movw	r16, r22
    1106:	7a 01       	movw	r14, r20
    1108:	7f dd       	rcall	.-1282   	; 0xc08 <Endpoint_WaitUntilReady>
    110a:	81 11       	cpse	r24, r1
    110c:	32 c0       	rjmp	.+100    	; 0x1172 <Endpoint_Read_Stream_LE+0x80>
    110e:	e1 14       	cp	r14, r1
    1110:	f1 04       	cpc	r15, r1
    1112:	39 f0       	breq	.+14     	; 0x1122 <Endpoint_Read_Stream_LE+0x30>
    1114:	f7 01       	movw	r30, r14
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	08 1b       	sub	r16, r24
    111c:	19 0b       	sbc	r17, r25
    111e:	c8 0f       	add	r28, r24
    1120:	d9 1f       	adc	r29, r25
    1122:	c1 2c       	mov	r12, r1
    1124:	d1 2c       	mov	r13, r1
    1126:	01 15       	cp	r16, r1
    1128:	11 05       	cpc	r17, r1
    112a:	11 f1       	breq	.+68     	; 0x1170 <Endpoint_Read_Stream_LE+0x7e>
    112c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1130:	85 fd       	sbrc	r24, 5
    1132:	15 c0       	rjmp	.+42     	; 0x115e <Endpoint_Read_Stream_LE+0x6c>
    1134:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1138:	8b 77       	andi	r24, 0x7B	; 123
    113a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    113e:	e1 14       	cp	r14, r1
    1140:	f1 04       	cpc	r15, r1
    1142:	49 f0       	breq	.+18     	; 0x1156 <Endpoint_Read_Stream_LE+0x64>
    1144:	f7 01       	movw	r30, r14
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	c8 0e       	add	r12, r24
    114c:	d9 1e       	adc	r13, r25
    114e:	d1 82       	std	Z+1, r13	; 0x01
    1150:	c0 82       	st	Z, r12
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <Endpoint_Read_Stream_LE+0x80>
    1156:	58 dd       	rcall	.-1360   	; 0xc08 <Endpoint_WaitUntilReady>
    1158:	88 23       	and	r24, r24
    115a:	29 f3       	breq	.-54     	; 0x1126 <Endpoint_Read_Stream_LE+0x34>
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <Endpoint_Read_Stream_LE+0x80>
    115e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1162:	89 93       	st	Y+, r24
    1164:	01 50       	subi	r16, 0x01	; 1
    1166:	11 09       	sbc	r17, r1
    1168:	ff ef       	ldi	r31, 0xFF	; 255
    116a:	cf 1a       	sub	r12, r31
    116c:	df 0a       	sbc	r13, r31
    116e:	db cf       	rjmp	.-74     	; 0x1126 <Endpoint_Read_Stream_LE+0x34>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	08 95       	ret

00001184 <Endpoint_Write_Control_Stream_LE>:
    1184:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <USB_ControlRequest+0x6>
    1188:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <USB_ControlRequest+0x7>
    118c:	26 17       	cp	r18, r22
    118e:	37 07       	cpc	r19, r23
    1190:	48 f0       	brcs	.+18     	; 0x11a4 <Endpoint_Write_Control_Stream_LE+0x20>
    1192:	61 15       	cp	r22, r1
    1194:	71 05       	cpc	r23, r1
    1196:	39 f4       	brne	.+14     	; 0x11a6 <Endpoint_Write_Control_Stream_LE+0x22>
    1198:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    119c:	2e 77       	andi	r18, 0x7E	; 126
    119e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <Endpoint_Write_Control_Stream_LE+0x22>
    11a4:	b9 01       	movw	r22, r18
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	61 15       	cp	r22, r1
    11ac:	71 05       	cpc	r23, r1
    11ae:	69 f1       	breq	.+90     	; 0x120a <Endpoint_Write_Control_Stream_LE+0x86>
    11b0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>
    11b4:	88 23       	and	r24, r24
    11b6:	d1 f1       	breq	.+116    	; 0x122c <Endpoint_Write_Control_Stream_LE+0xa8>
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	d1 f1       	breq	.+116    	; 0x1230 <Endpoint_Write_Control_Stream_LE+0xac>
    11bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c0:	83 fd       	sbrc	r24, 3
    11c2:	32 c0       	rjmp	.+100    	; 0x1228 <Endpoint_Write_Control_Stream_LE+0xa4>
    11c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c8:	82 fd       	sbrc	r24, 2
    11ca:	28 c0       	rjmp	.+80     	; 0x121c <Endpoint_Write_Control_Stream_LE+0x98>
    11cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11d0:	80 ff       	sbrs	r24, 0
    11d2:	eb cf       	rjmp	.-42     	; 0x11aa <Endpoint_Write_Control_Stream_LE+0x26>
    11d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11d8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11dc:	61 15       	cp	r22, r1
    11de:	71 05       	cpc	r23, r1
    11e0:	51 f0       	breq	.+20     	; 0x11f6 <Endpoint_Write_Control_Stream_LE+0x72>
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	91 05       	cpc	r25, r1
    11e6:	38 f4       	brcc	.+14     	; 0x11f6 <Endpoint_Write_Control_Stream_LE+0x72>
    11e8:	21 91       	ld	r18, Z+
    11ea:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11ee:	61 50       	subi	r22, 0x01	; 1
    11f0:	71 09       	sbc	r23, r1
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	f3 cf       	rjmp	.-26     	; 0x11dc <Endpoint_Write_Control_Stream_LE+0x58>
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	08 97       	sbiw	r24, 0x08	; 8
    11fa:	09 f0       	breq	.+2      	; 0x11fe <Endpoint_Write_Control_Stream_LE+0x7a>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1202:	8e 77       	andi	r24, 0x7E	; 126
    1204:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1208:	d0 cf       	rjmp	.-96     	; 0x11aa <Endpoint_Write_Control_Stream_LE+0x26>
    120a:	21 11       	cpse	r18, r1
    120c:	d1 cf       	rjmp	.-94     	; 0x11b0 <Endpoint_Write_Control_Stream_LE+0x2c>
    120e:	06 c0       	rjmp	.+12     	; 0x121c <Endpoint_Write_Control_Stream_LE+0x98>
    1210:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>
    1214:	88 23       	and	r24, r24
    1216:	51 f0       	breq	.+20     	; 0x122c <Endpoint_Write_Control_Stream_LE+0xa8>
    1218:	85 30       	cpi	r24, 0x05	; 5
    121a:	51 f0       	breq	.+20     	; 0x1230 <Endpoint_Write_Control_Stream_LE+0xac>
    121c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1220:	82 ff       	sbrs	r24, 2
    1222:	f6 cf       	rjmp	.-20     	; 0x1210 <Endpoint_Write_Control_Stream_LE+0x8c>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	08 95       	ret
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	08 95       	ret
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	08 95       	ret

00001234 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1234:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <USB_ControlRequest+0x6>
    1238:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <USB_ControlRequest+0x7>
    123c:	26 17       	cp	r18, r22
    123e:	37 07       	cpc	r19, r23
    1240:	48 f0       	brcs	.+18     	; 0x1254 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1242:	61 15       	cp	r22, r1
    1244:	71 05       	cpc	r23, r1
    1246:	39 f4       	brne	.+14     	; 0x1256 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1248:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    124c:	2e 77       	andi	r18, 0x7E	; 126
    124e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <Endpoint_Write_Control_PStream_LE+0x22>
    1254:	b9 01       	movw	r22, r18
    1256:	fc 01       	movw	r30, r24
    1258:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    125a:	61 15       	cp	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	71 f1       	breq	.+92     	; 0x12bc <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1260:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1264:	88 23       	and	r24, r24
    1266:	d9 f1       	breq	.+118    	; 0x12de <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1268:	85 30       	cpi	r24, 0x05	; 5
    126a:	d9 f1       	breq	.+118    	; 0x12e2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    126c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1270:	83 fd       	sbrc	r24, 3
    1272:	33 c0       	rjmp	.+102    	; 0x12da <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1278:	82 fd       	sbrc	r24, 2
    127a:	29 c0       	rjmp	.+82     	; 0x12ce <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    127c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1280:	80 ff       	sbrs	r24, 0
    1282:	eb cf       	rjmp	.-42     	; 0x125a <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1284:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1288:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    128c:	61 15       	cp	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	59 f0       	breq	.+22     	; 0x12a8 <Endpoint_Write_Control_PStream_LE+0x74>
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	91 05       	cpc	r25, r1
    1296:	40 f4       	brcc	.+16     	; 0x12a8 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1298:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    129a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    129e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    12a0:	61 50       	subi	r22, 0x01	; 1
    12a2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	f2 cf       	rjmp	.-28     	; 0x128c <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	08 97       	sbiw	r24, 0x08	; 8
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <Endpoint_Write_Control_PStream_LE+0x7c>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12b4:	8e 77       	andi	r24, 0x7E	; 126
    12b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ba:	cf cf       	rjmp	.-98     	; 0x125a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    12bc:	21 11       	cpse	r18, r1
    12be:	d0 cf       	rjmp	.-96     	; 0x1260 <Endpoint_Write_Control_PStream_LE+0x2c>
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12c2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12c6:	88 23       	and	r24, r24
    12c8:	51 f0       	breq	.+20     	; 0x12de <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	51 f0       	breq	.+20     	; 0x12e2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    12d2:	82 ff       	sbrs	r24, 2
    12d4:	f6 cf       	rjmp	.-20     	; 0x12c2 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    12e4:	08 95       	ret

000012e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	aa 97       	sbiw	r28, 0x2a	; 42
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	e3 e7       	ldi	r30, 0x73	; 115
    1300:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1302:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1306:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	eb 37       	cpi	r30, 0x7B	; 123
    130c:	f2 07       	cpc	r31, r18
    130e:	c9 f7       	brne	.-14     	; 0x1302 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1310:	0e 94 05 01 	call	0x20a	; 0x20a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1314:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1318:	83 ff       	sbrs	r24, 3
    131a:	1f c1       	rjmp	.+574    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    131c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1320:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <USB_ControlRequest+0x1>
    1324:	49 2f       	mov	r20, r25
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	4a 30       	cpi	r20, 0x0A	; 10
    132a:	51 05       	cpc	r21, r1
    132c:	08 f0       	brcs	.+2      	; 0x1330 <USB_Device_ProcessControlRequest+0x4a>
    132e:	15 c1       	rjmp	.+554    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
    1330:	fa 01       	movw	r30, r20
    1332:	e4 5b       	subi	r30, 0xB4	; 180
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	c5 c2       	rjmp	.+1418   	; 0x18c2 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1338:	80 38       	cpi	r24, 0x80	; 128
    133a:	81 f0       	breq	.+32     	; 0x135c <USB_Device_ProcessControlRequest+0x76>
    133c:	82 38       	cpi	r24, 0x82	; 130
    133e:	09 f0       	breq	.+2      	; 0x1342 <USB_Device_ProcessControlRequest+0x5c>
    1340:	0c c1       	rjmp	.+536    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1342:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest+0x4>
    1346:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1348:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    134c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    1350:	85 fb       	bst	r24, 5
    1352:	88 27       	eor	r24, r24
    1354:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1356:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    135c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1360:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <USB_Device_RemoteWakeupEnabled>
    1364:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1366:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1368:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    136c:	97 7f       	andi	r25, 0xF7	; 247
    136e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1372:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1376:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    137a:	c6 c0       	rjmp	.+396    	; 0x1508 <USB_Device_ProcessControlRequest+0x222>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    137c:	28 2f       	mov	r18, r24
    137e:	2d 7f       	andi	r18, 0xFD	; 253
    1380:	09 f0       	breq	.+2      	; 0x1384 <USB_Device_ProcessControlRequest+0x9e>
    1382:	eb c0       	rjmp	.+470    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1384:	88 23       	and	r24, r24
    1386:	19 f0       	breq	.+6      	; 0x138e <USB_Device_ProcessControlRequest+0xa8>
    1388:	82 30       	cpi	r24, 0x02	; 2
    138a:	61 f0       	breq	.+24     	; 0x13a4 <USB_Device_ProcessControlRequest+0xbe>
    138c:	e6 c0       	rjmp	.+460    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    138e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	09 f0       	breq	.+2      	; 0x1398 <USB_Device_ProcessControlRequest+0xb2>
    1396:	e1 c0       	rjmp	.+450    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1398:	93 30       	cpi	r25, 0x03	; 3
    139a:	09 f0       	breq	.+2      	; 0x139e <USB_Device_ProcessControlRequest+0xb8>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <USB_Device_RemoteWakeupEnabled>
    13a2:	2b c0       	rjmp	.+86     	; 0x13fa <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    13a4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    13a8:	81 11       	cpse	r24, r1
    13aa:	27 c0       	rjmp	.+78     	; 0x13fa <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13ac:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest+0x4>
    13b0:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <USB_Device_ProcessControlRequest+0xd0>
    13b4:	d2 c0       	rjmp	.+420    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13ba:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    13be:	20 ff       	sbrs	r18, 0
    13c0:	1c c0       	rjmp	.+56     	; 0x13fa <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    13c2:	93 30       	cpi	r25, 0x03	; 3
    13c4:	21 f4       	brne	.+8      	; 0x13ce <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13c6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13ca:	80 62       	ori	r24, 0x20	; 32
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    13ce:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13d2:	90 61       	ori	r25, 0x10	; 16
    13d4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <USB_Device_ProcessControlRequest+0xfe>
    13e0:	44 0f       	add	r20, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <USB_Device_ProcessControlRequest+0xfa>
    13e8:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    13ec:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    13f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13fa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1402:	87 7f       	andi	r24, 0xF7	; 247
    1404:	84 c0       	rjmp	.+264    	; 0x150e <USB_Device_ProcessControlRequest+0x228>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1406:	81 11       	cpse	r24, r1
    1408:	a8 c0       	rjmp	.+336    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    140a:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    140e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1410:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1412:	f8 94       	cli
    1414:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1418:	87 7f       	andi	r24, 0xF7	; 247
    141a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    141e:	d5 db       	rcall	.-2134   	; 0xbca <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1424:	80 ff       	sbrs	r24, 0
    1426:	fc cf       	rjmp	.-8      	; 0x1420 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1428:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    142c:	80 78       	andi	r24, 0x80	; 128
    142e:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1430:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    143a:	11 11       	cpse	r17, r1
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <USB_Device_ProcessControlRequest+0x15c>
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <USB_Device_ProcessControlRequest+0x15e>
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1448:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    144a:	87 c0       	rjmp	.+270    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    144c:	80 58       	subi	r24, 0x80	; 128
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	08 f0       	brcs	.+2      	; 0x1454 <USB_Device_ProcessControlRequest+0x16e>
    1452:	83 c0       	rjmp	.+262    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1454:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    1458:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <USB_ControlRequest+0x3>
    145c:	8c 3d       	cpi	r24, 0xDC	; 220
    145e:	53 e0       	ldi	r21, 0x03	; 3
    1460:	95 07       	cpc	r25, r21
    1462:	71 f5       	brne	.+92     	; 0x14c0 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1468:	8a e2       	ldi	r24, 0x2A	; 42
    146a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    146c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    146e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1470:	de 01       	movw	r26, r28
    1472:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1474:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1476:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1478:	51 e2       	ldi	r21, 0x21	; 33
    147a:	e3 2f       	mov	r30, r19
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1482:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1484:	20 ff       	sbrs	r18, 0
    1486:	03 c0       	rjmp	.+6      	; 0x148e <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1488:	e2 95       	swap	r30
    148a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    148c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    148e:	ef 70       	andi	r30, 0x0F	; 15
    1490:	8e 2f       	mov	r24, r30
    1492:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1494:	ea 30       	cpi	r30, 0x0A	; 10
    1496:	10 f0       	brcs	.+4      	; 0x149c <USB_Device_ProcessControlRequest+0x1b6>
    1498:	c7 96       	adiw	r24, 0x37	; 55
    149a:	01 c0       	rjmp	.+2      	; 0x149e <USB_Device_ProcessControlRequest+0x1b8>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	8d 93       	st	X+, r24
    14a0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	24 31       	cpi	r18, 0x14	; 20
    14a6:	49 f7       	brne	.-46     	; 0x147a <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    14a8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ae:	87 7f       	andi	r24, 0xF7	; 247
    14b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    14b4:	6a e2       	ldi	r22, 0x2A	; 42
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	63 de       	rcall	.-826    	; 0x1184 <Endpoint_Write_Control_Stream_LE>
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <USB_Device_ProcessControlRequest+0x200>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    14c0:	ae 01       	movw	r20, r28
    14c2:	4f 5f       	subi	r20, 0xFF	; 255
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <USB_ControlRequest+0x4>
    14ca:	0e 94 17 01 	call	0x22e	; 0x22e <CALLBACK_USB_GetDescriptor>
    14ce:	bc 01       	movw	r22, r24
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <USB_Device_ProcessControlRequest+0x1f0>
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
    14d6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14da:	97 7f       	andi	r25, 0xF7	; 247
    14dc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	a7 de       	rcall	.-690    	; 0x1234 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ea:	8b 77       	andi	r24, 0x7B	; 123
    14ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14f0:	34 c0       	rjmp	.+104    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    14f2:	80 38       	cpi	r24, 0x80	; 128
    14f4:	91 f5       	brne	.+100    	; 0x155a <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14fa:	87 7f       	andi	r24, 0xF7	; 247
    14fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1500:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1504:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    150c:	8e 77       	andi	r24, 0x7E	; 126
    150e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1512:	5b db       	rcall	.-2378   	; 0xbca <Endpoint_ClearStatusStage>
    1514:	22 c0       	rjmp	.+68     	; 0x155a <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1516:	81 11       	cpse	r24, r1
    1518:	20 c0       	rjmp	.+64     	; 0x155a <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    151a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    151e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <USB_ControlRequest+0x3>
    1522:	99 27       	eor	r25, r25
    1524:	02 97       	sbiw	r24, 0x02	; 2
    1526:	cc f4       	brge	.+50     	; 0x155a <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1528:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    152c:	87 7f       	andi	r24, 0xF7	; 247
    152e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1532:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest+0x2>
    1536:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>

	Endpoint_ClearStatusStage();
    153a:	47 db       	rcall	.-2418   	; 0xbca <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    153c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
    1540:	81 11       	cpse	r24, r1
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <USB_Device_ProcessControlRequest+0x26a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1544:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1548:	87 fd       	sbrc	r24, 7
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <USB_Device_ProcessControlRequest+0x26a>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <USB_Device_ProcessControlRequest+0x26c>
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1556:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    155a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    155e:	83 ff       	sbrs	r24, 3
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <USB_Device_ProcessControlRequest+0x290>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1562:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1566:	80 62       	ori	r24, 0x20	; 32
    1568:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    156c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1570:	87 7f       	andi	r24, 0xF7	; 247
    1572:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1576:	aa 96       	adiw	r28, 0x2a	; 42
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    158c:	08 95       	ret

0000158e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    158e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1590:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <USB_DeviceState>
    1594:	88 23       	and	r24, r24
    1596:	59 f0       	breq	.+22     	; 0x15ae <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1598:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    159c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    159e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    15a6:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    15a8:	9e de       	rcall	.-708    	; 0x12e6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15aa:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15b6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    15ba:	23 ff       	sbrs	r18, 3
    15bc:	34 c0       	rjmp	.+104    	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    15be:	fc 01       	movw	r30, r24
    15c0:	20 81       	ld	r18, Z
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <USB_ControlRequest+0x4>
    15c8:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <USB_ControlRequest+0x5>
    15cc:	42 17       	cp	r20, r18
    15ce:	53 07       	cpc	r21, r19
    15d0:	51 f5       	brne	.+84     	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    15d2:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <USB_ControlRequest+0x1>
    15d6:	2e 3f       	cpi	r18, 0xFE	; 254
    15d8:	81 f0       	breq	.+32     	; 0x15fa <MS_Device_ProcessControlRequest+0x48>
    15da:	2f 3f       	cpi	r18, 0xFF	; 255
    15dc:	21 f5       	brne	.+72     	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15de:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <USB_ControlRequest>
    15e2:	21 32       	cpi	r18, 0x21	; 33
    15e4:	01 f5       	brne	.+64     	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
    15e6:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15ec:	87 7f       	andi	r24, 0xF7	; 247
    15ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    15f2:	eb da       	rcall	.-2602   	; 0xbca <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8e ab       	std	Y+54, r24	; 0x36
    15f8:	16 c0       	rjmp	.+44     	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15fa:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <USB_ControlRequest>
    15fe:	21 3a       	cpi	r18, 0xA1	; 161
    1600:	91 f4       	brne	.+36     	; 0x1626 <MS_Device_ProcessControlRequest+0x74>
    1602:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1606:	27 7f       	andi	r18, 0xF7	; 247
    1608:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    160c:	fc 01       	movw	r30, r24
    160e:	81 85       	ldd	r24, Z+9	; 0x09
    1610:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1612:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1616:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    161a:	8e 77       	andi	r24, 0x7E	; 126
    161c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1620:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1622:	cf 91       	pop	r28
    1624:	d2 ca       	rjmp	.-2652   	; 0xbca <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1634:	fc 01       	movw	r30, r24
    1636:	3a 96       	adiw	r30, 0x0a	; 10
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	df 01       	movw	r26, r30
    163c:	1d 92       	st	X+, r1
    163e:	8a 95       	dec	r24
    1640:	e9 f7       	brne	.-6      	; 0x163c <MS_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1642:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	81 13       	cpse	r24, r17
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    164a:	6a 81       	ldd	r22, Y+2	; 0x02
    164c:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    1650:	90 e8       	ldi	r25, 0x80	; 128
    1652:	0c c0       	rjmp	.+24     	; 0x166c <MS_Device_ConfigureEndpoints+0x40>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	81 17       	cp	r24, r17
    1658:	29 f0       	breq	.+10     	; 0x1664 <MS_Device_ConfigureEndpoints+0x38>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    165a:	1f 5f       	subi	r17, 0xFF	; 255
    165c:	17 30       	cpi	r17, 0x07	; 7
    165e:	91 f7       	brne	.-28     	; 0x1644 <MS_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	1d c0       	rjmp	.+58     	; 0x169e <MS_Device_ConfigureEndpoints+0x72>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1664:	6e 81       	ldd	r22, Y+6	; 0x06
    1666:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1668:	88 85       	ldd	r24, Y+8	; 0x08
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    166a:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    166c:	81 11       	cpse	r24, r1
    166e:	84 e0       	ldi	r24, 0x04	; 4
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1670:	28 e0       	ldi	r18, 0x08	; 8
    1672:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1674:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1676:	26 17       	cp	r18, r22
    1678:	37 07       	cpc	r19, r23
    167a:	20 f4       	brcc	.+8      	; 0x1684 <MS_Device_ConfigureEndpoints+0x58>
				{
					MaskVal++;
    167c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    167e:	22 0f       	add	r18, r18
    1680:	33 1f       	adc	r19, r19
    1682:	f9 cf       	rjmp	.-14     	; 0x1676 <MS_Device_ConfigureEndpoints+0x4a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1684:	42 95       	swap	r20
    1686:	40 7f       	andi	r20, 0xF0	; 240
    1688:	82 60       	ori	r24, 0x02	; 2
    168a:	48 2b       	or	r20, r24
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	91 11       	cpse	r25, r1
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <MS_Device_ConfigureEndpoints+0x68>
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	60 68       	ori	r22, 0x80	; 128
    1696:	81 2f       	mov	r24, r17
    1698:	64 da       	rcall	.-2872   	; 0xb62 <Endpoint_ConfigureEndpoint_Prv>
    169a:	81 11       	cpse	r24, r1
    169c:	de cf       	rjmp	.-68     	; 0x165a <MS_Device_ConfigureEndpoints+0x2e>
			return false;
		}
	}

	return true;
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	08 95       	ret

000016a6 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <MS_Device_USBTask+0xe>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    16b8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <USB_DeviceState>
    16bc:	24 30       	cpi	r18, 0x04	; 4
    16be:	09 f0       	breq	.+2      	; 0x16c2 <MS_Device_USBTask+0x1c>
    16c0:	f7 c0       	rjmp	.+494    	; 0x18b0 <MS_Device_USBTask+0x20a>
    16c2:	8c 01       	movw	r16, r24
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    16c4:	fc 01       	movw	r30, r24
    16c6:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    16d0:	85 ff       	sbrs	r24, 5
    16d2:	b8 c0       	rjmp	.+368    	; 0x1844 <MS_Device_USBTask+0x19e>

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    16d4:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16d6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	
	BytesProcessed = 0;
    16da:	1a 82       	std	Y+2, r1	; 0x02
    16dc:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    16de:	78 01       	movw	r14, r16
    16e0:	fa e0       	ldi	r31, 0x0A	; 10
    16e2:	ef 0e       	add	r14, r31
    16e4:	f1 1c       	adc	r15, r1
    16e6:	ae 01       	movw	r20, r28
    16e8:	4f 5f       	subi	r20, 0xFF	; 255
    16ea:	5f 4f       	sbci	r21, 0xFF	; 255
    16ec:	6f e0       	ldi	r22, 0x0F	; 15
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	c7 01       	movw	r24, r14
    16f2:	ff dc       	rcall	.-1538   	; 0x10f2 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    16f4:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	21 f4       	brne	.+8      	; 0x1702 <MS_Device_USBTask+0x5c>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    16fa:	86 a9       	ldd	r24, Z+54	; 0x36
    16fc:	88 23       	and	r24, r24
    16fe:	99 f3       	breq	.-26     	; 0x16e6 <MS_Device_USBTask+0x40>
    1700:	a1 c0       	rjmp	.+322    	; 0x1844 <MS_Device_USBTask+0x19e>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1702:	82 85       	ldd	r24, Z+10	; 0x0a
    1704:	93 85       	ldd	r25, Z+11	; 0x0b
    1706:	a4 85       	ldd	r26, Z+12	; 0x0c
    1708:	b5 85       	ldd	r27, Z+13	; 0x0d
    170a:	85 35       	cpi	r24, 0x55	; 85
    170c:	93 45       	sbci	r25, 0x53	; 83
    170e:	a2 44       	sbci	r26, 0x42	; 66
    1710:	b3 44       	sbci	r27, 0x43	; 67
    1712:	61 f4       	brne	.+24     	; 0x172c <MS_Device_USBTask+0x86>
    1714:	f8 01       	movw	r30, r16
    1716:	97 89       	ldd	r25, Z+23	; 0x17
    1718:	81 85       	ldd	r24, Z+9	; 0x09
    171a:	98 17       	cp	r25, r24
    171c:	38 f4       	brcc	.+14     	; 0x172c <MS_Device_USBTask+0x86>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    171e:	86 89       	ldd	r24, Z+22	; 0x16
    1720:	8f 71       	andi	r24, 0x1F	; 31
    1722:	21 f4       	brne	.+8      	; 0x172c <MS_Device_USBTask+0x86>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1724:	80 8d       	ldd	r24, Z+24	; 0x18
    1726:	81 50       	subi	r24, 0x01	; 1
    1728:	80 31       	cpi	r24, 0x10	; 16
    172a:	78 f0       	brcs	.+30     	; 0x174a <MS_Device_USBTask+0xa4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    172c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1730:	80 62       	ori	r24, 0x20	; 32
    1732:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1736:	f8 01       	movw	r30, r16
    1738:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    173a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    173e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1742:	80 62       	ori	r24, 0x20	; 32
    1744:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1748:	7d c0       	rjmp	.+250    	; 0x1844 <MS_Device_USBTask+0x19e>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    174a:	1a 82       	std	Y+2, r1	; 0x02
    174c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    174e:	78 01       	movw	r14, r16
    1750:	f9 e1       	ldi	r31, 0x19	; 25
    1752:	ef 0e       	add	r14, r31
    1754:	f1 1c       	adc	r15, r1
    1756:	f8 01       	movw	r30, r16
    1758:	60 8d       	ldd	r22, Z+24	; 0x18
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	ae 01       	movw	r20, r28
    175e:	4f 5f       	subi	r20, 0xFF	; 255
    1760:	5f 4f       	sbci	r21, 0xFF	; 255
    1762:	c7 01       	movw	r24, r14
    1764:	c6 dc       	rcall	.-1652   	; 0x10f2 <Endpoint_Read_Stream_LE>
    1766:	85 30       	cpi	r24, 0x05	; 5
    1768:	29 f4       	brne	.+10     	; 0x1774 <MS_Device_USBTask+0xce>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    176a:	f8 01       	movw	r30, r16
    176c:	86 a9       	ldd	r24, Z+54	; 0x36
    176e:	88 23       	and	r24, r24
    1770:	91 f3       	breq	.-28     	; 0x1756 <MS_Device_USBTask+0xb0>
    1772:	68 c0       	rjmp	.+208    	; 0x1844 <MS_Device_USBTask+0x19e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1778:	8b 77       	andi	r24, 0x7B	; 123
    177a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    177e:	f8 01       	movw	r30, r16
    1780:	86 89       	ldd	r24, Z+22	; 0x16
    1782:	87 ff       	sbrs	r24, 7
    1784:	03 c0       	rjmp	.+6      	; 0x178c <MS_Device_USBTask+0xe6>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1786:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1788:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 09 01 	call	0x212	; 0x212 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	98 27       	eor	r25, r24
    1796:	f8 01       	movw	r30, r16
    1798:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    179a:	45 e5       	ldi	r20, 0x55	; 85
    179c:	53 e5       	ldi	r21, 0x53	; 83
    179e:	62 e4       	ldi	r22, 0x42	; 66
    17a0:	73 e5       	ldi	r23, 0x53	; 83
    17a2:	41 a7       	std	Z+41, r20	; 0x29
    17a4:	52 a7       	std	Z+42, r21	; 0x2a
    17a6:	63 a7       	std	Z+43, r22	; 0x2b
    17a8:	74 a7       	std	Z+44, r23	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    17aa:	46 85       	ldd	r20, Z+14	; 0x0e
    17ac:	57 85       	ldd	r21, Z+15	; 0x0f
    17ae:	60 89       	ldd	r22, Z+16	; 0x10
    17b0:	71 89       	ldd	r23, Z+17	; 0x11
    17b2:	45 a7       	std	Z+45, r20	; 0x2d
    17b4:	56 a7       	std	Z+46, r21	; 0x2e
    17b6:	67 a7       	std	Z+47, r22	; 0x2f
    17b8:	70 ab       	std	Z+48, r23	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    17ba:	42 89       	ldd	r20, Z+18	; 0x12
    17bc:	53 89       	ldd	r21, Z+19	; 0x13
    17be:	64 89       	ldd	r22, Z+20	; 0x14
    17c0:	75 89       	ldd	r23, Z+21	; 0x15
    17c2:	41 ab       	std	Z+49, r20	; 0x31
    17c4:	52 ab       	std	Z+50, r21	; 0x32
    17c6:	63 ab       	std	Z+51, r22	; 0x33
    17c8:	74 ab       	std	Z+52, r23	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    17ca:	81 11       	cpse	r24, r1
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <MS_Device_USBTask+0x13a>
    17ce:	45 2b       	or	r20, r21
    17d0:	46 2b       	or	r20, r22
    17d2:	47 2b       	or	r20, r23
    17d4:	29 f0       	breq	.+10     	; 0x17e0 <MS_Device_USBTask+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    17e0:	f8 01       	movw	r30, r16
    17e2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17ec:	f8 01       	movw	r30, r16

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    17ee:	85 ff       	sbrs	r24, 5
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <MS_Device_USBTask+0x154>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17f2:	86 a9       	ldd	r24, Z+54	; 0x36
    17f4:	88 23       	and	r24, r24
    17f6:	c1 f3       	breq	.-16     	; 0x17e8 <MS_Device_USBTask+0x142>
    17f8:	25 c0       	rjmp	.+74     	; 0x1844 <MS_Device_USBTask+0x19e>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    17fa:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1800:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	while (Endpoint_IsStalled())
    1804:	85 ff       	sbrs	r24, 5
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <MS_Device_USBTask+0x16c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1808:	f8 01       	movw	r30, r16
    180a:	86 a9       	ldd	r24, Z+54	; 0x36
    180c:	88 23       	and	r24, r24
    180e:	c1 f3       	breq	.-16     	; 0x1800 <MS_Device_USBTask+0x15a>
    1810:	19 c0       	rjmp	.+50     	; 0x1844 <MS_Device_USBTask+0x19e>
		  return;
	}

	uint16_t BytesProcessed = 0;
    1812:	1a 82       	std	Y+2, r1	; 0x02
    1814:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1816:	78 01       	movw	r14, r16
    1818:	f9 e2       	ldi	r31, 0x29	; 41
    181a:	ef 0e       	add	r14, r31
    181c:	f1 1c       	adc	r15, r1
    181e:	ae 01       	movw	r20, r28
    1820:	4f 5f       	subi	r20, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	6d e0       	ldi	r22, 0x0D	; 13
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	c7 01       	movw	r24, r14
    182a:	cc db       	rcall	.-2152   	; 0xfc4 <Endpoint_Write_Stream_LE>
    182c:	85 30       	cpi	r24, 0x05	; 5
    182e:	29 f4       	brne	.+10     	; 0x183a <MS_Device_USBTask+0x194>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1830:	f8 01       	movw	r30, r16
    1832:	86 a9       	ldd	r24, Z+54	; 0x36
    1834:	88 23       	and	r24, r24
    1836:	99 f3       	breq	.-26     	; 0x181e <MS_Device_USBTask+0x178>
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <MS_Device_USBTask+0x19e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    183a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    183e:	8e 77       	andi	r24, 0x7E	; 126
    1840:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1844:	f8 01       	movw	r30, r16
    1846:	86 a9       	ldd	r24, Z+54	; 0x36
    1848:	88 23       	and	r24, r24
    184a:	91 f1       	breq	.+100    	; 0x18b0 <MS_Device_USBTask+0x20a>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 01       	movw	r18, r24
    1852:	05 80       	ldd	r0, Z+5	; 0x05
    1854:	02 c0       	rjmp	.+4      	; 0x185a <MS_Device_USBTask+0x1b4>
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <MS_Device_USBTask+0x1b0>
    185e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1862:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1866:	01 80       	ldd	r0, Z+1	; 0x01
    1868:	02 c0       	rjmp	.+4      	; 0x186e <MS_Device_USBTask+0x1c8>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <MS_Device_USBTask+0x1c4>
    1872:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1876:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    187a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    187c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1880:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1884:	80 61       	ori	r24, 0x10	; 16
    1886:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    188a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1894:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1896:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    189a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    189e:	80 61       	ori	r24, 0x10	; 16
    18a0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    18a4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18a8:	88 60       	ori	r24, 0x08	; 8
    18aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    18ae:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	08 95       	ret

000018c2 <__tablejump2__>:
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	00 24       	eor	r0, r0
    18c8:	00 1c       	adc	r0, r0
    18ca:	0b be       	out	0x3b, r0	; 59
    18cc:	07 90       	elpm	r0, Z+
    18ce:	f6 91       	elpm	r31, Z
    18d0:	e0 2d       	mov	r30, r0
    18d2:	09 94       	ijmp

000018d4 <_exit>:
    18d4:	f8 94       	cli

000018d6 <__stop_program>:
    18d6:	ff cf       	rjmp	.-2      	; 0x18d6 <__stop_program>
