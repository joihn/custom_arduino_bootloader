
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00001ef0  00001f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080017a  0080017a  00001ffe  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009239  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002615  00000000  00000000  0000b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000477b  00000000  00000000  0000dbe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc0  00000000  00000000  00012364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d50  00000000  00000000  00012f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000493b  00000000  00000000  00015c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0001a5af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	da c0       	rjmp	.+436    	; 0x1da <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c7       	rjmp	.+3686   	; 0xe90 <__vector_10>
      2a:	00 00       	nop
      2c:	fe c7       	rjmp	.+4092   	; 0x102a <__vector_11>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ce c0       	rjmp	.+412    	; 0x1da <__bad_interrupt>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c0       	rjmp	.+392    	; 0x1da <__bad_interrupt>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	ba c0       	rjmp	.+372    	; 0x1da <__bad_interrupt>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a6 c0       	rjmp	.+332    	; 0x1da <__bad_interrupt>
      8e:	00 00       	nop
      90:	a4 c0       	rjmp	.+328    	; 0x1da <__bad_interrupt>
      92:	00 00       	nop
      94:	a2 c0       	rjmp	.+324    	; 0x1da <__bad_interrupt>
      96:	00 00       	nop
      98:	90 0a       	sbc	r9, r16
      9a:	b2 0a       	sbc	r11, r18
      9c:	a1 0b       	sbc	r26, r17
      9e:	b2 0a       	sbc	r11, r18
      a0:	a1 0b       	sbc	r26, r17
      a2:	f7 0a       	sbc	r15, r23
      a4:	1a 0b       	sbc	r17, r26
      a6:	a1 0b       	sbc	r26, r17
      a8:	6d 0b       	sbc	r22, r29
      aa:	7f 0b       	sbc	r23, r31

000000ac <ProductString>:
      ac:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
      bc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      cc:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
      dc:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
      ec:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000f6 <ManufacturerString>:
      f6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     106:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000110 <LanguageString>:
     110:	04 03 09 04                                         ....

00000114 <ConfigurationDescriptor>:
     114:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
     124:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
     134:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     144:	3f 00 07 05 81 03 08 00 01                          ?........

0000014d <DeviceDescriptor>:
     14d:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
     15d:	dc 01                                               ..

0000015f <KeyboardReport>:
     15f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     16f:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     17f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     18f:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d0 e2       	ldi	r29, 0x20	; 32
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e0 ef       	ldi	r30, 0xF0	; 240
     1b2:	fe e1       	ldi	r31, 0x1E	; 30
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 37       	cpi	r26, 0x7A	; 122
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	aa e7       	ldi	r26, 0x7A	; 122
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	af 38       	cpi	r26, 0x8F	; 143
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	48 d0       	rcall	.+144    	; 0x266 <main>
     1d6:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1dc:	9b b1       	in	r25, 0x0b	; 11
     1de:	9f 70       	andi	r25, 0x0F	; 15
     1e0:	89 2b       	or	r24, r25
     1e2:	8b b9       	out	0x0b, r24	; 11
     1e4:	08 95       	ret

000001e6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1e6:	84 b7       	in	r24, 0x34	; 52
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	a8 95       	wdr
     1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1f6:	88 61       	ori	r24, 0x18	; 24
     1f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     200:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     20e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     212:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     214:	8a b1       	in	r24, 0x0a	; 10
     216:	80 6f       	ori	r24, 0xF0	; 240
     218:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     21a:	8b b1       	in	r24, 0x0b	; 11
     21c:	8f 70       	andi	r24, 0x0F	; 15
     21e:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     220:	84 b1       	in	r24, 0x04	; 4
     222:	8f 71       	andi	r24, 0x1F	; 31
     224:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     226:	8d b1       	in	r24, 0x0d	; 13
     228:	8f 7c       	andi	r24, 0xCF	; 207
     22a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	80 6e       	ori	r24, 0xE0	; 224
     230:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     232:	8e b1       	in	r24, 0x0e	; 14
     234:	80 63       	ori	r24, 0x30	; 48
     236:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     238:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     23a:	72 9a       	sbi	0x0e, 2	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     23c:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     23e:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     240:	84 b1       	in	r24, 0x04	; 4
     242:	86 60       	ori	r24, 0x06	; 6
     244:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     246:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     248:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     24a:	8d b5       	in	r24, 0x2d	; 45
     24c:	81 60       	ori	r24, 0x01	; 1
     24e:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     250:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     252:	8c e5       	ldi	r24, 0x5C	; 92
     254:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     256:	8d b1       	in	r24, 0x0d	; 13
     258:	83 60       	ori	r24, 0x03	; 3
     25a:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     25c:	8e b1       	in	r24, 0x0e	; 14
     25e:	83 60       	ori	r24, 0x03	; 3
     260:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     262:	00 d6       	rcall	.+3072   	; 0xe64 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     264:	59 c3       	rjmp	.+1714   	; 0x918 <DataflashManager_ResetDataflashProtections>

00000266 <main>:
     266:	bf df       	rcall	.-130    	; 0x1e6 <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	b8 df       	rcall	.-144    	; 0x1dc <LEDs_SetAllLEDs>
	sei();
     26c:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     26e:	8d e0       	ldi	r24, 0x0D	; 13
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <HID_Device_USBTask>
		USB_USBTask();
     27e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <USB_USBTask>
     282:	f5 cf       	rjmp	.-22     	; 0x26e <main+0x8>

00000284 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     284:	80 ea       	ldi	r24, 0xA0	; 160
     286:	aa cf       	rjmp	.-172    	; 0x1dc <LEDs_SetAllLEDs>

00000288 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     288:	80 e1       	ldi	r24, 0x10	; 16
     28a:	a8 cf       	rjmp	.-176    	; 0x1dc <LEDs_SetAllLEDs>

0000028c <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     28c:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <HID_Device_ConfigureEndpoints>
     296:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     298:	8d e0       	ldi	r24, 0x0D	; 13
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2a0:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     2a4:	94 60       	ori	r25, 0x04	; 4
     2a6:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2aa:	cc 23       	and	r28, r28
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <EVENT_USB_Device_ConfigurationChanged+0x26>
     2ae:	81 11       	cpse	r24, r1
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <EVENT_USB_Device_ConfigurationChanged+0x2a>
     2b2:	80 e9       	ldi	r24, 0x90	; 144
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <EVENT_USB_Device_ConfigurationChanged+0x2c>
     2b6:	80 e6       	ldi	r24, 0x60	; 96
}
     2b8:	cf 91       	pop	r28
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ba:	90 cf       	rjmp	.-224    	; 0x1dc <LEDs_SetAllLEDs>

000002bc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     2bc:	8d e0       	ldi	r24, 0x0D	; 13
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <HID_Device_ProcessControlRequest>

000002cc <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	83 df       	rcall	.-250    	; 0x1dc <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     2d6:	ce 01       	movw	r24, r28
     2d8:	de d3       	rcall	.+1980   	; 0xa96 <SCSI_DecodeSCSICommand>
     2da:	c8 2f       	mov	r28, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     2dc:	80 e6       	ldi	r24, 0x60	; 96
     2de:	7e df       	rcall	.-260    	; 0x1dc <LEDs_SetAllLEDs>
     2e0:	8c 2f       	mov	r24, r28

	return CommandSuccess;
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Device_StartOfFrame>:
     2e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2ec:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	29 f0       	breq	.+10     	; 0x2fe <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     2fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     2fe:	08 95       	ret

00000300 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     306:	83 b1       	in	r24, 0x03	; 3
     308:	9c b1       	in	r25, 0x0c	; 12
     30a:	90 95       	com	r25
     30c:	90 73       	andi	r25, 0x30	; 48
     30e:	96 95       	lsr	r25
     310:	80 95       	com	r24
     312:	80 7e       	andi	r24, 0xE0	; 224
     314:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     316:	9c b1       	in	r25, 0x0c	; 12
     318:	90 95       	com	r25
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     31a:	22 e0       	ldi	r18, 0x02	; 2
     31c:	20 83       	st	Z, r18

	if (JoyStatus_LCL & JOY_UP)
     31e:	87 ff       	sbrs	r24, 7
     320:	02 c0       	rjmp	.+4      	; 0x326 <CALLBACK_HID_Device_CreateHIDReport+0x26>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     322:	24 e0       	ldi	r18, 0x04	; 4
     324:	03 c0       	rjmp	.+6      	; 0x32c <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	else if (JoyStatus_LCL & JOY_DOWN)
     326:	84 ff       	sbrs	r24, 4
     328:	02 c0       	rjmp	.+4      	; 0x32e <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     32a:	25 e0       	ldi	r18, 0x05	; 5
     32c:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     32e:	86 ff       	sbrs	r24, 6
     330:	02 c0       	rjmp	.+4      	; 0x336 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     332:	26 e0       	ldi	r18, 0x06	; 6
     334:	03 c0       	rjmp	.+6      	; 0x33c <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	else if (JoyStatus_LCL & JOY_RIGHT)
     336:	83 ff       	sbrs	r24, 3
     338:	02 c0       	rjmp	.+4      	; 0x33e <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     33a:	27 e0       	ldi	r18, 0x07	; 7
     33c:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     33e:	85 ff       	sbrs	r24, 5
     340:	02 c0       	rjmp	.+4      	; 0x346 <CALLBACK_HID_Device_CreateHIDReport+0x46>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     346:	92 ff       	sbrs	r25, 2
     348:	02 c0       	rjmp	.+4      	; 0x34e <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     34a:	89 e0       	ldi	r24, 0x09	; 9
     34c:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	f8 01       	movw	r30, r16
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
	return false;
}
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	08 95       	ret

00000360 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     360:	f9 01       	movw	r30, r18
     362:	90 81       	ld	r25, Z
     364:	90 ff       	sbrs	r25, 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     368:	80 e1       	ldi	r24, 0x10	; 16
     36a:	01 c0       	rjmp	.+2      	; 0x36e <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     36c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     36e:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     370:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     372:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     374:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
     376:	32 cf       	rjmp	.-412    	; 0x1dc <LEDs_SetAllLEDs>

00000378 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     378:	29 2f       	mov	r18, r25
     37a:	33 27       	eor	r19, r19
     37c:	23 30       	cpi	r18, 0x03	; 3
     37e:	31 05       	cpc	r19, r1
     380:	e1 f0       	breq	.+56     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x42>
     382:	58 f4       	brcc	.+22     	; 0x39a <CALLBACK_USB_GetDescriptor+0x22>
     384:	21 30       	cpi	r18, 0x01	; 1
     386:	31 05       	cpc	r19, r1
     388:	99 f0       	breq	.+38     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x38>
     38a:	22 30       	cpi	r18, 0x02	; 2
     38c:	31 05       	cpc	r19, r1
     38e:	69 f5       	brne	.+90     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     390:	89 e3       	ldi	r24, 0x39	; 57
     392:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     394:	24 e1       	ldi	r18, 0x14	; 20
     396:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     398:	2c c0       	rjmp	.+88     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     39a:	21 32       	cpi	r18, 0x21	; 33
     39c:	31 05       	cpc	r19, r1
     39e:	01 f1       	breq	.+64     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x68>
     3a0:	22 32       	cpi	r18, 0x22	; 34
     3a2:	31 05       	cpc	r19, r1
     3a4:	11 f5       	brne	.+68     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     3a6:	8f e3       	ldi	r24, 0x3F	; 63
     3a8:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     3aa:	2f e5       	ldi	r18, 0x5F	; 95
     3ac:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3b0:	82 e1       	ldi	r24, 0x12	; 18
     3b2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3b4:	2d e4       	ldi	r18, 0x4D	; 77
     3b6:	31 e0       	ldi	r19, 0x01	; 1
     3b8:	1c c0       	rjmp	.+56     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3ba:	99 27       	eor	r25, r25
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	91 05       	cpc	r25, r1
     3c0:	49 f0       	breq	.+18     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x5c>
     3c2:	28 f0       	brcs	.+10     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x56>
     3c4:	02 97       	sbiw	r24, 0x02	; 2
     3c6:	89 f4       	brne	.+34     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3c8:	ec ea       	ldi	r30, 0xAC	; 172
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ce:	e0 e1       	ldi	r30, 0x10	; 16
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3d4:	e6 ef       	ldi	r30, 0xF6	; 246
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3d8:	84 91       	lpm	r24, Z
     3da:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     3dc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3e0:	89 e0       	ldi	r24, 0x09	; 9
     3e2:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     3e4:	2d e3       	ldi	r18, 0x3D	; 61
     3e6:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3f2:	fa 01       	movw	r30, r20
     3f4:	31 83       	std	Z+1, r19	; 0x01
     3f6:	20 83       	st	Z, r18
	return Size;
}
     3f8:	08 95       	ret

000003fa <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     3fa:	8e b1       	in	r24, 0x0e	; 14
     3fc:	9e b1       	in	r25, 0x0e	; 14
     3fe:	93 60       	ori	r25, 0x03	; 3
     400:	9e b9       	out	0x0e, r25	; 14
     402:	9e b1       	in	r25, 0x0e	; 14
     404:	9c 7f       	andi	r25, 0xFC	; 252
     406:	83 70       	andi	r24, 0x03	; 3
     408:	89 2b       	or	r24, r25
     40a:	8e b9       	out	0x0e, r24	; 14
     40c:	08 95       	ret

0000040e <Dataflash_WaitWhileBusy>:
     40e:	f5 df       	rcall	.-22     	; 0x3fa <Dataflash_ToggleSelectedChipCS>
     410:	87 ed       	ldi	r24, 0xD7	; 215
     412:	8e bd       	out	0x2e, r24	; 46
     414:	0d b4       	in	r0, 0x2d	; 45
     416:	07 fe       	sbrs	r0, 7
     418:	fd cf       	rjmp	.-6      	; 0x414 <Dataflash_WaitWhileBusy+0x6>
     41a:	1e bc       	out	0x2e, r1	; 46
     41c:	0d b4       	in	r0, 0x2d	; 45
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <Dataflash_WaitWhileBusy+0xe>
     422:	0e b4       	in	r0, 0x2e	; 46
     424:	07 fe       	sbrs	r0, 7
     426:	f9 cf       	rjmp	.-14     	; 0x41a <Dataflash_WaitWhileBusy+0xc>
     428:	e8 cf       	rjmp	.-48     	; 0x3fa <Dataflash_ToggleSelectedChipCS>

0000042a <Dataflash_SendAddressBytes>:
     42a:	9c 01       	movw	r18, r24
     42c:	36 95       	lsr	r19
     42e:	27 95       	ror	r18
     430:	56 e0       	ldi	r21, 0x06	; 6
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	5a 95       	dec	r21
     438:	e1 f7       	brne	.-8      	; 0x432 <Dataflash_SendAddressBytes+0x8>
     43a:	8e bd       	out	0x2e, r24	; 46
     43c:	0d b4       	in	r0, 0x2d	; 45
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <Dataflash_SendAddressBytes+0x12>
     442:	22 0f       	add	r18, r18
     444:	22 0f       	add	r18, r18
     446:	22 0f       	add	r18, r18
     448:	72 2b       	or	r23, r18
     44a:	7e bd       	out	0x2e, r23	; 46
     44c:	0d b4       	in	r0, 0x2d	; 45
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <Dataflash_SendAddressBytes+0x22>
     452:	6e bd       	out	0x2e, r22	; 46
     454:	0d b4       	in	r0, 0x2d	; 45
     456:	07 fe       	sbrs	r0, 7
     458:	fd cf       	rjmp	.-6      	; 0x454 <Dataflash_SendAddressBytes+0x2a>
     45a:	08 95       	ret

0000045c <Dataflash_SelectChipFromPage>:
     45c:	9c 01       	movw	r18, r24
     45e:	9e b1       	in	r25, 0x0e	; 14
     460:	93 60       	ori	r25, 0x03	; 3
     462:	9e b9       	out	0x0e, r25	; 14
     464:	21 15       	cp	r18, r1
     466:	80 e4       	ldi	r24, 0x40	; 64
     468:	38 07       	cpc	r19, r24
     46a:	40 f4       	brcc	.+16     	; 0x47c <Dataflash_SelectChipFromPage+0x20>
     46c:	8e b1       	in	r24, 0x0e	; 14
     46e:	8c 7f       	andi	r24, 0xFC	; 252
     470:	20 ff       	sbrs	r18, 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <Dataflash_SelectChipFromPage+0x1c>
     474:	81 60       	ori	r24, 0x01	; 1
     476:	01 c0       	rjmp	.+2      	; 0x47a <Dataflash_SelectChipFromPage+0x1e>
     478:	82 60       	ori	r24, 0x02	; 2
     47a:	8e b9       	out	0x0e, r24	; 14
     47c:	08 95       	ret

0000047e <DataflashManager_WriteBlocks>:
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	7f 92       	push	r7
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	4c 01       	movw	r8, r24
     4a0:	89 01       	movw	r16, r18
     4a2:	2a 01       	movw	r4, r20
     4a4:	3b 01       	movw	r6, r22
     4a6:	39 e0       	ldi	r19, 0x09	; 9
     4a8:	44 0c       	add	r4, r4
     4aa:	55 1c       	adc	r5, r5
     4ac:	66 1c       	adc	r6, r6
     4ae:	77 1c       	adc	r7, r7
     4b0:	3a 95       	dec	r19
     4b2:	d1 f7       	brne	.-12     	; 0x4a8 <DataflashManager_WriteBlocks+0x2a>
     4b4:	6a e0       	ldi	r22, 0x0A	; 10
     4b6:	76 94       	lsr	r7
     4b8:	67 94       	ror	r6
     4ba:	57 94       	ror	r5
     4bc:	47 94       	ror	r4
     4be:	6a 95       	dec	r22
     4c0:	d1 f7       	brne	.-12     	; 0x4b6 <DataflashManager_WriteBlocks+0x38>
     4c2:	e2 01       	movw	r28, r4
     4c4:	54 2f       	mov	r21, r20
     4c6:	44 27       	eor	r20, r20
     4c8:	55 0f       	add	r21, r21
     4ca:	7a 01       	movw	r14, r20
     4cc:	ee 24       	eor	r14, r14
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	f8 22       	and	r15, r24
     4d2:	c2 01       	movw	r24, r4
     4d4:	c3 df       	rcall	.-122    	; 0x45c <Dataflash_SelectChipFromPage>
     4d6:	83 e5       	ldi	r24, 0x53	; 83
     4d8:	8e bd       	out	0x2e, r24	; 46
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <DataflashManager_WriteBlocks+0x5c>
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	c2 01       	movw	r24, r4
     4e6:	a1 df       	rcall	.-190    	; 0x42a <Dataflash_SendAddressBytes>
     4e8:	92 df       	rcall	.-220    	; 0x40e <Dataflash_WaitWhileBusy>
     4ea:	84 e8       	ldi	r24, 0x84	; 132
     4ec:	8e bd       	out	0x2e, r24	; 46
     4ee:	0d b4       	in	r0, 0x2d	; 45
     4f0:	07 fe       	sbrs	r0, 7
     4f2:	fd cf       	rjmp	.-6      	; 0x4ee <DataflashManager_WriteBlocks+0x70>
     4f4:	b7 01       	movw	r22, r14
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	97 df       	rcall	.-210    	; 0x42a <Dataflash_SendAddressBytes>
     4fc:	3b d4       	rcall	.+2166   	; 0xd74 <Endpoint_WaitUntilReady>
     4fe:	81 11       	cpse	r24, r1
     500:	ea c0       	rjmp	.+468    	; 0x6d6 <DataflashManager_WriteBlocks+0x258>
     502:	94 e0       	ldi	r25, 0x04	; 4
     504:	f6 94       	lsr	r15
     506:	e7 94       	ror	r14
     508:	9a 95       	dec	r25
     50a:	e1 f7       	brne	.-8      	; 0x504 <DataflashManager_WriteBlocks+0x86>
     50c:	7e 2c       	mov	r7, r14
     50e:	58 01       	movw	r10, r16
     510:	25 e0       	ldi	r18, 0x05	; 5
     512:	aa 0c       	add	r10, r10
     514:	bb 1c       	adc	r11, r11
     516:	2a 95       	dec	r18
     518:	e1 f7       	brne	.-8      	; 0x512 <DataflashManager_WriteBlocks+0x94>
     51a:	e1 2c       	mov	r14, r1
     51c:	f1 2c       	mov	r15, r1
     51e:	61 2c       	mov	r6, r1
     520:	01 15       	cp	r16, r1
     522:	11 05       	cpc	r17, r1
     524:	09 f4       	brne	.+2      	; 0x528 <DataflashManager_WriteBlocks+0xaa>
     526:	bc c0       	rjmp	.+376    	; 0x6a0 <DataflashManager_WriteBlocks+0x222>
     528:	65 01       	movw	r12, r10
     52a:	ce 0c       	add	r12, r14
     52c:	df 1c       	adc	r13, r15
     52e:	80 e2       	ldi	r24, 0x20	; 32
     530:	58 2e       	mov	r5, r24
     532:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     536:	85 ff       	sbrs	r24, 5
     538:	04 c0       	rjmp	.+8      	; 0x542 <DataflashManager_WriteBlocks+0xc4>
     53a:	e0 e4       	ldi	r30, 0x40	; 64
     53c:	7e 12       	cpse	r7, r30
     53e:	42 c0       	rjmp	.+132    	; 0x5c4 <DataflashManager_WriteBlocks+0x146>
     540:	09 c0       	rjmp	.+18     	; 0x554 <DataflashManager_WriteBlocks+0xd6>
     542:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     546:	8b 77       	andi	r24, 0x7B	; 123
     548:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     54c:	13 d4       	rcall	.+2086   	; 0xd74 <Endpoint_WaitUntilReady>
     54e:	88 23       	and	r24, r24
     550:	a1 f3       	breq	.-24     	; 0x53a <DataflashManager_WriteBlocks+0xbc>
     552:	c1 c0       	rjmp	.+386    	; 0x6d6 <DataflashManager_WriteBlocks+0x258>
     554:	5c df       	rcall	.-328    	; 0x40e <Dataflash_WaitWhileBusy>
     556:	61 10       	cpse	r6, r1
     558:	02 c0       	rjmp	.+4      	; 0x55e <DataflashManager_WriteBlocks+0xe0>
     55a:	83 e8       	ldi	r24, 0x83	; 131
     55c:	01 c0       	rjmp	.+2      	; 0x560 <DataflashManager_WriteBlocks+0xe2>
     55e:	86 e8       	ldi	r24, 0x86	; 134
     560:	8e bd       	out	0x2e, r24	; 46
     562:	0d b4       	in	r0, 0x2d	; 45
     564:	07 fe       	sbrs	r0, 7
     566:	fd cf       	rjmp	.-6      	; 0x562 <DataflashManager_WriteBlocks+0xe4>
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	ce 01       	movw	r24, r28
     56e:	5d df       	rcall	.-326    	; 0x42a <Dataflash_SendAddressBytes>
     570:	21 96       	adiw	r28, 0x01	; 1
     572:	8e b1       	in	r24, 0x0e	; 14
     574:	83 70       	andi	r24, 0x03	; 3
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	09 f4       	brne	.+2      	; 0x57c <DataflashManager_WriteBlocks+0xfe>
     57a:	68 26       	eor	r6, r24
     57c:	ce 01       	movw	r24, r28
     57e:	6e df       	rcall	.-292    	; 0x45c <Dataflash_SelectChipFromPage>
     580:	f0 e4       	ldi	r31, 0x40	; 64
     582:	cf 16       	cp	r12, r31
     584:	d1 04       	cpc	r13, r1
     586:	78 f4       	brcc	.+30     	; 0x5a6 <DataflashManager_WriteBlocks+0x128>
     588:	42 df       	rcall	.-380    	; 0x40e <Dataflash_WaitWhileBusy>
     58a:	61 10       	cpse	r6, r1
     58c:	02 c0       	rjmp	.+4      	; 0x592 <DataflashManager_WriteBlocks+0x114>
     58e:	83 e5       	ldi	r24, 0x53	; 83
     590:	01 c0       	rjmp	.+2      	; 0x594 <DataflashManager_WriteBlocks+0x116>
     592:	85 e5       	ldi	r24, 0x55	; 85
     594:	8e bd       	out	0x2e, r24	; 46
     596:	0d b4       	in	r0, 0x2d	; 45
     598:	07 fe       	sbrs	r0, 7
     59a:	fd cf       	rjmp	.-6      	; 0x596 <DataflashManager_WriteBlocks+0x118>
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	ce 01       	movw	r24, r28
     5a2:	43 df       	rcall	.-378    	; 0x42a <Dataflash_SendAddressBytes>
     5a4:	34 df       	rcall	.-408    	; 0x40e <Dataflash_WaitWhileBusy>
     5a6:	61 10       	cpse	r6, r1
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DataflashManager_WriteBlocks+0x130>
     5aa:	84 e8       	ldi	r24, 0x84	; 132
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <DataflashManager_WriteBlocks+0x132>
     5ae:	87 e8       	ldi	r24, 0x87	; 135
     5b0:	8e bd       	out	0x2e, r24	; 46
     5b2:	0d b4       	in	r0, 0x2d	; 45
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <DataflashManager_WriteBlocks+0x134>
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	34 df       	rcall	.-408    	; 0x42a <Dataflash_SendAddressBytes>
     5c2:	71 2c       	mov	r7, r1
     5c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5c8:	8e bd       	out	0x2e, r24	; 46
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <DataflashManager_WriteBlocks+0x14c>
     5d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5d4:	8e bd       	out	0x2e, r24	; 46
     5d6:	0d b4       	in	r0, 0x2d	; 45
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <DataflashManager_WriteBlocks+0x158>
     5dc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5e0:	8e bd       	out	0x2e, r24	; 46
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <DataflashManager_WriteBlocks+0x164>
     5e8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5ec:	8e bd       	out	0x2e, r24	; 46
     5ee:	0d b4       	in	r0, 0x2d	; 45
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <DataflashManager_WriteBlocks+0x170>
     5f4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5f8:	8e bd       	out	0x2e, r24	; 46
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <DataflashManager_WriteBlocks+0x17c>
     600:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     604:	8e bd       	out	0x2e, r24	; 46
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <DataflashManager_WriteBlocks+0x188>
     60c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     610:	8e bd       	out	0x2e, r24	; 46
     612:	0d b4       	in	r0, 0x2d	; 45
     614:	07 fe       	sbrs	r0, 7
     616:	fd cf       	rjmp	.-6      	; 0x612 <DataflashManager_WriteBlocks+0x194>
     618:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     61c:	8e bd       	out	0x2e, r24	; 46
     61e:	0d b4       	in	r0, 0x2d	; 45
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <DataflashManager_WriteBlocks+0x1a0>
     624:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     628:	8e bd       	out	0x2e, r24	; 46
     62a:	0d b4       	in	r0, 0x2d	; 45
     62c:	07 fe       	sbrs	r0, 7
     62e:	fd cf       	rjmp	.-6      	; 0x62a <DataflashManager_WriteBlocks+0x1ac>
     630:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     634:	8e bd       	out	0x2e, r24	; 46
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <DataflashManager_WriteBlocks+0x1b8>
     63c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     640:	8e bd       	out	0x2e, r24	; 46
     642:	0d b4       	in	r0, 0x2d	; 45
     644:	07 fe       	sbrs	r0, 7
     646:	fd cf       	rjmp	.-6      	; 0x642 <DataflashManager_WriteBlocks+0x1c4>
     648:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     64c:	8e bd       	out	0x2e, r24	; 46
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_WriteBlocks+0x1d0>
     654:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     658:	8e bd       	out	0x2e, r24	; 46
     65a:	0d b4       	in	r0, 0x2d	; 45
     65c:	07 fe       	sbrs	r0, 7
     65e:	fd cf       	rjmp	.-6      	; 0x65a <DataflashManager_WriteBlocks+0x1dc>
     660:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     664:	8e bd       	out	0x2e, r24	; 46
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_WriteBlocks+0x1e8>
     66c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     670:	8e bd       	out	0x2e, r24	; 46
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <DataflashManager_WriteBlocks+0x1f4>
     678:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     67c:	8e bd       	out	0x2e, r24	; 46
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_WriteBlocks+0x200>
     684:	73 94       	inc	r7
     686:	f4 01       	movw	r30, r8
     688:	86 a9       	ldd	r24, Z+54	; 0x36
     68a:	81 11       	cpse	r24, r1
     68c:	24 c0       	rjmp	.+72     	; 0x6d6 <DataflashManager_WriteBlocks+0x258>
     68e:	5a 94       	dec	r5
     690:	51 10       	cpse	r5, r1
     692:	4f cf       	rjmp	.-354    	; 0x532 <DataflashManager_WriteBlocks+0xb4>
     694:	01 50       	subi	r16, 0x01	; 1
     696:	11 09       	sbc	r17, r1
     698:	f0 e2       	ldi	r31, 0x20	; 32
     69a:	ef 1a       	sub	r14, r31
     69c:	f1 08       	sbc	r15, r1
     69e:	40 cf       	rjmp	.-384    	; 0x520 <DataflashManager_WriteBlocks+0xa2>
     6a0:	b6 de       	rcall	.-660    	; 0x40e <Dataflash_WaitWhileBusy>
     6a2:	61 10       	cpse	r6, r1
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DataflashManager_WriteBlocks+0x22c>
     6a6:	83 e8       	ldi	r24, 0x83	; 131
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <DataflashManager_WriteBlocks+0x22e>
     6aa:	86 e8       	ldi	r24, 0x86	; 134
     6ac:	8e bd       	out	0x2e, r24	; 46
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_WriteBlocks+0x230>
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	ce 01       	movw	r24, r28
     6ba:	b7 de       	rcall	.-658    	; 0x42a <Dataflash_SendAddressBytes>
     6bc:	a8 de       	rcall	.-688    	; 0x40e <Dataflash_WaitWhileBusy>
     6be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6c2:	85 fd       	sbrc	r24, 5
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <DataflashManager_WriteBlocks+0x252>
     6c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6ca:	8b 77       	andi	r24, 0x7B	; 123
     6cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6d0:	8e b1       	in	r24, 0x0e	; 14
     6d2:	83 60       	ori	r24, 0x03	; 3
     6d4:	8e b9       	out	0x0e, r24	; 14
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	08 95       	ret

000006f8 <DataflashManager_ReadBlocks>:
     6f8:	8f 92       	push	r8
     6fa:	9f 92       	push	r9
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	6c 01       	movw	r12, r24
     712:	79 01       	movw	r14, r18
     714:	4a 01       	movw	r8, r20
     716:	5b 01       	movw	r10, r22
     718:	29 e0       	ldi	r18, 0x09	; 9
     71a:	88 0c       	add	r8, r8
     71c:	99 1c       	adc	r9, r9
     71e:	aa 1c       	adc	r10, r10
     720:	bb 1c       	adc	r11, r11
     722:	2a 95       	dec	r18
     724:	d1 f7       	brne	.-12     	; 0x71a <DataflashManager_ReadBlocks+0x22>
     726:	3a e0       	ldi	r19, 0x0A	; 10
     728:	b6 94       	lsr	r11
     72a:	a7 94       	ror	r10
     72c:	97 94       	ror	r9
     72e:	87 94       	ror	r8
     730:	3a 95       	dec	r19
     732:	d1 f7       	brne	.-12     	; 0x728 <DataflashManager_ReadBlocks+0x30>
     734:	84 01       	movw	r16, r8
     736:	ea 01       	movw	r28, r20
     738:	dc 2f       	mov	r29, r28
     73a:	cc 27       	eor	r28, r28
     73c:	dd 0f       	add	r29, r29
     73e:	cc 27       	eor	r28, r28
     740:	d2 70       	andi	r29, 0x02	; 2
     742:	c4 01       	movw	r24, r8
     744:	8b de       	rcall	.-746    	; 0x45c <Dataflash_SelectChipFromPage>
     746:	82 ed       	ldi	r24, 0xD2	; 210
     748:	8e bd       	out	0x2e, r24	; 46
     74a:	0d b4       	in	r0, 0x2d	; 45
     74c:	07 fe       	sbrs	r0, 7
     74e:	fd cf       	rjmp	.-6      	; 0x74a <DataflashManager_ReadBlocks+0x52>
     750:	be 01       	movw	r22, r28
     752:	c4 01       	movw	r24, r8
     754:	6a de       	rcall	.-812    	; 0x42a <Dataflash_SendAddressBytes>
     756:	1e bc       	out	0x2e, r1	; 46
     758:	0d b4       	in	r0, 0x2d	; 45
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <DataflashManager_ReadBlocks+0x60>
     75e:	1e bc       	out	0x2e, r1	; 46
     760:	0d b4       	in	r0, 0x2d	; 45
     762:	07 fe       	sbrs	r0, 7
     764:	fd cf       	rjmp	.-6      	; 0x760 <DataflashManager_ReadBlocks+0x68>
     766:	1e bc       	out	0x2e, r1	; 46
     768:	0d b4       	in	r0, 0x2d	; 45
     76a:	07 fe       	sbrs	r0, 7
     76c:	fd cf       	rjmp	.-6      	; 0x768 <DataflashManager_ReadBlocks+0x70>
     76e:	1e bc       	out	0x2e, r1	; 46
     770:	0d b4       	in	r0, 0x2d	; 45
     772:	07 fe       	sbrs	r0, 7
     774:	fd cf       	rjmp	.-6      	; 0x770 <DataflashManager_ReadBlocks+0x78>
     776:	fe d2       	rcall	.+1532   	; 0xd74 <Endpoint_WaitUntilReady>
     778:	81 11       	cpse	r24, r1
     77a:	c1 c0       	rjmp	.+386    	; 0x8fe <DataflashManager_ReadBlocks+0x206>
     77c:	84 e0       	ldi	r24, 0x04	; 4
     77e:	d6 95       	lsr	r29
     780:	c7 95       	ror	r28
     782:	8a 95       	dec	r24
     784:	e1 f7       	brne	.-8      	; 0x77e <DataflashManager_ReadBlocks+0x86>
     786:	92 ed       	ldi	r25, 0xD2	; 210
     788:	b9 2e       	mov	r11, r25
     78a:	e1 14       	cp	r14, r1
     78c:	f1 04       	cpc	r15, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <DataflashManager_ReadBlocks+0x9a>
     790:	aa c0       	rjmp	.+340    	; 0x8e6 <DataflashManager_ReadBlocks+0x1ee>
     792:	d0 e2       	ldi	r29, 0x20	; 32
     794:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     798:	85 ff       	sbrs	r24, 5
     79a:	08 c0       	rjmp	.+16     	; 0x7ac <DataflashManager_ReadBlocks+0xb4>
     79c:	c0 34       	cpi	r28, 0x40	; 64
     79e:	39 f5       	brne	.+78     	; 0x7ee <DataflashManager_ReadBlocks+0xf6>
     7a0:	0f 5f       	subi	r16, 0xFF	; 255
     7a2:	1f 4f       	sbci	r17, 0xFF	; 255
     7a4:	c8 01       	movw	r24, r16
     7a6:	5a de       	rcall	.-844    	; 0x45c <Dataflash_SelectChipFromPage>
     7a8:	be bc       	out	0x2e, r11	; 46
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <DataflashManager_ReadBlocks+0xc6>
     7ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7b0:	8e 77       	andi	r24, 0x7E	; 126
     7b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7b6:	de d2       	rcall	.+1468   	; 0xd74 <Endpoint_WaitUntilReady>
     7b8:	88 23       	and	r24, r24
     7ba:	81 f3       	breq	.-32     	; 0x79c <DataflashManager_ReadBlocks+0xa4>
     7bc:	a0 c0       	rjmp	.+320    	; 0x8fe <DataflashManager_ReadBlocks+0x206>
     7be:	0d b4       	in	r0, 0x2d	; 45
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <DataflashManager_ReadBlocks+0xc6>
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	c8 01       	movw	r24, r16
     7ca:	2f de       	rcall	.-930    	; 0x42a <Dataflash_SendAddressBytes>
     7cc:	1e bc       	out	0x2e, r1	; 46
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_ReadBlocks+0xd6>
     7d4:	1e bc       	out	0x2e, r1	; 46
     7d6:	0d b4       	in	r0, 0x2d	; 45
     7d8:	07 fe       	sbrs	r0, 7
     7da:	fd cf       	rjmp	.-6      	; 0x7d6 <DataflashManager_ReadBlocks+0xde>
     7dc:	1e bc       	out	0x2e, r1	; 46
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_ReadBlocks+0xe6>
     7e4:	1e bc       	out	0x2e, r1	; 46
     7e6:	0d b4       	in	r0, 0x2d	; 45
     7e8:	07 fe       	sbrs	r0, 7
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <DataflashManager_ReadBlocks+0xee>
     7ec:	c0 e0       	ldi	r28, 0x00	; 0
     7ee:	1e bc       	out	0x2e, r1	; 46
     7f0:	0d b4       	in	r0, 0x2d	; 45
     7f2:	07 fe       	sbrs	r0, 7
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <DataflashManager_ReadBlocks+0xf8>
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7fc:	1e bc       	out	0x2e, r1	; 46
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_ReadBlocks+0x106>
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     80a:	1e bc       	out	0x2e, r1	; 46
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <DataflashManager_ReadBlocks+0x114>
     812:	8e b5       	in	r24, 0x2e	; 46
     814:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     818:	1e bc       	out	0x2e, r1	; 46
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <DataflashManager_ReadBlocks+0x122>
     820:	8e b5       	in	r24, 0x2e	; 46
     822:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     826:	1e bc       	out	0x2e, r1	; 46
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <DataflashManager_ReadBlocks+0x130>
     82e:	8e b5       	in	r24, 0x2e	; 46
     830:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     834:	1e bc       	out	0x2e, r1	; 46
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
     83a:	fd cf       	rjmp	.-6      	; 0x836 <DataflashManager_ReadBlocks+0x13e>
     83c:	8e b5       	in	r24, 0x2e	; 46
     83e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     842:	1e bc       	out	0x2e, r1	; 46
     844:	0d b4       	in	r0, 0x2d	; 45
     846:	07 fe       	sbrs	r0, 7
     848:	fd cf       	rjmp	.-6      	; 0x844 <DataflashManager_ReadBlocks+0x14c>
     84a:	8e b5       	in	r24, 0x2e	; 46
     84c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     850:	1e bc       	out	0x2e, r1	; 46
     852:	0d b4       	in	r0, 0x2d	; 45
     854:	07 fe       	sbrs	r0, 7
     856:	fd cf       	rjmp	.-6      	; 0x852 <DataflashManager_ReadBlocks+0x15a>
     858:	8e b5       	in	r24, 0x2e	; 46
     85a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     85e:	1e bc       	out	0x2e, r1	; 46
     860:	0d b4       	in	r0, 0x2d	; 45
     862:	07 fe       	sbrs	r0, 7
     864:	fd cf       	rjmp	.-6      	; 0x860 <DataflashManager_ReadBlocks+0x168>
     866:	8e b5       	in	r24, 0x2e	; 46
     868:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     86c:	1e bc       	out	0x2e, r1	; 46
     86e:	0d b4       	in	r0, 0x2d	; 45
     870:	07 fe       	sbrs	r0, 7
     872:	fd cf       	rjmp	.-6      	; 0x86e <DataflashManager_ReadBlocks+0x176>
     874:	8e b5       	in	r24, 0x2e	; 46
     876:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     87a:	1e bc       	out	0x2e, r1	; 46
     87c:	0d b4       	in	r0, 0x2d	; 45
     87e:	07 fe       	sbrs	r0, 7
     880:	fd cf       	rjmp	.-6      	; 0x87c <DataflashManager_ReadBlocks+0x184>
     882:	8e b5       	in	r24, 0x2e	; 46
     884:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     888:	1e bc       	out	0x2e, r1	; 46
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_ReadBlocks+0x192>
     890:	8e b5       	in	r24, 0x2e	; 46
     892:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     896:	1e bc       	out	0x2e, r1	; 46
     898:	0d b4       	in	r0, 0x2d	; 45
     89a:	07 fe       	sbrs	r0, 7
     89c:	fd cf       	rjmp	.-6      	; 0x898 <DataflashManager_ReadBlocks+0x1a0>
     89e:	8e b5       	in	r24, 0x2e	; 46
     8a0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8a4:	1e bc       	out	0x2e, r1	; 46
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_ReadBlocks+0x1ae>
     8ac:	8e b5       	in	r24, 0x2e	; 46
     8ae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b2:	1e bc       	out	0x2e, r1	; 46
     8b4:	0d b4       	in	r0, 0x2d	; 45
     8b6:	07 fe       	sbrs	r0, 7
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <DataflashManager_ReadBlocks+0x1bc>
     8ba:	8e b5       	in	r24, 0x2e	; 46
     8bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8c0:	1e bc       	out	0x2e, r1	; 46
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <DataflashManager_ReadBlocks+0x1ca>
     8c8:	8e b5       	in	r24, 0x2e	; 46
     8ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8ce:	cf 5f       	subi	r28, 0xFF	; 255
     8d0:	f6 01       	movw	r30, r12
     8d2:	86 a9       	ldd	r24, Z+54	; 0x36
     8d4:	81 11       	cpse	r24, r1
     8d6:	13 c0       	rjmp	.+38     	; 0x8fe <DataflashManager_ReadBlocks+0x206>
     8d8:	d1 50       	subi	r29, 0x01	; 1
     8da:	09 f0       	breq	.+2      	; 0x8de <DataflashManager_ReadBlocks+0x1e6>
     8dc:	5b cf       	rjmp	.-330    	; 0x794 <DataflashManager_ReadBlocks+0x9c>
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	ef 1a       	sub	r14, r31
     8e2:	f1 08       	sbc	r15, r1
     8e4:	52 cf       	rjmp	.-348    	; 0x78a <DataflashManager_ReadBlocks+0x92>
     8e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ea:	85 fd       	sbrc	r24, 5
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <DataflashManager_ReadBlocks+0x200>
     8ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8f2:	8e 77       	andi	r24, 0x7E	; 126
     8f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8f8:	8e b1       	in	r24, 0x0e	; 14
     8fa:	83 60       	ori	r24, 0x03	; 3
     8fc:	8e b9       	out	0x0e, r24	; 14
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	08 95       	ret

00000918 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     918:	8e b1       	in	r24, 0x0e	; 14
     91a:	8c 7f       	andi	r24, 0xFC	; 252
     91c:	82 60       	ori	r24, 0x02	; 2
     91e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     920:	87 ed       	ldi	r24, 0xD7	; 215
     922:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     924:	0d b4       	in	r0, 0x2d	; 45
     926:	07 fe       	sbrs	r0, 7
     928:	fd cf       	rjmp	.-6      	; 0x924 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     92a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     92c:	0d b4       	in	r0, 0x2d	; 45
     92e:	07 fe       	sbrs	r0, 7
     930:	fd cf       	rjmp	.-6      	; 0x92c <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     932:	0e b4       	in	r0, 0x2e	; 46
     934:	01 fc       	sbrc	r0, 1
     936:	07 c0       	rjmp	.+14     	; 0x946 <DataflashManager_ResetDataflashProtections+0x2e>
     938:	8e b1       	in	r24, 0x0e	; 14
     93a:	8c 7f       	andi	r24, 0xFC	; 252
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     940:	87 ed       	ldi	r24, 0xD7	; 215
     942:	8e bd       	out	0x2e, r24	; 46
     944:	16 c0       	rjmp	.+44     	; 0x972 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     946:	59 dd       	rcall	.-1358   	; 0x3fa <Dataflash_ToggleSelectedChipCS>
     948:	8d e3       	ldi	r24, 0x3D	; 61
     94a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     94c:	0d b4       	in	r0, 0x2d	; 45
     94e:	07 fe       	sbrs	r0, 7
     950:	fd cf       	rjmp	.-6      	; 0x94c <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     952:	8a e2       	ldi	r24, 0x2A	; 42
     954:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <DataflashManager_ResetDataflashProtections+0x3e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95c:	8f e7       	ldi	r24, 0x7F	; 127
     95e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <DataflashManager_ResetDataflashProtections+0x48>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     966:	8a e9       	ldi	r24, 0x9A	; 154
     968:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     96a:	0d b4       	in	r0, 0x2d	; 45
     96c:	07 fe       	sbrs	r0, 7
     96e:	fd cf       	rjmp	.-6      	; 0x96a <DataflashManager_ResetDataflashProtections+0x52>
     970:	e3 cf       	rjmp	.-58     	; 0x938 <DataflashManager_ResetDataflashProtections+0x20>
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
     976:	fd cf       	rjmp	.-6      	; 0x972 <DataflashManager_ResetDataflashProtections+0x5a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     978:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     97a:	0d b4       	in	r0, 0x2d	; 45
     97c:	07 fe       	sbrs	r0, 7
     97e:	fd cf       	rjmp	.-6      	; 0x97a <DataflashManager_ResetDataflashProtections+0x62>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     980:	0e b4       	in	r0, 0x2e	; 46
     982:	01 fc       	sbrc	r0, 1
     984:	04 c0       	rjmp	.+8      	; 0x98e <DataflashManager_ResetDataflashProtections+0x76>
     986:	8e b1       	in	r24, 0x0e	; 14
     988:	83 60       	ori	r24, 0x03	; 3
     98a:	8e b9       	out	0x0e, r24	; 14
	{
		Dataflash_ToggleSelectedChipCS();
     98c:	08 95       	ret
     98e:	35 dd       	rcall	.-1430   	; 0x3fa <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     990:	8d e3       	ldi	r24, 0x3D	; 61
     992:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     994:	0d b4       	in	r0, 0x2d	; 45
     996:	07 fe       	sbrs	r0, 7
     998:	fd cf       	rjmp	.-6      	; 0x994 <DataflashManager_ResetDataflashProtections+0x7c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     99a:	8a e2       	ldi	r24, 0x2A	; 42
     99c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     99e:	0d b4       	in	r0, 0x2d	; 45
     9a0:	07 fe       	sbrs	r0, 7
     9a2:	fd cf       	rjmp	.-6      	; 0x99e <DataflashManager_ResetDataflashProtections+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9a4:	8f e7       	ldi	r24, 0x7F	; 127
     9a6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9a8:	0d b4       	in	r0, 0x2d	; 45
     9aa:	07 fe       	sbrs	r0, 7
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <DataflashManager_ResetDataflashProtections+0x90>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ae:	8a e9       	ldi	r24, 0x9A	; 154
     9b0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9b2:	0d b4       	in	r0, 0x2d	; 45
     9b4:	07 fe       	sbrs	r0, 7
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <DataflashManager_ResetDataflashProtections+0x9a>
     9b8:	e6 cf       	rjmp	.-52     	; 0x986 <DataflashManager_ResetDataflashProtections+0x6e>

000009ba <DataflashManager_CheckDataflashOperation>:
     9ba:	8e b1       	in	r24, 0x0e	; 14
     9bc:	8c 7f       	andi	r24, 0xFC	; 252
     9be:	82 60       	ori	r24, 0x02	; 2
     9c0:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c2:	8f e9       	ldi	r24, 0x9F	; 159
     9c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c6:	0d b4       	in	r0, 0x2d	; 45
     9c8:	07 fe       	sbrs	r0, 7
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9ce:	0d b4       	in	r0, 0x2d	; 45
     9d0:	07 fe       	sbrs	r0, 7
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     9d4:	9e b5       	in	r25, 0x2e	; 46
     9d6:	8e b1       	in	r24, 0x0e	; 14
     9d8:	83 60       	ori	r24, 0x03	; 3
     9da:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     9dc:	9f 31       	cpi	r25, 0x1F	; 31
     9de:	a1 f4       	brne	.+40     	; 0xa08 <DataflashManager_CheckDataflashOperation+0x4e>
     9e0:	8e b1       	in	r24, 0x0e	; 14
     9e2:	8c 7f       	andi	r24, 0xFC	; 252
     9e4:	81 60       	ori	r24, 0x01	; 1
     9e6:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9e8:	8f e9       	ldi	r24, 0x9F	; 159
     9ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ec:	0d b4       	in	r0, 0x2d	; 45
     9ee:	07 fe       	sbrs	r0, 7
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9f2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9f4:	0d b4       	in	r0, 0x2d	; 45
     9f6:	07 fe       	sbrs	r0, 7
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     9fa:	9e b5       	in	r25, 0x2e	; 46
     9fc:	8e b1       	in	r24, 0x0e	; 14
     9fe:	83 60       	ori	r24, 0x03	; 3
     a00:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	9f 31       	cpi	r25, 0x1F	; 31
     a06:	09 f0       	breq	.+2      	; 0xa0a <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     a08:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     a0a:	08 95       	ret

00000a0c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
     a16:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a18:	4e 8d       	ldd	r20, Y+30	; 0x1e
     a1a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a1c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a1e:	7b 8d       	ldd	r23, Y+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a20:	09 a1       	ldd	r16, Y+33	; 0x21
     a22:	18 a1       	ldd	r17, Y+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a24:	41 15       	cp	r20, r1
     a26:	20 e8       	ldi	r18, 0x80	; 128
     a28:	52 07       	cpc	r21, r18
     a2a:	61 05       	cpc	r22, r1
     a2c:	71 05       	cpc	r23, r1
     a2e:	68 f0       	brcs	.+26     	; 0xa4a <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a30:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     a34:	80 7f       	andi	r24, 0xF0	; 240
     a36:	85 60       	ori	r24, 0x05	; 5
     a38:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     a3c:	81 e2       	ldi	r24, 0x21	; 33
     a3e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SenseData+0xc>
     a42:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	21 c0       	rjmp	.+66     	; 0xa8c <SCSI_Command_ReadWrite_10+0x80>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a4a:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a4c:	88 23       	and	r24, r24
     a4e:	19 f0       	breq	.+6      	; 0xa56 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a50:	ce 01       	movw	r24, r28
     a52:	52 de       	rcall	.-860    	; 0x6f8 <DataflashManager_ReadBlocks>
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <SCSI_Command_ReadWrite_10+0x4e>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a56:	ce 01       	movw	r24, r28
     a58:	12 dd       	rcall	.-1500   	; 0x47e <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a5a:	c8 01       	movw	r24, r16
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	29 e0       	ldi	r18, 0x09	; 9
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	aa 1f       	adc	r26, r26
     a68:	bb 1f       	adc	r27, r27
     a6a:	2a 95       	dec	r18
     a6c:	d1 f7       	brne	.-12     	; 0xa62 <SCSI_Command_ReadWrite_10+0x56>
     a6e:	4a 89       	ldd	r20, Y+18	; 0x12
     a70:	5b 89       	ldd	r21, Y+19	; 0x13
     a72:	6c 89       	ldd	r22, Y+20	; 0x14
     a74:	7d 89       	ldd	r23, Y+21	; 0x15
     a76:	8a 01       	movw	r16, r20
     a78:	9b 01       	movw	r18, r22
     a7a:	08 1b       	sub	r16, r24
     a7c:	19 0b       	sbc	r17, r25
     a7e:	2a 0b       	sbc	r18, r26
     a80:	3b 0b       	sbc	r19, r27
     a82:	0a 8b       	std	Y+18, r16	; 0x12
     a84:	1b 8b       	std	Y+19, r17	; 0x13
     a86:	2c 8b       	std	Y+20, r18	; 0x14
     a88:	3d 8b       	std	Y+21, r19	; 0x15

	return true;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	28 97       	sbiw	r28, 0x08	; 8
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     ab8:	fc 01       	movw	r30, r24
     aba:	81 8d       	ldd	r24, Z+25	; 0x19
     abc:	8d 31       	cpi	r24, 0x1D	; 29
     abe:	09 f4       	brne	.+2      	; 0xac2 <SCSI_DecodeSCSICommand+0x2c>
     ac0:	bc c0       	rjmp	.+376    	; 0xc3a <SCSI_DecodeSCSICommand+0x1a4>
     ac2:	20 f5       	brcc	.+72     	; 0xb0c <SCSI_DecodeSCSICommand+0x76>
     ac4:	83 30       	cpi	r24, 0x03	; 3
     ac6:	09 f4       	brne	.+2      	; 0xaca <SCSI_DecodeSCSICommand+0x34>
     ac8:	92 c0       	rjmp	.+292    	; 0xbee <SCSI_DecodeSCSICommand+0x158>
     aca:	20 f4       	brcc	.+8      	; 0xad4 <SCSI_DecodeSCSICommand+0x3e>
     acc:	88 23       	and	r24, r24
     ace:	09 f4       	brne	.+2      	; 0xad2 <SCSI_DecodeSCSICommand+0x3c>
     ad0:	d3 c0       	rjmp	.+422    	; 0xc78 <SCSI_DecodeSCSICommand+0x1e2>
     ad2:	d8 c0       	rjmp	.+432    	; 0xc84 <SCSI_DecodeSCSICommand+0x1ee>
     ad4:	82 31       	cpi	r24, 0x12	; 18
     ad6:	09 f4       	brne	.+2      	; 0xada <SCSI_DecodeSCSICommand+0x44>
     ad8:	56 c0       	rjmp	.+172    	; 0xb86 <SCSI_DecodeSCSICommand+0xf0>
     ada:	8a 31       	cpi	r24, 0x1A	; 26
     adc:	09 f0       	breq	.+2      	; 0xae0 <SCSI_DecodeSCSICommand+0x4a>
     ade:	d2 c0       	rjmp	.+420    	; 0xc84 <SCSI_DecodeSCSICommand+0x1ee>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ae0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ae4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ae8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     aec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     af4:	8e 77       	andi	r24, 0x7E	; 126
     af6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     afa:	f8 01       	movw	r30, r16
     afc:	82 89       	ldd	r24, Z+18	; 0x12
     afe:	93 89       	ldd	r25, Z+19	; 0x13
     b00:	a4 89       	ldd	r26, Z+20	; 0x14
     b02:	b5 89       	ldd	r27, Z+21	; 0x15
     b04:	04 97       	sbiw	r24, 0x04	; 4
     b06:	a1 09       	sbc	r26, r1
     b08:	b1 09       	sbc	r27, r1
     b0a:	b1 c0       	rjmp	.+354    	; 0xc6e <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     b0c:	88 32       	cpi	r24, 0x28	; 40
     b0e:	09 f4       	brne	.+2      	; 0xb12 <SCSI_DecodeSCSICommand+0x7c>
     b10:	a8 c0       	rjmp	.+336    	; 0xc62 <SCSI_DecodeSCSICommand+0x1cc>
     b12:	90 f5       	brcc	.+100    	; 0xb78 <SCSI_DecodeSCSICommand+0xe2>
     b14:	8e 31       	cpi	r24, 0x1E	; 30
     b16:	09 f4       	brne	.+2      	; 0xb1a <SCSI_DecodeSCSICommand+0x84>
     b18:	af c0       	rjmp	.+350    	; 0xc78 <SCSI_DecodeSCSICommand+0x1e2>
     b1a:	85 32       	cpi	r24, 0x25	; 37
     b1c:	09 f0       	breq	.+2      	; 0xb20 <SCSI_DecodeSCSICommand+0x8a>
     b1e:	b2 c0       	rjmp	.+356    	; 0xc84 <SCSI_DecodeSCSICommand+0x1ee>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f e7       	ldi	r25, 0x7F	; 127
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	8d 83       	std	Y+5, r24	; 0x05
     b2a:	9e 83       	std	Y+6, r25	; 0x06
     b2c:	af 83       	std	Y+7, r26	; 0x07
     b2e:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	ab 83       	std	Y+3, r26	; 0x03
     b3e:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	ce 01       	movw	r24, r28
     b4a:	05 96       	adiw	r24, 0x05	; 5
     b4c:	3a d3       	rcall	.+1652   	; 0x11c2 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	64 e0       	ldi	r22, 0x04	; 4
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	33 d3       	rcall	.+1638   	; 0x11c2 <Endpoint_Write_Stream_BE>
     b5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b60:	8e 77       	andi	r24, 0x7E	; 126
     b62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b66:	f8 01       	movw	r30, r16
     b68:	82 89       	ldd	r24, Z+18	; 0x12
     b6a:	93 89       	ldd	r25, Z+19	; 0x13
     b6c:	a4 89       	ldd	r26, Z+20	; 0x14
     b6e:	b5 89       	ldd	r27, Z+21	; 0x15
     b70:	08 97       	sbiw	r24, 0x08	; 8
     b72:	a1 09       	sbc	r26, r1
     b74:	b1 09       	sbc	r27, r1
     b76:	7b c0       	rjmp	.+246    	; 0xc6e <SCSI_DecodeSCSICommand+0x1d8>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     b78:	8a 32       	cpi	r24, 0x2A	; 42
     b7a:	09 f4       	brne	.+2      	; 0xb7e <SCSI_DecodeSCSICommand+0xe8>
     b7c:	70 c0       	rjmp	.+224    	; 0xc5e <SCSI_DecodeSCSICommand+0x1c8>
     b7e:	8f 32       	cpi	r24, 0x2F	; 47
     b80:	09 f4       	brne	.+2      	; 0xb84 <SCSI_DecodeSCSICommand+0xee>
     b82:	7a c0       	rjmp	.+244    	; 0xc78 <SCSI_DecodeSCSICommand+0x1e2>
     b84:	7f c0       	rjmp	.+254    	; 0xc84 <SCSI_DecodeSCSICommand+0x1ee>
     b86:	f8 01       	movw	r30, r16
     b88:	e5 8c       	ldd	r14, Z+29	; 0x1d
     b8a:	f4 8c       	ldd	r15, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b8e:	83 70       	andi	r24, 0x03	; 3
     b90:	19 f4       	brne	.+6      	; 0xb98 <SCSI_DecodeSCSICommand+0x102>
     b92:	83 8d       	ldd	r24, Z+27	; 0x1b
     b94:	88 23       	and	r24, r24
     b96:	41 f0       	breq	.+16     	; 0xba8 <SCSI_DecodeSCSICommand+0x112>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b98:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     b9c:	80 7f       	andi	r24, 0xF0	; 240
     b9e:	85 60       	ori	r24, 0x05	; 5
     ba0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     ba4:	84 e2       	ldi	r24, 0x24	; 36
     ba6:	75 c0       	rjmp	.+234    	; 0xc92 <SCSI_DecodeSCSICommand+0x1fc>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     ba8:	67 01       	movw	r12, r14
     baa:	f5 e2       	ldi	r31, 0x25	; 37
     bac:	ef 16       	cp	r14, r31
     bae:	f1 04       	cpc	r15, r1
     bb0:	18 f0       	brcs	.+6      	; 0xbb8 <SCSI_DecodeSCSICommand+0x122>
     bb2:	94 e2       	ldi	r25, 0x24	; 36
     bb4:	c9 2e       	mov	r12, r25
     bb6:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	b6 01       	movw	r22, r12
     bbe:	86 e5       	ldi	r24, 0x56	; 86
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	b6 d2       	rcall	.+1388   	; 0x1130 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	c7 01       	movw	r24, r14
     bca:	8c 19       	sub	r24, r12
     bcc:	9d 09       	sbc	r25, r13
     bce:	71 d2       	rcall	.+1250   	; 0x10b2 <Endpoint_Null_Stream>
     bd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bd4:	8e 77       	andi	r24, 0x7E	; 126
     bd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bda:	f8 01       	movw	r30, r16
     bdc:	82 89       	ldd	r24, Z+18	; 0x12
     bde:	93 89       	ldd	r25, Z+19	; 0x13
     be0:	a4 89       	ldd	r26, Z+20	; 0x14
     be2:	b5 89       	ldd	r27, Z+21	; 0x15
     be4:	8c 19       	sub	r24, r12
     be6:	9d 09       	sbc	r25, r13
     be8:	a1 09       	sbc	r26, r1
     bea:	b1 09       	sbc	r27, r1
     bec:	40 c0       	rjmp	.+128    	; 0xc6e <SCSI_DecodeSCSICommand+0x1d8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     bee:	f8 01       	movw	r30, r16
     bf0:	f5 8c       	ldd	r15, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     bf2:	ef 2c       	mov	r14, r15
     bf4:	f2 e1       	ldi	r31, 0x12	; 18
     bf6:	ff 15       	cp	r31, r15
     bf8:	10 f4       	brcc	.+4      	; 0xbfe <SCSI_DecodeSCSICommand+0x168>
     bfa:	82 e1       	ldi	r24, 0x12	; 18
     bfc:	e8 2e       	mov	r14, r24

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     bfe:	ce 2c       	mov	r12, r14
     c00:	d1 2c       	mov	r13, r1
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	b6 01       	movw	r22, r12
     c08:	84 e4       	ldi	r24, 0x44	; 68
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	91 d2       	rcall	.+1314   	; 0x1130 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c0e:	8f 2d       	mov	r24, r15
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	8c 19       	sub	r24, r12
     c18:	9d 09       	sbc	r25, r13
     c1a:	4b d2       	rcall	.+1174   	; 0x10b2 <Endpoint_Null_Stream>
     c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c20:	8e 77       	andi	r24, 0x7E	; 126
     c22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     c26:	f8 01       	movw	r30, r16
     c28:	82 89       	ldd	r24, Z+18	; 0x12
     c2a:	93 89       	ldd	r25, Z+19	; 0x13
     c2c:	a4 89       	ldd	r26, Z+20	; 0x14
     c2e:	b5 89       	ldd	r27, Z+21	; 0x15
     c30:	8e 19       	sub	r24, r14
     c32:	91 09       	sbc	r25, r1
     c34:	a1 09       	sbc	r26, r1
     c36:	b1 09       	sbc	r27, r1
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c38:	1a c0       	rjmp	.+52     	; 0xc6e <SCSI_DecodeSCSICommand+0x1d8>
     c3a:	f8 01       	movw	r30, r16
     c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
     c3e:	82 ff       	sbrs	r24, 2

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c40:	ab cf       	rjmp	.-170    	; 0xb98 <SCSI_DecodeSCSICommand+0x102>
     c42:	bb de       	rcall	.-650    	; 0x9ba <DataflashManager_CheckDataflashOperation>
     c44:	81 11       	cpse	r24, r1
     c46:	18 c0       	rjmp	.+48     	; 0xc78 <SCSI_DecodeSCSICommand+0x1e2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c48:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     c4c:	80 7f       	andi	r24, 0xF0	; 240
     c4e:	84 60       	ori	r24, 0x04	; 4
     c50:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     c54:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SenseData+0xc>
     c58:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c5c:	28 c0       	rjmp	.+80     	; 0xcae <SCSI_DecodeSCSICommand+0x218>
     c5e:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <SCSI_DecodeSCSICommand+0x1ce>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	c8 01       	movw	r24, r16
     c66:	d2 de       	rcall	.-604    	; 0xa0c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c68:	81 11       	cpse	r24, r1
     c6a:	16 c0       	rjmp	.+44     	; 0xc98 <SCSI_DecodeSCSICommand+0x202>
     c6c:	20 c0       	rjmp	.+64     	; 0xcae <SCSI_DecodeSCSICommand+0x218>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c6e:	82 8b       	std	Z+18, r24	; 0x12
     c70:	93 8b       	std	Z+19, r25	; 0x13
     c72:	a4 8b       	std	Z+20, r26	; 0x14
     c74:	b5 8b       	std	Z+21, r27	; 0x15
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <SCSI_DecodeSCSICommand+0x202>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c78:	f8 01       	movw	r30, r16
     c7a:	12 8a       	std	Z+18, r1	; 0x12
     c7c:	13 8a       	std	Z+19, r1	; 0x13
     c7e:	14 8a       	std	Z+20, r1	; 0x14
     c80:	15 8a       	std	Z+21, r1	; 0x15
			break;
     c82:	0a c0       	rjmp	.+20     	; 0xc98 <SCSI_DecodeSCSICommand+0x202>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c84:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     c88:	80 7f       	andi	r24, 0xF0	; 240
     c8a:	85 60       	ori	r24, 0x05	; 5
     c8c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <SenseData+0xc>
     c96:	e0 cf       	rjmp	.-64     	; 0xc58 <SCSI_DecodeSCSICommand+0x1c2>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c98:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <SenseData+0x2>
     c9c:	80 7f       	andi	r24, 0xF0	; 240
     c9e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0x2>
     ca2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <SenseData+0xc>
     ca6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <SCSI_DecodeSCSICommand+0x21a>
	}

	return false;
     cae:	80 e0       	ldi	r24, 0x00	; 0
}
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	08 95       	ret

00000cce <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     cce:	98 2f       	mov	r25, r24
     cd0:	97 30       	cpi	r25, 0x07	; 7
     cd2:	68 f5       	brcc	.+90     	; 0xd2e <Endpoint_ConfigureEndpoint_Prv+0x60>
     cd4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     cd8:	98 17       	cp	r25, r24
     cda:	39 f0       	breq	.+14     	; 0xcea <Endpoint_ConfigureEndpoint_Prv+0x1c>
     cdc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     ce0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     ce4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <Endpoint_ConfigureEndpoint_Prv+0x22>
     cea:	24 2f       	mov	r18, r20
     cec:	76 2f       	mov	r23, r22
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	21 fd       	sbrc	r18, 1
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	ec cf       	rjmp	.-40     	; 0xcd0 <Endpoint_ConfigureEndpoint_Prv+0x2>
     cf8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     cfc:	3e 7f       	andi	r19, 0xFE	; 254
     cfe:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d02:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     d06:	3d 7f       	andi	r19, 0xFD	; 253
     d08:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     d0c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d10:	31 60       	ori	r19, 0x01	; 1
     d12:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     d16:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     d1a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     d1e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     d22:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     d26:	27 fd       	sbrc	r18, 7
     d28:	e5 cf       	rjmp	.-54     	; 0xcf4 <Endpoint_ConfigureEndpoint_Prv+0x26>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	08 95       	ret
     d2e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	08 95       	ret

00000d36 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d36:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
     d3a:	87 ff       	sbrs	r24, 7
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     d42:	82 fd       	sbrc	r24, 2
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d46:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
     d4a:	81 11       	cpse	r24, r1
     d4c:	f8 cf       	rjmp	.-16     	; 0xd3e <Endpoint_ClearStatusStage+0x8>
     d4e:	11 c0       	rjmp	.+34     	; 0xd72 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d54:	8b 77       	andi	r24, 0x7B	; 123
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d58:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
     d5c:	88 23       	and	r24, r24
     d5e:	49 f0       	breq	.+18     	; 0xd72 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d64:	80 ff       	sbrs	r24, 0
     d66:	f8 cf       	rjmp	.-16     	; 0xd58 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d6c:	8e 77       	andi	r24, 0x7E	; 126
     d6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d72:	08 95       	ret

00000d74 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d74:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     d78:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     d7c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d7e:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     d82:	84 2f       	mov	r24, r20
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	40 ff       	sbrs	r20, 0
     d88:	23 c0       	rjmp	.+70     	; 0xdd0 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d8e:	80 fd       	sbrc	r24, 0
     d90:	1d c0       	rjmp	.+58     	; 0xdcc <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d92:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d96:	88 23       	and	r24, r24
     d98:	99 f0       	breq	.+38     	; 0xdc0 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d9a:	85 30       	cpi	r24, 0x05	; 5
     d9c:	99 f0       	breq	.+38     	; 0xdc4 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d9e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     da2:	85 fd       	sbrc	r24, 5
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <Endpoint_WaitUntilReady+0x54>
     da6:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     daa:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     dae:	24 17       	cp	r18, r20
     db0:	35 07       	cpc	r19, r21
     db2:	29 f3       	breq	.-54     	; 0xd7e <Endpoint_WaitUntilReady+0xa>
     db4:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     db6:	11 f0       	breq	.+4      	; 0xdbc <Endpoint_WaitUntilReady+0x48>
     db8:	9a 01       	movw	r18, r20
     dba:	e1 cf       	rjmp	.-62     	; 0xd7e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dd0:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     dd4:	42 ff       	sbrs	r20, 2
     dd6:	dd cf       	rjmp	.-70     	; 0xd92 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     dd8:	08 95       	ret

00000dda <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     de2:	49 d0       	rcall	.+146    	; 0xe76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     de4:	50 d0       	rcall	.+160    	; 0xe86 <USB_INT_ClearAllInterrupts>
     de6:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     de8:	d0 e0       	ldi	r29, 0x00	; 0
     dea:	88 81       	ld	r24, Y
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	88 83       	st	Y, r24
     df0:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     df2:	80 68       	ori	r24, 0x80	; 128
     df4:	88 83       	st	Y, r24
     df6:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	88 83       	st	Y, r24
     dfc:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 68       	ori	r24, 0x80	; 128
     e04:	80 83       	st	Z, r24
     e06:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e08:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e0c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     e10:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e14:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     e18:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 81       	ld	r24, Z
     e20:	8b 7f       	andi	r24, 0xFB	; 251
     e22:	80 83       	st	Z, r24
     e24:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	88 83       	st	Y, r24
     e2a:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	4e df       	rcall	.-356    	; 0xcce <Endpoint_ConfigureEndpoint_Prv>
     e32:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8e 7f       	andi	r24, 0xFE	; 254
     e3a:	80 83       	st	Z, r24
     e3c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	80 83       	st	Z, r24
     e46:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	80 83       	st	Z, r24
     e4c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e4e:	80 81       	ld	r24, Z
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	80 83       	st	Z, r24
     e54:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	88 83       	st	Y, r24
     e5a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <USB_Init>:
     e64:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <USB_IsInitialized>

	USB_ResetInterface();
     e74:	b2 cf       	rjmp	.-156    	; 0xdda <USB_ResetInterface>

00000e76 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e76:	e8 ed       	ldi	r30, 0xD8	; 216
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8c 7f       	andi	r24, 0xFC	; 252
     e7e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e80:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e84:	08 95       	ret

00000e86 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e86:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e8a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e8e:	08 95       	ret

00000e90 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	0b b6       	in	r0, 0x3b	; 59
     e9c:	0f 92       	push	r0
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     eb6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     eba:	82 ff       	sbrs	r24, 2
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ebe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ec2:	82 ff       	sbrs	r24, 2
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ec6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     eca:	8b 7f       	andi	r24, 0xFB	; 251
     ecc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ed0:	0b da       	rcall	.-3050   	; 0x2e8 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ed2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	1d c0       	rjmp	.+58     	; 0xf14 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     eda:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ede:	80 ff       	sbrs	r24, 0
     ee0:	19 c0       	rjmp	.+50     	; 0xf14 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ee2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     eec:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	0c c0       	rjmp	.+24     	; 0xf0c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ef8:	8e e0       	ldi	r24, 0x0E	; 14
     efa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     efc:	09 b4       	in	r0, 0x29	; 41
     efe:	00 fe       	sbrs	r0, 0
     f00:	fd cf       	rjmp	.-6      	; 0xefc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     f08:	bd d9       	rcall	.-3206   	; 0x284 <EVENT_USB_Device_Connect>
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f0c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     f0e:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     f12:	ba d9       	rcall	.-3212   	; 0x288 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f18:	80 ff       	sbrs	r24, 0
     f1a:	18 c0       	rjmp	.+48     	; 0xf4c <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f20:	80 ff       	sbrs	r24, 0
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     f38:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f42:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f44:	85 e0       	ldi	r24, 0x05	; 5
     f46:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     f4a:	14 d4       	rcall	.+2088   	; 0x1774 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f4c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f50:	84 ff       	sbrs	r24, 4
     f52:	2d c0       	rjmp	.+90     	; 0xfae <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f58:	84 ff       	sbrs	r24, 4
     f5a:	29 c0       	rjmp	.+82     	; 0xfae <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f60:	8e e0       	ldi	r24, 0x0E	; 14
     f62:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f64:	09 b4       	in	r0, 0x29	; 41
     f66:	00 fe       	sbrs	r0, 0
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f7e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f88:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f92:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <USB_Device_ConfigurationNumber>
     f96:	81 11       	cpse	r24, r1
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f9a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f9e:	87 fd       	sbrc	r24, 7
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <__vector_10+0x116>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <__vector_10+0x118>
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     fac:	e3 d3       	rcall	.+1990   	; 0x1774 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fb2:	83 ff       	sbrs	r24, 3
     fb4:	27 c0       	rjmp	.+78     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fb6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fba:	83 ff       	sbrs	r24, 3
     fbc:	23 c0       	rjmp	.+70     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     fbe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     fce:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fd2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fdc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fe6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ff0:	42 e0       	ldi	r20, 0x02	; 2
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ff6:	6b de       	rcall	.-810    	; 0xcce <Endpoint_ConfigureEndpoint_Prv>
     ff8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1002:	b8 d3       	rcall	.+1904   	; 0x1774 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1004:	ff 91       	pop	r31
    1006:	ef 91       	pop	r30
    1008:	bf 91       	pop	r27
    100a:	af 91       	pop	r26
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	7f 91       	pop	r23
    1012:	6f 91       	pop	r22
    1014:	5f 91       	pop	r21
    1016:	4f 91       	pop	r20
    1018:	3f 91       	pop	r19
    101a:	2f 91       	pop	r18
    101c:	0f 90       	pop	r0
    101e:	0b be       	out	0x3b, r0	; 59
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	0b b6       	in	r0, 0x3b	; 59
    1036:	0f 92       	push	r0
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    105a:	c9 ee       	ldi	r28, 0xE9	; 233
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	88 81       	ld	r24, Y
    1060:	87 70       	andi	r24, 0x07	; 7
    1062:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1064:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1066:	00 ef       	ldi	r16, 0xF0	; 240
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	f8 01       	movw	r30, r16
    106c:	80 81       	ld	r24, Z
    106e:	87 7f       	andi	r24, 0xF7	; 247
    1070:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1072:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1074:	2c d2       	rcall	.+1112   	; 0x14ce <USB_Device_ProcessControlRequest>
    1076:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1078:	f8 01       	movw	r30, r16
    107a:	80 81       	ld	r24, Z
    107c:	88 60       	ori	r24, 0x08	; 8
    107e:	80 83       	st	Z, r24
    1080:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	0f 90       	pop	r0
    10a6:	0b be       	out	0x3b, r0	; 59
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ec 01       	movw	r28, r24
    10c0:	8b 01       	movw	r16, r22
    10c2:	58 de       	rcall	.-848    	; 0xd74 <Endpoint_WaitUntilReady>
    10c4:	81 11       	cpse	r24, r1
    10c6:	2d c0       	rjmp	.+90     	; 0x1122 <Endpoint_Null_Stream+0x70>
    10c8:	01 15       	cp	r16, r1
    10ca:	11 05       	cpc	r17, r1
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <Endpoint_Null_Stream+0x26>
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	c8 1b       	sub	r28, r24
    10d6:	d9 0b       	sbc	r29, r25
    10d8:	e1 2c       	mov	r14, r1
    10da:	f1 2c       	mov	r15, r1
    10dc:	20 97       	sbiw	r28, 0x00	; 0
    10de:	01 f1       	breq	.+64     	; 0x1120 <Endpoint_Null_Stream+0x6e>
    10e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10e4:	85 fd       	sbrc	r24, 5
    10e6:	15 c0       	rjmp	.+42     	; 0x1112 <Endpoint_Null_Stream+0x60>
    10e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ec:	8e 77       	andi	r24, 0x7E	; 126
    10ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f2:	01 15       	cp	r16, r1
    10f4:	11 05       	cpc	r17, r1
    10f6:	49 f0       	breq	.+18     	; 0x110a <Endpoint_Null_Stream+0x58>
    10f8:	f8 01       	movw	r30, r16
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	e8 0e       	add	r14, r24
    1100:	f9 1e       	adc	r15, r25
    1102:	f1 82       	std	Z+1, r15	; 0x01
    1104:	e0 82       	st	Z, r14
    1106:	85 e0       	ldi	r24, 0x05	; 5
    1108:	0c c0       	rjmp	.+24     	; 0x1122 <Endpoint_Null_Stream+0x70>
    110a:	34 de       	rcall	.-920    	; 0xd74 <Endpoint_WaitUntilReady>
    110c:	88 23       	and	r24, r24
    110e:	31 f3       	breq	.-52     	; 0x10dc <Endpoint_Null_Stream+0x2a>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <Endpoint_Null_Stream+0x70>
    1112:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1116:	21 97       	sbiw	r28, 0x01	; 1
    1118:	ff ef       	ldi	r31, 0xFF	; 255
    111a:	ef 1a       	sub	r14, r31
    111c:	ff 0a       	sbc	r15, r31
    111e:	de cf       	rjmp	.-68     	; 0x10dc <Endpoint_Null_Stream+0x2a>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <Endpoint_Write_Stream_LE>:
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
    1142:	8b 01       	movw	r16, r22
    1144:	7a 01       	movw	r14, r20
    1146:	16 de       	rcall	.-980    	; 0xd74 <Endpoint_WaitUntilReady>
    1148:	81 11       	cpse	r24, r1
    114a:	32 c0       	rjmp	.+100    	; 0x11b0 <Endpoint_Write_Stream_LE+0x80>
    114c:	e1 14       	cp	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	39 f0       	breq	.+14     	; 0x1160 <Endpoint_Write_Stream_LE+0x30>
    1152:	f7 01       	movw	r30, r14
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	08 1b       	sub	r16, r24
    115a:	19 0b       	sbc	r17, r25
    115c:	c8 0f       	add	r28, r24
    115e:	d9 1f       	adc	r29, r25
    1160:	c1 2c       	mov	r12, r1
    1162:	d1 2c       	mov	r13, r1
    1164:	01 15       	cp	r16, r1
    1166:	11 05       	cpc	r17, r1
    1168:	11 f1       	breq	.+68     	; 0x11ae <Endpoint_Write_Stream_LE+0x7e>
    116a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    116e:	85 fd       	sbrc	r24, 5
    1170:	15 c0       	rjmp	.+42     	; 0x119c <Endpoint_Write_Stream_LE+0x6c>
    1172:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1176:	8e 77       	andi	r24, 0x7E	; 126
    1178:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117c:	e1 14       	cp	r14, r1
    117e:	f1 04       	cpc	r15, r1
    1180:	49 f0       	breq	.+18     	; 0x1194 <Endpoint_Write_Stream_LE+0x64>
    1182:	f7 01       	movw	r30, r14
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	c8 0e       	add	r12, r24
    118a:	d9 1e       	adc	r13, r25
    118c:	d1 82       	std	Z+1, r13	; 0x01
    118e:	c0 82       	st	Z, r12
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <Endpoint_Write_Stream_LE+0x80>
    1194:	ef dd       	rcall	.-1058   	; 0xd74 <Endpoint_WaitUntilReady>
    1196:	88 23       	and	r24, r24
    1198:	29 f3       	breq	.-54     	; 0x1164 <Endpoint_Write_Stream_LE+0x34>
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <Endpoint_Write_Stream_LE+0x80>
    119c:	89 91       	ld	r24, Y+
    119e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11a2:	01 50       	subi	r16, 0x01	; 1
    11a4:	11 09       	sbc	r17, r1
    11a6:	ff ef       	ldi	r31, 0xFF	; 255
    11a8:	cf 1a       	sub	r12, r31
    11aa:	df 0a       	sbc	r13, r31
    11ac:	db cf       	rjmp	.-74     	; 0x1164 <Endpoint_Write_Stream_LE+0x34>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	08 95       	ret

000011c2 <Endpoint_Write_Stream_BE>:
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
    11d4:	8b 01       	movw	r16, r22
    11d6:	7a 01       	movw	r14, r20
    11d8:	cd dd       	rcall	.-1126   	; 0xd74 <Endpoint_WaitUntilReady>
    11da:	81 11       	cpse	r24, r1
    11dc:	37 c0       	rjmp	.+110    	; 0x124c <Endpoint_Write_Stream_BE+0x8a>
    11de:	c8 01       	movw	r24, r16
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	c8 0f       	add	r28, r24
    11e4:	d9 1f       	adc	r29, r25
    11e6:	e1 14       	cp	r14, r1
    11e8:	f1 04       	cpc	r15, r1
    11ea:	39 f0       	breq	.+14     	; 0x11fa <Endpoint_Write_Stream_BE+0x38>
    11ec:	f7 01       	movw	r30, r14
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	08 1b       	sub	r16, r24
    11f4:	19 0b       	sbc	r17, r25
    11f6:	c8 1b       	sub	r28, r24
    11f8:	d9 0b       	sbc	r29, r25
    11fa:	c1 2c       	mov	r12, r1
    11fc:	d1 2c       	mov	r13, r1
    11fe:	01 15       	cp	r16, r1
    1200:	11 05       	cpc	r17, r1
    1202:	19 f1       	breq	.+70     	; 0x124a <Endpoint_Write_Stream_BE+0x88>
    1204:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1208:	85 fd       	sbrc	r24, 5
    120a:	15 c0       	rjmp	.+42     	; 0x1236 <Endpoint_Write_Stream_BE+0x74>
    120c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1210:	8e 77       	andi	r24, 0x7E	; 126
    1212:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1216:	e1 14       	cp	r14, r1
    1218:	f1 04       	cpc	r15, r1
    121a:	49 f0       	breq	.+18     	; 0x122e <Endpoint_Write_Stream_BE+0x6c>
    121c:	f7 01       	movw	r30, r14
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	c8 0e       	add	r12, r24
    1224:	d9 1e       	adc	r13, r25
    1226:	d1 82       	std	Z+1, r13	; 0x01
    1228:	c0 82       	st	Z, r12
    122a:	85 e0       	ldi	r24, 0x05	; 5
    122c:	0f c0       	rjmp	.+30     	; 0x124c <Endpoint_Write_Stream_BE+0x8a>
    122e:	a2 dd       	rcall	.-1212   	; 0xd74 <Endpoint_WaitUntilReady>
    1230:	88 23       	and	r24, r24
    1232:	29 f3       	breq	.-54     	; 0x11fe <Endpoint_Write_Stream_BE+0x3c>
    1234:	0b c0       	rjmp	.+22     	; 0x124c <Endpoint_Write_Stream_BE+0x8a>
    1236:	88 81       	ld	r24, Y
    1238:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    123c:	21 97       	sbiw	r28, 0x01	; 1
    123e:	01 50       	subi	r16, 0x01	; 1
    1240:	11 09       	sbc	r17, r1
    1242:	ff ef       	ldi	r31, 0xFF	; 255
    1244:	cf 1a       	sub	r12, r31
    1246:	df 0a       	sbc	r13, r31
    1248:	da cf       	rjmp	.-76     	; 0x11fe <Endpoint_Write_Stream_BE+0x3c>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	08 95       	ret

0000125e <Endpoint_Read_Stream_LE>:
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
    1270:	8b 01       	movw	r16, r22
    1272:	7a 01       	movw	r14, r20
    1274:	7f dd       	rcall	.-1282   	; 0xd74 <Endpoint_WaitUntilReady>
    1276:	81 11       	cpse	r24, r1
    1278:	32 c0       	rjmp	.+100    	; 0x12de <Endpoint_Read_Stream_LE+0x80>
    127a:	e1 14       	cp	r14, r1
    127c:	f1 04       	cpc	r15, r1
    127e:	39 f0       	breq	.+14     	; 0x128e <Endpoint_Read_Stream_LE+0x30>
    1280:	f7 01       	movw	r30, r14
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	08 1b       	sub	r16, r24
    1288:	19 0b       	sbc	r17, r25
    128a:	c8 0f       	add	r28, r24
    128c:	d9 1f       	adc	r29, r25
    128e:	c1 2c       	mov	r12, r1
    1290:	d1 2c       	mov	r13, r1
    1292:	01 15       	cp	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	11 f1       	breq	.+68     	; 0x12dc <Endpoint_Read_Stream_LE+0x7e>
    1298:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    129c:	85 fd       	sbrc	r24, 5
    129e:	15 c0       	rjmp	.+42     	; 0x12ca <Endpoint_Read_Stream_LE+0x6c>
    12a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12a4:	8b 77       	andi	r24, 0x7B	; 123
    12a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12aa:	e1 14       	cp	r14, r1
    12ac:	f1 04       	cpc	r15, r1
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <Endpoint_Read_Stream_LE+0x64>
    12b0:	f7 01       	movw	r30, r14
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	c8 0e       	add	r12, r24
    12b8:	d9 1e       	adc	r13, r25
    12ba:	d1 82       	std	Z+1, r13	; 0x01
    12bc:	c0 82       	st	Z, r12
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	0e c0       	rjmp	.+28     	; 0x12de <Endpoint_Read_Stream_LE+0x80>
    12c2:	58 dd       	rcall	.-1360   	; 0xd74 <Endpoint_WaitUntilReady>
    12c4:	88 23       	and	r24, r24
    12c6:	29 f3       	breq	.-54     	; 0x1292 <Endpoint_Read_Stream_LE+0x34>
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <Endpoint_Read_Stream_LE+0x80>
    12ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    12ce:	89 93       	st	Y+, r24
    12d0:	01 50       	subi	r16, 0x01	; 1
    12d2:	11 09       	sbc	r17, r1
    12d4:	ff ef       	ldi	r31, 0xFF	; 255
    12d6:	cf 1a       	sub	r12, r31
    12d8:	df 0a       	sbc	r13, r31
    12da:	db cf       	rjmp	.-74     	; 0x1292 <Endpoint_Read_Stream_LE+0x34>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	08 95       	ret

000012f0 <Endpoint_Write_Control_Stream_LE>:
    12f0:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <USB_ControlRequest+0x6>
    12f4:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <USB_ControlRequest+0x7>
    12f8:	26 17       	cp	r18, r22
    12fa:	37 07       	cpc	r19, r23
    12fc:	48 f0       	brcs	.+18     	; 0x1310 <Endpoint_Write_Control_Stream_LE+0x20>
    12fe:	61 15       	cp	r22, r1
    1300:	71 05       	cpc	r23, r1
    1302:	39 f4       	brne	.+14     	; 0x1312 <Endpoint_Write_Control_Stream_LE+0x22>
    1304:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1308:	2e 77       	andi	r18, 0x7E	; 126
    130a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <Endpoint_Write_Control_Stream_LE+0x22>
    1310:	b9 01       	movw	r22, r18
    1312:	fc 01       	movw	r30, r24
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	61 15       	cp	r22, r1
    1318:	71 05       	cpc	r23, r1
    131a:	69 f1       	breq	.+90     	; 0x1376 <Endpoint_Write_Control_Stream_LE+0x86>
    131c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    1320:	88 23       	and	r24, r24
    1322:	d1 f1       	breq	.+116    	; 0x1398 <Endpoint_Write_Control_Stream_LE+0xa8>
    1324:	85 30       	cpi	r24, 0x05	; 5
    1326:	d1 f1       	breq	.+116    	; 0x139c <Endpoint_Write_Control_Stream_LE+0xac>
    1328:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    132c:	83 fd       	sbrc	r24, 3
    132e:	32 c0       	rjmp	.+100    	; 0x1394 <Endpoint_Write_Control_Stream_LE+0xa4>
    1330:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1334:	82 fd       	sbrc	r24, 2
    1336:	28 c0       	rjmp	.+80     	; 0x1388 <Endpoint_Write_Control_Stream_LE+0x98>
    1338:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    133c:	80 ff       	sbrs	r24, 0
    133e:	eb cf       	rjmp	.-42     	; 0x1316 <Endpoint_Write_Control_Stream_LE+0x26>
    1340:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1344:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1348:	61 15       	cp	r22, r1
    134a:	71 05       	cpc	r23, r1
    134c:	51 f0       	breq	.+20     	; 0x1362 <Endpoint_Write_Control_Stream_LE+0x72>
    134e:	88 30       	cpi	r24, 0x08	; 8
    1350:	91 05       	cpc	r25, r1
    1352:	38 f4       	brcc	.+14     	; 0x1362 <Endpoint_Write_Control_Stream_LE+0x72>
    1354:	21 91       	ld	r18, Z+
    1356:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    135a:	61 50       	subi	r22, 0x01	; 1
    135c:	71 09       	sbc	r23, r1
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	f3 cf       	rjmp	.-26     	; 0x1348 <Endpoint_Write_Control_Stream_LE+0x58>
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	08 97       	sbiw	r24, 0x08	; 8
    1366:	09 f0       	breq	.+2      	; 0x136a <Endpoint_Write_Control_Stream_LE+0x7a>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    136e:	8e 77       	andi	r24, 0x7E	; 126
    1370:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1374:	d0 cf       	rjmp	.-96     	; 0x1316 <Endpoint_Write_Control_Stream_LE+0x26>
    1376:	21 11       	cpse	r18, r1
    1378:	d1 cf       	rjmp	.-94     	; 0x131c <Endpoint_Write_Control_Stream_LE+0x2c>
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <Endpoint_Write_Control_Stream_LE+0x98>
    137c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    1380:	88 23       	and	r24, r24
    1382:	51 f0       	breq	.+20     	; 0x1398 <Endpoint_Write_Control_Stream_LE+0xa8>
    1384:	85 30       	cpi	r24, 0x05	; 5
    1386:	51 f0       	breq	.+20     	; 0x139c <Endpoint_Write_Control_Stream_LE+0xac>
    1388:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138c:	82 ff       	sbrs	r24, 2
    138e:	f6 cf       	rjmp	.-20     	; 0x137c <Endpoint_Write_Control_Stream_LE+0x8c>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	08 95       	ret
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	08 95       	ret
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	08 95       	ret

000013a0 <Endpoint_Read_Control_Stream_LE>:
    13a0:	61 15       	cp	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <Endpoint_Read_Control_Stream_LE+0x10>
    13a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13aa:	2b 77       	andi	r18, 0x7B	; 123
    13ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13b0:	fc 01       	movw	r30, r24
    13b2:	61 15       	cp	r22, r1
    13b4:	71 05       	cpc	r23, r1
    13b6:	31 f1       	breq	.+76     	; 0x1404 <Endpoint_Read_Control_Stream_LE+0x64>
    13b8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    13bc:	88 23       	and	r24, r24
    13be:	51 f1       	breq	.+84     	; 0x1414 <Endpoint_Read_Control_Stream_LE+0x74>
    13c0:	85 30       	cpi	r24, 0x05	; 5
    13c2:	51 f1       	breq	.+84     	; 0x1418 <Endpoint_Read_Control_Stream_LE+0x78>
    13c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c8:	83 fd       	sbrc	r24, 3
    13ca:	22 c0       	rjmp	.+68     	; 0x1410 <Endpoint_Read_Control_Stream_LE+0x70>
    13cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13d0:	82 ff       	sbrs	r24, 2
    13d2:	ef cf       	rjmp	.-34     	; 0x13b2 <Endpoint_Read_Control_Stream_LE+0x12>
    13d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    13d8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    13dc:	89 2b       	or	r24, r25
    13de:	31 f0       	breq	.+12     	; 0x13ec <Endpoint_Read_Control_Stream_LE+0x4c>
    13e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    13e4:	81 93       	st	Z+, r24
    13e6:	61 50       	subi	r22, 0x01	; 1
    13e8:	71 09       	sbc	r23, r1
    13ea:	a1 f7       	brne	.-24     	; 0x13d4 <Endpoint_Read_Control_Stream_LE+0x34>
    13ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13f0:	8b 77       	andi	r24, 0x7B	; 123
    13f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13f6:	dd cf       	rjmp	.-70     	; 0x13b2 <Endpoint_Read_Control_Stream_LE+0x12>
    13f8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    13fc:	88 23       	and	r24, r24
    13fe:	51 f0       	breq	.+20     	; 0x1414 <Endpoint_Read_Control_Stream_LE+0x74>
    1400:	85 30       	cpi	r24, 0x05	; 5
    1402:	51 f0       	breq	.+20     	; 0x1418 <Endpoint_Read_Control_Stream_LE+0x78>
    1404:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1408:	80 ff       	sbrs	r24, 0
    140a:	f6 cf       	rjmp	.-20     	; 0x13f8 <Endpoint_Read_Control_Stream_LE+0x58>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	08 95       	ret
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	08 95       	ret
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	08 95       	ret

0000141c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    141c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <USB_ControlRequest+0x6>
    1420:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <USB_ControlRequest+0x7>
    1424:	26 17       	cp	r18, r22
    1426:	37 07       	cpc	r19, r23
    1428:	48 f0       	brcs	.+18     	; 0x143c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    142a:	61 15       	cp	r22, r1
    142c:	71 05       	cpc	r23, r1
    142e:	39 f4       	brne	.+14     	; 0x143e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1430:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1434:	2e 77       	andi	r18, 0x7E	; 126
    1436:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    143a:	01 c0       	rjmp	.+2      	; 0x143e <Endpoint_Write_Control_PStream_LE+0x22>
    143c:	b9 01       	movw	r22, r18
    143e:	fc 01       	movw	r30, r24
    1440:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1442:	61 15       	cp	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	71 f1       	breq	.+92     	; 0x14a4 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1448:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    144c:	88 23       	and	r24, r24
    144e:	d9 f1       	breq	.+118    	; 0x14c6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1450:	85 30       	cpi	r24, 0x05	; 5
    1452:	d9 f1       	breq	.+118    	; 0x14ca <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1454:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1458:	83 fd       	sbrc	r24, 3
    145a:	33 c0       	rjmp	.+102    	; 0x14c2 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    145c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1460:	82 fd       	sbrc	r24, 2
    1462:	29 c0       	rjmp	.+82     	; 0x14b6 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1468:	80 ff       	sbrs	r24, 0
    146a:	eb cf       	rjmp	.-42     	; 0x1442 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    146c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1470:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1474:	61 15       	cp	r22, r1
    1476:	71 05       	cpc	r23, r1
    1478:	59 f0       	breq	.+22     	; 0x1490 <Endpoint_Write_Control_PStream_LE+0x74>
    147a:	88 30       	cpi	r24, 0x08	; 8
    147c:	91 05       	cpc	r25, r1
    147e:	40 f4       	brcc	.+16     	; 0x1490 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1480:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1482:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1486:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1488:	61 50       	subi	r22, 0x01	; 1
    148a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	f2 cf       	rjmp	.-28     	; 0x1474 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	08 97       	sbiw	r24, 0x08	; 8
    1494:	09 f0       	breq	.+2      	; 0x1498 <Endpoint_Write_Control_PStream_LE+0x7c>
    1496:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1498:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    149c:	8e 77       	andi	r24, 0x7E	; 126
    149e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14a2:	cf cf       	rjmp	.-98     	; 0x1442 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    14a4:	21 11       	cpse	r18, r1
    14a6:	d0 cf       	rjmp	.-96     	; 0x1448 <Endpoint_Write_Control_PStream_LE+0x2c>
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14aa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14ae:	88 23       	and	r24, r24
    14b0:	51 f0       	breq	.+20     	; 0x14c6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14b2:	85 30       	cpi	r24, 0x05	; 5
    14b4:	51 f0       	breq	.+20     	; 0x14ca <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    14ba:	82 ff       	sbrs	r24, 2
    14bc:	f6 cf       	rjmp	.-20     	; 0x14aa <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    14ca:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    14cc:	08 95       	ret

000014ce <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	aa 97       	sbiw	r28, 0x2a	; 42
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	e7 e8       	ldi	r30, 0x87	; 135
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14ea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    14ee:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	ef 38       	cpi	r30, 0x8F	; 143
    14f4:	f2 07       	cpc	r31, r18
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    14f8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1500:	83 ff       	sbrs	r24, 3
    1502:	1f c1       	rjmp	.+574    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1504:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1508:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <USB_ControlRequest+0x1>
    150c:	49 2f       	mov	r20, r25
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	4a 30       	cpi	r20, 0x0A	; 10
    1512:	51 05       	cpc	r21, r1
    1514:	08 f0       	brcs	.+2      	; 0x1518 <USB_Device_ProcessControlRequest+0x4a>
    1516:	15 c1       	rjmp	.+554    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
    1518:	fa 01       	movw	r30, r20
    151a:	e4 5b       	subi	r30, 0xB4	; 180
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	c0 c4       	rjmp	.+2432   	; 0x1ea0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1520:	80 38       	cpi	r24, 0x80	; 128
    1522:	81 f0       	breq	.+32     	; 0x1544 <USB_Device_ProcessControlRequest+0x76>
    1524:	82 38       	cpi	r24, 0x82	; 130
    1526:	09 f0       	breq	.+2      	; 0x152a <USB_Device_ProcessControlRequest+0x5c>
    1528:	0c c1       	rjmp	.+536    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    152a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <USB_ControlRequest+0x4>
    152e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1530:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1534:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    1538:	85 fb       	bst	r24, 5
    153a:	88 27       	eor	r24, r24
    153c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    153e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1544:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1548:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <USB_Device_RemoteWakeupEnabled>
    154c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    154e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1550:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1554:	97 7f       	andi	r25, 0xF7	; 247
    1556:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    155a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    155e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1562:	c6 c0       	rjmp	.+396    	; 0x16f0 <USB_Device_ProcessControlRequest+0x222>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1564:	28 2f       	mov	r18, r24
    1566:	2d 7f       	andi	r18, 0xFD	; 253
    1568:	09 f0       	breq	.+2      	; 0x156c <USB_Device_ProcessControlRequest+0x9e>
    156a:	eb c0       	rjmp	.+470    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    156c:	88 23       	and	r24, r24
    156e:	19 f0       	breq	.+6      	; 0x1576 <USB_Device_ProcessControlRequest+0xa8>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	61 f0       	breq	.+24     	; 0x158c <USB_Device_ProcessControlRequest+0xbe>
    1574:	e6 c0       	rjmp	.+460    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1576:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	09 f0       	breq	.+2      	; 0x1580 <USB_Device_ProcessControlRequest+0xb2>
    157e:	e1 c0       	rjmp	.+450    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1580:	93 30       	cpi	r25, 0x03	; 3
    1582:	09 f0       	breq	.+2      	; 0x1586 <USB_Device_ProcessControlRequest+0xb8>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USB_Device_RemoteWakeupEnabled>
    158a:	2b c0       	rjmp	.+86     	; 0x15e2 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    158c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1590:	81 11       	cpse	r24, r1
    1592:	27 c0       	rjmp	.+78     	; 0x15e2 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1594:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <USB_ControlRequest+0x4>
    1598:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    159a:	09 f4       	brne	.+2      	; 0x159e <USB_Device_ProcessControlRequest+0xd0>
    159c:	d2 c0       	rjmp	.+420    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    159e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15a2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    15a6:	20 ff       	sbrs	r18, 0
    15a8:	1c c0       	rjmp	.+56     	; 0x15e2 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    15aa:	93 30       	cpi	r25, 0x03	; 3
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15ae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15b2:	80 62       	ori	r24, 0x20	; 32
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    15b6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15ba:	90 61       	ori	r25, 0x10	; 16
    15bc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <USB_Device_ProcessControlRequest+0xfe>
    15c8:	44 0f       	add	r20, r20
    15ca:	55 1f       	adc	r21, r21
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <USB_Device_ProcessControlRequest+0xfa>
    15d0:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    15d4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    15d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15dc:	88 60       	ori	r24, 0x08	; 8
    15de:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15e2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	84 c0       	rjmp	.+264    	; 0x16f6 <USB_Device_ProcessControlRequest+0x228>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15ee:	81 11       	cpse	r24, r1
    15f0:	a8 c0       	rjmp	.+336    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    15f2:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    15f6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    15f8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    15fa:	f8 94       	cli
    15fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1600:	87 7f       	andi	r24, 0xF7	; 247
    1602:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1606:	97 db       	rcall	.-2258   	; 0xd36 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1608:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    160c:	80 ff       	sbrs	r24, 0
    160e:	fc cf       	rjmp	.-8      	; 0x1608 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1610:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1614:	80 78       	andi	r24, 0x80	; 128
    1616:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1618:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1622:	11 11       	cpse	r17, r1
    1624:	02 c0       	rjmp	.+4      	; 0x162a <USB_Device_ProcessControlRequest+0x15c>
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	01 c0       	rjmp	.+2      	; 0x162c <USB_Device_ProcessControlRequest+0x15e>
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1630:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1632:	87 c0       	rjmp	.+270    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1634:	80 58       	subi	r24, 0x80	; 128
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	08 f0       	brcs	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x16e>
    163a:	83 c0       	rjmp	.+262    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    163c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1640:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <USB_ControlRequest+0x3>
    1644:	8c 3d       	cpi	r24, 0xDC	; 220
    1646:	53 e0       	ldi	r21, 0x03	; 3
    1648:	95 07       	cpc	r25, r21
    164a:	71 f5       	brne	.+92     	; 0x16a8 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1650:	8a e2       	ldi	r24, 0x2A	; 42
    1652:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1654:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1656:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1658:	de 01       	movw	r26, r28
    165a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    165c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    165e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1660:	51 e2       	ldi	r21, 0x21	; 33
    1662:	e3 2f       	mov	r30, r19
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    166a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    166c:	20 ff       	sbrs	r18, 0
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1670:	e2 95       	swap	r30
    1672:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1674:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1676:	ef 70       	andi	r30, 0x0F	; 15
    1678:	8e 2f       	mov	r24, r30
    167a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    167c:	ea 30       	cpi	r30, 0x0A	; 10
    167e:	10 f0       	brcs	.+4      	; 0x1684 <USB_Device_ProcessControlRequest+0x1b6>
    1680:	c7 96       	adiw	r24, 0x37	; 55
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <USB_Device_ProcessControlRequest+0x1b8>
    1684:	c0 96       	adiw	r24, 0x30	; 48
    1686:	8d 93       	st	X+, r24
    1688:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	24 31       	cpi	r18, 0x14	; 20
    168e:	49 f7       	brne	.-46     	; 0x1662 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1690:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1692:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1696:	87 7f       	andi	r24, 0xF7	; 247
    1698:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    169c:	6a e2       	ldi	r22, 0x2A	; 42
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	25 de       	rcall	.-950    	; 0x12f0 <Endpoint_Write_Control_Stream_LE>
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <USB_Device_ProcessControlRequest+0x200>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    16a8:	ae 01       	movw	r20, r28
    16aa:	4f 5f       	subi	r20, 0xFF	; 255
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <USB_ControlRequest+0x4>
    16b2:	0e 94 bc 01 	call	0x378	; 0x378 <CALLBACK_USB_GetDescriptor>
    16b6:	bc 01       	movw	r22, r24
    16b8:	89 2b       	or	r24, r25
    16ba:	09 f4       	brne	.+2      	; 0x16be <USB_Device_ProcessControlRequest+0x1f0>
    16bc:	42 c0       	rjmp	.+132    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
    16be:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16c2:	97 7f       	andi	r25, 0xF7	; 247
    16c4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	a7 de       	rcall	.-690    	; 0x141c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16d2:	8b 77       	andi	r24, 0x7B	; 123
    16d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16d8:	34 c0       	rjmp	.+104    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    16da:	80 38       	cpi	r24, 0x80	; 128
    16dc:	91 f5       	brne	.+100    	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e2:	87 7f       	andi	r24, 0xF7	; 247
    16e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16e8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16f4:	8e 77       	andi	r24, 0x7E	; 126
    16f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    16fa:	1d db       	rcall	.-2502   	; 0xd36 <Endpoint_ClearStatusStage>
    16fc:	22 c0       	rjmp	.+68     	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16fe:	81 11       	cpse	r24, r1
    1700:	20 c0       	rjmp	.+64     	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1702:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1706:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <USB_ControlRequest+0x3>
    170a:	99 27       	eor	r25, r25
    170c:	02 97       	sbiw	r24, 0x02	; 2
    170e:	cc f4       	brge	.+50     	; 0x1742 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1710:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    171a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    171e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1722:	09 db       	rcall	.-2542   	; 0xd36 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1724:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <USB_Device_ConfigurationNumber>
    1728:	81 11       	cpse	r24, r1
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <USB_Device_ProcessControlRequest+0x26a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    172c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1730:	87 fd       	sbrc	r24, 7
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <USB_Device_ProcessControlRequest+0x26a>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	01 c0       	rjmp	.+2      	; 0x173a <USB_Device_ProcessControlRequest+0x26c>
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    173e:	0e 94 46 01 	call	0x28c	; 0x28c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1742:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1746:	83 ff       	sbrs	r24, 3
    1748:	0a c0       	rjmp	.+20     	; 0x175e <USB_Device_ProcessControlRequest+0x290>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    174a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    174e:	80 62       	ori	r24, 0x20	; 32
    1750:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1758:	87 7f       	andi	r24, 0xF7	; 247
    175a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    175e:	aa 96       	adiw	r28, 0x2a	; 42
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	08 95       	ret

00001774 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1774:	08 95       	ret

00001776 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1776:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1778:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    177c:	88 23       	and	r24, r24
    177e:	59 f0       	breq	.+22     	; 0x1796 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1780:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1784:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1786:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    178a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    178e:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1790:	9e de       	rcall	.-708    	; 0x14ce <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1792:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    179a:	6f 92       	push	r6
    179c:	7f 92       	push	r7
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <HID_Device_ProcessControlRequest+0x1e>
    17b8:	1f 92       	push	r1
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    17c0:	ad b6       	in	r10, 0x3d	; 61
    17c2:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    17c8:	83 ff       	sbrs	r24, 3
    17ca:	f9 c0       	rjmp	.+498    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    17cc:	f7 01       	movw	r30, r14
    17ce:	80 81       	ld	r24, Z
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <USB_ControlRequest+0x4>
    17d6:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <USB_ControlRequest+0x5>
    17da:	28 17       	cp	r18, r24
    17dc:	39 07       	cpc	r19, r25
    17de:	09 f0       	breq	.+2      	; 0x17e2 <HID_Device_ProcessControlRequest+0x48>
    17e0:	ee c0       	rjmp	.+476    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
	  return;

	switch (USB_ControlRequest.bRequest)
    17e2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <USB_ControlRequest+0x1>
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	09 f4       	brne	.+2      	; 0x17ec <HID_Device_ProcessControlRequest+0x52>
    17ea:	98 c0       	rjmp	.+304    	; 0x191c <HID_Device_ProcessControlRequest+0x182>
    17ec:	30 f4       	brcc	.+12     	; 0x17fa <HID_Device_ProcessControlRequest+0x60>
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	71 f0       	breq	.+28     	; 0x180e <HID_Device_ProcessControlRequest+0x74>
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <HID_Device_ProcessControlRequest+0x5e>
    17f6:	cb c0       	rjmp	.+406    	; 0x198e <HID_Device_ProcessControlRequest+0x1f4>
    17f8:	e2 c0       	rjmp	.+452    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
    17fa:	8a 30       	cpi	r24, 0x0A	; 10
    17fc:	09 f4       	brne	.+2      	; 0x1800 <HID_Device_ProcessControlRequest+0x66>
    17fe:	af c0       	rjmp	.+350    	; 0x195e <HID_Device_ProcessControlRequest+0x1c4>
    1800:	8b 30       	cpi	r24, 0x0B	; 11
    1802:	09 f4       	brne	.+2      	; 0x1806 <HID_Device_ProcessControlRequest+0x6c>
    1804:	98 c0       	rjmp	.+304    	; 0x1936 <HID_Device_ProcessControlRequest+0x19c>
    1806:	89 30       	cpi	r24, 0x09	; 9
    1808:	09 f0       	breq	.+2      	; 0x180c <HID_Device_ProcessControlRequest+0x72>
    180a:	d9 c0       	rjmp	.+434    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
    180c:	49 c0       	rjmp	.+146    	; 0x18a0 <HID_Device_ProcessControlRequest+0x106>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    180e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    1812:	81 3a       	cpi	r24, 0xA1	; 161
    1814:	09 f0       	breq	.+2      	; 0x1818 <HID_Device_ProcessControlRequest+0x7e>
    1816:	d3 c0       	rjmp	.+422    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
			{
    1818:	8d b6       	in	r8, 0x3d	; 61
    181a:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    181c:	1a 82       	std	Y+2, r1	; 0x02
    181e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1820:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1824:	10 91 8a 01 	lds	r17, 0x018A	; 0x80018a <USB_ControlRequest+0x3>
    1828:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    182a:	f7 01       	movw	r30, r14
    182c:	87 81       	ldd	r24, Z+7	; 0x07
    182e:	48 2f       	mov	r20, r24
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	8d b7       	in	r24, 0x3d	; 61
    1834:	9e b7       	in	r25, 0x3e	; 62
    1836:	84 1b       	sub	r24, r20
    1838:	95 0b       	sbc	r25, r21
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	9e bf       	out	0x3e, r25	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	8d bf       	out	0x3d, r24	; 61
    1844:	ed b7       	in	r30, 0x3d	; 61
    1846:	fe b7       	in	r31, 0x3e	; 62
    1848:	31 96       	adiw	r30, 0x01	; 1
    184a:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	cf 01       	movw	r24, r30
    1852:	45 d3       	rcall	.+1674   	; 0x1ede <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1854:	4f ef       	ldi	r20, 0xFF	; 255
    1856:	41 0f       	add	r20, r17
    1858:	8e 01       	movw	r16, r28
    185a:	0f 5f       	subi	r16, 0xFF	; 255
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	96 01       	movw	r18, r12
    1860:	be 01       	movw	r22, r28
    1862:	6d 5f       	subi	r22, 0xFD	; 253
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	c7 01       	movw	r24, r14
    1868:	0e 94 80 01 	call	0x300	; 0x300 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    186c:	f7 01       	movw	r30, r14
    186e:	85 81       	ldd	r24, Z+5	; 0x05
    1870:	96 81       	ldd	r25, Z+6	; 0x06
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	21 f0       	breq	.+8      	; 0x187e <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1876:	47 81       	ldd	r20, Z+7	; 0x07
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	b6 01       	movw	r22, r12
    187c:	27 d3       	rcall	.+1614   	; 0x1ecc <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    187e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1882:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1886:	87 7f       	andi	r24, 0xF7	; 247
    1888:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    188c:	69 81       	ldd	r22, Y+1	; 0x01
    188e:	7a 81       	ldd	r23, Y+2	; 0x02
    1890:	c6 01       	movw	r24, r12
    1892:	2e dd       	rcall	.-1444   	; 0x12f0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1898:	8b 77       	andi	r24, 0x7B	; 123
    189a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189e:	38 c0       	rjmp	.+112    	; 0x1910 <HID_Device_ProcessControlRequest+0x176>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18a0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    18a4:	81 32       	cpi	r24, 0x21	; 33
    18a6:	09 f0       	breq	.+2      	; 0x18aa <HID_Device_ProcessControlRequest+0x110>
    18a8:	8a c0       	rjmp	.+276    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
			{
    18aa:	8d b6       	in	r8, 0x3d	; 61
    18ac:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    18ae:	00 91 8d 01 	lds	r16, 0x018D	; 0x80018d <USB_ControlRequest+0x6>
    18b2:	10 91 8e 01 	lds	r17, 0x018E	; 0x80018e <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    18b6:	70 90 89 01 	lds	r7, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    18ba:	60 90 8a 01 	lds	r6, 0x018A	; 0x80018a <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    18be:	8d b7       	in	r24, 0x3d	; 61
    18c0:	9e b7       	in	r25, 0x3e	; 62
    18c2:	80 1b       	sub	r24, r16
    18c4:	91 0b       	sbc	r25, r17
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	9e bf       	out	0x3e, r25	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	8d bf       	out	0x3d, r24	; 61
    18d0:	ed b7       	in	r30, 0x3d	; 61
    18d2:	fe b7       	in	r31, 0x3e	; 62
    18d4:	31 96       	adiw	r30, 0x01	; 1
    18d6:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18dc:	87 7f       	andi	r24, 0xF7	; 247
    18de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    18e2:	b8 01       	movw	r22, r16
    18e4:	cf 01       	movw	r24, r30
    18e6:	5c dd       	rcall	.-1352   	; 0x13a0 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ec:	8e 77       	andi	r24, 0x7E	; 126
    18ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    18f2:	21 e0       	ldi	r18, 0x01	; 1
    18f4:	71 10       	cpse	r7, r1
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <HID_Device_ProcessControlRequest+0x160>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	02 1b       	sub	r16, r18
    18fe:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1900:	2c 0d       	add	r18, r12
    1902:	3d 1d       	adc	r19, r13

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	46 0d       	add	r20, r6
    1908:	67 2d       	mov	r22, r7
    190a:	c7 01       	movw	r24, r14
    190c:	0e 94 b0 01 	call	0x360	; 0x360 <CALLBACK_HID_Device_ProcessHIDReport>
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	9e be       	out	0x3e, r9	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	8d be       	out	0x3d, r8	; 61
    191a:	51 c0       	rjmp	.+162    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    191c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    1920:	81 3a       	cpi	r24, 0xA1	; 161
    1922:	09 f0       	breq	.+2      	; 0x1926 <HID_Device_ProcessControlRequest+0x18c>
    1924:	4c c0       	rjmp	.+152    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1926:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    192a:	87 7f       	andi	r24, 0xF7	; 247
    192c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1930:	f7 01       	movw	r30, r14
    1932:	80 85       	ldd	r24, Z+8	; 0x08
    1934:	3c c0       	rjmp	.+120    	; 0x19ae <HID_Device_ProcessControlRequest+0x214>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1936:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    193a:	81 32       	cpi	r24, 0x21	; 33
    193c:	09 f0       	breq	.+2      	; 0x1940 <HID_Device_ProcessControlRequest+0x1a6>
    193e:	3f c0       	rjmp	.+126    	; 0x19be <HID_Device_ProcessControlRequest+0x224>
    1940:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1944:	87 7f       	andi	r24, 0xF7	; 247
    1946:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    194a:	f5 d9       	rcall	.-3094   	; 0xd36 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    194c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	91 11       	cpse	r25, r1
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <HID_Device_ProcessControlRequest+0x1be>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	f7 01       	movw	r30, r14
    195a:	80 87       	std	Z+8, r24	; 0x08
    195c:	30 c0       	rjmp	.+96     	; 0x19be <HID_Device_ProcessControlRequest+0x224>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    195e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    1962:	81 32       	cpi	r24, 0x21	; 33
    1964:	61 f5       	brne	.+88     	; 0x19be <HID_Device_ProcessControlRequest+0x224>
    1966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    196a:	87 7f       	andi	r24, 0xF7	; 247
    196c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1970:	e2 d9       	rcall	.-3132   	; 0xd36 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1972:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <USB_ControlRequest+0x2>
    1976:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <USB_ControlRequest+0x3>
    197a:	88 27       	eor	r24, r24
    197c:	36 e0       	ldi	r19, 0x06	; 6
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	3a 95       	dec	r19
    1984:	e1 f7       	brne	.-8      	; 0x197e <HID_Device_ProcessControlRequest+0x1e4>
    1986:	f7 01       	movw	r30, r14
    1988:	92 87       	std	Z+10, r25	; 0x0a
    198a:	81 87       	std	Z+9, r24	; 0x09
    198c:	18 c0       	rjmp	.+48     	; 0x19be <HID_Device_ProcessControlRequest+0x224>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    198e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <USB_ControlRequest>
    1992:	81 3a       	cpi	r24, 0xA1	; 161
    1994:	a1 f4       	brne	.+40     	; 0x19be <HID_Device_ProcessControlRequest+0x224>
    1996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    199a:	87 7f       	andi	r24, 0xF7	; 247
    199c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    19a0:	f7 01       	movw	r30, r14
    19a2:	81 85       	ldd	r24, Z+9	; 0x09
    19a4:	92 85       	ldd	r25, Z+10	; 0x0a
    19a6:	96 95       	lsr	r25
    19a8:	87 95       	ror	r24
    19aa:	96 95       	lsr	r25
    19ac:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19ae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19b6:	8e 77       	andi	r24, 0x7E	; 126
    19b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    19bc:	bc d9       	rcall	.-3208   	; 0xd36 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	be be       	out	0x3e, r11	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	ad be       	out	0x3d, r10	; 61
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	9f 90       	pop	r9
    19e4:	8f 90       	pop	r8
    19e6:	7f 90       	pop	r7
    19e8:	6f 90       	pop	r6
    19ea:	08 95       	ret

000019ec <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    19f2:	dc 01       	movw	r26, r24
    19f4:	18 96       	adiw	r26, 0x08	; 8
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	ed 01       	movw	r28, r26
    19fa:	19 92       	st	Y+, r1
    19fc:	8a 95       	dec	r24
    19fe:	e9 f7       	brne	.-6      	; 0x19fa <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
    1a04:	84 ef       	ldi	r24, 0xF4	; 244
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	92 87       	std	Z+10, r25	; 0x0a
    1a0a:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1a0c:	84 81       	ldd	r24, Z+4	; 0x04
    1a0e:	81 11       	cpse	r24, r1
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <HID_Device_ConfigureEndpoints+0x2a>
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <HID_Device_ConfigureEndpoints+0x2c>
    1a16:	44 e0       	ldi	r20, 0x04	; 4
    1a18:	62 81       	ldd	r22, Z+2	; 0x02
    1a1a:	73 81       	ldd	r23, Z+3	; 0x03
    1a1c:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1a1e:	28 e0       	ldi	r18, 0x08	; 8
    1a20:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1a22:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a24:	26 17       	cp	r18, r22
    1a26:	37 07       	cpc	r19, r23
    1a28:	20 f4       	brcc	.+8      	; 0x1a32 <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
    1a2a:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	f9 cf       	rjmp	.-14     	; 0x1a24 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1a32:	42 60       	ori	r20, 0x02	; 2
    1a34:	92 95       	swap	r25
    1a36:	90 7f       	andi	r25, 0xF0	; 240
    1a38:	49 2b       	or	r20, r25
    1a3a:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	46 c9       	rjmp	.-3444   	; 0xcce <Endpoint_ConfigureEndpoint_Prv>

00001a42 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <HID_Device_USBTask+0x20>
    1a62:	1f 92       	push	r1
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    1a6a:	ad b6       	in	r10, 0x3d	; 61
    1a6c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a6e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_DeviceState>
    1a72:	84 30       	cpi	r24, 0x04	; 4
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <HID_Device_USBTask+0x36>
    1a76:	74 c0       	rjmp	.+232    	; 0x1b60 <HID_Device_USBTask+0x11e>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1a78:	f7 01       	movw	r30, r14
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a7c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1a84:	85 ff       	sbrs	r24, 5
    1a86:	6c c0       	rjmp	.+216    	; 0x1b60 <HID_Device_USBTask+0x11e>
	{
    1a88:	8d b6       	in	r8, 0x3d	; 61
    1a8a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a8c:	47 81       	ldd	r20, Z+7	; 0x07
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	8d b7       	in	r24, 0x3d	; 61
    1a92:	9e b7       	in	r25, 0x3e	; 62
    1a94:	84 1b       	sub	r24, r20
    1a96:	95 0b       	sbc	r25, r21
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	9e bf       	out	0x3e, r25	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	8d bf       	out	0x3d, r24	; 61
    1aa2:	ed b7       	in	r30, 0x3d	; 61
    1aa4:	fe b7       	in	r31, 0x3e	; 62
    1aa6:	31 96       	adiw	r30, 0x01	; 1
    1aa8:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1aaa:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1aac:	1a 82       	std	Y+2, r1	; 0x02
    1aae:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	13 d2       	rcall	.+1062   	; 0x1ede <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1ab8:	8e 01       	movw	r16, r28
    1aba:	0f 5f       	subi	r16, 0xFF	; 255
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	96 01       	movw	r18, r12
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	be 01       	movw	r22, r28
    1ac4:	6d 5f       	subi	r22, 0xFD	; 253
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	c7 01       	movw	r24, r14
    1aca:	0e 94 80 01 	call	0x300	; 0x300 <CALLBACK_HID_Device_CreateHIDReport>
    1ace:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1ad0:	f7 01       	movw	r30, r14
    1ad2:	81 85       	ldd	r24, Z+9	; 0x09
    1ad4:	92 85       	ldd	r25, Z+10	; 0x0a
    1ad6:	89 2b       	or	r24, r25
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <HID_Device_USBTask+0xa2>
    1ada:	11 e0       	ldi	r17, 0x01	; 1
    1adc:	83 85       	ldd	r24, Z+11	; 0x0b
    1ade:	94 85       	ldd	r25, Z+12	; 0x0c
    1ae0:	89 2b       	or	r24, r25
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <HID_Device_USBTask+0xa4>
    1ae4:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1ae6:	f7 01       	movw	r30, r14
    1ae8:	65 80       	ldd	r6, Z+5	; 0x05
    1aea:	76 80       	ldd	r7, Z+6	; 0x06
    1aec:	61 14       	cp	r6, r1
    1aee:	71 04       	cpc	r7, r1
    1af0:	81 f0       	breq	.+32     	; 0x1b12 <HID_Device_USBTask+0xd0>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1af2:	49 81       	ldd	r20, Y+1	; 0x01
    1af4:	5a 81       	ldd	r21, Y+2	; 0x02
    1af6:	b3 01       	movw	r22, r6
    1af8:	c6 01       	movw	r24, r12
    1afa:	db d1       	rcall	.+950    	; 0x1eb2 <memcmp>
    1afc:	01 e0       	ldi	r16, 0x01	; 1
    1afe:	89 2b       	or	r24, r25
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <HID_Device_USBTask+0xc2>
    1b02:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1b04:	f7 01       	movw	r30, r14
    1b06:	47 81       	ldd	r20, Z+7	; 0x07
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	c3 01       	movw	r24, r6
    1b0e:	de d1       	rcall	.+956    	; 0x1ecc <memcpy>
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <HID_Device_USBTask+0xd2>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1b12:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	89 2b       	or	r24, r25
    1b1a:	e9 f0       	breq	.+58     	; 0x1b56 <HID_Device_USBTask+0x114>
    1b1c:	51 10       	cpse	r5, r1
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <HID_Device_USBTask+0xe6>
    1b20:	01 11       	cpse	r16, r1
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <HID_Device_USBTask+0xe6>
    1b24:	10 ff       	sbrs	r17, 0
    1b26:	17 c0       	rjmp	.+46     	; 0x1b56 <HID_Device_USBTask+0x114>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1b28:	f7 01       	movw	r30, r14
    1b2a:	81 85       	ldd	r24, Z+9	; 0x09
    1b2c:	92 85       	ldd	r25, Z+10	; 0x0a
    1b2e:	94 87       	std	Z+12, r25	; 0x0c
    1b30:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b34:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b3c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1b40:	69 81       	ldd	r22, Y+1	; 0x01
    1b42:	7a 81       	ldd	r23, Y+2	; 0x02
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	c6 01       	movw	r24, r12
    1b4a:	f2 da       	rcall	.-2588   	; 0x1130 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b50:	8e 77       	andi	r24, 0x7E	; 126
    1b52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	9e be       	out	0x3e, r9	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	be be       	out	0x3e, r11	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	ad be       	out	0x3d, r10	; 61
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	af 90       	pop	r10
    1b84:	9f 90       	pop	r9
    1b86:	8f 90       	pop	r8
    1b88:	7f 90       	pop	r7
    1b8a:	6f 90       	pop	r6
    1b8c:	5f 90       	pop	r5
    1b8e:	08 95       	ret

00001b90 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b94:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1b98:	23 ff       	sbrs	r18, 3
    1b9a:	34 c0       	rjmp	.+104    	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	20 81       	ld	r18, Z
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <USB_ControlRequest+0x4>
    1ba6:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <USB_ControlRequest+0x5>
    1baa:	42 17       	cp	r20, r18
    1bac:	53 07       	cpc	r21, r19
    1bae:	51 f5       	brne	.+84     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1bb0:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <USB_ControlRequest+0x1>
    1bb4:	2e 3f       	cpi	r18, 0xFE	; 254
    1bb6:	81 f0       	breq	.+32     	; 0x1bd8 <MS_Device_ProcessControlRequest+0x48>
    1bb8:	2f 3f       	cpi	r18, 0xFF	; 255
    1bba:	21 f5       	brne	.+72     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bbc:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <USB_ControlRequest>
    1bc0:	21 32       	cpi	r18, 0x21	; 33
    1bc2:	01 f5       	brne	.+64     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
    1bc4:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bca:	87 7f       	andi	r24, 0xF7	; 247
    1bcc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1bd0:	b2 d8       	rcall	.-3740   	; 0xd36 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	8e ab       	std	Y+54, r24	; 0x36
    1bd6:	16 c0       	rjmp	.+44     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bd8:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <USB_ControlRequest>
    1bdc:	21 3a       	cpi	r18, 0xA1	; 161
    1bde:	91 f4       	brne	.+36     	; 0x1c04 <MS_Device_ProcessControlRequest+0x74>
    1be0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be4:	27 7f       	andi	r18, 0xF7	; 247
    1be6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1bea:	fc 01       	movw	r30, r24
    1bec:	81 85       	ldd	r24, Z+9	; 0x09
    1bee:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bf0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bf8:	8e 77       	andi	r24, 0x7E	; 126
    1bfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1bfe:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c00:	cf 91       	pop	r28
    1c02:	99 c8       	rjmp	.-3790   	; 0xd36 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1c12:	fc 01       	movw	r30, r24
    1c14:	3a 96       	adiw	r30, 0x0a	; 10
    1c16:	8d e2       	ldi	r24, 0x2D	; 45
    1c18:	df 01       	movw	r26, r30
    1c1a:	1d 92       	st	X+, r1
    1c1c:	8a 95       	dec	r24
    1c1e:	e9 f7       	brne	.-6      	; 0x1c1a <MS_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1c20:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	81 13       	cpse	r24, r17
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1c28:	6a 81       	ldd	r22, Y+2	; 0x02
    1c2a:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    1c2e:	90 e8       	ldi	r25, 0x80	; 128
    1c30:	0c c0       	rjmp	.+24     	; 0x1c4a <MS_Device_ConfigureEndpoints+0x40>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	81 17       	cp	r24, r17
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <MS_Device_ConfigureEndpoints+0x38>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1c38:	1f 5f       	subi	r17, 0xFF	; 255
    1c3a:	17 30       	cpi	r17, 0x07	; 7
    1c3c:	91 f7       	brne	.-28     	; 0x1c22 <MS_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	1d c0       	rjmp	.+58     	; 0x1c7c <MS_Device_ConfigureEndpoints+0x72>
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1c42:	6e 81       	ldd	r22, Y+6	; 0x06
    1c44:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1c46:	88 85       	ldd	r24, Y+8	; 0x08
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    1c48:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1c4e:	28 e0       	ldi	r18, 0x08	; 8
    1c50:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1c52:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1c54:	26 17       	cp	r18, r22
    1c56:	37 07       	cpc	r19, r23
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <MS_Device_ConfigureEndpoints+0x58>
				{
					MaskVal++;
    1c5a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	f9 cf       	rjmp	.-14     	; 0x1c54 <MS_Device_ConfigureEndpoints+0x4a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1c62:	42 95       	swap	r20
    1c64:	40 7f       	andi	r20, 0xF0	; 240
    1c66:	82 60       	ori	r24, 0x02	; 2
    1c68:	48 2b       	or	r20, r24
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	91 11       	cpse	r25, r1
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <MS_Device_ConfigureEndpoints+0x68>
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	60 68       	ori	r22, 0x80	; 128
    1c74:	81 2f       	mov	r24, r17
    1c76:	2b d8       	rcall	.-4010   	; 0xcce <Endpoint_ConfigureEndpoint_Prv>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	de cf       	rjmp	.-68     	; 0x1c38 <MS_Device_ConfigureEndpoints+0x2e>
			return false;
		}
	}

	return true;
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	08 95       	ret

00001c84 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <MS_Device_USBTask+0xe>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1c96:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <USB_DeviceState>
    1c9a:	24 30       	cpi	r18, 0x04	; 4
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <MS_Device_USBTask+0x1c>
    1c9e:	f7 c0       	rjmp	.+494    	; 0x1e8e <MS_Device_USBTask+0x20a>
    1ca0:	8c 01       	movw	r16, r24
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ca6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1cae:	85 ff       	sbrs	r24, 5
    1cb0:	b8 c0       	rjmp	.+368    	; 0x1e22 <MS_Device_USBTask+0x19e>

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1cb2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1cb4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	
	BytesProcessed = 0;
    1cb8:	1a 82       	std	Y+2, r1	; 0x02
    1cba:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1cbc:	78 01       	movw	r14, r16
    1cbe:	fa e0       	ldi	r31, 0x0A	; 10
    1cc0:	ef 0e       	add	r14, r31
    1cc2:	f1 1c       	adc	r15, r1
    1cc4:	ae 01       	movw	r20, r28
    1cc6:	4f 5f       	subi	r20, 0xFF	; 255
    1cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cca:	6f e0       	ldi	r22, 0x0F	; 15
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	c7 01       	movw	r24, r14
    1cd0:	c6 da       	rcall	.-2676   	; 0x125e <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1cd2:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1cd4:	85 30       	cpi	r24, 0x05	; 5
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <MS_Device_USBTask+0x5c>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1cd8:	86 a9       	ldd	r24, Z+54	; 0x36
    1cda:	88 23       	and	r24, r24
    1cdc:	99 f3       	breq	.-26     	; 0x1cc4 <MS_Device_USBTask+0x40>
    1cde:	a1 c0       	rjmp	.+322    	; 0x1e22 <MS_Device_USBTask+0x19e>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1ce0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ce2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ce4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ce6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ce8:	85 35       	cpi	r24, 0x55	; 85
    1cea:	93 45       	sbci	r25, 0x53	; 83
    1cec:	a2 44       	sbci	r26, 0x42	; 66
    1cee:	b3 44       	sbci	r27, 0x43	; 67
    1cf0:	61 f4       	brne	.+24     	; 0x1d0a <MS_Device_USBTask+0x86>
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	97 89       	ldd	r25, Z+23	; 0x17
    1cf6:	81 85       	ldd	r24, Z+9	; 0x09
    1cf8:	98 17       	cp	r25, r24
    1cfa:	38 f4       	brcc	.+14     	; 0x1d0a <MS_Device_USBTask+0x86>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1cfc:	86 89       	ldd	r24, Z+22	; 0x16
    1cfe:	8f 71       	andi	r24, 0x1F	; 31
    1d00:	21 f4       	brne	.+8      	; 0x1d0a <MS_Device_USBTask+0x86>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1d02:	80 8d       	ldd	r24, Z+24	; 0x18
    1d04:	81 50       	subi	r24, 0x01	; 1
    1d06:	80 31       	cpi	r24, 0x10	; 16
    1d08:	78 f0       	brcs	.+30     	; 0x1d28 <MS_Device_USBTask+0xa4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d0a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d0e:	80 62       	ori	r24, 0x20	; 32
    1d10:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d14:	f8 01       	movw	r30, r16
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d18:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d1c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d20:	80 62       	ori	r24, 0x20	; 32
    1d22:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d26:	7d c0       	rjmp	.+250    	; 0x1e22 <MS_Device_USBTask+0x19e>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d2c:	78 01       	movw	r14, r16
    1d2e:	f9 e1       	ldi	r31, 0x19	; 25
    1d30:	ef 0e       	add	r14, r31
    1d32:	f1 1c       	adc	r15, r1
    1d34:	f8 01       	movw	r30, r16
    1d36:	60 8d       	ldd	r22, Z+24	; 0x18
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	ae 01       	movw	r20, r28
    1d3c:	4f 5f       	subi	r20, 0xFF	; 255
    1d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d40:	c7 01       	movw	r24, r14
    1d42:	8d da       	rcall	.-2790   	; 0x125e <Endpoint_Read_Stream_LE>
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <MS_Device_USBTask+0xce>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d48:	f8 01       	movw	r30, r16
    1d4a:	86 a9       	ldd	r24, Z+54	; 0x36
    1d4c:	88 23       	and	r24, r24
    1d4e:	91 f3       	breq	.-28     	; 0x1d34 <MS_Device_USBTask+0xb0>
    1d50:	68 c0       	rjmp	.+208    	; 0x1e22 <MS_Device_USBTask+0x19e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d56:	8b 77       	andi	r24, 0x7B	; 123
    1d58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	86 89       	ldd	r24, Z+22	; 0x16
    1d60:	87 ff       	sbrs	r24, 7
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <MS_Device_USBTask+0xe6>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d64:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d66:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 66 01 	call	0x2cc	; 0x2cc <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	98 27       	eor	r25, r24
    1d74:	f8 01       	movw	r30, r16
    1d76:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1d78:	45 e5       	ldi	r20, 0x55	; 85
    1d7a:	53 e5       	ldi	r21, 0x53	; 83
    1d7c:	62 e4       	ldi	r22, 0x42	; 66
    1d7e:	73 e5       	ldi	r23, 0x53	; 83
    1d80:	41 a7       	std	Z+41, r20	; 0x29
    1d82:	52 a7       	std	Z+42, r21	; 0x2a
    1d84:	63 a7       	std	Z+43, r22	; 0x2b
    1d86:	74 a7       	std	Z+44, r23	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1d88:	46 85       	ldd	r20, Z+14	; 0x0e
    1d8a:	57 85       	ldd	r21, Z+15	; 0x0f
    1d8c:	60 89       	ldd	r22, Z+16	; 0x10
    1d8e:	71 89       	ldd	r23, Z+17	; 0x11
    1d90:	45 a7       	std	Z+45, r20	; 0x2d
    1d92:	56 a7       	std	Z+46, r21	; 0x2e
    1d94:	67 a7       	std	Z+47, r22	; 0x2f
    1d96:	70 ab       	std	Z+48, r23	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1d98:	42 89       	ldd	r20, Z+18	; 0x12
    1d9a:	53 89       	ldd	r21, Z+19	; 0x13
    1d9c:	64 89       	ldd	r22, Z+20	; 0x14
    1d9e:	75 89       	ldd	r23, Z+21	; 0x15
    1da0:	41 ab       	std	Z+49, r20	; 0x31
    1da2:	52 ab       	std	Z+50, r21	; 0x32
    1da4:	63 ab       	std	Z+51, r22	; 0x33
    1da6:	74 ab       	std	Z+52, r23	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1da8:	81 11       	cpse	r24, r1
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <MS_Device_USBTask+0x13a>
    1dac:	45 2b       	or	r20, r21
    1dae:	46 2b       	or	r20, r22
    1db0:	47 2b       	or	r20, r23
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <MS_Device_USBTask+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1db4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1db8:	80 62       	ori	r24, 0x20	; 32
    1dba:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1dc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dc6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1dca:	f8 01       	movw	r30, r16

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1dcc:	85 ff       	sbrs	r24, 5
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <MS_Device_USBTask+0x154>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1dd0:	86 a9       	ldd	r24, Z+54	; 0x36
    1dd2:	88 23       	and	r24, r24
    1dd4:	c1 f3       	breq	.-16     	; 0x1dc6 <MS_Device_USBTask+0x142>
    1dd6:	25 c0       	rjmp	.+74     	; 0x1e22 <MS_Device_USBTask+0x19e>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1dda:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1dde:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	while (Endpoint_IsStalled())
    1de2:	85 ff       	sbrs	r24, 5
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <MS_Device_USBTask+0x16c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1de6:	f8 01       	movw	r30, r16
    1de8:	86 a9       	ldd	r24, Z+54	; 0x36
    1dea:	88 23       	and	r24, r24
    1dec:	c1 f3       	breq	.-16     	; 0x1dde <MS_Device_USBTask+0x15a>
    1dee:	19 c0       	rjmp	.+50     	; 0x1e22 <MS_Device_USBTask+0x19e>
		  return;
	}

	uint16_t BytesProcessed = 0;
    1df0:	1a 82       	std	Y+2, r1	; 0x02
    1df2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1df4:	78 01       	movw	r14, r16
    1df6:	f9 e2       	ldi	r31, 0x29	; 41
    1df8:	ef 0e       	add	r14, r31
    1dfa:	f1 1c       	adc	r15, r1
    1dfc:	ae 01       	movw	r20, r28
    1dfe:	4f 5f       	subi	r20, 0xFF	; 255
    1e00:	5f 4f       	sbci	r21, 0xFF	; 255
    1e02:	6d e0       	ldi	r22, 0x0D	; 13
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	c7 01       	movw	r24, r14
    1e08:	93 d9       	rcall	.-3290   	; 0x1130 <Endpoint_Write_Stream_LE>
    1e0a:	85 30       	cpi	r24, 0x05	; 5
    1e0c:	29 f4       	brne	.+10     	; 0x1e18 <MS_Device_USBTask+0x194>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e0e:	f8 01       	movw	r30, r16
    1e10:	86 a9       	ldd	r24, Z+54	; 0x36
    1e12:	88 23       	and	r24, r24
    1e14:	99 f3       	breq	.-26     	; 0x1dfc <MS_Device_USBTask+0x178>
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <MS_Device_USBTask+0x19e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e1c:	8e 77       	andi	r24, 0x7E	; 126
    1e1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1e22:	f8 01       	movw	r30, r16
    1e24:	86 a9       	ldd	r24, Z+54	; 0x36
    1e26:	88 23       	and	r24, r24
    1e28:	91 f1       	breq	.+100    	; 0x1e8e <MS_Device_USBTask+0x20a>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9c 01       	movw	r18, r24
    1e30:	05 80       	ldd	r0, Z+5	; 0x05
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <MS_Device_USBTask+0x1b4>
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <MS_Device_USBTask+0x1b0>
    1e3c:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1e40:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1e44:	01 80       	ldd	r0, Z+1	; 0x01
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <MS_Device_USBTask+0x1c8>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <MS_Device_USBTask+0x1c4>
    1e50:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1e54:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1e58:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e62:	80 61       	ori	r24, 0x10	; 16
    1e64:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e68:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1e72:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e74:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e78:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e7c:	80 61       	ori	r24, 0x10	; 16
    1e7e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e82:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e86:	88 60       	ori	r24, 0x08	; 8
    1e88:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1e8c:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret

00001ea0 <__tablejump2__>:
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	00 24       	eor	r0, r0
    1ea6:	00 1c       	adc	r0, r0
    1ea8:	0b be       	out	0x3b, r0	; 59
    1eaa:	07 90       	elpm	r0, Z+
    1eac:	f6 91       	elpm	r31, Z
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	09 94       	ijmp

00001eb2 <memcmp>:
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <memcmp+0xe>
    1eb8:	8d 91       	ld	r24, X+
    1eba:	01 90       	ld	r0, Z+
    1ebc:	80 19       	sub	r24, r0
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <memcmp+0x16>
    1ec0:	41 50       	subi	r20, 0x01	; 1
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	c8 f7       	brcc	.-14     	; 0x1eb8 <memcmp+0x6>
    1ec6:	88 1b       	sub	r24, r24
    1ec8:	99 0b       	sbc	r25, r25
    1eca:	08 95       	ret

00001ecc <memcpy>:
    1ecc:	fb 01       	movw	r30, r22
    1ece:	dc 01       	movw	r26, r24
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <memcpy+0xa>
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	0d 92       	st	X+, r0
    1ed6:	41 50       	subi	r20, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	d8 f7       	brcc	.-10     	; 0x1ed2 <memcpy+0x6>
    1edc:	08 95       	ret

00001ede <memset>:
    1ede:	dc 01       	movw	r26, r24
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <memset+0x6>
    1ee2:	6d 93       	st	X+, r22
    1ee4:	41 50       	subi	r20, 0x01	; 1
    1ee6:	50 40       	sbci	r21, 0x00	; 0
    1ee8:	e0 f7       	brcc	.-8      	; 0x1ee2 <memset+0x4>
    1eea:	08 95       	ret

00001eec <_exit>:
    1eec:	f8 94       	cli

00001eee <__stop_program>:
    1eee:	ff cf       	rjmp	.-2      	; 0x1eee <__stop_program>
