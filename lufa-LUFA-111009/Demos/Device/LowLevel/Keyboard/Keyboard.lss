
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e06  00000e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000e9e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051ef  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b08  00000000  00000000  0000633f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d37  00000000  00000000  00007e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000744  00000000  00000000  0000ab80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021b0  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002da4  00000000  00000000  0000d474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
   2:	00 00       	nop
   4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	b0 c3       	rjmp	.+1888   	; 0x78a <__vector_10>
  2a:	00 00       	nop
  2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	a0 c0       	rjmp	.+320    	; 0x1a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	9e c0       	rjmp	.+316    	; 0x1a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8a c0       	rjmp	.+276    	; 0x1a6 <__bad_interrupt>
  92:	00 00       	nop
  94:	88 c0       	rjmp	.+272    	; 0x1a6 <__bad_interrupt>
  96:	00 00       	nop
  98:	b0 05       	cpc	r27, r0
  9a:	d2 05       	cpc	r29, r2
  9c:	bf 06       	cpc	r11, r31
  9e:	d2 05       	cpc	r29, r2
  a0:	bf 06       	cpc	r11, r31
  a2:	17 06       	cpc	r1, r23
  a4:	3a 06       	cpc	r3, r26
  a6:	bf 06       	cpc	r11, r31
  a8:	8c 06       	cpc	r8, r28
  aa:	9e 06       	cpc	r9, r30

000000ac <ProductString>:
  ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
  bc:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
 102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 112:	00 01 07 05 02 03 08 00 01                          .........

0000011b <DeviceDescriptor>:
 11b:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
 12b:	00 01                                               ..

0000012d <KeyboardReport>:
 12d:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 13d:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 14d:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 15d:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	d0 e2       	ldi	r29, 0x20	; 32
 174:	de bf       	out	0x3e, r29	; 62
 176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
 178:	11 e0       	ldi	r17, 0x01	; 1
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b1 e0       	ldi	r27, 0x01	; 1
 17e:	e6 e0       	ldi	r30, 0x06	; 6
 180:	fe e0       	ldi	r31, 0x0E	; 14
 182:	00 e0       	ldi	r16, 0x00	; 0
 184:	0b bf       	out	0x3b, r16	; 59
 186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x14>
 188:	07 90       	elpm	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	a4 30       	cpi	r26, 0x04	; 4
 18e:	b1 07       	cpc	r27, r17
 190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0x10>

00000192 <__do_clear_bss>:
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	a4 e0       	ldi	r26, 0x04	; 4
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
 19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
 19c:	ab 31       	cpi	r26, 0x1B	; 27
 19e:	b2 07       	cpc	r27, r18
 1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
 1a2:	ca d1       	rcall	.+916    	; 0x538 <main>
 1a4:	2e c6       	rjmp	.+3164   	; 0xe02 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	89 2b       	or	r24, r25
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	08 95       	ret

000001b2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1b2:	84 b7       	in	r24, 0x34	; 52
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	a8 95       	wdr
 1be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c2:	88 61       	ori	r24, 0x18	; 24
 1c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1cc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1de:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	8f 71       	andi	r24, 0x1F	; 31
 1e4:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1e6:	8d b1       	in	r24, 0x0d	; 13
 1e8:	8f 7c       	andi	r24, 0xCF	; 207
 1ea:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	80 6e       	ori	r24, 0xE0	; 224
 1f0:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1f2:	8e b1       	in	r24, 0x0e	; 14
 1f4:	80 63       	ori	r24, 0x30	; 48
 1f6:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1f8:	8a b1       	in	r24, 0x0a	; 10
 1fa:	80 6f       	ori	r24, 0xF0	; 240
 1fc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 204:	ac d2       	rcall	.+1368   	; 0x75e <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 206:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 208:	72 9a       	sbi	0x0e, 2	; 14
 20a:	08 95       	ret

0000020c <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 20c:	80 ea       	ldi	r24, 0xA0	; 160
 20e:	cc df       	rcall	.-104    	; 0x1a8 <LEDs_SetAllLEDs>

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UsingReportProtocol>
 216:	08 95       	ret

00000218 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	c6 cf       	rjmp	.-116    	; 0x1a8 <LEDs_SetAllLEDs>

0000021c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 21c:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 21e:	42 e0       	ldi	r20, 0x02	; 2
 220:	61 ec       	ldi	r22, 0xC1	; 193
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	d1 d1       	rcall	.+930    	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv>
 226:	c8 2f       	mov	r28, r24
 228:	42 e0       	ldi	r20, 0x02	; 2
 22a:	60 ec       	ldi	r22, 0xC0	; 192
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	cc d1       	rcall	.+920    	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 230:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 234:	94 60       	ori	r25, 0x04	; 4
 236:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 23a:	88 23       	and	r24, r24
 23c:	11 f0       	breq	.+4      	; 0x242 <EVENT_USB_Device_ConfigurationChanged+0x26>
 23e:	c1 11       	cpse	r28, r1
 240:	02 c0       	rjmp	.+4      	; 0x246 <EVENT_USB_Device_ConfigurationChanged+0x2a>
 242:	80 e9       	ldi	r24, 0x90	; 144
 244:	01 c0       	rjmp	.+2      	; 0x248 <EVENT_USB_Device_ConfigurationChanged+0x2c>
}
 246:	80 e6       	ldi	r24, 0x60	; 96

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 248:	cf 91       	pop	r28
 24a:	ae cf       	rjmp	.-164    	; 0x1a8 <LEDs_SetAllLEDs>

0000024c <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 24c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <IdleMSRemaining>
 250:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <IdleMSRemaining+0x1>
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	29 f0       	breq	.+10     	; 0x262 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <IdleMSRemaining+0x1>
 25e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <IdleMSRemaining>
 262:	08 95       	ret

00000264 <CreateKeyboardReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
 264:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 266:	93 b1       	in	r25, 0x03	; 3
 268:	2c b1       	in	r18, 0x0c	; 12
 26a:	20 95       	com	r18
 26c:	20 73       	andi	r18, 0x30	; 48
 26e:	26 95       	lsr	r18
 270:	90 95       	com	r25
 272:	90 7e       	andi	r25, 0xE0	; 224
 274:	29 2b       	or	r18, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 276:	8c b1       	in	r24, 0x0c	; 12
 278:	80 95       	com	r24
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_KeyboardReport_Data_t));
 27a:	98 e0       	ldi	r25, 0x08	; 8
 27c:	df 01       	movw	r26, r30
 27e:	1d 92       	st	X+, r1
 280:	9a 95       	dec	r25
 282:	e9 f7       	brne	.-6      	; 0x27e <CreateKeyboardReport+0x1a>

	/* Make sent key uppercase by indicating that the left shift key is pressed */
	ReportData->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	90 83       	st	Z, r25

	if (JoyStatus_LCL & JOY_UP)
 288:	27 ff       	sbrs	r18, 7
 28a:	02 c0       	rjmp	.+4      	; 0x290 <CreateKeyboardReport+0x2c>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	03 c0       	rjmp	.+6      	; 0x296 <CreateKeyboardReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
 290:	24 ff       	sbrs	r18, 4
 292:	04 c0       	rjmp	.+8      	; 0x29c <CreateKeyboardReport+0x38>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
 294:	95 e0       	ldi	r25, 0x05	; 5
 296:	92 83       	std	Z+2, r25	; 0x02
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	01 c0       	rjmp	.+2      	; 0x29e <CreateKeyboardReport+0x3a>
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
	uint8_t JoyStatus_LCL     = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;
 29c:	90 e0       	ldi	r25, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
 29e:	26 ff       	sbrs	r18, 6
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <CreateKeyboardReport+0x48>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
 2a2:	df 01       	movw	r26, r30
 2a4:	a9 0f       	add	r26, r25
 2a6:	b1 1d       	adc	r27, r1
 2a8:	36 e0       	ldi	r19, 0x06	; 6
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <CreateKeyboardReport+0x54>
	else if (JoyStatus_LCL & JOY_RIGHT)
 2ac:	23 ff       	sbrs	r18, 3
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <CreateKeyboardReport+0x5a>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
 2b0:	df 01       	movw	r26, r30
 2b2:	a9 0f       	add	r26, r25
 2b4:	b1 1d       	adc	r27, r1
 2b6:	37 e0       	ldi	r19, 0x07	; 7
 2b8:	12 96       	adiw	r26, 0x02	; 2
 2ba:	3c 93       	st	X, r19
 2bc:	9f 5f       	subi	r25, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
 2be:	25 ff       	sbrs	r18, 5
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <CreateKeyboardReport+0x6c>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
 2c2:	df 01       	movw	r26, r30
 2c4:	a9 0f       	add	r26, r25
 2c6:	b1 1d       	adc	r27, r1
 2c8:	28 e0       	ldi	r18, 0x08	; 8
 2ca:	12 96       	adiw	r26, 0x02	; 2
 2cc:	2c 93       	st	X, r18
 2ce:	9f 5f       	subi	r25, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 2d0:	82 ff       	sbrs	r24, 2
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <CreateKeyboardReport+0x78>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
 2d4:	e9 0f       	add	r30, r25
 2d6:	f1 1d       	adc	r31, r1
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	82 83       	std	Z+2, r24	; 0x02
 2dc:	08 95       	ret

000002de <ProcessLEDReport>:
/** Processes a received LED report, and updates the board LEDs states to match.
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
 2de:	98 2f       	mov	r25, r24
	uint8_t LEDMask = LEDS_LED2;

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
 2e0:	80 ff       	sbrs	r24, 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <ProcessLEDReport+0xa>
	  LEDMask |= LEDS_LED1;
 2e4:	80 e3       	ldi	r24, 0x30	; 48
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <ProcessLEDReport+0xc>
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;
 2e8:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
 2ea:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
 2ec:	80 68       	ori	r24, 0x80	; 128

	if (LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
 2ee:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
 2f0:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
 2f2:	5a cf       	rjmp	.-332    	; 0x1a8 <LEDs_SetAllLEDs>

000002f4 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	28 97       	sbiw	r28, 0x08	; 8
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 30a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x1>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <EVENT_USB_Device_ControlRequest+0x20>
 312:	47 c0       	rjmp	.+142    	; 0x3a2 <EVENT_USB_Device_ControlRequest+0xae>
 314:	30 f4       	brcc	.+12     	; 0x322 <EVENT_USB_Device_ControlRequest+0x2e>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	71 f0       	breq	.+28     	; 0x336 <EVENT_USB_Device_ControlRequest+0x42>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	09 f4       	brne	.+2      	; 0x320 <EVENT_USB_Device_ControlRequest+0x2c>
 31e:	7d c0       	rjmp	.+250    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 320:	95 c0       	rjmp	.+298    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 322:	8a 30       	cpi	r24, 0x0A	; 10
 324:	09 f4       	brne	.+2      	; 0x328 <EVENT_USB_Device_ControlRequest+0x34>
 326:	60 c0       	rjmp	.+192    	; 0x3e8 <EVENT_USB_Device_ControlRequest+0xf4>
 328:	8b 30       	cpi	r24, 0x0B	; 11
 32a:	09 f4       	brne	.+2      	; 0x32e <EVENT_USB_Device_ControlRequest+0x3a>
 32c:	47 c0       	rjmp	.+142    	; 0x3bc <EVENT_USB_Device_ControlRequest+0xc8>
 32e:	89 30       	cpi	r24, 0x09	; 9
 330:	09 f0       	breq	.+2      	; 0x334 <EVENT_USB_Device_ControlRequest+0x40>
 332:	8c c0       	rjmp	.+280    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 334:	18 c0       	rjmp	.+48     	; 0x366 <EVENT_USB_Device_ControlRequest+0x72>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 336:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 33a:	81 3a       	cpi	r24, 0xA1	; 161
 33c:	09 f0       	breq	.+2      	; 0x340 <EVENT_USB_Device_ControlRequest+0x4c>
 33e:	86 c0       	rjmp	.+268    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			{
				USB_KeyboardReport_Data_t KeyboardReportData;

				/* Create the next keyboard report for transmission to the host */
				CreateKeyboardReport(&KeyboardReportData);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	8f df       	rcall	.-226    	; 0x264 <CreateKeyboardReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 350:	68 e0       	ldi	r22, 0x08	; 8
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	2a d3       	rcall	.+1620   	; 0x9ae <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 35a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 35e:	8b 77       	andi	r24, 0x7B	; 123
 360:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 364:	73 c0       	rjmp	.+230    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 366:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 36a:	81 32       	cpi	r24, 0x21	; 33
 36c:	09 f0       	breq	.+2      	; 0x370 <EVENT_USB_Device_ControlRequest+0x7c>
 36e:	6e c0       	rjmp	.+220    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 370:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 37a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 37e:	82 fd       	sbrc	r24, 2
 380:	05 c0       	rjmp	.+10     	; 0x38c <EVENT_USB_Device_ControlRequest+0x98>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 382:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 386:	81 11       	cpse	r24, r1
 388:	f8 cf       	rjmp	.-16     	; 0x37a <EVENT_USB_Device_ControlRequest+0x86>
 38a:	60 c0       	rjmp	.+192    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 38c:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 390:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 394:	8b 77       	andi	r24, 0x7B	; 123
 396:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				/* Process the incoming LED report */
				ProcessLEDReport(LEDStatus);
 39a:	4a d1       	rcall	.+660    	; 0x630 <Endpoint_ClearStatusStage>
 39c:	81 2f       	mov	r24, r17
 39e:	9f df       	rcall	.-194    	; 0x2de <ProcessLEDReport>
 3a0:	55 c0       	rjmp	.+170    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3a2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3a6:	81 3a       	cpi	r24, 0xA1	; 161
 3a8:	09 f0       	breq	.+2      	; 0x3ac <EVENT_USB_Device_ControlRequest+0xb8>
 3aa:	50 c0       	rjmp	.+160    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3b0:	87 7f       	andi	r24, 0xF7	; 247
 3b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 3b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UsingReportProtocol>
 3ba:	40 c0       	rjmp	.+128    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3c0:	81 32       	cpi	r24, 0x21	; 33
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <EVENT_USB_Device_ControlRequest+0xd2>
 3c4:	43 c0       	rjmp	.+134    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3d0:	2f d1       	rcall	.+606    	; 0x630 <Endpoint_ClearStatusStage>

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 3d8:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 3dc:	23 2b       	or	r18, r19
 3de:	09 f4       	brne	.+2      	; 0x3e2 <EVENT_USB_Device_ControlRequest+0xee>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UsingReportProtocol>
 3e6:	32 c0       	rjmp	.+100    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3ec:	81 32       	cpi	r24, 0x21	; 33
 3ee:	71 f5       	brne	.+92     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3fa:	1a d1       	rcall	.+564    	; 0x630 <Endpoint_ClearStatusStage>

				/* Get idle period in MSB, IdleCount must be multiplied by 4 to get number of milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 3fc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 400:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 404:	88 27       	eor	r24, r24
 406:	36 e0       	ldi	r19, 0x06	; 6
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	3a 95       	dec	r19
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 418:	19 c0       	rjmp	.+50     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 41a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 41e:	81 3a       	cpi	r24, 0xA1	; 161
 420:	a9 f4       	brne	.+42     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 426:	87 7f       	andi	r24, 0xF7	; 247
 428:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 42c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 430:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 43c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 440:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 444:	8e 77       	andi	r24, 0x7E	; 126
 446:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 44a:	f2 d0       	rcall	.+484    	; 0x630 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 44c:	28 96       	adiw	r28, 0x08	; 8
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	08 95       	ret

00000460 <SendNextReport>:
	LEDs_SetAllLEDs(LEDMask);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	28 97       	sbiw	r28, 0x08	; 8
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
	static USB_KeyboardReport_Data_t PrevKeyboardReportData;
	USB_KeyboardReport_Data_t        KeyboardReportData;
	bool                             SendReport = true;

	/* Create the next keyboard report for transmission to the host */
	CreateKeyboardReport(&KeyboardReportData);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	f5 de       	rcall	.-534    	; 0x264 <CreateKeyboardReport>

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevKeyboardReportData, &KeyboardReportData, sizeof(USB_KeyboardReport_Data_t)) != 0);
 47a:	48 e0       	ldi	r20, 0x08	; 8
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	be 01       	movw	r22, r28
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	af d4       	rcall	.+2398   	; 0xde8 <memcmp>
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	89 2b       	or	r24, r25
 48e:	09 f4       	brne	.+2      	; 0x492 <SendNextReport+0x32>
 490:	20 e0       	ldi	r18, 0x00	; 0

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 496:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	59 f0       	breq	.+22     	; 0x4b4 <SendNextReport+0x54>
 49e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <IdleMSRemaining>
 4a2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <IdleMSRemaining+0x1>
 4a6:	45 2b       	or	r20, r21
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <SendNextReport+0x54>
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 4aa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <IdleMSRemaining+0x1>
 4ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <IdleMSRemaining>

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 4b2:	21 e0       	ldi	r18, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 4be:	85 ff       	sbrs	r24, 5
 4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <SendNextReport+0x90>
 4c2:	22 23       	and	r18, r18
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <SendNextReport+0x90>
	{
		/* Save the current report data for later comparison to check for changes */
		PrevKeyboardReportData = KeyboardReportData;
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	fe 01       	movw	r30, r28
 4ca:	31 96       	adiw	r30, 0x01	; 1
 4cc:	a4 e0       	ldi	r26, 0x04	; 4
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	01 90       	ld	r0, Z+
 4d2:	0d 92       	st	X+, r0
 4d4:	8a 95       	dec	r24
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <SendNextReport+0x70>

		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	68 e0       	ldi	r22, 0x08	; 8
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	1a d2       	rcall	.+1076   	; 0x91a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4ea:	8e 77       	andi	r24, 0x7E	; 126
 4ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 4f0:	28 96       	adiw	r28, 0x08	; 8
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 50c:	82 ff       	sbrs	r24, 2
 50e:	0c c0       	rjmp	.+24     	; 0x528 <ReceiveNextReport+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 514:	85 ff       	sbrs	r24, 5
 516:	03 c0       	rjmp	.+6      	; 0x51e <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 518:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_8();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 51c:	e0 de       	rcall	.-576    	; 0x2de <ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 51e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 522:	8b 77       	andi	r24, 0x7B	; 123
 524:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 528:	08 95       	ret

0000052a <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 52a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	11 f4       	brne	.+4      	; 0x536 <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
 532:	96 df       	rcall	.-212    	; 0x460 <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 534:	e6 cf       	rjmp	.-52     	; 0x502 <ReceiveNextReport>
 536:	08 95       	ret

00000538 <main>:
 538:	3c de       	rcall	.-904    	; 0x1b2 <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 53a:	80 e1       	ldi	r24, 0x10	; 16
 53c:	35 de       	rcall	.-918    	; 0x1a8 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		HID_Task();
 53e:	78 94       	sei
 540:	f4 df       	rcall	.-24     	; 0x52a <HID_Task>
		USB_USBTask();
 542:	37 d4       	rcall	.+2158   	; 0xdb2 <USB_USBTask>
 544:	fd cf       	rjmp	.-6      	; 0x540 <main+0x8>

00000546 <CALLBACK_USB_GetDescriptor>:
 546:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 548:	33 27       	eor	r19, r19
 54a:	23 30       	cpi	r18, 0x03	; 3
 54c:	31 05       	cpc	r19, r1
 54e:	e1 f0       	breq	.+56     	; 0x588 <CALLBACK_USB_GetDescriptor+0x42>
 550:	58 f4       	brcc	.+22     	; 0x568 <CALLBACK_USB_GetDescriptor+0x22>
 552:	21 30       	cpi	r18, 0x01	; 1
 554:	31 05       	cpc	r19, r1
 556:	99 f0       	breq	.+38     	; 0x57e <CALLBACK_USB_GetDescriptor+0x38>
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	69 f5       	brne	.+90     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 55e:	89 e2       	ldi	r24, 0x29	; 41
 560:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 562:	22 ef       	ldi	r18, 0xF2	; 242
 564:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 566:	2c c0       	rjmp	.+88     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 568:	21 32       	cpi	r18, 0x21	; 33
 56a:	31 05       	cpc	r19, r1
 56c:	01 f1       	breq	.+64     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x68>
 56e:	22 32       	cpi	r18, 0x22	; 34
 570:	31 05       	cpc	r19, r1
 572:	11 f5       	brne	.+68     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
 574:	8f e3       	ldi	r24, 0x3F	; 63
 576:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 578:	2d e2       	ldi	r18, 0x2D	; 45
 57a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
 57c:	21 c0       	rjmp	.+66     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 57e:	82 e1       	ldi	r24, 0x12	; 18
 580:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 582:	2b e1       	ldi	r18, 0x1B	; 27
 584:	31 e0       	ldi	r19, 0x01	; 1
 586:	1c c0       	rjmp	.+56     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 588:	99 27       	eor	r25, r25
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	91 05       	cpc	r25, r1
 58e:	49 f0       	breq	.+18     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x5c>
 590:	28 f0       	brcs	.+10     	; 0x59c <CALLBACK_USB_GetDescriptor+0x56>
 592:	02 97       	sbiw	r24, 0x02	; 2
 594:	89 f4       	brne	.+34     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 596:	ec ea       	ldi	r30, 0xAC	; 172
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 59c:	ee ee       	ldi	r30, 0xEE	; 238
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5a2:	e4 ed       	ldi	r30, 0xD4	; 212
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5a6:	84 91       	lpm	r24, Z
 5a8:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 5aa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 5ae:	89 e0       	ldi	r24, 0x09	; 9
 5b0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 5b2:	24 e0       	ldi	r18, 0x04	; 4
 5b4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
 5c0:	fa 01       	movw	r30, r20
 5c2:	31 83       	std	Z+1, r19	; 0x01
 5c4:	20 83       	st	Z, r18
	return Size;
}
 5c6:	08 95       	ret

000005c8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 5c8:	98 2f       	mov	r25, r24
 5ca:	97 30       	cpi	r25, 0x07	; 7
 5cc:	68 f5       	brcc	.+90     	; 0x628 <Endpoint_ConfigureEndpoint_Prv+0x60>
 5ce:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 5d2:	98 17       	cp	r25, r24
 5d4:	39 f0       	breq	.+14     	; 0x5e4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 5d6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 5da:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 5de:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <Endpoint_ConfigureEndpoint_Prv+0x22>
 5e4:	24 2f       	mov	r18, r20
 5e6:	76 2f       	mov	r23, r22
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	21 fd       	sbrc	r18, 1
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	ec cf       	rjmp	.-40     	; 0x5ca <Endpoint_ConfigureEndpoint_Prv+0x2>
 5f2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 5f6:	3e 7f       	andi	r19, 0xFE	; 254
 5f8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 5fc:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 600:	3d 7f       	andi	r19, 0xFD	; 253
 602:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 606:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 60a:	31 60       	ori	r19, 0x01	; 1
 60c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 610:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 614:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 618:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 61c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 620:	27 fd       	sbrc	r18, 7
 622:	e5 cf       	rjmp	.-54     	; 0x5ee <Endpoint_ConfigureEndpoint_Prv+0x26>
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret
 628:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret

00000630 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 630:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 634:	87 ff       	sbrs	r24, 7
 636:	11 c0       	rjmp	.+34     	; 0x65a <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 63c:	82 fd       	sbrc	r24, 2
 63e:	05 c0       	rjmp	.+10     	; 0x64a <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 640:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 644:	81 11       	cpse	r24, r1
 646:	f8 cf       	rjmp	.-16     	; 0x638 <Endpoint_ClearStatusStage+0x8>
 648:	11 c0       	rjmp	.+34     	; 0x66c <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 64a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 64e:	8b 77       	andi	r24, 0x7B	; 123
 650:	0b c0       	rjmp	.+22     	; 0x668 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 652:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 656:	88 23       	and	r24, r24
 658:	49 f0       	breq	.+18     	; 0x66c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 65a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 65e:	80 ff       	sbrs	r24, 0
 660:	f8 cf       	rjmp	.-16     	; 0x652 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 662:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 666:	8e 77       	andi	r24, 0x7E	; 126
 668:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 66c:	08 95       	ret

0000066e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 66e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 672:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 676:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 678:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 67c:	84 2f       	mov	r24, r20
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	40 ff       	sbrs	r20, 0
 682:	23 c0       	rjmp	.+70     	; 0x6ca <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 684:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 688:	80 fd       	sbrc	r24, 0
 68a:	1d c0       	rjmp	.+58     	; 0x6c6 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 68c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 690:	88 23       	and	r24, r24
 692:	99 f0       	breq	.+38     	; 0x6ba <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 694:	85 30       	cpi	r24, 0x05	; 5
 696:	99 f0       	breq	.+38     	; 0x6be <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 698:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 69c:	85 fd       	sbrc	r24, 5
 69e:	11 c0       	rjmp	.+34     	; 0x6c2 <Endpoint_WaitUntilReady+0x54>
 6a0:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 6a4:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 6a8:	24 17       	cp	r18, r20
 6aa:	35 07       	cpc	r19, r21
 6ac:	29 f3       	breq	.-54     	; 0x678 <Endpoint_WaitUntilReady+0xa>
 6ae:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <Endpoint_WaitUntilReady+0x48>
 6b2:	9a 01       	movw	r18, r20
 6b4:	e1 cf       	rjmp	.-62     	; 0x678 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 6b6:	84 e0       	ldi	r24, 0x04	; 4
 6b8:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 6be:	83 e0       	ldi	r24, 0x03	; 3
 6c0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ca:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 6ce:	42 ff       	sbrs	r20, 2
 6d0:	dd cf       	rjmp	.-70     	; 0x68c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 6d2:	08 95       	ret

000006d4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6dc:	49 d0       	rcall	.+146    	; 0x770 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6de:	50 d0       	rcall	.+160    	; 0x780 <USB_INT_ClearAllInterrupts>
 6e0:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6e2:	d0 e0       	ldi	r29, 0x00	; 0
 6e4:	88 81       	ld	r24, Y
 6e6:	8f 77       	andi	r24, 0x7F	; 127
 6e8:	88 83       	st	Y, r24
 6ea:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 6ec:	80 68       	ori	r24, 0x80	; 128
 6ee:	88 83       	st	Y, r24
 6f0:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6f2:	8f 7d       	andi	r24, 0xDF	; 223
 6f4:	88 83       	st	Y, r24
 6f6:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	80 68       	ori	r24, 0x80	; 128
 6fe:	80 83       	st	Z, r24
 700:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 702:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 706:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 70a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 70e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 712:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 714:	10 e0       	ldi	r17, 0x00	; 0
 716:	f8 01       	movw	r30, r16
 718:	80 81       	ld	r24, Z
 71a:	8b 7f       	andi	r24, 0xFB	; 251
 71c:	80 83       	st	Z, r24
 71e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 720:	81 60       	ori	r24, 0x01	; 1
 722:	88 83       	st	Y, r24
 724:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	4e df       	rcall	.-356    	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv>
 72c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	8e 7f       	andi	r24, 0xFE	; 254
 734:	80 83       	st	Z, r24
 736:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	80 83       	st	Z, r24
 740:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 742:	88 60       	ori	r24, 0x08	; 8
 744:	80 83       	st	Z, r24
 746:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 748:	80 81       	ld	r24, Z
 74a:	8e 7f       	andi	r24, 0xFE	; 254
 74c:	80 83       	st	Z, r24
 74e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 750:	80 61       	ori	r24, 0x10	; 16
 752:	88 83       	st	Y, r24
 754:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <USB_Init>:
 75e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	81 60       	ori	r24, 0x01	; 1
 766:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <USB_IsInitialized>

	USB_ResetInterface();
 76e:	b2 cf       	rjmp	.-156    	; 0x6d4 <USB_ResetInterface>

00000770 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 770:	e8 ed       	ldi	r30, 0xD8	; 216
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	8c 7f       	andi	r24, 0xFC	; 252
 778:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 77a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 77e:	08 95       	ret

00000780 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 780:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 784:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 788:	08 95       	ret

0000078a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	0b b6       	in	r0, 0x3b	; 59
 796:	0f 92       	push	r0
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7b4:	82 ff       	sbrs	r24, 2
 7b6:	0a c0       	rjmp	.+20     	; 0x7cc <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7bc:	82 ff       	sbrs	r24, 2
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 7c4:	8b 7f       	andi	r24, 0xFB	; 251
 7c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7ca:	40 dd       	rcall	.-1408   	; 0x24c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 7cc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 7d0:	80 ff       	sbrs	r24, 0
 7d2:	1d c0       	rjmp	.+58     	; 0x80e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 7d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 7d8:	80 ff       	sbrs	r24, 0
 7da:	19 c0       	rjmp	.+50     	; 0x80e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 7dc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 7e0:	8e 7f       	andi	r24, 0xFE	; 254
 7e2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7e6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7ea:	80 ff       	sbrs	r24, 0
 7ec:	0c c0       	rjmp	.+24     	; 0x806 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7ee:	8c e0       	ldi	r24, 0x0C	; 12
 7f0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7f2:	8e e0       	ldi	r24, 0x0E	; 14
 7f4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7f6:	09 b4       	in	r0, 0x29	; 41
 7f8:	00 fe       	sbrs	r0, 0
 7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 802:	04 dd       	rcall	.-1528   	; 0x20c <EVENT_USB_Device_Connect>
 804:	04 c0       	rjmp	.+8      	; 0x80e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 806:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 808:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 80c:	05 dd       	rcall	.-1526   	; 0x218 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 80e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 812:	80 ff       	sbrs	r24, 0
 814:	18 c0       	rjmp	.+48     	; 0x846 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 816:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 81a:	80 ff       	sbrs	r24, 0
 81c:	14 c0       	rjmp	.+40     	; 0x846 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 81e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 828:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 82c:	80 61       	ori	r24, 0x10	; 16
 82e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 832:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 836:	80 62       	ori	r24, 0x20	; 32
 838:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 83c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 83e:	85 e0       	ldi	r24, 0x05	; 5
 840:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 844:	b5 d2       	rcall	.+1386   	; 0xdb0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 846:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 84a:	84 ff       	sbrs	r24, 4
 84c:	2d c0       	rjmp	.+90     	; 0x8a8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 84e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 852:	84 ff       	sbrs	r24, 4
 854:	29 c0       	rjmp	.+82     	; 0x8a8 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 856:	8c e0       	ldi	r24, 0x0C	; 12
 858:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 85a:	8e e0       	ldi	r24, 0x0E	; 14
 85c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 85e:	09 b4       	in	r0, 0x29	; 41
 860:	00 fe       	sbrs	r0, 0
 862:	fd cf       	rjmp	.-6      	; 0x85e <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 864:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 868:	8f 7d       	andi	r24, 0xDF	; 223
 86a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 86e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 872:	8f 7e       	andi	r24, 0xEF	; 239
 874:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 878:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 87c:	8f 7e       	andi	r24, 0xEF	; 239
 87e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 882:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 886:	81 60       	ori	r24, 0x01	; 1
 888:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 88c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
 890:	81 11       	cpse	r24, r1
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 894:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 898:	87 fd       	sbrc	r24, 7
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__vector_10+0x116>
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__vector_10+0x118>
 8a0:	84 e0       	ldi	r24, 0x04	; 4
 8a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 8a6:	84 d2       	rcall	.+1288   	; 0xdb0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8ac:	83 ff       	sbrs	r24, 3
 8ae:	22 c0       	rjmp	.+68     	; 0x8f4 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8b4:	83 ff       	sbrs	r24, 3
 8b6:	1e c0       	rjmp	.+60     	; 0x8f4 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 8bc:	87 7f       	andi	r24, 0xF7	; 247
 8be:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 8c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8da:	8e 7f       	andi	r24, 0xFE	; 254
 8dc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8e4:	80 61       	ori	r24, 0x10	; 16
 8e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 8ea:	42 e0       	ldi	r20, 0x02	; 2
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	6b de       	rcall	.-810    	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8f2:	5e d2       	rcall	.+1212   	; 0xdb0 <USB_Event_Stub>
 8f4:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8f6:	ef 91       	pop	r30
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	9f 91       	pop	r25
 8fe:	8f 91       	pop	r24
 900:	7f 91       	pop	r23
 902:	6f 91       	pop	r22
 904:	5f 91       	pop	r21
 906:	4f 91       	pop	r20
 908:	3f 91       	pop	r19
 90a:	2f 91       	pop	r18
 90c:	0f 90       	pop	r0
 90e:	0b be       	out	0x3b, r0	; 59
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <Endpoint_Write_Stream_LE>:
 91a:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	ec 01       	movw	r28, r24
 92c:	8b 01       	movw	r16, r22
 92e:	7a 01       	movw	r14, r20
 930:	9e de       	rcall	.-708    	; 0x66e <Endpoint_WaitUntilReady>
 932:	81 11       	cpse	r24, r1
 934:	33 c0       	rjmp	.+102    	; 0x99c <Endpoint_Write_Stream_LE+0x82>
 936:	e1 14       	cp	r14, r1
 938:	f1 04       	cpc	r15, r1
 93a:	39 f0       	breq	.+14     	; 0x94a <Endpoint_Write_Stream_LE+0x30>
 93c:	f7 01       	movw	r30, r14
 93e:	80 81       	ld	r24, Z
 940:	91 81       	ldd	r25, Z+1	; 0x01
 942:	08 1b       	sub	r16, r24
 944:	19 0b       	sbc	r17, r25
 946:	c8 0f       	add	r28, r24
 948:	d9 1f       	adc	r29, r25
 94a:	c1 2c       	mov	r12, r1
 94c:	d1 2c       	mov	r13, r1
 94e:	01 15       	cp	r16, r1
 950:	11 05       	cpc	r17, r1
 952:	19 f1       	breq	.+70     	; 0x99a <Endpoint_Write_Stream_LE+0x80>
 954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 958:	85 fd       	sbrc	r24, 5
 95a:	16 c0       	rjmp	.+44     	; 0x988 <Endpoint_Write_Stream_LE+0x6e>
 95c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 960:	8e 77       	andi	r24, 0x7E	; 126
 962:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 966:	25 d2       	rcall	.+1098   	; 0xdb2 <USB_USBTask>
 968:	e1 14       	cp	r14, r1
 96a:	f1 04       	cpc	r15, r1
 96c:	49 f0       	breq	.+18     	; 0x980 <Endpoint_Write_Stream_LE+0x66>
 96e:	f7 01       	movw	r30, r14
 970:	80 81       	ld	r24, Z
 972:	91 81       	ldd	r25, Z+1	; 0x01
 974:	c8 0e       	add	r12, r24
 976:	d9 1e       	adc	r13, r25
 978:	d1 82       	std	Z+1, r13	; 0x01
 97a:	c0 82       	st	Z, r12
 97c:	85 e0       	ldi	r24, 0x05	; 5
 97e:	0e c0       	rjmp	.+28     	; 0x99c <Endpoint_Write_Stream_LE+0x82>
 980:	76 de       	rcall	.-788    	; 0x66e <Endpoint_WaitUntilReady>
 982:	88 23       	and	r24, r24
 984:	21 f3       	breq	.-56     	; 0x94e <Endpoint_Write_Stream_LE+0x34>
 986:	0a c0       	rjmp	.+20     	; 0x99c <Endpoint_Write_Stream_LE+0x82>
 988:	89 91       	ld	r24, Y+
 98a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 98e:	01 50       	subi	r16, 0x01	; 1
 990:	11 09       	sbc	r17, r1
 992:	ff ef       	ldi	r31, 0xFF	; 255
 994:	cf 1a       	sub	r12, r31
 996:	df 0a       	sbc	r13, r31
 998:	da cf       	rjmp	.-76     	; 0x94e <Endpoint_Write_Stream_LE+0x34>
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	1f 91       	pop	r17
 9a2:	0f 91       	pop	r16
 9a4:	ff 90       	pop	r15
 9a6:	ef 90       	pop	r14
 9a8:	df 90       	pop	r13
 9aa:	cf 90       	pop	r12
 9ac:	08 95       	ret

000009ae <Endpoint_Write_Control_Stream_LE>:
 9ae:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_ControlRequest+0x6>
 9b2:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <USB_ControlRequest+0x7>
 9b6:	26 17       	cp	r18, r22
 9b8:	37 07       	cpc	r19, r23
 9ba:	48 f0       	brcs	.+18     	; 0x9ce <Endpoint_Write_Control_Stream_LE+0x20>
 9bc:	61 15       	cp	r22, r1
 9be:	71 05       	cpc	r23, r1
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <Endpoint_Write_Control_Stream_LE+0x22>
 9c2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9c6:	2e 77       	andi	r18, 0x7E	; 126
 9c8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <Endpoint_Write_Control_Stream_LE+0x22>
 9ce:	b9 01       	movw	r22, r18
 9d0:	fc 01       	movw	r30, r24
 9d2:	20 e0       	ldi	r18, 0x00	; 0
 9d4:	61 15       	cp	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	69 f1       	breq	.+90     	; 0xa34 <Endpoint_Write_Control_Stream_LE+0x86>
 9da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 9de:	88 23       	and	r24, r24
 9e0:	d1 f1       	breq	.+116    	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xa8>
 9e2:	85 30       	cpi	r24, 0x05	; 5
 9e4:	d1 f1       	breq	.+116    	; 0xa5a <Endpoint_Write_Control_Stream_LE+0xac>
 9e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9ea:	83 fd       	sbrc	r24, 3
 9ec:	32 c0       	rjmp	.+100    	; 0xa52 <Endpoint_Write_Control_Stream_LE+0xa4>
 9ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9f2:	82 fd       	sbrc	r24, 2
 9f4:	28 c0       	rjmp	.+80     	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x98>
 9f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9fa:	80 ff       	sbrs	r24, 0
 9fc:	eb cf       	rjmp	.-42     	; 0x9d4 <Endpoint_Write_Control_Stream_LE+0x26>
 9fe:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 a02:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 a06:	61 15       	cp	r22, r1
 a08:	71 05       	cpc	r23, r1
 a0a:	51 f0       	breq	.+20     	; 0xa20 <Endpoint_Write_Control_Stream_LE+0x72>
 a0c:	88 30       	cpi	r24, 0x08	; 8
 a0e:	91 05       	cpc	r25, r1
 a10:	38 f4       	brcc	.+14     	; 0xa20 <Endpoint_Write_Control_Stream_LE+0x72>
 a12:	21 91       	ld	r18, Z+
 a14:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	71 09       	sbc	r23, r1
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	f3 cf       	rjmp	.-26     	; 0xa06 <Endpoint_Write_Control_Stream_LE+0x58>
 a20:	21 e0       	ldi	r18, 0x01	; 1
 a22:	08 97       	sbiw	r24, 0x08	; 8
 a24:	09 f0       	breq	.+2      	; 0xa28 <Endpoint_Write_Control_Stream_LE+0x7a>
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a2c:	8e 77       	andi	r24, 0x7E	; 126
 a2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a32:	d0 cf       	rjmp	.-96     	; 0x9d4 <Endpoint_Write_Control_Stream_LE+0x26>
 a34:	21 11       	cpse	r18, r1
 a36:	d1 cf       	rjmp	.-94     	; 0x9da <Endpoint_Write_Control_Stream_LE+0x2c>
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x98>
 a3a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 a3e:	88 23       	and	r24, r24
 a40:	51 f0       	breq	.+20     	; 0xa56 <Endpoint_Write_Control_Stream_LE+0xa8>
 a42:	85 30       	cpi	r24, 0x05	; 5
 a44:	51 f0       	breq	.+20     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0xac>
 a46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a4a:	82 ff       	sbrs	r24, 2
 a4c:	f6 cf       	rjmp	.-20     	; 0xa3a <Endpoint_Write_Control_Stream_LE+0x8c>
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	08 95       	ret
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	08 95       	ret
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	08 95       	ret
 a5a:	83 e0       	ldi	r24, 0x03	; 3
 a5c:	08 95       	ret

00000a5e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a5e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_ControlRequest+0x6>
 a62:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <USB_ControlRequest+0x7>
 a66:	26 17       	cp	r18, r22
 a68:	37 07       	cpc	r19, r23
 a6a:	48 f0       	brcs	.+18     	; 0xa7e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 a6c:	61 15       	cp	r22, r1
 a6e:	71 05       	cpc	r23, r1
 a70:	39 f4       	brne	.+14     	; 0xa80 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a72:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a76:	2e 77       	andi	r18, 0x7E	; 126
 a78:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a7c:	01 c0       	rjmp	.+2      	; 0xa80 <Endpoint_Write_Control_PStream_LE+0x22>
 a7e:	b9 01       	movw	r22, r18
 a80:	fc 01       	movw	r30, r24
 a82:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a84:	61 15       	cp	r22, r1
 a86:	71 05       	cpc	r23, r1
 a88:	71 f1       	breq	.+92     	; 0xae6 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a8a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a8e:	88 23       	and	r24, r24
 a90:	d9 f1       	breq	.+118    	; 0xb08 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a92:	85 30       	cpi	r24, 0x05	; 5
 a94:	d9 f1       	breq	.+118    	; 0xb0c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a9a:	83 fd       	sbrc	r24, 3
 a9c:	33 c0       	rjmp	.+102    	; 0xb04 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 aa2:	82 fd       	sbrc	r24, 2
 aa4:	29 c0       	rjmp	.+82     	; 0xaf8 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aa6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 aaa:	80 ff       	sbrs	r24, 0
 aac:	eb cf       	rjmp	.-42     	; 0xa84 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 aae:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 ab2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 ab6:	61 15       	cp	r22, r1
 ab8:	71 05       	cpc	r23, r1
 aba:	59 f0       	breq	.+22     	; 0xad2 <Endpoint_Write_Control_PStream_LE+0x74>
 abc:	88 30       	cpi	r24, 0x08	; 8
 abe:	91 05       	cpc	r25, r1
 ac0:	40 f4       	brcc	.+16     	; 0xad2 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 ac2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ac4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 ac8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 aca:	61 50       	subi	r22, 0x01	; 1
 acc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	f2 cf       	rjmp	.-28     	; 0xab6 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 ad2:	21 e0       	ldi	r18, 0x01	; 1
 ad4:	08 97       	sbiw	r24, 0x08	; 8
 ad6:	09 f0       	breq	.+2      	; 0xada <Endpoint_Write_Control_PStream_LE+0x7c>
 ad8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ada:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ade:	8e 77       	andi	r24, 0x7E	; 126
 ae0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ae4:	cf cf       	rjmp	.-98     	; 0xa84 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 ae6:	21 11       	cpse	r18, r1
 ae8:	d0 cf       	rjmp	.-96     	; 0xa8a <Endpoint_Write_Control_PStream_LE+0x2c>
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 aec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 af0:	88 23       	and	r24, r24
 af2:	51 f0       	breq	.+20     	; 0xb08 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 af4:	85 30       	cpi	r24, 0x05	; 5
 af6:	51 f0       	breq	.+20     	; 0xb0c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 af8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 afc:	82 ff       	sbrs	r24, 2
 afe:	f6 cf       	rjmp	.-20     	; 0xaec <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 b08:	82 e0       	ldi	r24, 0x02	; 2
 b0a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 b0c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b0e:	08 95       	ret

00000b10 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	cd b7       	in	r28, 0x3d	; 61
 b1a:	de b7       	in	r29, 0x3e	; 62
 b1c:	aa 97       	sbiw	r28, 0x2a	; 42
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	e3 e1       	ldi	r30, 0x13	; 19
 b2a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b2c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b30:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b32:	21 e0       	ldi	r18, 0x01	; 1
 b34:	eb 31       	cpi	r30, 0x1B	; 27
 b36:	f2 07       	cpc	r31, r18
 b38:	c9 f7       	brne	.-14     	; 0xb2c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b3a:	dc db       	rcall	.-2120   	; 0x2f4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 b40:	83 ff       	sbrs	r24, 3
 b42:	1d c1       	rjmp	.+570    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b44:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b48:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <USB_ControlRequest+0x1>
 b4c:	49 2f       	mov	r20, r25
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	4a 30       	cpi	r20, 0x0A	; 10
 b52:	51 05       	cpc	r21, r1
 b54:	08 f0       	brcs	.+2      	; 0xb58 <USB_Device_ProcessControlRequest+0x48>
 b56:	13 c1       	rjmp	.+550    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
 b58:	fa 01       	movw	r30, r20
 b5a:	e4 5b       	subi	r30, 0xB4	; 180
 b5c:	ff 4f       	sbci	r31, 0xFF	; 255
 b5e:	3b c1       	rjmp	.+630    	; 0xdd6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b60:	80 38       	cpi	r24, 0x80	; 128
 b62:	81 f0       	breq	.+32     	; 0xb84 <USB_Device_ProcessControlRequest+0x74>
 b64:	82 38       	cpi	r24, 0x82	; 130
 b66:	09 f0       	breq	.+2      	; 0xb6a <USB_Device_ProcessControlRequest+0x5a>
 b68:	0a c1       	rjmp	.+532    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b6a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 b6e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b70:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b74:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 b78:	85 fb       	bst	r24, 5
 b7a:	88 27       	eor	r24, r24
 b7c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b7e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b82:	06 c0       	rjmp	.+12     	; 0xb90 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b84:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b88:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <USB_Device_RemoteWakeupEnabled>
 b8c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b8e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b90:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b94:	97 7f       	andi	r25, 0xF7	; 247
 b96:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b9a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 b9e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 ba2:	c5 c0       	rjmp	.+394    	; 0xd2e <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ba4:	28 2f       	mov	r18, r24
 ba6:	2d 7f       	andi	r18, 0xFD	; 253
 ba8:	09 f0       	breq	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x9c>
 baa:	e9 c0       	rjmp	.+466    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 bac:	88 23       	and	r24, r24
 bae:	19 f0       	breq	.+6      	; 0xbb6 <USB_Device_ProcessControlRequest+0xa6>
 bb0:	82 30       	cpi	r24, 0x02	; 2
 bb2:	61 f0       	breq	.+24     	; 0xbcc <USB_Device_ProcessControlRequest+0xbc>
 bb4:	e4 c0       	rjmp	.+456    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bb6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 bba:	81 30       	cpi	r24, 0x01	; 1
 bbc:	09 f0       	breq	.+2      	; 0xbc0 <USB_Device_ProcessControlRequest+0xb0>
 bbe:	df c0       	rjmp	.+446    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 bc0:	93 30       	cpi	r25, 0x03	; 3
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0xb6>
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_Device_RemoteWakeupEnabled>
 bca:	2b c0       	rjmp	.+86     	; 0xc22 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 bcc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 bd0:	81 11       	cpse	r24, r1
 bd2:	27 c0       	rjmp	.+78     	; 0xc22 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bd4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 bd8:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 bda:	09 f4       	brne	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0xce>
 bdc:	d0 c0       	rjmp	.+416    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bde:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 be2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 be6:	20 ff       	sbrs	r18, 0
 be8:	1c c0       	rjmp	.+56     	; 0xc22 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 bea:	93 30       	cpi	r25, 0x03	; 3
 bec:	21 f4       	brne	.+8      	; 0xbf6 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bf2:	80 62       	ori	r24, 0x20	; 32
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 bf6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bfa:	90 61       	ori	r25, 0x10	; 16
 bfc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 c00:	21 e0       	ldi	r18, 0x01	; 1
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	a9 01       	movw	r20, r18
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <USB_Device_ProcessControlRequest+0xfc>
 c08:	44 0f       	add	r20, r20
 c0a:	55 1f       	adc	r21, r21
 c0c:	8a 95       	dec	r24
 c0e:	e2 f7       	brpl	.-8      	; 0xc08 <USB_Device_ProcessControlRequest+0xf8>
 c10:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 c14:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c18:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c1c:	88 60       	ori	r24, 0x08	; 8
 c1e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c22:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c2a:	87 7f       	andi	r24, 0xF7	; 247
 c2c:	83 c0       	rjmp	.+262    	; 0xd34 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c2e:	81 11       	cpse	r24, r1
 c30:	a6 c0       	rjmp	.+332    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 c32:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 c36:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c38:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c3a:	f8 94       	cli
 c3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c46:	f4 dc       	rcall	.-1560   	; 0x630 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 c4c:	80 ff       	sbrs	r24, 0
 c4e:	fc cf       	rjmp	.-8      	; 0xc48 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c50:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c54:	80 78       	andi	r24, 0x80	; 128
 c56:	81 2b       	or	r24, r17

				UDADDR = Temp;
 c58:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 c5c:	80 68       	ori	r24, 0x80	; 128
 c5e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c62:	11 11       	cpse	r17, r1
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <USB_Device_ProcessControlRequest+0x15a>
 c66:	82 e0       	ldi	r24, 0x02	; 2
 c68:	01 c0       	rjmp	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0x15c>
 c6a:	83 e0       	ldi	r24, 0x03	; 3
 c6c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c70:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 c72:	85 c0       	rjmp	.+266    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c74:	80 58       	subi	r24, 0x80	; 128
 c76:	82 30       	cpi	r24, 0x02	; 2
 c78:	08 f0       	brcs	.+2      	; 0xc7c <USB_Device_ProcessControlRequest+0x16c>
 c7a:	81 c0       	rjmp	.+258    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c7c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 c80:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 c84:	8c 3d       	cpi	r24, 0xDC	; 220
 c86:	53 e0       	ldi	r21, 0x03	; 3
 c88:	95 07       	cpc	r25, r21
 c8a:	71 f5       	brne	.+92     	; 0xce8 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c8c:	83 e0       	ldi	r24, 0x03	; 3
 c8e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c90:	8a e2       	ldi	r24, 0x2A	; 42
 c92:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c94:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c96:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c98:	de 01       	movw	r26, r28
 c9a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c9c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c9e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ca0:	51 e2       	ldi	r21, 0x21	; 33
 ca2:	e3 2f       	mov	r30, r19
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 caa:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 cac:	20 ff       	sbrs	r18, 0
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 cb0:	e2 95       	swap	r30
 cb2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 cb4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 cb6:	ef 70       	andi	r30, 0x0F	; 15
 cb8:	8e 2f       	mov	r24, r30
 cba:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 cbc:	ea 30       	cpi	r30, 0x0A	; 10
 cbe:	10 f0       	brcs	.+4      	; 0xcc4 <USB_Device_ProcessControlRequest+0x1b4>
 cc0:	c7 96       	adiw	r24, 0x37	; 55
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x1b6>
 cc4:	c0 96       	adiw	r24, 0x30	; 48
 cc6:	8d 93       	st	X+, r24
 cc8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cca:	2f 5f       	subi	r18, 0xFF	; 255
 ccc:	24 31       	cpi	r18, 0x14	; 20
 cce:	49 f7       	brne	.-46     	; 0xca2 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cd0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cd6:	87 7f       	andi	r24, 0xF7	; 247
 cd8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cdc:	6a e2       	ldi	r22, 0x2A	; 42
 cde:	70 e0       	ldi	r23, 0x00	; 0
 ce0:	ce 01       	movw	r24, r28
 ce2:	01 96       	adiw	r24, 0x01	; 1
 ce4:	64 de       	rcall	.-824    	; 0x9ae <Endpoint_Write_Control_Stream_LE>
 ce6:	12 c0       	rjmp	.+36     	; 0xd0c <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ce8:	ae 01       	movw	r20, r28
 cea:	4f 5f       	subi	r20, 0xFF	; 255
 cec:	5f 4f       	sbci	r21, 0xFF	; 255
 cee:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 cf2:	29 dc       	rcall	.-1966   	; 0x546 <CALLBACK_USB_GetDescriptor>
 cf4:	bc 01       	movw	r22, r24
 cf6:	89 2b       	or	r24, r25
 cf8:	09 f4       	brne	.+2      	; 0xcfc <USB_Device_ProcessControlRequest+0x1ec>
 cfa:	41 c0       	rjmp	.+130    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
 cfc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d00:	97 7f       	andi	r25, 0xF7	; 247
 d02:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	9a 81       	ldd	r25, Y+2	; 0x02
 d0a:	a9 de       	rcall	.-686    	; 0xa5e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d10:	8b 77       	andi	r24, 0x7B	; 123
 d12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d16:	33 c0       	rjmp	.+102    	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d18:	80 38       	cpi	r24, 0x80	; 128
 d1a:	89 f5       	brne	.+98     	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d20:	87 7f       	andi	r24, 0xF7	; 247
 d22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d26:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d2a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d32:	8e 77       	andi	r24, 0x7E	; 126
 d34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d38:	7b dc       	rcall	.-1802   	; 0x630 <Endpoint_ClearStatusStage>
 d3a:	21 c0       	rjmp	.+66     	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d3c:	81 11       	cpse	r24, r1
 d3e:	1f c0       	rjmp	.+62     	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d40:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 d44:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 d48:	99 27       	eor	r25, r25
 d4a:	02 97       	sbiw	r24, 0x02	; 2
 d4c:	c4 f4       	brge	.+48     	; 0xd7e <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d58:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 d5c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 d60:	67 dc       	rcall	.-1842   	; 0x630 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 d62:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
 d66:	81 11       	cpse	r24, r1
 d68:	06 c0       	rjmp	.+12     	; 0xd76 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d6a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d6e:	87 fd       	sbrc	r24, 7
 d70:	02 c0       	rjmp	.+4      	; 0xd76 <USB_Device_ProcessControlRequest+0x266>
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	01 c0       	rjmp	.+2      	; 0xd78 <USB_Device_ProcessControlRequest+0x268>
 d76:	84 e0       	ldi	r24, 0x04	; 4
 d78:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 d7c:	4f da       	rcall	.-2914   	; 0x21c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d82:	83 ff       	sbrs	r24, 3
 d84:	0a c0       	rjmp	.+20     	; 0xd9a <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d8a:	80 62       	ori	r24, 0x20	; 32
 d8c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d94:	87 7f       	andi	r24, 0xF7	; 247
 d96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 d9a:	aa 96       	adiw	r28, 0x2a	; 42
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	de bf       	out	0x3e, r29	; 62
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	cd bf       	out	0x3d, r28	; 61
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	08 95       	ret

00000db0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 db0:	08 95       	ret

00000db2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 db2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 db4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 db8:	88 23       	and	r24, r24
 dba:	59 f0       	breq	.+22     	; 0xdd2 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 dbc:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 dc0:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dc2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 dca:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 dcc:	a1 de       	rcall	.-702    	; 0xb10 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dce:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 dd2:	cf 91       	pop	r28
 dd4:	08 95       	ret

00000dd6 <__tablejump2__>:
 dd6:	ee 0f       	add	r30, r30
 dd8:	ff 1f       	adc	r31, r31
 dda:	00 24       	eor	r0, r0
 ddc:	00 1c       	adc	r0, r0
 dde:	0b be       	out	0x3b, r0	; 59
 de0:	07 90       	elpm	r0, Z+
 de2:	f6 91       	elpm	r31, Z
 de4:	e0 2d       	mov	r30, r0
 de6:	09 94       	ijmp

00000de8 <memcmp>:
 de8:	fb 01       	movw	r30, r22
 dea:	dc 01       	movw	r26, r24
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <memcmp+0xe>
 dee:	8d 91       	ld	r24, X+
 df0:	01 90       	ld	r0, Z+
 df2:	80 19       	sub	r24, r0
 df4:	21 f4       	brne	.+8      	; 0xdfe <memcmp+0x16>
 df6:	41 50       	subi	r20, 0x01	; 1
 df8:	50 40       	sbci	r21, 0x00	; 0
 dfa:	c8 f7       	brcc	.-14     	; 0xdee <memcmp+0x6>
 dfc:	88 1b       	sub	r24, r24
 dfe:	99 0b       	sbc	r25, r25
 e00:	08 95       	ret

00000e02 <_exit>:
 e02:	f8 94       	cli

00000e04 <__stop_program>:
 e04:	ff cf       	rjmp	.-2      	; 0xe04 <__stop_program>
