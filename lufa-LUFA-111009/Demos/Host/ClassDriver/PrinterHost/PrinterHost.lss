
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00001afc  00001b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800146  00800146  00001bd6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006422  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002295  00000000  00000000  0000839a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000336f  00000000  00000000  0000a62f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000d9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025fb  00000000  00000000  0000e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e69  00000000  00000000  000109cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00014838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6f c1       	rjmp	.+734    	; 0x2e0 <__ctors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c1       	rjmp	.+778    	; 0x31c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c1       	rjmp	.+766    	; 0x31c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c5       	rjmp	.+2880   	; 0xb6a <__vector_10>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c1       	rjmp	.+730    	; 0x31c <__bad_interrupt>
      42:	00 00       	nop
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	69 c1       	rjmp	.+722    	; 0x31c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c1       	rjmp	.+718    	; 0x31c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c1       	rjmp	.+690    	; 0x31c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c1       	rjmp	.+654    	; 0x31c <__bad_interrupt>
      8e:	00 00       	nop
      90:	45 c1       	rjmp	.+650    	; 0x31c <__bad_interrupt>
      92:	00 00       	nop
      94:	43 c1       	rjmp	.+646    	; 0x31c <__bad_interrupt>
      96:	00 00       	nop
      98:	9c 03       	fmulsu	r17, r20
      9a:	8d 04       	cpc	r8, r13
      9c:	ba 03       	fmulsu	r19, r18
      9e:	c4 03       	fmuls	r20, r20
      a0:	ef 03       	fmulsu	r22, r23
      a2:	17 04       	cpc	r1, r7
      a4:	22 04       	cpc	r2, r2
      a6:	33 04       	cpc	r3, r3
      a8:	4f 04       	cpc	r4, r15
      aa:	76 04       	cpc	r7, r6

000000ac <__trampolines_end>:
      ac:	1b 5b       	subi	r17, 0xBB	; 187
      ae:	33 31       	cpi	r19, 0x13	; 19
      b0:	6d 44       	sbci	r22, 0x4D	; 77
      b2:	65 76       	andi	r22, 0x65	; 101
      b4:	20 45       	sbci	r18, 0x50	; 80
      b6:	6e 75       	andi	r22, 0x5E	; 94
      b8:	6d 20       	and	r6, r13
      ba:	45 72       	andi	r20, 0x25	; 37
      bc:	72 6f       	ori	r23, 0xF2	; 242
      be:	72 0d       	add	r23, r2
      c0:	0a 20       	and	r0, r10
      c2:	2d 2d       	mov	r18, r13
      c4:	20 45       	sbci	r18, 0x50	; 80
      c6:	72 72       	andi	r23, 0x22	; 34
      c8:	6f 72       	andi	r22, 0x2F	; 47
      ca:	20 43       	sbci	r18, 0x30	; 48
      cc:	6f 64       	ori	r22, 0x4F	; 79
      ce:	65 20       	and	r6, r5
      d0:	25 64       	ori	r18, 0x45	; 69
      d2:	0d 0a       	sbc	r0, r29
      d4:	20 2d       	mov	r18, r0
      d6:	2d 20       	and	r2, r13
      d8:	53 75       	andi	r21, 0x53	; 83
      da:	62 20       	and	r6, r2
      dc:	45 72       	andi	r20, 0x25	; 37
      de:	72 6f       	ori	r23, 0xF2	; 242
      e0:	72 20       	and	r7, r2
      e2:	43 6f       	ori	r20, 0xF3	; 243
      e4:	64 65       	ori	r22, 0x54	; 84
      e6:	20 25       	eor	r18, r0
      e8:	64 0d       	add	r22, r4
      ea:	0a 20       	and	r0, r10
      ec:	2d 2d       	mov	r18, r13
      ee:	20 49       	sbci	r18, 0x90	; 144
      f0:	6e 20       	and	r6, r14
      f2:	53 74       	andi	r21, 0x43	; 67
      f4:	61 74       	andi	r22, 0x41	; 65
      f6:	65 20       	and	r6, r5
      f8:	25 64       	ori	r18, 0x45	; 69
      fa:	0d 0a       	sbc	r0, r29
      fc:	1b 5b       	subi	r17, 0xBB	; 187
      fe:	33 37       	cpi	r19, 0x73	; 115
     100:	6d 00       	.word	0x006d	; ????

00000102 <__c.4520>:
     102:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     112:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     122:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000131 <__c.4515>:
     131:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     141:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000014e <__c.4513>:
     14e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     15e:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     16e:	2e 0d 0a 00                                         ....

00000172 <__c.4511>:
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4509>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1b8:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     1c8:	2e 0d 0a 00                                         ....

000001cc <__c.4507>:
     1cc:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1dc:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ec:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001f9 <__c.4500>:
     1f9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     209:	68 65 64 2e 0d 0a 00                                hed....

00000210 <__c.4495>:
     210:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     220:	0d 0a 00                                            ...

00000223 <__c.4490>:
     223:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     233:	0a 00                                               ..

00000235 <__c.4488>:
     235:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     245:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

00000250 <__c.4486>:
     250:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     260:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     270:	0a 00                                               ..

00000272 <__c.4482>:
     272:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     282:	00                                                  .

00000283 <__c.4480>:
     283:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
     293:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

0000029e <__c.4477>:
     29e:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     2ae:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000002b8 <__c.4468>:
     2b8:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     2c8:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     2d8:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002e0 <__ctors_end>:
     2e0:	11 24       	eor	r1, r1
     2e2:	1f be       	out	0x3f, r1	; 63
     2e4:	cf ef       	ldi	r28, 0xFF	; 255
     2e6:	d0 e2       	ldi	r29, 0x20	; 32
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	cd bf       	out	0x3d, r28	; 61

000002ec <__do_copy_data>:
     2ec:	11 e0       	ldi	r17, 0x01	; 1
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
     2f2:	ec ef       	ldi	r30, 0xFC	; 252
     2f4:	fa e1       	ldi	r31, 0x1A	; 26
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0b bf       	out	0x3b, r16	; 59
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <__do_copy_data+0x14>
     2fc:	07 90       	elpm	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	a6 34       	cpi	r26, 0x46	; 70
     302:	b1 07       	cpc	r27, r17
     304:	d9 f7       	brne	.-10     	; 0x2fc <__do_copy_data+0x10>

00000306 <__do_clear_bss>:
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	a6 e4       	ldi	r26, 0x46	; 70
     30a:	b1 e0       	ldi	r27, 0x01	; 1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <.do_clear_bss_start>

0000030e <.do_clear_bss_loop>:
     30e:	1d 92       	st	X+, r1

00000310 <.do_clear_bss_start>:
     310:	a8 36       	cpi	r26, 0x68	; 104
     312:	b2 07       	cpc	r27, r18
     314:	e1 f7       	brne	.-8      	; 0x30e <.do_clear_bss_loop>
     316:	c6 d0       	rcall	.+396    	; 0x4a4 <main>
     318:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <_exit>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     31e:	9b b1       	in	r25, 0x0b	; 11
     320:	9f 70       	andi	r25, 0x0F	; 15
     322:	89 2b       	or	r24, r25
     324:	8b b9       	out	0x0b, r24	; 11
     326:	08 95       	ret

00000328 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     328:	84 b7       	in	r24, 0x34	; 52
     32a:	87 7f       	andi	r24, 0xF7	; 247
     32c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	a8 95       	wdr
     334:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     338:	88 61       	ori	r24, 0x18	; 24
     33a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     33e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     342:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	80 e8       	ldi	r24, 0x80	; 128
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     350:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     354:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     356:	83 e3       	ldi	r24, 0x33	; 51
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     35e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     362:	86 e0       	ldi	r24, 0x06	; 6
     364:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     368:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     36c:	88 e1       	ldi	r24, 0x18	; 24
     36e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     372:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     374:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     376:	8a b1       	in	r24, 0x0a	; 10
     378:	80 6f       	ori	r24, 0xF0	; 240
     37a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     382:	dd d3       	rcall	.+1978   	; 0xb3e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     384:	a2 e6       	ldi	r26, 0x62	; 98
     386:	b1 e0       	ldi	r27, 0x01	; 1
     388:	e4 e5       	ldi	r30, 0x54	; 84
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	11 96       	adiw	r26, 0x01	; 1
     38e:	fc 93       	st	X, r31
     390:	ee 93       	st	-X, r30
					stdout = Stream;
     392:	13 96       	adiw	r26, 0x03	; 3
     394:	fc 93       	st	X, r31
     396:	ee 93       	st	-X, r30
     398:	12 97       	sbiw	r26, 0x02	; 2
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     39a:	8e e0       	ldi	r24, 0x0E	; 14
     39c:	df 01       	movw	r26, r30
     39e:	1d 92       	st	X+, r1
     3a0:	8a 95       	dec	r24
     3a2:	e9 f7       	brne	.-6      	; 0x39e <SetupHardware+0x76>
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	83 83       	std	Z+3, r24	; 0x03
     3a8:	89 e3       	ldi	r24, 0x39	; 57
     3aa:	9a e0       	ldi	r25, 0x0A	; 10
     3ac:	91 87       	std	Z+9, r25	; 0x09
     3ae:	80 87       	std	Z+8, r24	; 0x08
     3b0:	82 e4       	ldi	r24, 0x42	; 66
     3b2:	9a e0       	ldi	r25, 0x0A	; 10
     3b4:	93 87       	std	Z+11, r25	; 0x0b
     3b6:	82 87       	std	Z+10, r24	; 0x0a
     3b8:	08 95       	ret

000003ba <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	c5 55       	subi	r28, 0x55	; 85
     3cc:	d1 40       	sbci	r29, 0x01	; 1
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     3d8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_HostState>
     3dc:	8b 30       	cpi	r24, 0x0B	; 11
     3de:	09 f0       	breq	.+2      	; 0x3e2 <PrinterHost_Task+0x28>
     3e0:	53 c0       	rjmp	.+166    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     3e2:	80 e2       	ldi	r24, 0x20	; 32
     3e4:	9c df       	rcall	.-200    	; 0x31e <LEDs_SetAllLEDs>

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     3e6:	8e e9       	ldi	r24, 0x9E	; 158
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>

	char DeviceIDString[300];
	if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     3ee:	4c e2       	ldi	r20, 0x2C	; 44
     3f0:	51 e0       	ldi	r21, 0x01	; 1
     3f2:	8e 01       	movw	r16, r28
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	b8 01       	movw	r22, r16
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	da d7       	rcall	.+4020   	; 0x13b4 <PRNT_Host_GetDeviceID>
     400:	88 23       	and	r24, r24
     402:	19 f0       	breq	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Device ID.\r\n"));
     404:	83 e8       	ldi	r24, 0x83	; 131
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	33 c0       	rjmp	.+102    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     40a:	1f 93       	push	r17
     40c:	0f 93       	push	r16
     40e:	82 e7       	ldi	r24, 0x72	; 114
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	0e 94 77 0a 	call	0x14ee	; 0x14ee <printf_P>

	char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     41a:	7e 01       	movw	r14, r28
     41c:	23 ed       	ldi	r18, 0xD3	; 211
     41e:	e2 1a       	sub	r14, r18
     420:	2e ef       	ldi	r18, 0xFE	; 254
     422:	f2 0a       	sbc	r15, r18
     424:	89 e2       	ldi	r24, 0x29	; 41
     426:	ec e1       	ldi	r30, 0x1C	; 28
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	d7 01       	movw	r26, r14
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	8a 95       	dec	r24
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	uint16_t TestPageLength = strlen(TestPageData);
     434:	f7 01       	movw	r30, r14
     436:	01 90       	ld	r0, Z+
     438:	00 20       	and	r0, r0
     43a:	e9 f7       	brne	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	8f 01       	movw	r16, r30
     440:	0e 19       	sub	r16, r14
     442:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     444:	1f 93       	push	r17
     446:	0f 93       	push	r16
     448:	80 e5       	ldi	r24, 0x50	; 80
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	0e 94 77 0a 	call	0x14ee	; 0x14ee <printf_P>

	if (PRNT_Host_SendData(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     454:	a8 01       	movw	r20, r16
     456:	b7 01       	movw	r22, r14
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	86 d7       	rcall	.+3852   	; 0x136a <PRNT_Host_SendData>
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	88 23       	and	r24, r24
     46a:	31 f0       	breq	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	{
		puts_P(PSTR("Error Sending Page Data.\r\n"));
     46c:	85 e3       	ldi	r24, 0x35	; 53
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     474:	80 e9       	ldi	r24, 0x90	; 144
     476:	05 c0       	rjmp	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     478:	83 e2       	ldi	r24, 0x23	; 35
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     480:	80 e6       	ldi	r24, 0x60	; 96
	USB_Host_SetDeviceConfiguration(0);
     482:	4d df       	rcall	.-358    	; 0x31e <LEDs_SetAllLEDs>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	19 d6       	rcall	.+3122   	; 0x10ba <USB_Host_SetDeviceConfiguration>
}
     488:	cb 5a       	subi	r28, 0xAB	; 171
     48a:	de 4f       	sbci	r29, 0xFE	; 254
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     4a4:	41 df       	rcall	.-382    	; 0x328 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     4a6:	88 eb       	ldi	r24, 0xB8	; 184
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4ae:	80 e1       	ldi	r24, 0x10	; 16
     4b0:	36 df       	rcall	.-404    	; 0x31e <LEDs_SetAllLEDs>
	sei();
     4b2:	78 94       	sei

	for (;;)
	{
		PrinterHost_Task();
     4b4:	82 df       	rcall	.-252    	; 0x3ba <PrinterHost_Task>

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	4e d7       	rcall	.+3740   	; 0x1358 <PRNT_Host_USBTask>
		USB_USBTask();
     4bc:	38 d6       	rcall	.+3184   	; 0x112e <USB_USBTask>
     4be:	fa cf       	rjmp	.-12     	; 0x4b4 <main+0x10>

000004c0 <EVENT_USB_Host_DeviceAttached>:
     4c0:	80 e1       	ldi	r24, 0x10	; 16
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4c8:	80 ea       	ldi	r24, 0xA0	; 160
     4ca:	29 cf       	rjmp	.-430    	; 0x31e <LEDs_SetAllLEDs>

000004cc <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4cc:	89 ef       	ldi	r24, 0xF9	; 249
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 9e 0a 	call	0x153c	; 0x153c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4d4:	80 e1       	ldi	r24, 0x10	; 16
     4d6:	23 cf       	rjmp	.-442    	; 0x31e <LEDs_SetAllLEDs>

000004d8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	c2 50       	subi	r28, 0x02	; 2
     4e2:	d2 40       	sbci	r29, 0x02	; 2
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4ee:	80 ea       	ldi	r24, 0xA0	; 160
     4f0:	16 df       	rcall	.-468    	; 0x31e <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	32 e0       	ldi	r19, 0x02	; 2
     4f6:	ae 01       	movw	r20, r28
     4f8:	4f 5f       	subi	r20, 0xFF	; 255
     4fa:	5f 4f       	sbci	r21, 0xFF	; 255
     4fc:	be 01       	movw	r22, r28
     4fe:	6f 5f       	subi	r22, 0xFF	; 255
     500:	7d 4f       	sbci	r23, 0xFD	; 253
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	32 d4       	rcall	.+2148   	; 0xd6a <USB_Host_GetDeviceConfigDescriptor>
     506:	88 23       	and	r24, r24
     508:	19 f0       	breq	.+6      	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     50a:	8c ec       	ldi	r24, 0xCC	; 204
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	17 c0       	rjmp	.+46     	; 0x53e <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     510:	cf 5f       	subi	r28, 0xFF	; 255
     512:	dd 4f       	sbci	r29, 0xFD	; 253
     514:	68 81       	ld	r22, Y
     516:	79 81       	ldd	r23, Y+1	; 0x01
     518:	c1 50       	subi	r28, 0x01	; 1
     51a:	d2 40       	sbci	r29, 0x02	; 2
     51c:	ae 01       	movw	r20, r28
     51e:	4f 5f       	subi	r20, 0xFF	; 255
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	32 d6       	rcall	.+3172   	; 0x118c <PRNT_Host_ConfigurePipes>
     528:	88 23       	and	r24, r24
     52a:	19 f0       	breq	.+6      	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     52c:	88 e9       	ldi	r24, 0x98	; 152
     52e:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     530:	06 c0       	rjmp	.+12     	; 0x53e <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	c2 d5       	rcall	.+2948   	; 0x10ba <USB_Host_SetDeviceConfiguration>
     536:	88 23       	and	r24, r24
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     538:	29 f0       	breq	.+10     	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     53a:	82 e7       	ldi	r24, 0x72	; 114
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	fe d7       	rcall	.+4092   	; 0x153c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     540:	80 e9       	ldi	r24, 0x90	; 144
		return;
	}

	if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     542:	11 c0       	rjmp	.+34     	; 0x566 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	ce d6       	rcall	.+3484   	; 0x12e6 <PRNT_Host_SetBidirectionalMode>
     54a:	88 23       	and	r24, r24
	{
		puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     54c:	41 f0       	breq	.+16     	; 0x55e <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     54e:	8e e4       	ldi	r24, 0x4E	; 78
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	f4 d7       	rcall	.+4072   	; 0x153c <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     554:	80 e9       	ldi	r24, 0x90	; 144
     556:	e3 de       	rcall	.-570    	; 0x31e <LEDs_SetAllLEDs>
		return;
     558:	80 e0       	ldi	r24, 0x00	; 0
	}

	puts_P(PSTR("Printer Device Enumerated.\r\n"));
     55a:	af d5       	rcall	.+2910   	; 0x10ba <USB_Host_SetDeviceConfiguration>
     55c:	05 c0       	rjmp	.+10     	; 0x568 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     55e:	81 e3       	ldi	r24, 0x31	; 49
     560:	91 e0       	ldi	r25, 0x01	; 1
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     562:	ec d7       	rcall	.+4056   	; 0x153c <puts_P>
     564:	80 e6       	ldi	r24, 0x60	; 96
     566:	db de       	rcall	.-586    	; 0x31e <LEDs_SetAllLEDs>
}
     568:	ce 5f       	subi	r28, 0xFE	; 254
     56a:	dd 4f       	sbci	r29, 0xFD	; 253
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     57c:	c8 2f       	mov	r28, r24
	USB_Disable();
     57e:	77 d2       	rcall	.+1262   	; 0xa6e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     580:	1f 92       	push	r1
     582:	cf 93       	push	r28
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	b0 d7       	rcall	.+3936   	; 0x14ee <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58e:	80 e9       	ldi	r24, 0x90	; 144
     590:	c6 de       	rcall	.-628    	; 0x31e <LEDs_SetAllLEDs>
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	ff cf       	rjmp	.-2      	; 0x59a <EVENT_USB_Host_HostError+0x1e>

0000059c <EVENT_USB_Host_DeviceEnumerationFailed>:
     59c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <USB_HostState>
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5a0:	1f 92       	push	r1
     5a2:	9f 93       	push	r25
     5a4:	1f 92       	push	r1
     5a6:	6f 93       	push	r22
     5a8:	1f 92       	push	r1
     5aa:	8f 93       	push	r24
     5ac:	8c ea       	ldi	r24, 0xAC	; 172
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	9c d7       	rcall	.+3896   	; 0x14ee <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b6:	8d b7       	in	r24, 0x3d	; 61
     5b8:	9e b7       	in	r25, 0x3e	; 62
     5ba:	08 96       	adiw	r24, 0x08	; 8
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	9e bf       	out	0x3e, r25	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	8d bf       	out	0x3d, r24	; 61
     5c6:	80 e9       	ldi	r24, 0x90	; 144
     5c8:	aa ce       	rjmp	.-684    	; 0x31e <LEDs_SetAllLEDs>

000005ca <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5ca:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5ce:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5d0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5d4:	9d 7f       	andi	r25, 0xFD	; 253
     5d6:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5da:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5de:	92 60       	ori	r25, 0x02	; 2
     5e0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5e4:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5e8:	91 fd       	sbrc	r25, 1
     5ea:	fc cf       	rjmp	.-8      	; 0x5e4 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5ec:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     5f0:	91 60       	ori	r25, 0x01	; 1
     5f2:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     5f6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_Host_ConfigurationNumber>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5fa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     5fe:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     600:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     604:	2f 7d       	andi	r18, 0xDF	; 223
     606:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     60a:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     60e:	2f 7d       	andi	r18, 0xDF	; 223
     610:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     614:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     616:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61a:	35 ff       	sbrs	r19, 5
     61c:	0b c0       	rjmp	.+22     	; 0x634 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61e:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     622:	2f 7d       	andi	r18, 0xDF	; 223
     624:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     628:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     62c:	2d 7f       	andi	r18, 0xFD	; 253
     62e:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     632:	08 c0       	rjmp	.+16     	; 0x644 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     634:	ef ec       	ldi	r30, 0xCF	; 207
     636:	f7 e0       	ldi	r31, 0x07	; 7
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <USB_Host_ResetDevice+0x6e>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <USB_Host_ResetDevice+0x74>
     63e:	00 00       	nop
     640:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     642:	49 f7       	brne	.-46     	; 0x616 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     644:	99 23       	and	r25, r25
     646:	29 f0       	breq	.+10     	; 0x652 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     648:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     64c:	90 62       	ori	r25, 0x20	; 32
     64e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     652:	81 11       	cpse	r24, r1
     654:	05 c0       	rjmp	.+10     	; 0x660 <USB_Host_ResetDevice+0x96>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     656:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     65a:	8e 7f       	andi	r24, 0xFE	; 254
     65c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     660:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     66a:	08 95       	ret

0000066c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     66c:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     670:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     672:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     676:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     678:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     67c:	3f 7d       	andi	r19, 0xDF	; 223
     67e:	30 93 a0 00 	sts	0x00A0, r19	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     682:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     686:	3f 7d       	andi	r19, 0xDF	; 223
     688:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     68c:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     690:	31 60       	ori	r19, 0x01	; 1
     692:	30 93 9e 00 	sts	0x009E, r19	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     696:	88 23       	and	r24, r24
     698:	39 f1       	breq	.+78     	; 0x6e8 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     69a:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     69e:	35 ff       	sbrs	r19, 5
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6a2:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     6a6:	3f 7d       	andi	r19, 0xDF	; 223
     6a8:	30 93 9f 00 	sts	0x009F, r19	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6ac:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6ae:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <USB_HostState>
     6b2:	31 30       	cpi	r19, 0x01	; 1
     6b4:	c1 f0       	breq	.+48     	; 0x6e6 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6b6:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     6ba:	34 ff       	sbrs	r19, 4
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6be:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
				UPINTX &= ~(1 << PERRI);
     6c2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6c6:	8f 7e       	andi	r24, 0xEF	; 239
     6c8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6cc:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6ce:	0c c0       	rjmp	.+24     	; 0x6e8 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6d0:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		}

		if (Pipe_IsStalled() == true)
     6d4:	31 ff       	sbrs	r19, 1
     6d6:	df cf       	rjmp	.-66     	; 0x696 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6d8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     6dc:	8d 7f       	andi	r24, 0xFD	; 253
     6de:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6e2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     6e6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     6e8:	21 11       	cpse	r18, r1
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <USB_Host_WaitMS+0x8a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ec:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     6f0:	2e 7f       	andi	r18, 0xFE	; 254
     6f2:	20 93 9e 00 	sts	0x009E, r18	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6f6:	99 23       	and	r25, r25
     6f8:	29 f0       	breq	.+10     	; 0x704 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6fa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     6fe:	90 62       	ori	r25, 0x20	; 32
     700:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     704:	08 95       	ret

00000706 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     706:	ef 92       	push	r14
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	28 97       	sbiw	r28, 0x08	; 8
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     720:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USB_HostState>
     724:	8e 2f       	mov	r24, r30
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	8a 30       	cpi	r24, 0x0A	; 10
     72a:	91 05       	cpc	r25, r1
     72c:	08 f0       	brcs	.+2      	; 0x730 <USB_Host_ProcessNextHostState+0x2a>
     72e:	f5 c0       	rjmp	.+490    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
     730:	fc 01       	movw	r30, r24
     732:	e4 5b       	subi	r30, 0xB4	; 180
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	b8 c6       	rjmp	.+3440   	; 0x14a8 <__tablejump2__>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     738:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <WaitMSRemaining.2935>
     73c:	10 91 48 01 	lds	r17, 0x0148	; 0x800148 <WaitMSRemaining.2935+0x1>
     740:	01 15       	cp	r16, r1
     742:	11 05       	cpc	r17, r1
     744:	09 f4       	brne	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x42>
     746:	e9 c0       	rjmp	.+466    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 df       	rcall	.-224    	; 0x66c <USB_Host_WaitMS>
     74c:	88 23       	and	r24, r24
     74e:	31 f0       	breq	.+12     	; 0x75c <USB_Host_ProcessNextHostState+0x56>
				{
					USB_HostState = PostWaitState;
     750:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <__data_end>
     754:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USB_HostState>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     758:	91 e0       	ldi	r25, 0x01	; 1
					break;
     75a:	d1 c0       	rjmp	.+418    	; 0x8fe <USB_Host_ProcessNextHostState+0x1f8>
				}

				if (!(--WaitMSRemaining))
     75c:	01 50       	subi	r16, 0x01	; 1
     75e:	11 09       	sbc	r17, r1
     760:	10 93 48 01 	sts	0x0148, r17	; 0x800148 <WaitMSRemaining.2935+0x1>
     764:	00 93 47 01 	sts	0x0147, r16	; 0x800147 <WaitMSRemaining.2935>
     768:	01 2b       	or	r16, r17
     76a:	09 f0       	breq	.+2      	; 0x76e <USB_Host_ProcessNextHostState+0x68>
     76c:	d6 c0       	rjmp	.+428    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
				  USB_HostState = PostWaitState;
     76e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     772:	07 c0       	rjmp	.+14     	; 0x782 <USB_Host_ProcessNextHostState+0x7c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     774:	88 ee       	ldi	r24, 0xE8	; 232
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <WaitMSRemaining.2935+0x1>
     77c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <WaitMSRemaining.2935>

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USB_HostState>
			break;
     786:	c9 c0       	rjmp	.+402    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     788:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <WaitMSRemaining.2935>
     78c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <WaitMSRemaining.2935+0x1>
     790:	9c 01       	movw	r18, r24
     792:	21 50       	subi	r18, 0x01	; 1
     794:	31 09       	sbc	r19, r1
     796:	30 93 48 01 	sts	0x0148, r19	; 0x800148 <WaitMSRemaining.2935+0x1>
     79a:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <WaitMSRemaining.2935>
     79e:	89 2b       	or	r24, r25
     7a0:	39 f0       	breq	.+14     	; 0x7b0 <USB_Host_ProcessNextHostState+0xaa>
     7a2:	8f ec       	ldi	r24, 0xCF	; 207
     7a4:	97 e0       	ldi	r25, 0x07	; 7
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <USB_Host_ProcessNextHostState+0xa0>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <USB_Host_ProcessNextHostState+0xa6>
     7ac:	00 00       	nop
     7ae:	b5 c0       	rjmp	.+362    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7b0:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     7b6:	80 61       	ori	r24, 0x10	; 16
     7b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7bc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7c0:	8b 7f       	andi	r24, 0xFB	; 251
     7c2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
				UHWCON |=  (1 << UVCONE);
     7c6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7d0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     7d4:	82 60       	ori	r24, 0x02	; 2
     7d6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	d2 cf       	rjmp	.-92     	; 0x782 <USB_Host_ProcessNextHostState+0x7c>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7de:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7e2:	80 ff       	sbrs	r24, 0
     7e4:	9a c0       	rjmp	.+308    	; 0x91a <USB_Host_ProcessNextHostState+0x214>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7e6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7f0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     7f4:	8d 7f       	andi	r24, 0xFD	; 253
     7f6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7fa:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     7fe:	8d 7f       	andi	r24, 0xFD	; 253
     800:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     804:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     808:	82 60       	ori	r24, 0x02	; 2
     80a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     80e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     812:	81 60       	ori	r24, 0x01	; 1
     814:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     818:	e8 d0       	rcall	.+464    	; 0x9ea <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     81a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <USB_HostState>
     81e:	84 e6       	ldi	r24, 0x64	; 100
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <WaitMSRemaining.2935+0x1>
     826:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <WaitMSRemaining.2935>
     82a:	85 e0       	ldi	r24, 0x05	; 5
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     82c:	5c c0       	rjmp	.+184    	; 0x8e6 <USB_Host_ProcessNextHostState+0x1e0>
     82e:	cd de       	rcall	.-614    	; 0x5ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     830:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <USB_HostState>
     834:	88 ec       	ldi	r24, 0xC8	; 200
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <WaitMSRemaining.2935+0x1>
     83c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <WaitMSRemaining.2935>
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	51 c0       	rjmp	.+162    	; 0x8e6 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     844:	e1 2c       	mov	r14, r1
     846:	00 e4       	ldi	r16, 0x40	; 64
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	6f d0       	rcall	.+222    	; 0x932 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     854:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     858:	87 fd       	sbrc	r24, 7
     85a:	03 c0       	rjmp	.+6      	; 0x862 <USB_Host_ProcessNextHostState+0x15c>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     85c:	80 e0       	ldi	r24, 0x00	; 0
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     85e:	94 e0       	ldi	r25, 0x04	; 4
     860:	4e c0       	rjmp	.+156    	; 0x8fe <USB_Host_ProcessNextHostState+0x1f8>
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     862:	87 e0       	ldi	r24, 0x07	; 7
     864:	8e cf       	rjmp	.-228    	; 0x782 <USB_Host_ProcessNextHostState+0x7c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	ec e0       	ldi	r30, 0x0C	; 12
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	ab e4       	ldi	r26, 0x4B	; 75
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	01 90       	ld	r0, Z+
     872:	0d 92       	st	X+, r0
     874:	8a 95       	dec	r24
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     876:	e1 f7       	brne	.-8      	; 0x870 <USB_Host_ProcessNextHostState+0x16a>
     878:	ce 01       	movw	r24, r28
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	28 d3       	rcall	.+1616   	; 0xece <USB_Host_SendControlRequest>
     87e:	81 11       	cpse	r24, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     880:	3d c0       	rjmp	.+122    	; 0x8fc <USB_Host_ProcessNextHostState+0x1f6>
     882:	88 85       	ldd	r24, Y+8	; 0x08
     884:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Host_ControlPipeSize>

			USB_Host_ResetDevice();
     888:	a0 de       	rcall	.-704    	; 0x5ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     88a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <USB_HostState>
     88e:	88 ec       	ldi	r24, 0xC8	; 200
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <WaitMSRemaining.2935+0x1>
     896:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <WaitMSRemaining.2935>
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	24 c0       	rjmp	.+72     	; 0x8e6 <USB_Host_ProcessNextHostState+0x1e0>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     89e:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <USB_Host_ControlPipeSize>
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	e1 2c       	mov	r14, r1
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	41 d0       	rcall	.+130    	; 0x932 <Pipe_ConfigurePipe>
     8b0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8b4:	87 ff       	sbrs	r24, 7
     8b6:	d2 cf       	rjmp	.-92     	; 0x85c <USB_Host_ProcessNextHostState+0x156>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	e4 e1       	ldi	r30, 0x14	; 20
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	ab e4       	ldi	r26, 0x4B	; 75
     8c0:	b1 e0       	ldi	r27, 0x01	; 1
     8c2:	01 90       	ld	r0, Z+
     8c4:	0d 92       	st	X+, r0
     8c6:	8a 95       	dec	r24
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <USB_Host_ProcessNextHostState+0x1bc>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	ff d2       	rcall	.+1534   	; 0xece <USB_Host_SendControlRequest>
     8d0:	81 11       	cpse	r24, r1
     8d2:	14 c0       	rjmp	.+40     	; 0x8fc <USB_Host_ProcessNextHostState+0x1f6>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8d4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <USB_HostState>
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <WaitMSRemaining.2935+0x1>
     8e0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <WaitMSRemaining.2935>
     8e4:	89 e0       	ldi	r24, 0x09	; 9
     8e6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <USB_Host_ProcessNextHostState+0x214>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8f2:	8a e0       	ldi	r24, 0x0A	; 10
     8f4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USB_HostState>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
     8f8:	ef dd       	rcall	.-1058   	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8fa:	0f c0       	rjmp	.+30     	; 0x91a <USB_Host_ProcessNextHostState+0x214>

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <USB_HostState>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     902:	21 30       	cpi	r18, 0x01	; 1
     904:	51 f0       	breq	.+20     	; 0x91a <USB_Host_ProcessNextHostState+0x214>
     906:	68 2f       	mov	r22, r24
     908:	89 2f       	mov	r24, r25
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     90a:	48 de       	rcall	.-880    	; 0x59c <EVENT_USB_Host_DeviceEnumerationFailed>
     90c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     916:	da dd       	rcall	.-1100   	; 0x4cc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     918:	c2 d0       	rcall	.+388    	; 0xa9e <USB_ResetInterface>
     91a:	28 96       	adiw	r28, 0x08	; 8
	}
}
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <Pipe_ConfigurePipe>:
     932:	ef 92       	push	r14
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	2f 70       	andi	r18, 0x0F	; 15
     93a:	42 2b       	or	r20, r18
     93c:	90 e4       	ldi	r25, 0x40	; 64
     93e:	69 9f       	mul	r22, r25
     940:	b0 01       	movw	r22, r0
     942:	11 24       	eor	r1, r1
     944:	64 2b       	or	r22, r20
     946:	38 2f       	mov	r19, r24
     948:	2e 2d       	mov	r18, r14
     94a:	22 60       	ori	r18, 0x02	; 2
     94c:	37 30       	cpi	r19, 0x07	; 7
     94e:	08 f0       	brcs	.+2      	; 0x952 <Pipe_ConfigurePipe+0x20>
     950:	45 c0       	rjmp	.+138    	; 0x9dc <Pipe_ConfigurePipe+0xaa>
     952:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     956:	38 13       	cpse	r19, r24
     958:	13 c0       	rjmp	.+38     	; 0x980 <Pipe_ConfigurePipe+0x4e>
     95a:	48 e0       	ldi	r20, 0x08	; 8
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	40 17       	cp	r20, r16
     962:	51 07       	cpc	r21, r17
     964:	38 f0       	brcs	.+14     	; 0x974 <Pipe_ConfigurePipe+0x42>
     966:	92 95       	swap	r25
     968:	90 7f       	andi	r25, 0xF0	; 240
     96a:	92 2b       	or	r25, r18
     96c:	e6 2f       	mov	r30, r22
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	0e c0       	rjmp	.+28     	; 0x990 <Pipe_ConfigurePipe+0x5e>
     974:	95 30       	cpi	r25, 0x05	; 5
     976:	b9 f3       	breq	.-18     	; 0x966 <Pipe_ConfigurePipe+0x34>
     978:	9f 5f       	subi	r25, 0xFF	; 255
     97a:	44 0f       	add	r20, r20
     97c:	55 1f       	adc	r21, r21
     97e:	f0 cf       	rjmp	.-32     	; 0x960 <Pipe_ConfigurePipe+0x2e>
     980:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     984:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     988:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     98c:	50 91 ae 00 	lds	r21, 0x00AE	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     990:	91 fd       	sbrc	r25, 1
     992:	02 c0       	rjmp	.+4      	; 0x998 <Pipe_ConfigurePipe+0x66>
     994:	3f 5f       	subi	r19, 0xFF	; 255
     996:	da cf       	rjmp	.-76     	; 0x94c <Pipe_ConfigurePipe+0x1a>
     998:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     99c:	4e 7f       	andi	r20, 0xFE	; 254
     99e:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9a2:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     9a6:	4d 7f       	andi	r20, 0xFD	; 253
     9a8:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     9ac:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9b0:	41 60       	ori	r20, 0x01	; 1
     9b2:	40 93 a9 00 	sts	0x00A9, r20	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9b6:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     9ba:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     9be:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
     9c2:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     9c6:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9ca:	90 62       	ori	r25, 0x20	; 32
     9cc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     9d0:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
     9d4:	97 fd       	sbrc	r25, 7
     9d6:	de cf       	rjmp	.-68     	; 0x994 <Pipe_ConfigurePipe+0x62>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <Pipe_ConfigurePipe+0xb0>
     9dc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <Pipe_ClearPipes>:
     9ea:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     9f4:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7e00ae>
     9f8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     9fc:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
     a00:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a04:	9e 7f       	andi	r25, 0xFE	; 254
     a06:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	87 30       	cpi	r24, 0x07	; 7
     a0e:	81 f7       	brne	.-32     	; 0x9f0 <Pipe_ClearPipes+0x6>
     a10:	08 95       	ret

00000a12 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a12:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a16:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
     a1a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a1c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a20:	90 73       	andi	r25, 0x30	; 48
     a22:	90 31       	cpi	r25, 0x10	; 16
     a24:	29 f4       	brne	.+10     	; 0xa30 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a26:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			if (Pipe_IsINReceived())
     a2a:	90 ff       	sbrs	r25, 0
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <Pipe_WaitUntilReady+0x26>
     a2e:	19 c0       	rjmp	.+50     	; 0xa62 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a30:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a34:	92 fd       	sbrc	r25, 2
     a36:	15 c0       	rjmp	.+42     	; 0xa62 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a38:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a3c:	91 fd       	sbrc	r25, 1
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a40:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <USB_HostState>
     a44:	91 30       	cpi	r25, 0x01	; 1
     a46:	89 f0       	breq	.+34     	; 0xa6a <Pipe_WaitUntilReady+0x58>
     a48:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
     a4c:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7e00a3>
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a50:	42 17       	cp	r20, r18
     a52:	53 07       	cpc	r21, r19
     a54:	19 f3       	breq	.-58     	; 0xa1c <Pipe_WaitUntilReady+0xa>
     a56:	81 50       	subi	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a58:	11 f0       	breq	.+4      	; 0xa5e <Pipe_WaitUntilReady+0x4c>
     a5a:	a9 01       	movw	r20, r18
     a5c:	df cf       	rjmp	.-66     	; 0xa1c <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_Timeout;
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	08 95       	ret
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a6a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a6c:	08 95       	ret

00000a6e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a6e:	70 d0       	rcall	.+224    	; 0xb50 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a70:	77 d0       	rcall	.+238    	; 0xb60 <USB_INT_ClearAllInterrupts>
     a72:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 83       	st	Z, r24
     a7c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	80 83       	st	Z, r24
     a86:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a88:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	8c 91       	ld	r24, X
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
     a90:	8c 93       	st	X, r24
     a92:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	80 83       	st	Z, r24
     a98:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a9c:	08 95       	ret

00000a9e <USB_ResetInterface>:
     a9e:	58 d0       	rcall	.+176    	; 0xb50 <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     aa0:	5f d0       	rcall	.+190    	; 0xb60 <USB_INT_ClearAllInterrupts>
     aa2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     aac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				USBCON |=  (1 << USBE);
     ab0:	80 68       	ori	r24, 0x80	; 128
     ab2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ab6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     aba:	8f 7d       	andi	r24, 0xDF	; 223
     abc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     ac0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     aca:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     acc:	89 bd       	out	0x29, r24	; 41
     ace:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad0:	89 bd       	out	0x29, r24	; 41
     ad2:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ad4:	00 fe       	sbrs	r0, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <USB_ResetInterface+0x34>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ada:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USB_HostState>
     ade:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <USB_Host_ConfigurationNumber>
	USB_Host_ConfigurationNumber = 0;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ae4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Host_ControlPipeSize>
     ae8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     af2:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     afc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     b06:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
				UHWCON &= ~(1 << UVCONE);
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
     b10:	6f 9a       	sbi	0x0d, 7	; 13

				DDRE   |=  (1 << 7);
     b12:	77 9a       	sbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b14:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b1e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     b28:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     b32:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     b3c:	08 95       	ret

00000b3e <USB_Init>:
     b3e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_IsInitialized>

	USB_ResetInterface();
     b4e:	a7 cf       	rjmp	.-178    	; 0xa9e <USB_ResetInterface>

00000b50 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b50:	e8 ed       	ldi	r30, 0xD8	; 216
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8c 7f       	andi	r24, 0xFC	; 252
     b58:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b5a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b5e:	08 95       	ret

00000b60 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b60:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b64:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     b68:	08 95       	ret

00000b6a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	0b b6       	in	r0, 0x3b	; 59
     b76:	0f 92       	push	r0
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b90:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b94:	85 ff       	sbrs	r24, 5
     b96:	0a c0       	rjmp	.+20     	; 0xbac <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b98:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     b9c:	85 ff       	sbrs	r24, 5
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ba0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     baa:	6a d1       	rcall	.+724    	; 0xe80 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bac:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bb0:	81 ff       	sbrs	r24, 1
     bb2:	15 c0       	rjmp	.+42     	; 0xbde <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bb4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bb8:	81 ff       	sbrs	r24, 1
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bbc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bc6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <__TEXT_REGION_LENGTH__+0x7e009f>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bd0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
     bda:	78 dc       	rcall	.-1808   	; 0x4cc <EVENT_USB_Host_DeviceUnattached>
     bdc:	60 df       	rcall	.-320    	; 0xa9e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bde:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     be2:	81 ff       	sbrs	r24, 1
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     be6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     bea:	81 ff       	sbrs	r24, 1
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bee:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bf8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfa:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	ba dc       	rcall	.-1676   	; 0x57c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c08:	61 dc       	rcall	.-1854   	; 0x4cc <EVENT_USB_Host_DeviceUnattached>
     c0a:	81 e0       	ldi	r24, 0x01	; 1

		USB_HostState = HOST_STATE_Unattached;
     c0c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USB_HostState>
     c10:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c14:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <__vector_10+0xdc>
     c18:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	13 c0       	rjmp	.+38     	; 0xc46 <__vector_10+0xdc>
     c20:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     c2a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c34:	45 dc       	rcall	.-1910   	; 0x4c0 <EVENT_USB_Host_DeviceAttached>
     c36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c3a:	82 60       	ori	r24, 0x02	; 2
     c3c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     c40:	82 e0       	ldi	r24, 0x02	; 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c42:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USB_HostState>
     c46:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c4a:	82 ff       	sbrs	r24, 2
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__vector_10+0x100>
     c4e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c52:	82 ff       	sbrs	r24, 2
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <__vector_10+0x100>
     c56:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	9b dc       	rcall	.-1738   	; 0x59c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c66:	32 dc       	rcall	.-1948   	; 0x4cc <EVENT_USB_Host_DeviceUnattached>
     c68:	1a df       	rcall	.-460    	; 0xa9e <USB_ResetInterface>

		USB_ResetInterface();
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <Pipe_Write_Stream_LE>:
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	8b 01       	movw	r16, r22
     ca4:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ca6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     caa:	8f 7c       	andi	r24, 0xCF	; 207
     cac:	80 62       	ori	r24, 0x20	; 32
     cae:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     cb2:	af de       	rcall	.-674    	; 0xa12 <Pipe_WaitUntilReady>
     cb4:	81 11       	cpse	r24, r1
     cb6:	32 c0       	rjmp	.+100    	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cb8:	e1 14       	cp	r14, r1
     cba:	f1 04       	cpc	r15, r1
     cbc:	39 f0       	breq	.+14     	; 0xccc <Pipe_Write_Stream_LE+0x3c>
	{
		Length -= *BytesProcessed;
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	08 1b       	sub	r16, r24
     cc6:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     cc8:	c8 0f       	add	r28, r24
     cca:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	11 f1       	breq	.+68     	; 0xd1a <Pipe_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     cd6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	{
		if (!(Pipe_IsReadWriteAllowed()))
     cda:	85 fd       	sbrc	r24, 5
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <Pipe_Write_Stream_LE+0x78>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     cde:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ce2:	8b 77       	andi	r24, 0x7B	; 123
     ce4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ce8:	e1 14       	cp	r14, r1
     cea:	f1 04       	cpc	r15, r1
     cec:	49 f0       	breq	.+18     	; 0xd00 <Pipe_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     cee:	f7 01       	movw	r30, r14
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	c8 0e       	add	r12, r24
     cf6:	d9 1e       	adc	r13, r25
     cf8:	d1 82       	std	Z+1, r13	; 0x01
     cfa:	c0 82       	st	Z, r12
				return PIPE_RWSTREAM_IncompleteTransfer;
     cfc:	84 e0       	ldi	r24, 0x04	; 4
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
     d00:	88 de       	rcall	.-752    	; 0xa12 <Pipe_WaitUntilReady>
     d02:	88 23       	and	r24, r24
     d04:	29 f3       	breq	.-54     	; 0xcd0 <Pipe_Write_Stream_LE+0x40>
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <Pipe_Write_Stream_LE+0x8c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d08:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     d0a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d0e:	01 50       	subi	r16, 0x01	; 1
     d10:	11 09       	sbc	r17, r1
			BytesInTransfer++;
     d12:	ff ef       	ldi	r31, 0xFF	; 255
     d14:	cf 1a       	sub	r12, r31
     d16:	df 0a       	sbc	r13, r31
     d18:	db cf       	rjmp	.-74     	; 0xcd0 <Pipe_Write_Stream_LE+0x40>
		}
	}

	return PIPE_RWSTREAM_NoError;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	08 95       	ret

00000d2e <USB_GetNextDescriptor>:
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	dc 01       	movw	r26, r24
     d34:	eb 01       	movw	r28, r22
     d36:	e8 81       	ld	r30, Y
     d38:	f9 81       	ldd	r31, Y+1	; 0x01
     d3a:	20 81       	ld	r18, Z
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	11 97       	sbiw	r26, 0x01	; 1
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	08 f4       	brcc	.+2      	; 0xd4c <USB_GetNextDescriptor+0x1e>
     d4a:	9c 01       	movw	r18, r24
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	eb 01       	movw	r28, r22
     d52:	f9 83       	std	Y+1, r31	; 0x01
     d54:	e8 83       	st	Y, r30
     d56:	8d 91       	ld	r24, X+
     d58:	9c 91       	ld	r25, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
     d5c:	82 1b       	sub	r24, r18
     d5e:	93 0b       	sbc	r25, r19
     d60:	8d 93       	st	X+, r24
     d62:	9c 93       	st	X, r25
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <USB_Host_GetDeviceConfigDescriptor>:
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	29 97       	sbiw	r28, 0x09	; 9
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	6b 01       	movw	r12, r22
     d8c:	8a 01       	movw	r16, r20
     d8e:	79 01       	movw	r14, r18
     d90:	90 e8       	ldi	r25, 0x80	; 128
     d92:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <USB_ControlRequest>
     d96:	96 e0       	ldi	r25, 0x06	; 6
     d98:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <USB_ControlRequest+0x1>
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	92 60       	ori	r25, 0x02	; 2
     da2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <USB_ControlRequest+0x3>
     da6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <USB_ControlRequest+0x2>
     daa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <USB_ControlRequest+0x5>
     dae:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <USB_ControlRequest+0x4>
     db2:	89 e0       	ldi	r24, 0x09	; 9
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <USB_ControlRequest+0x7>
     dba:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <USB_ControlRequest+0x6>
     dbe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	83 d0       	rcall	.+262    	; 0xece <USB_Host_SendControlRequest>
     dc8:	81 11       	cpse	r24, r1
     dca:	19 c0       	rjmp	.+50     	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x94>
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	f6 01       	movw	r30, r12
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
     dd6:	e8 16       	cp	r14, r24
     dd8:	f9 06       	cpc	r15, r25
     dda:	70 f0       	brcs	.+28     	; 0xdf8 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     ddc:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <USB_ControlRequest+0x7>
     de0:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <USB_ControlRequest+0x6>
     de4:	c8 01       	movw	r24, r16
     de6:	73 d0       	rcall	.+230    	; 0xece <USB_Host_SendControlRequest>
     de8:	81 11       	cpse	r24, r1
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x94>
     dec:	f8 01       	movw	r30, r16
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	21 f4       	brne	.+8      	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x92>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x94>
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x94>
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	29 96       	adiw	r28, 0x09	; 9
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	08 95       	ret

00000e1c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	8c 01       	movw	r16, r24
     e32:	eb 01       	movw	r28, r22
     e34:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e36:	f8 01       	movw	r30, r16
     e38:	e0 80       	ld	r14, Z
     e3a:	f1 80       	ldd	r15, Z+1	; 0x01
     e3c:	e1 14       	cp	r14, r1
     e3e:	f1 04       	cpc	r15, r1
     e40:	99 f0       	breq	.+38     	; 0xe68 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e42:	a8 80       	ld	r10, Y
     e44:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     e46:	be 01       	movw	r22, r28
     e48:	c8 01       	movw	r24, r16
     e4a:	71 df       	rcall	.-286    	; 0xd2e <USB_GetNextDescriptor>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e4c:	88 81       	ld	r24, Y
     e4e:	99 81       	ldd	r25, Y+1	; 0x01
     e50:	f6 01       	movw	r30, r12
     e52:	09 95       	icall
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	79 f3       	breq	.-34     	; 0xe36 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	39 f4       	brne	.+14     	; 0xe6a <USB_GetNextDescriptorComp+0x4e>
			{
				*CurrConfigLoc = PrevDescLoc;
     e5c:	b9 82       	std	Y+1, r11	; 0x01
     e5e:	a8 82       	st	Y, r10
				*BytesRem      = PrevBytesRem;
     e60:	f8 01       	movw	r30, r16
     e62:	f1 82       	std	Z+1, r15	; 0x01
     e64:	e0 82       	st	Z, r14
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <USB_GetNextDescriptorComp+0x4e>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e68:	82 e0       	ldi	r24, 0x02	; 2
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	08 95       	ret

00000e80 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e80:	08 95       	ret

00000e82 <USB_Host_WaitForIOS>:
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	18 2f       	mov	r17, r24
     e8a:	c9 ee       	ldi	r28, 0xE9	; 233
     e8c:	d3 e0       	ldi	r29, 0x03	; 3
     e8e:	11 11       	cpse	r17, r1
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <USB_Host_WaitForIOS+0x28>
     e92:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     e96:	83 fd       	sbrc	r24, 3
     e98:	15 c0       	rjmp	.+42     	; 0xec4 <USB_Host_WaitForIOS+0x42>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	e7 db       	rcall	.-2098   	; 0x66c <USB_Host_WaitMS>
     e9e:	81 11       	cpse	r24, r1
     ea0:	12 c0       	rjmp	.+36     	; 0xec6 <USB_Host_WaitForIOS+0x44>
     ea2:	21 97       	sbiw	r28, 0x01	; 1
     ea4:	a1 f7       	brne	.-24     	; 0xe8e <USB_Host_WaitForIOS+0xc>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <USB_Host_WaitForIOS+0x44>
     eaa:	11 30       	cpi	r17, 0x01	; 1
     eac:	29 f4       	brne	.+10     	; 0xeb8 <USB_Host_WaitForIOS+0x36>
     eae:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     eb2:	80 ff       	sbrs	r24, 0
     eb4:	f2 cf       	rjmp	.-28     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <USB_Host_WaitForIOS+0x42>
     eb8:	12 30       	cpi	r17, 0x02	; 2
     eba:	79 f7       	brne	.-34     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     ebc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     ec0:	82 ff       	sbrs	r24, 2
     ec2:	eb cf       	rjmp	.-42     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	08 95       	ret

00000ece <USB_Host_SendControlRequest>:
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	8c 01       	movw	r16, r24
     eda:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	f8 2e       	mov	r15, r24
     ee2:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <USB_ControlRequest+0x6>
     ee6:	d0 91 52 01 	lds	r29, 0x0152	; 0x800152 <USB_ControlRequest+0x7>
     eea:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     eee:	81 60       	ori	r24, 0x01	; 1
     ef0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	ba db       	rcall	.-2188   	; 0x66c <USB_Host_WaitMS>
     ef8:	81 11       	cpse	r24, r1
     efa:	c8 c0       	rjmp	.+400    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     efc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f00:	8f 7c       	andi	r24, 0xCF	; 207
     f02:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f06:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
     f0a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f0e:	8f 7e       	andi	r24, 0xEF	; 239
     f10:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f14:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f1e:	eb e4       	ldi	r30, 0x4B	; 75
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	83 e5       	ldi	r24, 0x53	; 83
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	21 91       	ld	r18, Z+
     f28:	20 93 af 00 	sts	0x00AF, r18	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     f2c:	8e 17       	cp	r24, r30
     f2e:	9f 07       	cpc	r25, r31
     f30:	d1 f7       	brne	.-12     	; 0xf26 <USB_Host_SendControlRequest+0x58>
     f32:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f36:	87 77       	andi	r24, 0x77	; 119
     f38:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	a1 df       	rcall	.-190    	; 0xe82 <USB_Host_WaitForIOS>
     f40:	81 11       	cpse	r24, r1
     f42:	a4 c0       	rjmp	.+328    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     f44:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8d db       	rcall	.-2278   	; 0x66c <USB_Host_WaitMS>
     f52:	81 11       	cpse	r24, r1
     f54:	9b c0       	rjmp	.+310    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     f56:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     f5a:	87 ff       	sbrs	r24, 7
     f5c:	4e c0       	rjmp	.+156    	; 0xffa <USB_Host_SendControlRequest+0x12c>
     f5e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f62:	8f 7c       	andi	r24, 0xCF	; 207
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f6a:	01 15       	cp	r16, r1
     f6c:	11 05       	cpc	r17, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <USB_Host_SendControlRequest+0xa4>
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <USB_Host_SendControlRequest+0x118>
     f72:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f76:	8f 7c       	andi	r24, 0xCF	; 207
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
     f7e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f82:	8f 7b       	andi	r24, 0xBF	; 191
     f84:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	7b df       	rcall	.-266    	; 0xe82 <USB_Host_WaitForIOS>
     f8c:	81 11       	cpse	r24, r1
     f8e:	7e c0       	rjmp	.+252    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     f90:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f94:	8b 77       	andi	r24, 0x7B	; 123
     f96:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	72 df       	rcall	.-284    	; 0xe82 <USB_Host_WaitForIOS>
     f9e:	76 c0       	rjmp	.+236    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     fa0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fa4:	8f 7b       	andi	r24, 0xBF	; 191
     fa6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	6a df       	rcall	.-300    	; 0xe82 <USB_Host_WaitForIOS>
     fae:	81 11       	cpse	r24, r1
     fb0:	6d c0       	rjmp	.+218    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     fb2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     fb6:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     fba:	89 2b       	or	r24, r25
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <USB_Host_SendControlRequest+0xf4>
     fbe:	c0 e0       	ldi	r28, 0x00	; 0
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	f8 01       	movw	r30, r16
     fc4:	8f 01       	movw	r16, r30
     fc6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     fca:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     fce:	89 2b       	or	r24, r25
     fd0:	69 f4       	brne	.+26     	; 0xfec <USB_Host_SendControlRequest+0x11e>
     fd2:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     fdc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe0:	8e 77       	andi	r24, 0x7E	; 126
     fe2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
     fe6:	20 97       	sbiw	r28, 0x00	; 0
     fe8:	d9 f6       	brne	.-74     	; 0xfa0 <USB_Host_SendControlRequest+0xd2>
     fea:	c3 cf       	rjmp	.-122    	; 0xf72 <USB_Host_SendControlRequest+0xa4>
     fec:	20 97       	sbiw	r28, 0x00	; 0
     fee:	89 f3       	breq	.-30     	; 0xfd2 <USB_Host_SendControlRequest+0x104>
     ff0:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
     ff4:	81 93       	st	Z+, r24
     ff6:	21 97       	sbiw	r28, 0x01	; 1
     ff8:	e5 cf       	rjmp	.-54     	; 0xfc4 <USB_Host_SendControlRequest+0xf6>
     ffa:	01 15       	cp	r16, r1
     ffc:	11 05       	cpc	r17, r1
     ffe:	91 f1       	breq	.+100    	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1000:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1004:	8f 7c       	andi	r24, 0xCF	; 207
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    100c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	20 97       	sbiw	r28, 0x00	; 0
    101a:	e1 f0       	breq	.+56     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    101c:	32 df       	rcall	.-412    	; 0xe82 <USB_Host_WaitForIOS>
    101e:	81 11       	cpse	r24, r1
    1020:	35 c0       	rjmp	.+106    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1022:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    1026:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    102a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Host_ControlPipeSize>
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 17       	cp	r18, r24
    1032:	39 07       	cpc	r19, r25
    1034:	48 f4       	brcc	.+18     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1036:	0f 5f       	subi	r16, 0xFF	; 255
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	f8 01       	movw	r30, r16
    103c:	31 97       	sbiw	r30, 0x01	; 1
    103e:	80 81       	ld	r24, Z
    1040:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__TEXT_REGION_LENGTH__+0x7e00af>
    1044:	21 97       	sbiw	r28, 0x01	; 1
    1046:	69 f7       	brne	.-38     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1048:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    104c:	8b 77       	andi	r24, 0x7B	; 123
    104e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1052:	e1 cf       	rjmp	.-62     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1054:	16 df       	rcall	.-468    	; 0xe82 <USB_Host_WaitForIOS>
    1056:	81 11       	cpse	r24, r1
    1058:	19 c0       	rjmp	.+50     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    105a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1064:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1068:	8f 7c       	andi	r24, 0xCF	; 207
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
    1070:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1074:	8f 7b       	andi	r24, 0xBF	; 191
    1076:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	02 df       	rcall	.-508    	; 0xe82 <USB_Host_WaitForIOS>
    107e:	81 11       	cpse	r24, r1
    1080:	05 c0       	rjmp	.+10     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1082:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1086:	9e 77       	andi	r25, 0x7E	; 126
    1088:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    108c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1090:	90 64       	ori	r25, 0x40	; 64
    1092:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1096:	f1 10       	cpse	r15, r1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    109a:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    109e:	9e 7f       	andi	r25, 0xFE	; 254
    10a0:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__TEXT_REGION_LENGTH__+0x7e009e>
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    10aa:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	08 95       	ret

000010ba <USB_Host_SetDeviceConfiguration>:
    10ba:	cf 93       	push	r28
    10bc:	c8 2f       	mov	r28, r24
    10be:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <USB_ControlRequest>
    10c2:	89 e0       	ldi	r24, 0x09	; 9
    10c4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <USB_ControlRequest+0x1>
    10c8:	8c 2f       	mov	r24, r28
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <USB_ControlRequest+0x3>
    10d0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <USB_ControlRequest+0x2>
    10d4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <USB_ControlRequest+0x5>
    10d8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <USB_ControlRequest+0x4>
    10dc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <USB_ControlRequest+0x7>
    10e0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <USB_ControlRequest+0x6>
    10e4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	f0 de       	rcall	.-544    	; 0xece <USB_Host_SendControlRequest>
    10ee:	81 11       	cpse	r24, r1
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <USB_Host_SetDeviceConfiguration+0x4a>
    10f2:	c0 93 49 01 	sts	0x0149, r28	; 0x800149 <USB_Host_ConfigurationNumber>
    10f6:	c1 11       	cpse	r28, r1
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <USB_Host_SetDeviceConfiguration+0x44>
    10fa:	9a e0       	ldi	r25, 0x0A	; 10
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <USB_Host_SetDeviceConfiguration+0x46>
    10fe:	9b e0       	ldi	r25, 0x0B	; 11
    1100:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USB_HostState>
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1108:	eb e4       	ldi	r30, 0x4B	; 75
    110a:	f1 e0       	ldi	r31, 0x01	; 1
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	90 83       	st	Z, r25
    1110:	9b e0       	ldi	r25, 0x0B	; 11
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	73 83       	std	Z+3, r23	; 0x03
    1118:	62 83       	std	Z+2, r22	; 0x02
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	95 83       	std	Z+5, r25	; 0x05
    111e:	84 83       	std	Z+4, r24	; 0x04
    1120:	17 82       	std	Z+7, r1	; 0x07
    1122:	16 82       	std	Z+6, r1	; 0x06
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1124:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	d0 ce       	rjmp	.-608    	; 0xece <USB_Host_SendControlRequest>

0000112e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1134:	c7 ea       	ldi	r28, 0xA7	; 167
    1136:	d0 e0       	ldi	r29, 0x00	; 0
    1138:	18 81       	ld	r17, Y
    113a:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    113c:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    113e:	e3 da       	rcall	.-2618   	; 0x706 <USB_Host_ProcessNextHostState>
    1140:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	08 95       	ret

0000114a <DCOMP_PRNT_Host_NextPRNTInterface>:
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    114a:	fc 01       	movw	r30, r24
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	59 f4       	brne	.+22     	; 0x1168 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1152:	85 81       	ldd	r24, Z+5	; 0x05
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	41 f4       	brne	.+16     	; 0x1168 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1158:	86 81       	ldd	r24, Z+6	; 0x06
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	29 f4       	brne	.+10     	; 0x1168 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    115e:	87 81       	ldd	r24, Z+7	; 0x07
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	11 f4       	brne	.+4      	; 0x1168 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	08 95       	ret

0000116c <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:
    116c:	fc 01       	movw	r30, r24
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	95 30       	cpi	r25, 0x05	; 5
    1172:	31 f4       	brne	.+12     	; 0x1180 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x14>
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	83 70       	andi	r24, 0x03	; 3
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	31 f4       	brne	.+12     	; 0x1188 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret
    1180:	94 30       	cpi	r25, 0x04	; 4
    1182:	11 f4       	brne	.+4      	; 0x1188 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	08 95       	ret
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	08 95       	ret

0000118c <PRNT_Host_ConfigurePipes>:
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <PRNT_Host_ConfigurePipes+0x1e>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <PRNT_Host_ConfigurePipes+0x20>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	7a 83       	std	Y+2, r23	; 0x02
    11b2:	69 83       	std	Y+1, r22	; 0x01
    11b4:	5c 83       	std	Y+4, r21	; 0x04
    11b6:	4b 83       	std	Y+3, r20	; 0x03
    11b8:	fc 01       	movw	r30, r24
    11ba:	34 96       	adiw	r30, 0x04	; 4
    11bc:	27 e0       	ldi	r18, 0x07	; 7
    11be:	df 01       	movw	r26, r30
    11c0:	1d 92       	st	X+, r1
    11c2:	2a 95       	dec	r18
    11c4:	e9 f7       	brne	.-6      	; 0x11c0 <PRNT_Host_ConfigurePipes+0x34>
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	11 81       	ldd	r17, Z+1	; 0x01
    11cc:	12 30       	cpi	r17, 0x02	; 2
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <PRNT_Host_ConfigurePipes+0x46>
    11d0:	75 c0       	rjmp	.+234    	; 0x12bc <PRNT_Host_ConfigurePipes+0x130>
    11d2:	6c 01       	movw	r12, r24
    11d4:	45 ea       	ldi	r20, 0xA5	; 165
    11d6:	58 e0       	ldi	r21, 0x08	; 8
    11d8:	be 01       	movw	r22, r28
    11da:	6d 5f       	subi	r22, 0xFD	; 253
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	1c de       	rcall	.-968    	; 0xe1c <USB_GetNextDescriptorComp>
    11e4:	81 11       	cpse	r24, r1
    11e6:	6b c0       	rjmp	.+214    	; 0x12be <PRNT_Host_ConfigurePipes+0x132>
    11e8:	6b 80       	ldd	r6, Y+3	; 0x03
    11ea:	7c 80       	ldd	r7, Y+4	; 0x04
    11ec:	f1 2c       	mov	r15, r1
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	81 2c       	mov	r8, r1
    11f2:	91 2c       	mov	r9, r1
    11f4:	61 14       	cp	r6, r1
    11f6:	71 04       	cpc	r7, r1
    11f8:	69 f3       	breq	.-38     	; 0x11d4 <PRNT_Host_ConfigurePipes+0x48>
    11fa:	46 eb       	ldi	r20, 0xB6	; 182
    11fc:	58 e0       	ldi	r21, 0x08	; 8
    11fe:	be 01       	movw	r22, r28
    1200:	6d 5f       	subi	r22, 0xFD	; 253
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	09 de       	rcall	.-1006   	; 0xe1c <USB_GetNextDescriptorComp>
    120a:	81 11       	cpse	r24, r1
    120c:	e3 cf       	rjmp	.-58     	; 0x11d4 <PRNT_Host_ConfigurePipes+0x48>
    120e:	ab 80       	ldd	r10, Y+3	; 0x03
    1210:	bc 80       	ldd	r11, Y+4	; 0x04
    1212:	f5 01       	movw	r30, r10
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	87 fd       	sbrc	r24, 7
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <PRNT_Host_ConfigurePipes+0x94>
    121a:	45 01       	movw	r8, r10
    121c:	af 2c       	mov	r10, r15
    121e:	b0 2e       	mov	r11, r16
    1220:	a1 14       	cp	r10, r1
    1222:	b1 04       	cpc	r11, r1
    1224:	19 f4       	brne	.+6      	; 0x122c <PRNT_Host_ConfigurePipes+0xa0>
    1226:	fa 2c       	mov	r15, r10
    1228:	0b 2d       	mov	r16, r11
    122a:	e4 cf       	rjmp	.-56     	; 0x11f4 <PRNT_Host_ConfigurePipes+0x68>
    122c:	81 14       	cp	r8, r1
    122e:	91 04       	cpc	r9, r1
    1230:	d1 f3       	breq	.-12     	; 0x1226 <PRNT_Host_ConfigurePipes+0x9a>
    1232:	ff 24       	eor	r15, r15
    1234:	f3 94       	inc	r15
    1236:	d6 01       	movw	r26, r12
    1238:	8c 91       	ld	r24, X
    123a:	8f 11       	cpse	r24, r15
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <PRNT_Host_ConfigurePipes+0xcc>
    123e:	f5 01       	movw	r30, r10
    1240:	04 81       	ldd	r16, Z+4	; 0x04
    1242:	15 81       	ldd	r17, Z+5	; 0x05
    1244:	22 81       	ldd	r18, Z+2	; 0x02
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	8c 91       	ld	r24, X
    124a:	11 97       	sbiw	r26, 0x01	; 1
    124c:	18 96       	adiw	r26, 0x08	; 8
    124e:	1c 93       	st	X, r17
    1250:	0e 93       	st	-X, r16
    1252:	17 97       	sbiw	r26, 0x07	; 7
    1254:	40 e1       	ldi	r20, 0x10	; 16
    1256:	25 c0       	rjmp	.+74     	; 0x12a2 <PRNT_Host_ConfigurePipes+0x116>
    1258:	d6 01       	movw	r26, r12
    125a:	12 96       	adiw	r26, 0x02	; 2
    125c:	8c 91       	ld	r24, X
    125e:	8f 15       	cp	r24, r15
    1260:	99 f0       	breq	.+38     	; 0x1288 <PRNT_Host_ConfigurePipes+0xfc>
    1262:	f3 94       	inc	r15
    1264:	b7 e0       	ldi	r27, 0x07	; 7
    1266:	fb 12       	cpse	r15, r27
    1268:	e6 cf       	rjmp	.-52     	; 0x1236 <PRNT_Host_ConfigurePipes+0xaa>
    126a:	f3 01       	movw	r30, r6
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	d6 01       	movw	r26, r12
    1270:	15 96       	adiw	r26, 0x05	; 5
    1272:	8c 93       	st	X, r24
    1274:	15 97       	sbiw	r26, 0x05	; 5
    1276:	83 81       	ldd	r24, Z+3	; 0x03
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	8c 93       	st	X, r24
    127c:	16 97       	sbiw	r26, 0x06	; 6
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	14 96       	adiw	r26, 0x04	; 4
    1282:	8c 93       	st	X, r24
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	1b c0       	rjmp	.+54     	; 0x12be <PRNT_Host_ConfigurePipes+0x132>
    1288:	f4 01       	movw	r30, r8
    128a:	04 81       	ldd	r16, Z+4	; 0x04
    128c:	15 81       	ldd	r17, Z+5	; 0x05
    128e:	22 81       	ldd	r18, Z+2	; 0x02
    1290:	d6 01       	movw	r26, r12
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	8c 91       	ld	r24, X
    1296:	13 97       	sbiw	r26, 0x03	; 3
    1298:	1a 96       	adiw	r26, 0x0a	; 10
    129a:	1c 93       	st	X, r17
    129c:	0e 93       	st	-X, r16
    129e:	19 97       	sbiw	r26, 0x09	; 9
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	81 11       	cpse	r24, r1
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <PRNT_Host_ConfigurePipes+0x11e>
    12a6:	e1 2c       	mov	r14, r1
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <PRNT_Host_ConfigurePipes+0x122>
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	e8 2e       	mov	r14, r24
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	8f 2d       	mov	r24, r15
    12b2:	3f db       	rcall	.-2434   	; 0x932 <Pipe_ConfigurePipe>
    12b4:	81 11       	cpse	r24, r1
    12b6:	d5 cf       	rjmp	.-86     	; 0x1262 <PRNT_Host_ConfigurePipes+0xd6>
    12b8:	13 e0       	ldi	r17, 0x03	; 3
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <PRNT_Host_ConfigurePipes+0x132>
    12bc:	11 e0       	ldi	r17, 0x01	; 1
    12be:	81 2f       	mov	r24, r17
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	08 95       	ret

000012e6 <PRNT_Host_SetBidirectionalMode>:
    12e6:	fc 01       	movw	r30, r24
    12e8:	66 81       	ldd	r22, Z+6	; 0x06
    12ea:	66 23       	and	r22, r22
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <PRNT_Host_SetBidirectionalMode+0xc>
    12ee:	85 81       	ldd	r24, Z+5	; 0x05
    12f0:	0b cf       	rjmp	.-490    	; 0x1108 <USB_Host_SetInterfaceAltSetting>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	08 95       	ret

000012f6 <PRNT_Host_Flush>:
    12f6:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <USB_HostState>
    12fa:	2b 30       	cpi	r18, 0x0B	; 11
    12fc:	49 f5       	brne	.+82     	; 0x1350 <PRNT_Host_Flush+0x5a>
    12fe:	fc 01       	movw	r30, r24
    1300:	24 81       	ldd	r18, Z+4	; 0x04
    1302:	22 23       	and	r18, r18
    1304:	29 f1       	breq	.+74     	; 0x1350 <PRNT_Host_Flush+0x5a>
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    130c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1310:	8f 7b       	andi	r24, 0xBF	; 191
    1312:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1316:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
    131a:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
    131e:	89 2b       	or	r24, r25
    1320:	c9 f0       	breq	.+50     	; 0x1354 <PRNT_Host_Flush+0x5e>
    1322:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1326:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    132a:	8b 77       	andi	r24, 0x7B	; 123
    132c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1330:	95 fd       	sbrc	r25, 5
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <PRNT_Host_Flush+0x4e>
    1334:	6e db       	rcall	.-2340   	; 0xa12 <Pipe_WaitUntilReady>
    1336:	81 11       	cpse	r24, r1
    1338:	0e c0       	rjmp	.+28     	; 0x1356 <PRNT_Host_Flush+0x60>
    133a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    133e:	8b 77       	andi	r24, 0x7B	; 123
    1340:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    1344:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1348:	80 64       	ori	r24, 0x40	; 64
    134a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <PRNT_Host_Flush+0x5e>
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	08 95       	ret
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret

00001358 <PRNT_Host_USBTask>:
    1358:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <USB_HostState>
    135c:	2b 30       	cpi	r18, 0x0B	; 11
    135e:	21 f4       	brne	.+8      	; 0x1368 <PRNT_Host_USBTask+0x10>
    1360:	fc 01       	movw	r30, r24
    1362:	24 81       	ldd	r18, Z+4	; 0x04
    1364:	21 11       	cpse	r18, r1
    1366:	c7 cf       	rjmp	.-114    	; 0x12f6 <PRNT_Host_Flush>
    1368:	08 95       	ret

0000136a <PRNT_Host_SendData>:
    136a:	fc 01       	movw	r30, r24
    136c:	cb 01       	movw	r24, r22
    136e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <USB_HostState>
    1372:	2b 30       	cpi	r18, 0x0B	; 11
    1374:	e9 f4       	brne	.+58     	; 0x13b0 <PRNT_Host_SendData+0x46>
    1376:	24 81       	ldd	r18, Z+4	; 0x04
    1378:	22 23       	and	r18, r18
    137a:	d1 f0       	breq	.+52     	; 0x13b0 <PRNT_Host_SendData+0x46>
    137c:	ba 01       	movw	r22, r20
    137e:	22 81       	ldd	r18, Z+2	; 0x02
    1380:	20 93 a7 00 	sts	0x00A7, r18	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
    1384:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    1388:	2f 7b       	andi	r18, 0xBF	; 191
    138a:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	7e dc       	rcall	.-1796   	; 0xc90 <Pipe_Write_Stream_LE>
    1394:	81 11       	cpse	r24, r1
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <PRNT_Host_SendData+0x48>
    1398:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    139c:	8b 77       	andi	r24, 0x7B	; 123
    139e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
    13a2:	37 db       	rcall	.-2450   	; 0xa12 <Pipe_WaitUntilReady>
    13a4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13a8:	90 64       	ori	r25, 0x40	; 64
    13aa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    13ae:	08 95       	ret
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	08 95       	ret

000013b4 <PRNT_Host_GetDeviceID>:

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    13b4:	ef 92       	push	r14
    13b6:	ff 92       	push	r15
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <PRNT_Host_GetDeviceID+0xe>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	7b 01       	movw	r14, r22
    13c8:	8a 01       	movw	r16, r20
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
    13ca:	1a 82       	std	Y+2, r1	; 0x02
    13cc:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    13ce:	fc 01       	movw	r30, r24
    13d0:	85 81       	ldd	r24, Z+5	; 0x05
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	21 ea       	ldi	r18, 0xA1	; 161
    13d6:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <USB_ControlRequest>
    13da:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <USB_ControlRequest+0x1>
    13de:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <USB_ControlRequest+0x3>
    13e2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <USB_ControlRequest+0x2>
    13e6:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <USB_ControlRequest+0x5>
    13ea:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <USB_ControlRequest+0x4>
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <USB_ControlRequest+0x7>
    13f6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <USB_ControlRequest+0x6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13fa:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	65 dd       	rcall	.-1334   	; 0xece <USB_Host_SendControlRequest>
    1404:	81 11       	cpse	r24, r1
    1406:	2c c0       	rjmp	.+88     	; 0x1460 <PRNT_Host_GetDeviceID+0xac>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    1408:	29 81       	ldd	r18, Y+1	; 0x01
    140a:	3a 81       	ldd	r19, Y+2	; 0x02
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	19 f4       	brne	.+6      	; 0x1418 <PRNT_Host_GetDeviceID+0x64>
	{
		DeviceIDString[0] = 0x00;
    1412:	f7 01       	movw	r30, r14
    1414:	10 82       	st	Z, r1
		return HOST_SENDCONTROL_Successful;
    1416:	24 c0       	rjmp	.+72     	; 0x1460 <PRNT_Host_GetDeviceID+0xac>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1418:	83 2f       	mov	r24, r19
    141a:	92 2f       	mov	r25, r18
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);

	if (DeviceIDStringLength > BufferSize)
    141c:	08 17       	cp	r16, r24
    141e:	19 07       	cpc	r17, r25
    1420:	18 f0       	brcs	.+6      	; 0x1428 <PRNT_Host_GetDeviceID+0x74>
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	02 c0       	rjmp	.+4      	; 0x142c <PRNT_Host_GetDeviceID+0x78>

	if (DeviceIDStringLength > BufferSize)
	  DeviceIDStringLength = BufferSize;
    1428:	1a 83       	std	Y+2, r17	; 0x02
    142a:	09 83       	std	Y+1, r16	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <USB_ControlRequest+0x7>
    1434:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <USB_ControlRequest+0x6>

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    1438:	c7 01       	movw	r24, r14
    143a:	49 dd       	rcall	.-1390   	; 0xece <USB_Host_SendControlRequest>
    143c:	81 11       	cpse	r24, r1
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <PRNT_Host_GetDeviceID+0xac>
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	8c 01       	movw	r16, r24
    1446:	02 50       	subi	r16, 0x02	; 2
    1448:	11 09       	sbc	r17, r1
    144a:	b7 01       	movw	r22, r14
    144c:	6e 5f       	subi	r22, 0xFE	; 254
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	a8 01       	movw	r20, r16
    1452:	c7 01       	movw	r24, r14
    1454:	3b d0       	rcall	.+118    	; 0x14cc <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    1456:	f7 01       	movw	r30, r14
    1458:	e0 0f       	add	r30, r16
    145a:	f1 1f       	adc	r31, r17
    145c:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
    145e:	80 e0       	ldi	r24, 0x00	; 0
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	08 95       	ret

00001472 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1472:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1476:	95 ff       	sbrs	r25, 5
    1478:	fc cf       	rjmp	.-8      	; 0x1472 <Serial_putchar>
				UDR1 = DataByte;
    147a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	08 95       	ret

00001484 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1484:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1488:	87 ff       	sbrs	r24, 7
    148a:	08 c0       	rjmp	.+16     	; 0x149c <Serial_getchar+0x18>
    148c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1490:	87 ff       	sbrs	r24, 7
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    1494:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	08 95       	ret
	  return _FDEV_EOF;
    149c:	8e ef       	ldi	r24, 0xFE	; 254
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14a6:	08 95       	ret

000014a8 <__tablejump2__>:
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	00 24       	eor	r0, r0
    14ae:	00 1c       	adc	r0, r0
    14b0:	0b be       	out	0x3b, r0	; 59
    14b2:	07 90       	elpm	r0, Z+
    14b4:	f6 91       	elpm	r31, Z
    14b6:	e0 2d       	mov	r30, r0
    14b8:	09 94       	ijmp

000014ba <memcpy>:
    14ba:	fb 01       	movw	r30, r22
    14bc:	dc 01       	movw	r26, r24
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <memcpy+0xa>
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	41 50       	subi	r20, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	d8 f7       	brcc	.-10     	; 0x14c0 <memcpy+0x6>
    14ca:	08 95       	ret

000014cc <memmove>:
    14cc:	68 17       	cp	r22, r24
    14ce:	79 07       	cpc	r23, r25
    14d0:	68 f4       	brcc	.+26     	; 0x14ec <memmove+0x20>
    14d2:	fb 01       	movw	r30, r22
    14d4:	dc 01       	movw	r26, r24
    14d6:	e4 0f       	add	r30, r20
    14d8:	f5 1f       	adc	r31, r21
    14da:	a4 0f       	add	r26, r20
    14dc:	b5 1f       	adc	r27, r21
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <memmove+0x18>
    14e0:	02 90       	ld	r0, -Z
    14e2:	0e 92       	st	-X, r0
    14e4:	41 50       	subi	r20, 0x01	; 1
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	d8 f7       	brcc	.-10     	; 0x14e0 <memmove+0x14>
    14ea:	08 95       	ret
    14ec:	e6 cf       	rjmp	.-52     	; 0x14ba <memcpy>

000014ee <printf_P>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	ae 01       	movw	r20, r28
    14fc:	49 5f       	subi	r20, 0xF9	; 249
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	da 01       	movw	r26, r20
    1502:	6d 91       	ld	r22, X+
    1504:	7d 91       	ld	r23, X+
    1506:	ad 01       	movw	r20, r26
    1508:	02 e6       	ldi	r16, 0x62	; 98
    150a:	11 e0       	ldi	r17, 0x01	; 1
    150c:	f8 01       	movw	r30, r16
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	dc 01       	movw	r26, r24
    1514:	13 96       	adiw	r26, 0x03	; 3
    1516:	2c 91       	ld	r18, X
    1518:	13 97       	sbiw	r26, 0x03	; 3
    151a:	28 60       	ori	r18, 0x08	; 8
    151c:	13 96       	adiw	r26, 0x03	; 3
    151e:	2c 93       	st	X, r18
    1520:	3e d0       	rcall	.+124    	; 0x159e <vfprintf>
    1522:	d8 01       	movw	r26, r16
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	ed 91       	ld	r30, X+
    1528:	fc 91       	ld	r31, X
    152a:	13 97       	sbiw	r26, 0x03	; 3
    152c:	23 81       	ldd	r18, Z+3	; 0x03
    152e:	27 7f       	andi	r18, 0xF7	; 247
    1530:	23 83       	std	Z+3, r18	; 0x03
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <puts_P>:
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	8c 01       	movw	r16, r24
    1546:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <__iob+0x2>
    154a:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <__iob+0x3>
    154e:	83 81       	ldd	r24, Z+3	; 0x03
    1550:	81 ff       	sbrs	r24, 1
    1552:	1b c0       	rjmp	.+54     	; 0x158a <puts_P+0x4e>
    1554:	d0 e0       	ldi	r29, 0x00	; 0
    1556:	c0 e0       	ldi	r28, 0x00	; 0
    1558:	f8 01       	movw	r30, r16
    155a:	84 91       	lpm	r24, Z
    155c:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <__iob+0x2>
    1560:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <__iob+0x3>
    1564:	db 01       	movw	r26, r22
    1566:	18 96       	adiw	r26, 0x08	; 8
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	19 97       	sbiw	r26, 0x09	; 9
    156e:	88 23       	and	r24, r24
    1570:	41 f0       	breq	.+16     	; 0x1582 <puts_P+0x46>
    1572:	09 95       	icall
    1574:	89 2b       	or	r24, r25
    1576:	11 f0       	breq	.+4      	; 0x157c <puts_P+0x40>
    1578:	df ef       	ldi	r29, 0xFF	; 255
    157a:	cf ef       	ldi	r28, 0xFF	; 255
    157c:	0f 5f       	subi	r16, 0xFF	; 255
    157e:	1f 4f       	sbci	r17, 0xFF	; 255
    1580:	eb cf       	rjmp	.-42     	; 0x1558 <puts_P+0x1c>
    1582:	8a e0       	ldi	r24, 0x0A	; 10
    1584:	09 95       	icall
    1586:	89 2b       	or	r24, r25
    1588:	19 f0       	breq	.+6      	; 0x1590 <puts_P+0x54>
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	9f ef       	ldi	r25, 0xFF	; 255
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <puts_P+0x58>
    1590:	8d 2f       	mov	r24, r29
    1592:	9c 2f       	mov	r25, r28
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <vfprintf>:
    159e:	2f 92       	push	r2
    15a0:	3f 92       	push	r3
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	2b 97       	sbiw	r28, 0x0b	; 11
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	6c 01       	movw	r12, r24
    15d4:	7b 01       	movw	r14, r22
    15d6:	8a 01       	movw	r16, r20
    15d8:	fc 01       	movw	r30, r24
    15da:	17 82       	std	Z+7, r1	; 0x07
    15dc:	16 82       	std	Z+6, r1	; 0x06
    15de:	83 81       	ldd	r24, Z+3	; 0x03
    15e0:	81 ff       	sbrs	r24, 1
    15e2:	bf c1       	rjmp	.+894    	; 0x1962 <vfprintf+0x3c4>
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	3c 01       	movw	r6, r24
    15ea:	f6 01       	movw	r30, r12
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	f7 01       	movw	r30, r14
    15f0:	93 fd       	sbrc	r25, 3
    15f2:	85 91       	lpm	r24, Z+
    15f4:	93 ff       	sbrs	r25, 3
    15f6:	81 91       	ld	r24, Z+
    15f8:	7f 01       	movw	r14, r30
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <vfprintf+0x62>
    15fe:	ad c1       	rjmp	.+858    	; 0x195a <vfprintf+0x3bc>
    1600:	85 32       	cpi	r24, 0x25	; 37
    1602:	39 f4       	brne	.+14     	; 0x1612 <vfprintf+0x74>
    1604:	93 fd       	sbrc	r25, 3
    1606:	85 91       	lpm	r24, Z+
    1608:	93 ff       	sbrs	r25, 3
    160a:	81 91       	ld	r24, Z+
    160c:	7f 01       	movw	r14, r30
    160e:	85 32       	cpi	r24, 0x25	; 37
    1610:	21 f4       	brne	.+8      	; 0x161a <vfprintf+0x7c>
    1612:	b6 01       	movw	r22, r12
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	d6 d1       	rcall	.+940    	; 0x19c4 <fputc>
    1618:	e8 cf       	rjmp	.-48     	; 0x15ea <vfprintf+0x4c>
    161a:	91 2c       	mov	r9, r1
    161c:	21 2c       	mov	r2, r1
    161e:	31 2c       	mov	r3, r1
    1620:	ff e1       	ldi	r31, 0x1F	; 31
    1622:	f3 15       	cp	r31, r3
    1624:	d8 f0       	brcs	.+54     	; 0x165c <vfprintf+0xbe>
    1626:	8b 32       	cpi	r24, 0x2B	; 43
    1628:	79 f0       	breq	.+30     	; 0x1648 <vfprintf+0xaa>
    162a:	38 f4       	brcc	.+14     	; 0x163a <vfprintf+0x9c>
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	79 f0       	breq	.+30     	; 0x164e <vfprintf+0xb0>
    1630:	83 32       	cpi	r24, 0x23	; 35
    1632:	a1 f4       	brne	.+40     	; 0x165c <vfprintf+0xbe>
    1634:	23 2d       	mov	r18, r3
    1636:	20 61       	ori	r18, 0x10	; 16
    1638:	1d c0       	rjmp	.+58     	; 0x1674 <vfprintf+0xd6>
    163a:	8d 32       	cpi	r24, 0x2D	; 45
    163c:	61 f0       	breq	.+24     	; 0x1656 <vfprintf+0xb8>
    163e:	80 33       	cpi	r24, 0x30	; 48
    1640:	69 f4       	brne	.+26     	; 0x165c <vfprintf+0xbe>
    1642:	23 2d       	mov	r18, r3
    1644:	21 60       	ori	r18, 0x01	; 1
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <vfprintf+0xd6>
    1648:	83 2d       	mov	r24, r3
    164a:	82 60       	ori	r24, 0x02	; 2
    164c:	38 2e       	mov	r3, r24
    164e:	e3 2d       	mov	r30, r3
    1650:	e4 60       	ori	r30, 0x04	; 4
    1652:	3e 2e       	mov	r3, r30
    1654:	2a c0       	rjmp	.+84     	; 0x16aa <vfprintf+0x10c>
    1656:	f3 2d       	mov	r31, r3
    1658:	f8 60       	ori	r31, 0x08	; 8
    165a:	1d c0       	rjmp	.+58     	; 0x1696 <vfprintf+0xf8>
    165c:	37 fc       	sbrc	r3, 7
    165e:	2d c0       	rjmp	.+90     	; 0x16ba <vfprintf+0x11c>
    1660:	20 ed       	ldi	r18, 0xD0	; 208
    1662:	28 0f       	add	r18, r24
    1664:	2a 30       	cpi	r18, 0x0A	; 10
    1666:	40 f0       	brcs	.+16     	; 0x1678 <vfprintf+0xda>
    1668:	8e 32       	cpi	r24, 0x2E	; 46
    166a:	b9 f4       	brne	.+46     	; 0x169a <vfprintf+0xfc>
    166c:	36 fc       	sbrc	r3, 6
    166e:	75 c1       	rjmp	.+746    	; 0x195a <vfprintf+0x3bc>
    1670:	23 2d       	mov	r18, r3
    1672:	20 64       	ori	r18, 0x40	; 64
    1674:	32 2e       	mov	r3, r18
    1676:	19 c0       	rjmp	.+50     	; 0x16aa <vfprintf+0x10c>
    1678:	36 fe       	sbrs	r3, 6
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <vfprintf+0xea>
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	98 9e       	mul	r9, r24
    1680:	20 0d       	add	r18, r0
    1682:	11 24       	eor	r1, r1
    1684:	92 2e       	mov	r9, r18
    1686:	11 c0       	rjmp	.+34     	; 0x16aa <vfprintf+0x10c>
    1688:	ea e0       	ldi	r30, 0x0A	; 10
    168a:	2e 9e       	mul	r2, r30
    168c:	20 0d       	add	r18, r0
    168e:	11 24       	eor	r1, r1
    1690:	22 2e       	mov	r2, r18
    1692:	f3 2d       	mov	r31, r3
    1694:	f0 62       	ori	r31, 0x20	; 32
    1696:	3f 2e       	mov	r3, r31
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x10c>
    169a:	8c 36       	cpi	r24, 0x6C	; 108
    169c:	21 f4       	brne	.+8      	; 0x16a6 <vfprintf+0x108>
    169e:	83 2d       	mov	r24, r3
    16a0:	80 68       	ori	r24, 0x80	; 128
    16a2:	38 2e       	mov	r3, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x10c>
    16a6:	88 36       	cpi	r24, 0x68	; 104
    16a8:	41 f4       	brne	.+16     	; 0x16ba <vfprintf+0x11c>
    16aa:	f7 01       	movw	r30, r14
    16ac:	93 fd       	sbrc	r25, 3
    16ae:	85 91       	lpm	r24, Z+
    16b0:	93 ff       	sbrs	r25, 3
    16b2:	81 91       	ld	r24, Z+
    16b4:	7f 01       	movw	r14, r30
    16b6:	81 11       	cpse	r24, r1
    16b8:	b3 cf       	rjmp	.-154    	; 0x1620 <vfprintf+0x82>
    16ba:	98 2f       	mov	r25, r24
    16bc:	9f 7d       	andi	r25, 0xDF	; 223
    16be:	95 54       	subi	r25, 0x45	; 69
    16c0:	93 30       	cpi	r25, 0x03	; 3
    16c2:	28 f4       	brcc	.+10     	; 0x16ce <vfprintf+0x130>
    16c4:	0c 5f       	subi	r16, 0xFC	; 252
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	9f e3       	ldi	r25, 0x3F	; 63
    16ca:	99 83       	std	Y+1, r25	; 0x01
    16cc:	0d c0       	rjmp	.+26     	; 0x16e8 <vfprintf+0x14a>
    16ce:	83 36       	cpi	r24, 0x63	; 99
    16d0:	31 f0       	breq	.+12     	; 0x16de <vfprintf+0x140>
    16d2:	83 37       	cpi	r24, 0x73	; 115
    16d4:	71 f0       	breq	.+28     	; 0x16f2 <vfprintf+0x154>
    16d6:	83 35       	cpi	r24, 0x53	; 83
    16d8:	09 f0       	breq	.+2      	; 0x16dc <vfprintf+0x13e>
    16da:	55 c0       	rjmp	.+170    	; 0x1786 <vfprintf+0x1e8>
    16dc:	20 c0       	rjmp	.+64     	; 0x171e <vfprintf+0x180>
    16de:	f8 01       	movw	r30, r16
    16e0:	80 81       	ld	r24, Z
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	0e 5f       	subi	r16, 0xFE	; 254
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	88 24       	eor	r8, r8
    16ea:	83 94       	inc	r8
    16ec:	91 2c       	mov	r9, r1
    16ee:	53 01       	movw	r10, r6
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <vfprintf+0x178>
    16f2:	28 01       	movw	r4, r16
    16f4:	f2 e0       	ldi	r31, 0x02	; 2
    16f6:	4f 0e       	add	r4, r31
    16f8:	51 1c       	adc	r5, r1
    16fa:	f8 01       	movw	r30, r16
    16fc:	a0 80       	ld	r10, Z
    16fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1700:	36 fe       	sbrs	r3, 6
    1702:	03 c0       	rjmp	.+6      	; 0x170a <vfprintf+0x16c>
    1704:	69 2d       	mov	r22, r9
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x170>
    170a:	6f ef       	ldi	r22, 0xFF	; 255
    170c:	7f ef       	ldi	r23, 0xFF	; 255
    170e:	c5 01       	movw	r24, r10
    1710:	4e d1       	rcall	.+668    	; 0x19ae <strnlen>
    1712:	4c 01       	movw	r8, r24
    1714:	82 01       	movw	r16, r4
    1716:	f3 2d       	mov	r31, r3
    1718:	ff 77       	andi	r31, 0x7F	; 127
    171a:	3f 2e       	mov	r3, r31
    171c:	15 c0       	rjmp	.+42     	; 0x1748 <vfprintf+0x1aa>
    171e:	28 01       	movw	r4, r16
    1720:	22 e0       	ldi	r18, 0x02	; 2
    1722:	42 0e       	add	r4, r18
    1724:	51 1c       	adc	r5, r1
    1726:	f8 01       	movw	r30, r16
    1728:	a0 80       	ld	r10, Z
    172a:	b1 80       	ldd	r11, Z+1	; 0x01
    172c:	36 fe       	sbrs	r3, 6
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <vfprintf+0x198>
    1730:	69 2d       	mov	r22, r9
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <vfprintf+0x19c>
    1736:	6f ef       	ldi	r22, 0xFF	; 255
    1738:	7f ef       	ldi	r23, 0xFF	; 255
    173a:	c5 01       	movw	r24, r10
    173c:	2d d1       	rcall	.+602    	; 0x1998 <strnlen_P>
    173e:	4c 01       	movw	r8, r24
    1740:	f3 2d       	mov	r31, r3
    1742:	f0 68       	ori	r31, 0x80	; 128
    1744:	3f 2e       	mov	r3, r31
    1746:	82 01       	movw	r16, r4
    1748:	33 fc       	sbrc	r3, 3
    174a:	19 c0       	rjmp	.+50     	; 0x177e <vfprintf+0x1e0>
    174c:	82 2d       	mov	r24, r2
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	88 16       	cp	r8, r24
    1752:	99 06       	cpc	r9, r25
    1754:	a0 f4       	brcc	.+40     	; 0x177e <vfprintf+0x1e0>
    1756:	b6 01       	movw	r22, r12
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	33 d1       	rcall	.+614    	; 0x19c4 <fputc>
    175e:	2a 94       	dec	r2
    1760:	f5 cf       	rjmp	.-22     	; 0x174c <vfprintf+0x1ae>
    1762:	f5 01       	movw	r30, r10
    1764:	37 fc       	sbrc	r3, 7
    1766:	85 91       	lpm	r24, Z+
    1768:	37 fe       	sbrs	r3, 7
    176a:	81 91       	ld	r24, Z+
    176c:	5f 01       	movw	r10, r30
    176e:	b6 01       	movw	r22, r12
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	28 d1       	rcall	.+592    	; 0x19c4 <fputc>
    1774:	21 10       	cpse	r2, r1
    1776:	2a 94       	dec	r2
    1778:	21 e0       	ldi	r18, 0x01	; 1
    177a:	82 1a       	sub	r8, r18
    177c:	91 08       	sbc	r9, r1
    177e:	81 14       	cp	r8, r1
    1780:	91 04       	cpc	r9, r1
    1782:	79 f7       	brne	.-34     	; 0x1762 <vfprintf+0x1c4>
    1784:	e1 c0       	rjmp	.+450    	; 0x1948 <vfprintf+0x3aa>
    1786:	84 36       	cpi	r24, 0x64	; 100
    1788:	11 f0       	breq	.+4      	; 0x178e <vfprintf+0x1f0>
    178a:	89 36       	cpi	r24, 0x69	; 105
    178c:	39 f5       	brne	.+78     	; 0x17dc <vfprintf+0x23e>
    178e:	f8 01       	movw	r30, r16
    1790:	37 fe       	sbrs	r3, 7
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <vfprintf+0x204>
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	0c 5f       	subi	r16, 0xFC	; 252
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <vfprintf+0x214>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	07 2e       	mov	r0, r23
    17a8:	00 0c       	add	r0, r0
    17aa:	88 0b       	sbc	r24, r24
    17ac:	99 0b       	sbc	r25, r25
    17ae:	0e 5f       	subi	r16, 0xFE	; 254
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	f3 2d       	mov	r31, r3
    17b4:	ff 76       	andi	r31, 0x6F	; 111
    17b6:	3f 2e       	mov	r3, r31
    17b8:	97 ff       	sbrs	r25, 7
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <vfprintf+0x230>
    17bc:	90 95       	com	r25
    17be:	80 95       	com	r24
    17c0:	70 95       	com	r23
    17c2:	61 95       	neg	r22
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	f0 68       	ori	r31, 0x80	; 128
    17cc:	3f 2e       	mov	r3, r31
    17ce:	2a e0       	ldi	r18, 0x0A	; 10
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	a3 01       	movw	r20, r6
    17d4:	33 d1       	rcall	.+614    	; 0x1a3c <__ultoa_invert>
    17d6:	88 2e       	mov	r8, r24
    17d8:	86 18       	sub	r8, r6
    17da:	44 c0       	rjmp	.+136    	; 0x1864 <vfprintf+0x2c6>
    17dc:	85 37       	cpi	r24, 0x75	; 117
    17de:	31 f4       	brne	.+12     	; 0x17ec <vfprintf+0x24e>
    17e0:	23 2d       	mov	r18, r3
    17e2:	2f 7e       	andi	r18, 0xEF	; 239
    17e4:	b2 2e       	mov	r11, r18
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	25 c0       	rjmp	.+74     	; 0x1836 <vfprintf+0x298>
    17ec:	93 2d       	mov	r25, r3
    17ee:	99 7f       	andi	r25, 0xF9	; 249
    17f0:	b9 2e       	mov	r11, r25
    17f2:	8f 36       	cpi	r24, 0x6F	; 111
    17f4:	c1 f0       	breq	.+48     	; 0x1826 <vfprintf+0x288>
    17f6:	18 f4       	brcc	.+6      	; 0x17fe <vfprintf+0x260>
    17f8:	88 35       	cpi	r24, 0x58	; 88
    17fa:	79 f0       	breq	.+30     	; 0x181a <vfprintf+0x27c>
    17fc:	ae c0       	rjmp	.+348    	; 0x195a <vfprintf+0x3bc>
    17fe:	80 37       	cpi	r24, 0x70	; 112
    1800:	19 f0       	breq	.+6      	; 0x1808 <vfprintf+0x26a>
    1802:	88 37       	cpi	r24, 0x78	; 120
    1804:	21 f0       	breq	.+8      	; 0x180e <vfprintf+0x270>
    1806:	a9 c0       	rjmp	.+338    	; 0x195a <vfprintf+0x3bc>
    1808:	e9 2f       	mov	r30, r25
    180a:	e0 61       	ori	r30, 0x10	; 16
    180c:	be 2e       	mov	r11, r30
    180e:	b4 fe       	sbrs	r11, 4
    1810:	0d c0       	rjmp	.+26     	; 0x182c <vfprintf+0x28e>
    1812:	fb 2d       	mov	r31, r11
    1814:	f4 60       	ori	r31, 0x04	; 4
    1816:	bf 2e       	mov	r11, r31
    1818:	09 c0       	rjmp	.+18     	; 0x182c <vfprintf+0x28e>
    181a:	34 fe       	sbrs	r3, 4
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <vfprintf+0x294>
    181e:	29 2f       	mov	r18, r25
    1820:	26 60       	ori	r18, 0x06	; 6
    1822:	b2 2e       	mov	r11, r18
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x294>
    1826:	28 e0       	ldi	r18, 0x08	; 8
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <vfprintf+0x298>
    182c:	20 e1       	ldi	r18, 0x10	; 16
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <vfprintf+0x298>
    1832:	20 e1       	ldi	r18, 0x10	; 16
    1834:	32 e0       	ldi	r19, 0x02	; 2
    1836:	f8 01       	movw	r30, r16
    1838:	b7 fe       	sbrs	r11, 7
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vfprintf+0x2ac>
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	0c 5f       	subi	r16, 0xFC	; 252
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <vfprintf+0x2b8>
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 5f       	subi	r16, 0xFE	; 254
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	a3 01       	movw	r20, r6
    1858:	f1 d0       	rcall	.+482    	; 0x1a3c <__ultoa_invert>
    185a:	88 2e       	mov	r8, r24
    185c:	86 18       	sub	r8, r6
    185e:	fb 2d       	mov	r31, r11
    1860:	ff 77       	andi	r31, 0x7F	; 127
    1862:	3f 2e       	mov	r3, r31
    1864:	36 fe       	sbrs	r3, 6
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <vfprintf+0x2e4>
    1868:	23 2d       	mov	r18, r3
    186a:	2e 7f       	andi	r18, 0xFE	; 254
    186c:	a2 2e       	mov	r10, r18
    186e:	89 14       	cp	r8, r9
    1870:	58 f4       	brcc	.+22     	; 0x1888 <vfprintf+0x2ea>
    1872:	34 fe       	sbrs	r3, 4
    1874:	0b c0       	rjmp	.+22     	; 0x188c <vfprintf+0x2ee>
    1876:	32 fc       	sbrc	r3, 2
    1878:	09 c0       	rjmp	.+18     	; 0x188c <vfprintf+0x2ee>
    187a:	83 2d       	mov	r24, r3
    187c:	8e 7e       	andi	r24, 0xEE	; 238
    187e:	a8 2e       	mov	r10, r24
    1880:	05 c0       	rjmp	.+10     	; 0x188c <vfprintf+0x2ee>
    1882:	b8 2c       	mov	r11, r8
    1884:	a3 2c       	mov	r10, r3
    1886:	03 c0       	rjmp	.+6      	; 0x188e <vfprintf+0x2f0>
    1888:	b8 2c       	mov	r11, r8
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x2f0>
    188c:	b9 2c       	mov	r11, r9
    188e:	a4 fe       	sbrs	r10, 4
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <vfprintf+0x312>
    1892:	fe 01       	movw	r30, r28
    1894:	e8 0d       	add	r30, r8
    1896:	f1 1d       	adc	r31, r1
    1898:	80 81       	ld	r24, Z
    189a:	80 33       	cpi	r24, 0x30	; 48
    189c:	21 f4       	brne	.+8      	; 0x18a6 <vfprintf+0x308>
    189e:	9a 2d       	mov	r25, r10
    18a0:	99 7e       	andi	r25, 0xE9	; 233
    18a2:	a9 2e       	mov	r10, r25
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <vfprintf+0x31a>
    18a6:	a2 fe       	sbrs	r10, 2
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <vfprintf+0x318>
    18aa:	b3 94       	inc	r11
    18ac:	b3 94       	inc	r11
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <vfprintf+0x31a>
    18b0:	8a 2d       	mov	r24, r10
    18b2:	86 78       	andi	r24, 0x86	; 134
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <vfprintf+0x31a>
    18b6:	b3 94       	inc	r11
    18b8:	a3 fc       	sbrc	r10, 3
    18ba:	10 c0       	rjmp	.+32     	; 0x18dc <vfprintf+0x33e>
    18bc:	a0 fe       	sbrs	r10, 0
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <vfprintf+0x32e>
    18c0:	b2 14       	cp	r11, r2
    18c2:	80 f4       	brcc	.+32     	; 0x18e4 <vfprintf+0x346>
    18c4:	28 0c       	add	r2, r8
    18c6:	92 2c       	mov	r9, r2
    18c8:	9b 18       	sub	r9, r11
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <vfprintf+0x348>
    18cc:	b2 14       	cp	r11, r2
    18ce:	58 f4       	brcc	.+22     	; 0x18e6 <vfprintf+0x348>
    18d0:	b6 01       	movw	r22, r12
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	76 d0       	rcall	.+236    	; 0x19c4 <fputc>
    18d8:	b3 94       	inc	r11
    18da:	f8 cf       	rjmp	.-16     	; 0x18cc <vfprintf+0x32e>
    18dc:	b2 14       	cp	r11, r2
    18de:	18 f4       	brcc	.+6      	; 0x18e6 <vfprintf+0x348>
    18e0:	2b 18       	sub	r2, r11
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <vfprintf+0x34a>
    18e4:	98 2c       	mov	r9, r8
    18e6:	21 2c       	mov	r2, r1
    18e8:	a4 fe       	sbrs	r10, 4
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <vfprintf+0x36c>
    18ec:	b6 01       	movw	r22, r12
    18ee:	80 e3       	ldi	r24, 0x30	; 48
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	68 d0       	rcall	.+208    	; 0x19c4 <fputc>
    18f4:	a2 fe       	sbrs	r10, 2
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <vfprintf+0x386>
    18f8:	a1 fc       	sbrc	r10, 1
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <vfprintf+0x364>
    18fc:	88 e7       	ldi	r24, 0x78	; 120
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x368>
    1902:	88 e5       	ldi	r24, 0x58	; 88
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	b6 01       	movw	r22, r12
    1908:	0c c0       	rjmp	.+24     	; 0x1922 <vfprintf+0x384>
    190a:	8a 2d       	mov	r24, r10
    190c:	86 78       	andi	r24, 0x86	; 134
    190e:	51 f0       	breq	.+20     	; 0x1924 <vfprintf+0x386>
    1910:	a1 fe       	sbrs	r10, 1
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0x37a>
    1914:	8b e2       	ldi	r24, 0x2B	; 43
    1916:	01 c0       	rjmp	.+2      	; 0x191a <vfprintf+0x37c>
    1918:	80 e2       	ldi	r24, 0x20	; 32
    191a:	a7 fc       	sbrc	r10, 7
    191c:	8d e2       	ldi	r24, 0x2D	; 45
    191e:	b6 01       	movw	r22, r12
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	50 d0       	rcall	.+160    	; 0x19c4 <fputc>
    1924:	89 14       	cp	r8, r9
    1926:	30 f4       	brcc	.+12     	; 0x1934 <vfprintf+0x396>
    1928:	b6 01       	movw	r22, r12
    192a:	80 e3       	ldi	r24, 0x30	; 48
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	4a d0       	rcall	.+148    	; 0x19c4 <fputc>
    1930:	9a 94       	dec	r9
    1932:	f8 cf       	rjmp	.-16     	; 0x1924 <vfprintf+0x386>
    1934:	8a 94       	dec	r8
    1936:	f3 01       	movw	r30, r6
    1938:	e8 0d       	add	r30, r8
    193a:	f1 1d       	adc	r31, r1
    193c:	80 81       	ld	r24, Z
    193e:	b6 01       	movw	r22, r12
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	40 d0       	rcall	.+128    	; 0x19c4 <fputc>
    1944:	81 10       	cpse	r8, r1
    1946:	f6 cf       	rjmp	.-20     	; 0x1934 <vfprintf+0x396>
    1948:	22 20       	and	r2, r2
    194a:	09 f4       	brne	.+2      	; 0x194e <vfprintf+0x3b0>
    194c:	4e ce       	rjmp	.-868    	; 0x15ea <vfprintf+0x4c>
    194e:	b6 01       	movw	r22, r12
    1950:	80 e2       	ldi	r24, 0x20	; 32
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	37 d0       	rcall	.+110    	; 0x19c4 <fputc>
    1956:	2a 94       	dec	r2
    1958:	f7 cf       	rjmp	.-18     	; 0x1948 <vfprintf+0x3aa>
    195a:	f6 01       	movw	r30, r12
    195c:	86 81       	ldd	r24, Z+6	; 0x06
    195e:	97 81       	ldd	r25, Z+7	; 0x07
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x3c8>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	2b 96       	adiw	r28, 0x0b	; 11
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	7f 90       	pop	r7
    198c:	6f 90       	pop	r6
    198e:	5f 90       	pop	r5
    1990:	4f 90       	pop	r4
    1992:	3f 90       	pop	r3
    1994:	2f 90       	pop	r2
    1996:	08 95       	ret

00001998 <strnlen_P>:
    1998:	fc 01       	movw	r30, r24
    199a:	05 90       	lpm	r0, Z+
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
    19a0:	01 10       	cpse	r0, r1
    19a2:	d8 f7       	brcc	.-10     	; 0x199a <strnlen_P+0x2>
    19a4:	80 95       	com	r24
    19a6:	90 95       	com	r25
    19a8:	8e 0f       	add	r24, r30
    19aa:	9f 1f       	adc	r25, r31
    19ac:	08 95       	ret

000019ae <strnlen>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 90       	ld	r0, Z+
    19b6:	01 10       	cpse	r0, r1
    19b8:	d8 f7       	brcc	.-10     	; 0x19b0 <strnlen+0x2>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	8e 0f       	add	r24, r30
    19c0:	9f 1f       	adc	r25, r31
    19c2:	08 95       	ret

000019c4 <fputc>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	fb 01       	movw	r30, r22
    19ce:	23 81       	ldd	r18, Z+3	; 0x03
    19d0:	21 fd       	sbrc	r18, 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <fputc+0x16>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	2c c0       	rjmp	.+88     	; 0x1a32 <fputc+0x6e>
    19da:	22 ff       	sbrs	r18, 2
    19dc:	16 c0       	rjmp	.+44     	; 0x1a0a <fputc+0x46>
    19de:	46 81       	ldd	r20, Z+6	; 0x06
    19e0:	57 81       	ldd	r21, Z+7	; 0x07
    19e2:	24 81       	ldd	r18, Z+4	; 0x04
    19e4:	35 81       	ldd	r19, Z+5	; 0x05
    19e6:	42 17       	cp	r20, r18
    19e8:	53 07       	cpc	r21, r19
    19ea:	44 f4       	brge	.+16     	; 0x19fc <fputc+0x38>
    19ec:	a0 81       	ld	r26, Z
    19ee:	b1 81       	ldd	r27, Z+1	; 0x01
    19f0:	9d 01       	movw	r18, r26
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	31 83       	std	Z+1, r19	; 0x01
    19f8:	20 83       	st	Z, r18
    19fa:	8c 93       	st	X, r24
    19fc:	26 81       	ldd	r18, Z+6	; 0x06
    19fe:	37 81       	ldd	r19, Z+7	; 0x07
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	37 83       	std	Z+7, r19	; 0x07
    1a06:	26 83       	std	Z+6, r18	; 0x06
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <fputc+0x6e>
    1a0a:	8b 01       	movw	r16, r22
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	fb 01       	movw	r30, r22
    1a10:	00 84       	ldd	r0, Z+8	; 0x08
    1a12:	f1 85       	ldd	r31, Z+9	; 0x09
    1a14:	e0 2d       	mov	r30, r0
    1a16:	09 95       	icall
    1a18:	89 2b       	or	r24, r25
    1a1a:	e1 f6       	brne	.-72     	; 0x19d4 <fputc+0x10>
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	16 96       	adiw	r26, 0x06	; 6
    1a20:	8d 91       	ld	r24, X+
    1a22:	9c 91       	ld	r25, X
    1a24:	17 97       	sbiw	r26, 0x07	; 7
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	17 96       	adiw	r26, 0x07	; 7
    1a2a:	9c 93       	st	X, r25
    1a2c:	8e 93       	st	-X, r24
    1a2e:	16 97       	sbiw	r26, 0x06	; 6
    1a30:	ce 01       	movw	r24, r28
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <__ultoa_invert>:
    1a3c:	fa 01       	movw	r30, r20
    1a3e:	aa 27       	eor	r26, r26
    1a40:	28 30       	cpi	r18, 0x08	; 8
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <__ultoa_invert+0x5c>
    1a44:	20 31       	cpi	r18, 0x10	; 16
    1a46:	81 f1       	breq	.+96     	; 0x1aa8 <__ultoa_invert+0x6c>
    1a48:	e8 94       	clt
    1a4a:	6f 93       	push	r22
    1a4c:	6e 7f       	andi	r22, 0xFE	; 254
    1a4e:	6e 5f       	subi	r22, 0xFE	; 254
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	af 4f       	sbci	r26, 0xFF	; 255
    1a58:	b1 e0       	ldi	r27, 0x01	; 1
    1a5a:	3e d0       	rcall	.+124    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a5c:	b4 e0       	ldi	r27, 0x04	; 4
    1a5e:	3c d0       	rcall	.+120    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a60:	67 0f       	add	r22, r23
    1a62:	78 1f       	adc	r23, r24
    1a64:	89 1f       	adc	r24, r25
    1a66:	9a 1f       	adc	r25, r26
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	68 0f       	add	r22, r24
    1a6c:	79 1f       	adc	r23, r25
    1a6e:	8a 1f       	adc	r24, r26
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	6a 0f       	add	r22, r26
    1a76:	71 1d       	adc	r23, r1
    1a78:	81 1d       	adc	r24, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	20 d0       	rcall	.+64     	; 0x1ac0 <__ultoa_invert+0x84>
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <__ultoa_invert+0x48>
    1a82:	68 94       	set
    1a84:	3f 91       	pop	r19
    1a86:	2a e0       	ldi	r18, 0x0A	; 10
    1a88:	26 9f       	mul	r18, r22
    1a8a:	11 24       	eor	r1, r1
    1a8c:	30 19       	sub	r19, r0
    1a8e:	30 5d       	subi	r19, 0xD0	; 208
    1a90:	31 93       	st	Z+, r19
    1a92:	de f6       	brtc	.-74     	; 0x1a4a <__ultoa_invert+0xe>
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret
    1a98:	46 2f       	mov	r20, r22
    1a9a:	47 70       	andi	r20, 0x07	; 7
    1a9c:	40 5d       	subi	r20, 0xD0	; 208
    1a9e:	41 93       	st	Z+, r20
    1aa0:	b3 e0       	ldi	r27, 0x03	; 3
    1aa2:	0f d0       	rcall	.+30     	; 0x1ac2 <__ultoa_invert+0x86>
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__ultoa_invert+0x5c>
    1aa6:	f6 cf       	rjmp	.-20     	; 0x1a94 <__ultoa_invert+0x58>
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	4f 70       	andi	r20, 0x0F	; 15
    1aac:	40 5d       	subi	r20, 0xD0	; 208
    1aae:	4a 33       	cpi	r20, 0x3A	; 58
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__ultoa_invert+0x7c>
    1ab2:	49 5d       	subi	r20, 0xD9	; 217
    1ab4:	31 fd       	sbrc	r19, 1
    1ab6:	40 52       	subi	r20, 0x20	; 32
    1ab8:	41 93       	st	Z+, r20
    1aba:	02 d0       	rcall	.+4      	; 0x1ac0 <__ultoa_invert+0x84>
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <__ultoa_invert+0x6c>
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <__ultoa_invert+0x58>
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	a6 95       	lsr	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x86>
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 05       	cpc	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	08 95       	ret
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	0a 2e       	mov	r0, r26
    1ade:	06 94       	lsr	r0
    1ae0:	57 95       	ror	r21
    1ae2:	47 95       	ror	r20
    1ae4:	37 95       	ror	r19
    1ae6:	27 95       	ror	r18
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0xa2>
    1aec:	62 0f       	add	r22, r18
    1aee:	73 1f       	adc	r23, r19
    1af0:	84 1f       	adc	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	a0 1d       	adc	r26, r0
    1af6:	08 95       	ret

00001af8 <_exit>:
    1af8:	f8 94       	cli

00001afa <__stop_program>:
    1afa:	ff cf       	rjmp	.-2      	; 0x1afa <__stop_program>
