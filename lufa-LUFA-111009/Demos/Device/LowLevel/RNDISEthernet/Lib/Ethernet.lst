   1               		.file	"Ethernet.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.Ethernet_ProcessPacket,"ax",@progbits
  12               	.global	Ethernet_ProcessPacket
  14               	Ethernet_ProcessPacket:
  15               	.LFB104:
  16               		.file 1 "Lib/Ethernet.c"
   1:Lib/Ethernet.c **** /*
   2:Lib/Ethernet.c ****              LUFA Library
   3:Lib/Ethernet.c ****      Copyright (C) Dean Camera, 2011.
   4:Lib/Ethernet.c **** 
   5:Lib/Ethernet.c ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/Ethernet.c ****            www.lufa-lib.org
   7:Lib/Ethernet.c **** */
   8:Lib/Ethernet.c **** 
   9:Lib/Ethernet.c **** /*
  10:Lib/Ethernet.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/Ethernet.c **** 
  12:Lib/Ethernet.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Lib/Ethernet.c ****   software and its documentation for any purpose is hereby granted
  14:Lib/Ethernet.c ****   without fee, provided that the above copyright notice appear in
  15:Lib/Ethernet.c ****   all copies and that both that the copyright notice and this
  16:Lib/Ethernet.c ****   permission notice and warranty disclaimer appear in supporting
  17:Lib/Ethernet.c ****   documentation, and that the name of the author not be used in
  18:Lib/Ethernet.c ****   advertising or publicity pertaining to distribution of the
  19:Lib/Ethernet.c ****   software without specific, written prior permission.
  20:Lib/Ethernet.c **** 
  21:Lib/Ethernet.c ****   The author disclaim all warranties with regard to this
  22:Lib/Ethernet.c ****   software, including all implied warranties of merchantability
  23:Lib/Ethernet.c ****   and fitness.  In no event shall the author be liable for any
  24:Lib/Ethernet.c ****   special, indirect or consequential damages or any damages
  25:Lib/Ethernet.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/Ethernet.c ****   in an action of contract, negligence or other tortious action,
  27:Lib/Ethernet.c ****   arising out of or in connection with the use or performance of
  28:Lib/Ethernet.c ****   this software.
  29:Lib/Ethernet.c **** */
  30:Lib/Ethernet.c **** 
  31:Lib/Ethernet.c **** /** \file
  32:Lib/Ethernet.c ****  *
  33:Lib/Ethernet.c ****  *  Ethernet frame packet handling routines. This protocol handles the processing of raw Ethernet
  34:Lib/Ethernet.c ****  *  frames sent and received, deferring the processing of sub-packet protocols to the appropriate
  35:Lib/Ethernet.c ****  *  protocol handlers, such as DHCP or ARP.
  36:Lib/Ethernet.c ****  */
  37:Lib/Ethernet.c **** 
  38:Lib/Ethernet.c **** #include "Ethernet.h"
  39:Lib/Ethernet.c **** 
  40:Lib/Ethernet.c **** /** Ethernet Frame buffer structure, to hold the incoming Ethernet frame from the host. */
  41:Lib/Ethernet.c **** Ethernet_Frame_Info_t FrameIN;
  42:Lib/Ethernet.c **** 
  43:Lib/Ethernet.c **** /** Ethernet Frame buffer structure, to hold the outgoing Ethernet frame to the host. */
  44:Lib/Ethernet.c **** Ethernet_Frame_Info_t FrameOUT;
  45:Lib/Ethernet.c **** 
  46:Lib/Ethernet.c **** /** Constant for convenience when checking against or setting a MAC address to the virtual server M
  47:Lib/Ethernet.c **** const MAC_Address_t ServerMACAddress    = {SERVER_MAC_ADDRESS};
  48:Lib/Ethernet.c **** 
  49:Lib/Ethernet.c **** /** Constant for convenience when checking against or setting an IP address to the virtual server I
  50:Lib/Ethernet.c **** const IP_Address_t  ServerIPAddress     = {SERVER_IP_ADDRESS};
  51:Lib/Ethernet.c **** 
  52:Lib/Ethernet.c **** /** Constant for convenience when checking against or setting a MAC address to the broadcast MAC ad
  53:Lib/Ethernet.c **** const MAC_Address_t BroadcastMACAddress = {BROADCAST_MAC_ADDRESS};
  54:Lib/Ethernet.c **** 
  55:Lib/Ethernet.c **** /** Constant for convenience when checking against or setting a IP address to the broadcast IP addr
  56:Lib/Ethernet.c **** const IP_Address_t  BroadcastIPAddress  = {BROADCAST_IP_ADDRESS};
  57:Lib/Ethernet.c **** 
  58:Lib/Ethernet.c **** /** Constant for convenience when checking against or setting an IP address to the client (host) IP
  59:Lib/Ethernet.c **** const IP_Address_t  ClientIPAddress     = {CLIENT_IP_ADDRESS};
  60:Lib/Ethernet.c **** 
  61:Lib/Ethernet.c **** 
  62:Lib/Ethernet.c **** /** Processes an incoming Ethernet frame, and writes the appropriate response to the output Etherne
  63:Lib/Ethernet.c ****  *  frame buffer if the sub protocol handlers create a valid response.
  64:Lib/Ethernet.c ****  */
  65:Lib/Ethernet.c **** void Ethernet_ProcessPacket(void)
  66:Lib/Ethernet.c **** {
  17               		.loc 1 66 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  67:Lib/Ethernet.c **** 	DecodeEthernetFrameHeader(FrameIN.FrameData);
  23               		.loc 1 67 0
  24 0000 80E0      		ldi r24,lo8(FrameIN)
  25 0002 90E0      		ldi r25,hi8(FrameIN)
  26 0004 0E94 0000 		call DecodeEthernetFrameHeader
  27               	.LVL0:
  68:Lib/Ethernet.c **** 
  69:Lib/Ethernet.c **** 	/* Cast the incoming Ethernet frame to the Ethernet header type */
  70:Lib/Ethernet.c **** 	Ethernet_Frame_Header_t* FrameINHeader  = (Ethernet_Frame_Header_t*)&FrameIN.FrameData;
  71:Lib/Ethernet.c **** 	Ethernet_Frame_Header_t* FrameOUTHeader = (Ethernet_Frame_Header_t*)&FrameOUT.FrameData;
  72:Lib/Ethernet.c **** 
  73:Lib/Ethernet.c **** 	int16_t                  RetSize        = NO_RESPONSE;
  74:Lib/Ethernet.c **** 
  75:Lib/Ethernet.c **** 	/* Ensure frame is addressed to either all (broadcast) or the virtual webserver, and is a type II 
  76:Lib/Ethernet.c **** 	if ((MAC_COMPARE(&FrameINHeader->Destination, &ServerMACAddress) ||
  28               		.loc 1 76 0
  29 0008 46E0      		ldi r20,lo8(6)
  30 000a 50E0      		ldi r21,0
  31 000c 60E0      		ldi r22,lo8(ServerMACAddress)
  32 000e 70E0      		ldi r23,hi8(ServerMACAddress)
  33 0010 80E0      		ldi r24,lo8(FrameIN)
  34 0012 90E0      		ldi r25,hi8(FrameIN)
  35 0014 0E94 0000 		call memcmp
  36               	.LVL1:
  37 0018 892B      		or r24,r25
  38 001a 01F0      		breq .L2
  77:Lib/Ethernet.c **** 	     MAC_COMPARE(&FrameINHeader->Destination, &BroadcastMACAddress)) &&
  39               		.loc 1 77 0 discriminator 1
  40 001c 46E0      		ldi r20,lo8(6)
  41 001e 50E0      		ldi r21,0
  42 0020 60E0      		ldi r22,lo8(BroadcastMACAddress)
  43 0022 70E0      		ldi r23,hi8(BroadcastMACAddress)
  44 0024 80E0      		ldi r24,lo8(FrameIN)
  45 0026 90E0      		ldi r25,hi8(FrameIN)
  46 0028 0E94 0000 		call memcmp
  47               	.LVL2:
  76:Lib/Ethernet.c **** 	     MAC_COMPARE(&FrameINHeader->Destination, &BroadcastMACAddress)) &&
  48               		.loc 1 76 0 discriminator 1
  49 002c 892B      		or r24,r25
  50 002e 01F0      		breq .+2
  51 0030 00C0      		rjmp .L4
  52               	.L2:
  53               	.LVL3:
  54               	.LBB10:
  55               	.LBB11:
  56               	.LBB12:
  57               	.LBB13:
  58               		.file 2 "../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h"
   1:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /*
   2:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****              LUFA Library
   3:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****      Copyright (C) Dean Camera, 2011.
   4:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
   5:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****            www.lufa-lib.org
   7:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** */
   8:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
   9:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /*
  10:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  12:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   without fee, provided that the above copyright notice appear in
  15:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   documentation, and that the name of the author not be used in
  18:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   advertising or publicity pertaining to distribution of the
  19:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  21:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****   this software.
  29:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** */
  30:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  31:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /** \file
  32:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \brief Endianness and Byte Ordering macros and functions.
  33:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *
  34:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \copydetails Group_Endianness
  35:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  */
  36:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  37:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /** \ingroup Group_Endianness
  38:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \defgroup Group_ByteSwapping Byte Reordering
  39:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \brief Macros and functions for forced byte reordering.
  40:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  */
  41:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  42:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /** \ingroup Group_Endianness
  43:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \defgroup Group_EndianConversion Endianness Conversion
  44:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \brief Macros and functions for automatic endianness conversion.
  45:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  */
  46:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  47:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** /** \ingroup Group_Common
  48:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \defgroup Group_Endianness Endianness and Byte Ordering
  49:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  \brief Convenience macros and functions relating to byte (re-)ordering
  50:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *
  51:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  Common library convenience macros and functions relating to byte (re-)ordering.
  52:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *
  53:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  *  @{
  54:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h ****  */
  55:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  56:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** #ifndef __LUFA_ENDIANNESS_H__
  57:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** #define __LUFA_ENDIANNESS_H__
  58:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  59:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#if defined(__cplusplus)
  61:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			extern "C" {
  62:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#endif
  63:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  64:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 	/* Preprocessor Checks: */
  65:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#if !defined(__INCLUDE_FROM_COMMON_H)
  66:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#error Do not include this file directly. Include LUFA/Common/Common.h instead to gain this func
  67:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#endif
  68:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		
  69:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#if !(defined(ARCH_BIG_ENDIAN) || defined(ARCH_LITTLE_ENDIAN))
  70:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#error ARCH_BIG_ENDIAN or ARCH_LITTLE_ENDIAN not set for the specified architecture.
  71:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		#endif
  72:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  73:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 	/* Public Interface - May be used in end-application: */
  74:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		/* Macros: */
  75:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			/** Swaps the byte ordering of a 16-bit value at compile-time. Do not use this macro for swappin
  76:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  of dynamic values computed at runtime, use \ref SwapEndian_16() instead. The result of this 
  77:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  78:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  inline function variant.
  79:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  80:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  81:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  82:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \param[in] x  16-bit value whose byte ordering is to be swapped.
  83:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  84:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  85:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 */
  86:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#define SWAPENDIAN_16(x)            (uint16_t)((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))
  87:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
  88:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			/** Swaps the byte ordering of a 32-bit value at compile-time. Do not use this macro for swappin
  89:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  of dynamic values computed at runtime- use \ref SwapEndian_32() instead. The result of this 
  90:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  inside struct or other variable initializers outside of a function, something that is not po
  91:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  inline function variant.
  92:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  93:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
  94:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  95:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \param[in] x  32-bit value whose byte ordering is to be swapped.
  96:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
  97:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \return Input value with the byte ordering reversed.
  98:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 */
  99:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#define SWAPENDIAN_32(x)            (uint32_t)((((x) & 0xFF000000UL) >> 24UL) | (((x) & 0x00FF00
 100:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			                                               (((x) & 0x0000FF00UL) << 8UL)  | (((x) & 0x000000
 101:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 102:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#if defined(ARCH_BIG_ENDIAN) && !defined(le16_to_cpu)
 103:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define le16_to_cpu(x)           SwapEndian_16(x)
 104:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define le32_to_cpu(x)           SwapEndian_32(x)
 105:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define be16_to_cpu(x)           (x)
 106:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define be32_to_cpu(x)           (x)
 107:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_le16(x)           SwapEndian_16(x)
 108:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_le32(x)           SwapEndian_32(x)
 109:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_be16(x)           (x)
 110:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_be32(x)           (x)
 111:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define LE16_TO_CPU(x)           SWAPENDIAN_16(x)
 112:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define LE32_TO_CPU(x)           SWAPENDIAN_32(x)
 113:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define BE16_TO_CPU(x)           (x)
 114:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define BE32_TO_CPU(x)           (x)
 115:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_LE16(x)           SWAPENDIAN_16(x)
 116:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_LE32(x)           SWAPENDIAN_32(x)
 117:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_BE16(x)           (x)
 118:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_BE32(x)           (x)			
 119:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#elif !defined(le16_to_cpu)
 120:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** \name Run-time endianness conversion */
 121:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				//@{
 122:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			
 123:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 124:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 125:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 126:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 127:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 128:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 129:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref LE16_TO_CPU instead.
 130:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 131:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 132:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 133:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 134:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 135:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 136:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 137:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define le16_to_cpu(x)           (x)
 138:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 139:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 140:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 141:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 142:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 143:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 144:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 145:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref LE32_TO_CPU instead.
 146:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 147:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 148:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 149:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 150:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 151:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 152:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 153:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define le32_to_cpu(x)           (x)
 154:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 155:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 156:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 157:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 158:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 159:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 160:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 161:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref BE16_TO_CPU instead.
 162:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 163:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 164:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 165:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 166:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 167:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 168:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 169:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define be16_to_cpu(x)           SwapEndian_16(x)
 170:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 171:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 172:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 173:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 174:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 175:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 176:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 177:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref BE32_TO_CPU instead.
 178:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 179:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 180:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 181:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 182:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 183:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 184:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 185:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define be32_to_cpu(x)           SwapEndian_32(x)
 186:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 187:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 188:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 189:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 190:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 191:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 192:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 193:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE16 instead.
 194:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 195:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 196:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 197:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 198:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 199:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 200:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 201:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_le16(x)           (x)
 202:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 203:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 204:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 205:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 206:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 207:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 208:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 209:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_LE32 instead.
 210:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 211:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 212:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 213:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 214:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 215:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 216:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 217:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_le32(x)           (x)
 218:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 219:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 220:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 221:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 222:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 223:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 224:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 225:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE16 instead.
 226:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 227:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 228:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 229:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 230:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 231:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 232:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 233:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_be16(x)           SwapEndian_16(x)
 234:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 235:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 236:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 237:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 238:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 239:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 240:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for run-time conversion of data - for compile-time endianness
 241:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref CPU_TO_BE32 instead.
 242:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 243:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 244:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 245:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 246:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 247:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 248:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 249:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define cpu_to_be32(x)           SwapEndian_32(x)
 250:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 251:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				//@}
 252:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 253:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** \name Compile-time endianness conversion */
 254:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				//@{
 255:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 256:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 16-bit piece of data and the
 257:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 258:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 259:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 260:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 261:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 262:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref le16_to_cpu instead.
 263:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 264:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 265:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 266:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 267:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 268:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 269:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 270:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define LE16_TO_CPU(x)           (x)
 271:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 272:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Little Endian encoded 32-bit piece of data and the
 273:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 274:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 275:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 276:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 277:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run time endianness
 278:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref le32_to_cpu instead.
 279:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 280:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 281:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 282:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 283:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 284:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 285:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 286:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define LE32_TO_CPU(x)           (x)
 287:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 288:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 16-bit piece of data and the
 289:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 290:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 291:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 292:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 293:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 294:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref be16_to_cpu instead.
 295:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 296:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 297:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 298:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 299:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 300:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 301:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 302:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define BE16_TO_CPU(x)           SWAPENDIAN_16(x)
 303:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 304:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion between a Big Endian encoded 32-bit piece of data and the
 305:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  Endianness of the currently selected CPU architecture.
 306:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 307:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 308:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 309:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 310:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref be32_to_cpu instead.
 311:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 312:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 313:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 314:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 315:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 316:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 317:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 318:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define BE32_TO_CPU(x)           SWAPENDIAN_32(x)
 319:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 320:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 321:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 322:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 323:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 324:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 325:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 326:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le16 instead.
 327:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 328:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 329:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 330:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 331:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 332:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 333:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 334:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_LE16(x)           (x)
 335:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 336:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 337:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Little Endian format regardless of the currently selected CPU architecture.
 338:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 339:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On little endian architectures, this macro does nothing.
 340:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 341:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 342:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_le32 instead.
 343:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 344:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 345:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 346:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 347:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 348:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 349:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 350:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_LE32(x)           (x)
 351:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 352:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 16-bit piece of data to ensure that it
 353:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 354:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 355:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 356:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 357:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 358:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be16 instead.
 359:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 360:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 361:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 362:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 363:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 364:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 365:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 366:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_BE16(x)           SWAPENDIAN_16(x)
 367:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 368:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				/** Performs a conversion on a natively encoded 32-bit piece of data to ensure that it
 369:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  is in Big Endian format regardless of the currently selected CPU architecture.
 370:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 371:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  On big endian architectures, this macro does nothing.
 372:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 373:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \note This macro is designed for compile-time conversion of data - for run-time endianness
 374:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *        conversion, use \ref cpu_to_be32 instead.
 375:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 376:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \ingroup Group_EndianConversion
 377:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 378:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \param[in] x  Data to perform the endianness conversion on.
 379:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *
 380:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 *  \return Endian corrected version of the input value.
 381:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				 */
 382:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				#define CPU_TO_BE32(x)           SWAPENDIAN_32(x)
 383:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 384:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				//! @}
 385:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			#endif
 386:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 387:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 		/* Inline Functions: */
 388:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			/** Function to reverse the byte ordering of the individual bytes in a 16 bit value.
 389:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
 390:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \ingroup Group_ByteSwapping
 391:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
 392:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \param[in] Word  Word of data whose bytes are to be swapped.
 393:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *
 394:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 *  \return Input data with the individual bytes reversed.
 395:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			 */
 396:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 397:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			static inline uint16_t SwapEndian_16(const uint16_t Word)
 398:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			{
 399:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				if (GCC_IS_COMPILE_CONST(Word))
 400:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				  return SWAPENDIAN_16(Word);
 401:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 			
 402:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				uint8_t Temp;
 403:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 404:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				union
 405:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				{
 406:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 					uint16_t Word;
 407:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 					uint8_t  Bytes[2];
 408:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				} Data;
 409:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 410:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				Data.Word = Word;
 411:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 412:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				Temp = Data.Bytes[0];
 413:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				Data.Bytes[0] = Data.Bytes[1];
 414:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				Data.Bytes[1] = Temp;
 415:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 
 416:../../../../LUFA/Drivers/Peripheral/../../Common/Endianness.h **** 				return Data.Word;
  59               		.loc 2 416 0
  60 0032 8091 0000 		lds r24,FrameIN+1501
  61 0036 9091 0000 		lds r25,FrameIN+1500
  62               	.LVL4:
  63               	.LBE13:
  64               	.LBE12:
  65               	.LBE11:
  66               	.LBE10:
  67               		.loc 1 77 0
  68 003a 8130      		cpi r24,1
  69 003c 9640      		sbci r25,6
  70 003e 00F0      		brlo .L4
  71               	.LVL5:
  72               	.LBB14:
  73               	.LBB15:
  74               	.LBB16:
  75               	.LBB17:
  76               		.loc 2 416 0
  77 0040 8091 0000 		lds r24,FrameIN+13
  78 0044 9091 0000 		lds r25,FrameIN+12
  79               	.LVL6:
  80               	.LBE17:
  81               	.LBE16:
  82               	.LBE15:
  83               	.LBE14:
  78:Lib/Ethernet.c **** 		(SwapEndian_16(FrameIN.FrameLength) > ETHERNET_VER2_MINSIZE))
  79:Lib/Ethernet.c **** 	{
  80:Lib/Ethernet.c **** 		/* Process the packet depending on its protocol */
  81:Lib/Ethernet.c **** 		switch (SwapEndian_16(FrameINHeader->EtherType))
  84               		.loc 1 81 0
  85 0048 8115      		cp r24,__zero_reg__
  86 004a 28E0      		ldi r18,8
  87 004c 9207      		cpc r25,r18
  88 004e 01F0      		breq .L5
  89 0050 8630      		cpi r24,6
  90 0052 9840      		sbci r25,8
  91 0054 01F4      		brne .L4
  82:Lib/Ethernet.c **** 		{
  83:Lib/Ethernet.c **** 			case ETHERTYPE_ARP:
  84:Lib/Ethernet.c **** 				RetSize = ARP_ProcessARPPacket(&FrameIN.FrameData[sizeof(Ethernet_Frame_Header_t)],
  92               		.loc 1 84 0
  93 0056 60E0      		ldi r22,lo8(FrameOUT+14)
  94 0058 70E0      		ldi r23,hi8(FrameOUT+14)
  95 005a 80E0      		ldi r24,lo8(FrameIN+14)
  96 005c 90E0      		ldi r25,hi8(FrameIN+14)
  97 005e 0E94 0000 		call ARP_ProcessARPPacket
  98               	.LVL7:
  85:Lib/Ethernet.c **** 				                               &FrameOUT.FrameData[sizeof(Ethernet_Frame_Header_t)]);
  86:Lib/Ethernet.c **** 				break;
  99               		.loc 1 86 0
 100 0062 00C0      		rjmp .L7
 101               	.LVL8:
 102               	.L5:
  87:Lib/Ethernet.c **** 			case ETHERTYPE_IPV4:
  88:Lib/Ethernet.c **** 				RetSize = IP_ProcessIPPacket(&FrameIN.FrameData[sizeof(Ethernet_Frame_Header_t)],
 103               		.loc 1 88 0
 104 0064 60E0      		ldi r22,lo8(FrameOUT+14)
 105 0066 70E0      		ldi r23,hi8(FrameOUT+14)
 106 0068 80E0      		ldi r24,lo8(FrameIN+14)
 107 006a 90E0      		ldi r25,hi8(FrameIN+14)
 108 006c 0E94 0000 		call IP_ProcessIPPacket
 109               	.LVL9:
 110               	.L7:
  89:Lib/Ethernet.c **** 				                             &FrameOUT.FrameData[sizeof(Ethernet_Frame_Header_t)]);
  90:Lib/Ethernet.c **** 				break;
  91:Lib/Ethernet.c **** 		}
  92:Lib/Ethernet.c **** 
  93:Lib/Ethernet.c **** 		/* Protocol processing routine has filled a response, complete the ethernet frame header */
  94:Lib/Ethernet.c **** 		if (RetSize > 0)
 111               		.loc 1 94 0
 112 0070 1816      		cp __zero_reg__,r24
 113 0072 1906      		cpc __zero_reg__,r25
 114 0074 04F4      		brge .L8
  95:Lib/Ethernet.c **** 		{
  96:Lib/Ethernet.c **** 			/* Fill out the response Ethernet frame header */
  97:Lib/Ethernet.c **** 			FrameOUTHeader->Source          = ServerMACAddress;
 115               		.loc 1 97 0
 116 0076 26E0      		ldi r18,lo8(6)
 117 0078 E0E0      		ldi r30,lo8(ServerMACAddress)
 118 007a F0E0      		ldi r31,hi8(ServerMACAddress)
 119 007c A0E0      		ldi r26,lo8(FrameOUT+6)
 120 007e B0E0      		ldi r27,hi8(FrameOUT+6)
 121               		0:
 122 0080 0190      		ld r0,Z+
 123 0082 0D92      		st X+,r0
 124 0084 2A95      		dec r18
 125 0086 01F4      		brne 0b
  98:Lib/Ethernet.c **** 			FrameOUTHeader->Destination     = FrameINHeader->Source;
 126               		.loc 1 98 0
 127 0088 26E0      		ldi r18,lo8(6)
 128 008a E0E0      		ldi r30,lo8(FrameIN+6)
 129 008c F0E0      		ldi r31,hi8(FrameIN+6)
 130 008e A0E0      		ldi r26,lo8(FrameOUT)
 131 0090 B0E0      		ldi r27,hi8(FrameOUT)
 132               		0:
 133 0092 0190      		ld r0,Z+
 134 0094 0D92      		st X+,r0
 135 0096 2A95      		dec r18
 136 0098 01F4      		brne 0b
  99:Lib/Ethernet.c **** 			FrameOUTHeader->EtherType       = FrameINHeader->EtherType;
 137               		.loc 1 99 0
 138 009a 2091 0000 		lds r18,FrameIN+12
 139 009e 3091 0000 		lds r19,FrameIN+12+1
 140 00a2 3093 0000 		sts FrameOUT+12+1,r19
 141 00a6 2093 0000 		sts FrameOUT+12,r18
 100:Lib/Ethernet.c **** 
 101:Lib/Ethernet.c **** 			/* Set the response length in the buffer and indicate that a response is ready to be sent */
 102:Lib/Ethernet.c **** 			FrameOUT.FrameLength            = (sizeof(Ethernet_Frame_Header_t) + RetSize);
 142               		.loc 1 102 0
 143 00aa 0E96      		adiw r24,14
 144               	.LVL10:
 145 00ac 9093 0000 		sts FrameOUT+1500+1,r25
 146 00b0 8093 0000 		sts FrameOUT+1500,r24
 147 00b4 00C0      		rjmp .L4
 148               	.LVL11:
 149               	.L8:
 103:Lib/Ethernet.c **** 		}
 104:Lib/Ethernet.c **** 	}
 105:Lib/Ethernet.c **** 
 106:Lib/Ethernet.c **** 	/* Check if the packet was processed */
 107:Lib/Ethernet.c **** 	if (RetSize != NO_PROCESS)
 150               		.loc 1 107 0
 151 00b6 0196      		adiw r24,1
 152 00b8 01F0      		breq .L1
 153               	.LVL12:
 154               	.L4:
 108:Lib/Ethernet.c **** 	{
 109:Lib/Ethernet.c **** 		/* Clear the frame buffer */
 110:Lib/Ethernet.c **** 		FrameIN.FrameLength = 0;
 155               		.loc 1 110 0
 156 00ba 1092 0000 		sts FrameIN+1500+1,__zero_reg__
 157 00be 1092 0000 		sts FrameIN+1500,__zero_reg__
 158               	.L1:
 159 00c2 0895      		ret
 160               		.cfi_endproc
 161               	.LFE104:
 163               		.section	.text.Ethernet_Checksum16,"ax",@progbits
 164               	.global	Ethernet_Checksum16
 166               	Ethernet_Checksum16:
 167               	.LFB105:
 111:Lib/Ethernet.c **** 	}
 112:Lib/Ethernet.c **** }
 113:Lib/Ethernet.c **** 
 114:Lib/Ethernet.c **** /** Calculates the appropriate ethernet checksum, consisting of the addition of the one's
 115:Lib/Ethernet.c ****  *  compliment of each word, complimented.
 116:Lib/Ethernet.c ****  *
 117:Lib/Ethernet.c ****  *  \param[in] Data   Pointer to the packet buffer data whose checksum must be calculated
 118:Lib/Ethernet.c ****  *  \param[in] Bytes  Number of bytes in the data buffer to process
 119:Lib/Ethernet.c ****  *
 120:Lib/Ethernet.c ****  *  \return A 16-bit Ethernet checksum value
 121:Lib/Ethernet.c ****  */
 122:Lib/Ethernet.c **** uint16_t Ethernet_Checksum16(void* Data,
 123:Lib/Ethernet.c ****                              uint16_t Bytes)
 124:Lib/Ethernet.c **** {
 168               		.loc 1 124 0
 169               		.cfi_startproc
 170               	.LVL13:
 171 0000 CF93      		push r28
 172               	.LCFI0:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 28, -2
 175 0002 DF93      		push r29
 176               	.LCFI1:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 29, -3
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
 183               	.LVL14:
 184               	.LBB18:
 125:Lib/Ethernet.c **** 	uint16_t* Words    = (uint16_t*)Data;
 126:Lib/Ethernet.c **** 	uint32_t  Checksum = 0;
 127:Lib/Ethernet.c **** 
 128:Lib/Ethernet.c **** 	for (uint16_t CurrWord = 0; CurrWord < (Bytes >> 1); CurrWord++)
 185               		.loc 1 128 0
 186 0004 9B01      		movw r18,r22
 187 0006 3695      		lsr r19
 188 0008 2795      		ror r18
 189 000a E0E0      		ldi r30,0
 190 000c F0E0      		ldi r31,0
 191               	.LBE18:
 126:Lib/Ethernet.c **** 
 192               		.loc 1 126 0
 193 000e 40E0      		ldi r20,0
 194 0010 50E0      		ldi r21,0
 195 0012 BA01      		movw r22,r20
 196               	.LVL15:
 197               	.L16:
 198               	.LBB19:
 199               		.loc 1 128 0 discriminator 1
 200 0014 E217      		cp r30,r18
 201 0016 F307      		cpc r31,r19
 202 0018 01F0      		breq .L18
 129:Lib/Ethernet.c **** 	  Checksum += Words[CurrWord];
 203               		.loc 1 129 0 discriminator 3
 204 001a EC01      		movw r28,r24
 205 001c A991      		ld r26,Y+
 206 001e B991      		ld r27,Y+
 207 0020 CE01      		movw r24,r28
 208 0022 4A0F      		add r20,r26
 209 0024 5B1F      		adc r21,r27
 210 0026 611D      		adc r22,__zero_reg__
 211 0028 711D      		adc r23,__zero_reg__
 212               	.LVL16:
 128:Lib/Ethernet.c **** 	  Checksum += Words[CurrWord];
 213               		.loc 1 128 0 discriminator 3
 214 002a 3196      		adiw r30,1
 215               	.LVL17:
 216 002c 00C0      		rjmp .L16
 217               	.L18:
 218               	.LBE19:
 130:Lib/Ethernet.c **** 
 131:Lib/Ethernet.c **** 	while (Checksum & 0xFFFF0000)
 219               		.loc 1 131 0
 220 002e DB01      		movw r26,r22
 221 0030 CA01      		movw r24,r20
 222 0032 8827      		clr r24
 223 0034 9927      		clr r25
 224 0036 892B      		or r24,r25
 225 0038 8A2B      		or r24,r26
 226 003a 8B2B      		or r24,r27
 227 003c 01F0      		breq .L20
 132:Lib/Ethernet.c **** 	  Checksum = ((Checksum & 0xFFFF) + (Checksum >> 16));
 228               		.loc 1 132 0
 229 003e DB01      		movw r26,r22
 230 0040 CA01      		movw r24,r20
 231 0042 AA27      		clr r26
 232 0044 BB27      		clr r27
 233 0046 AB01      		movw r20,r22
 234 0048 6627      		clr r22
 235 004a 7727      		clr r23
 236               	.LVL18:
 237 004c 480F      		add r20,r24
 238 004e 591F      		adc r21,r25
 239 0050 6A1F      		adc r22,r26
 240 0052 7B1F      		adc r23,r27
 241               	.LVL19:
 242 0054 00C0      		rjmp .L18
 243               	.L20:
 133:Lib/Ethernet.c **** 
 134:Lib/Ethernet.c **** 	return ~Checksum;
 244               		.loc 1 134 0
 245 0056 CA01      		movw r24,r20
 246 0058 8095      		com r24
 247 005a 9095      		com r25
 248               	/* epilogue start */
 135:Lib/Ethernet.c **** }
 249               		.loc 1 135 0
 250 005c DF91      		pop r29
 251 005e CF91      		pop r28
 252 0060 0895      		ret
 253               		.cfi_endproc
 254               	.LFE105:
 256               	.global	ClientIPAddress
 257               		.section	.rodata
 260               	ClientIPAddress:
 261 0000 0A        		.byte	10
 262 0001 00        		.byte	0
 263 0002 00        		.byte	0
 264 0003 01        		.byte	1
 265               	.global	BroadcastIPAddress
 268               	BroadcastIPAddress:
 269 0004 FF        		.byte	-1
 270 0005 FF        		.byte	-1
 271 0006 FF        		.byte	-1
 272 0007 FF        		.byte	-1
 273               	.global	BroadcastMACAddress
 276               	BroadcastMACAddress:
 277 0008 FF        		.byte	-1
 278 0009 FF        		.byte	-1
 279 000a FF        		.byte	-1
 280 000b FF        		.byte	-1
 281 000c FF        		.byte	-1
 282 000d FF        		.byte	-1
 283               	.global	ServerIPAddress
 286               	ServerIPAddress:
 287 000e 0A        		.byte	10
 288 000f 00        		.byte	0
 289 0010 00        		.byte	0
 290 0011 02        		.byte	2
 291               	.global	ServerMACAddress
 294               	ServerMACAddress:
 295 0012 00        		.byte	0
 296 0013 01        		.byte	1
 297 0014 00        		.byte	0
 298 0015 01        		.byte	1
 299 0016 00        		.byte	0
 300 0017 01        		.byte	1
 301               		.comm	FrameOUT,1502,1
 302               		.comm	FrameIN,1502,1
 303               		.text
 304               	.Letext0:
 305               		.file 3 "/usr/lib/avr/include/stdint.h"
 306               		.file 4 "Lib/EthernetProtocols.h"
 307               		.file 5 "/usr/lib/avr/include/stdio.h"
 308               		.file 6 "../../../../LUFA/Drivers/USB/Class/Device/../Common/RNDIS.h"
 309               		.file 7 "Lib/Ethernet.h"
 310               		.file 8 "../../../../LUFA/Drivers/Peripheral/AVR8/Serial_AVR8.h"
 311               		.file 9 "../../../../LUFA/Drivers/USB/Core/USBTask.h"
 312               		.file 10 "Lib/ProtocolDecoders.h"
 313               		.file 11 "/usr/lib/avr/include/string.h"
 314               		.file 12 "Lib/ARP.h"
 315               		.file 13 "Lib/IP.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Ethernet.c
     /tmp/ccP6zmXG.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccP6zmXG.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccP6zmXG.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccP6zmXG.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccP6zmXG.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccP6zmXG.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccP6zmXG.s:14     .text.Ethernet_ProcessPacket:0000000000000000 Ethernet_ProcessPacket
                            *COM*:00000000000005de FrameIN
     /tmp/ccP6zmXG.s:294    .rodata:0000000000000012 ServerMACAddress
     /tmp/ccP6zmXG.s:276    .rodata:0000000000000008 BroadcastMACAddress
                            *COM*:00000000000005de FrameOUT
     /tmp/ccP6zmXG.s:166    .text.Ethernet_Checksum16:0000000000000000 Ethernet_Checksum16
     /tmp/ccP6zmXG.s:260    .rodata:0000000000000000 ClientIPAddress
     /tmp/ccP6zmXG.s:268    .rodata:0000000000000004 BroadcastIPAddress
     /tmp/ccP6zmXG.s:286    .rodata:000000000000000e ServerIPAddress

UNDEFINED SYMBOLS
DecodeEthernetFrameHeader
memcmp
ARP_ProcessARPPacket
IP_ProcessIPPacket
__do_copy_data
__do_clear_bss
