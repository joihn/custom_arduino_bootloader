
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800168  00800168  00000f0c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d63  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001df7  00000000  00000000  00006f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003212  00000000  00000000  00008d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026f1  00000000  00000000  0000c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033df  00000000  00000000  0000eecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  000122ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	35 c2       	rjmp	.+1130   	; 0x494 <__vector_10>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	eb 03       	fmulsu	r22, r19
  9a:	0d 04       	cpc	r0, r13
  9c:	fa 04       	cpc	r15, r10
  9e:	0d 04       	cpc	r0, r13
  a0:	fa 04       	cpc	r15, r10
  a2:	52 04       	cpc	r5, r2
  a4:	75 04       	cpc	r7, r5
  a6:	fa 04       	cpc	r15, r10
  a8:	c7 04       	cpc	r12, r7
  aa:	d9 04       	cpc	r13, r9

000000ac <ProductString>:
  ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
  ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
  e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
  e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 118:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000126 <DeviceDescriptor>:
 126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 136:	dc 01                                               ..

00000138 <__ctors_end>:
 138:	11 24       	eor	r1, r1
 13a:	1f be       	out	0x3f, r1	; 63
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	d0 e2       	ldi	r29, 0x20	; 32
 140:	de bf       	out	0x3e, r29	; 62
 142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	e0 e1       	ldi	r30, 0x10	; 16
 14c:	fe e0       	ldi	r31, 0x0E	; 14
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a8 36       	cpi	r26, 0x68	; 104
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	a8 e6       	ldi	r26, 0x68	; 104
 162:	b1 e0       	ldi	r27, 0x01	; 1
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a4 38       	cpi	r26, 0x84	; 132
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	5f d0       	rcall	.+190    	; 0x22e <main>
 170:	4d c6       	rjmp	.+3226   	; 0xe0c <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 174:	9b b1       	in	r25, 0x0b	; 11
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	08 95       	ret

0000017e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 17e:	84 b7       	in	r24, 0x34	; 52
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	a8 95       	wdr
 18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 18e:	88 61       	ori	r24, 0x18	; 24
 190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1aa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	8f 71       	andi	r24, 0x1F	; 31
 1b0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1b2:	8d b1       	in	r24, 0x0d	; 13
 1b4:	8f 7c       	andi	r24, 0xCF	; 207
 1b6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	80 6e       	ori	r24, 0xE0	; 224
 1bc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1be:	8e b1       	in	r24, 0x0e	; 14
 1c0:	80 63       	ori	r24, 0x30	; 48
 1c2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 1d0:	4b c1       	rjmp	.+662    	; 0x468 <USB_Init>

000001d2 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1d2:	83 b1       	in	r24, 0x03	; 3
 1d4:	9c b1       	in	r25, 0x0c	; 12
 1d6:	90 95       	com	r25
 1d8:	90 73       	andi	r25, 0x30	; 48
 1da:	96 95       	lsr	r25
 1dc:	80 95       	com	r24
 1de:	80 7e       	andi	r24, 0xE0	; 224
 1e0:	89 2b       	or	r24, r25
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
 1e2:	87 fd       	sbrc	r24, 7
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <CheckJoystickMovement+0x2a>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 1e6:	84 fd       	sbrc	r24, 4
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 1ea:	86 fd       	sbrc	r24, 6
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 1ee:	83 fd       	sbrc	r24, 3
 1f0:	0e c0       	rjmp	.+28     	; 0x20e <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 1f2:	85 fd       	sbrc	r24, 5
 1f4:	0f c0       	rjmp	.+30     	; 0x214 <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 1f6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 1fa:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 1fc:	8a e5       	ldi	r24, 0x5A	; 90
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0b c0       	rjmp	.+22     	; 0x218 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 202:	8a e4       	ldi	r24, 0x4A	; 74
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	08 c0       	rjmp	.+16     	; 0x218 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 208:	8a e3       	ldi	r24, 0x3A	; 58
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	05 c0       	rjmp	.+10     	; 0x218 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 20e:	89 e2       	ldi	r24, 0x29	; 41
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	02 c0       	rjmp	.+4      	; 0x218 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 214:	86 e1       	ldi	r24, 0x16	; 22
 216:	91 e0       	ldi	r25, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
 218:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <__data_end>
 21c:	21 11       	cpse	r18, r1
 21e:	06 c0       	rjmp	.+12     	; 0x22c <CheckJoystickMovement+0x5a>
	{
		ActionSent = true;
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <__data_end>

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
 226:	69 e6       	ldi	r22, 0x69	; 105
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	c4 c5       	rjmp	.+2952   	; 0xdb4 <fputs>
 22c:	08 95       	ret

0000022e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 22e:	a7 df       	rcall	.-178    	; 0x17e <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 230:	69 e6       	ldi	r22, 0x69	; 105
 232:	71 e0       	ldi	r23, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 d5       	rcall	.+2562   	; 0xc3c <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	9b df       	rcall	.-202    	; 0x174 <LEDs_SetAllLEDs>
	sei();
 23e:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 240:	c8 df       	rcall	.-112    	; 0x1d2 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	91 e0       	ldi	r25, 0x01	; 1

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 246:	c1 d4       	rcall	.+2434   	; 0xbca <CDC_Device_ReceiveByte>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	af d4       	rcall	.+2398   	; 0xbac <CDC_Device_USBTask>
		USB_USBTask();
 24e:	ec d3       	rcall	.+2008   	; 0xa28 <USB_USBTask>
 250:	f7 cf       	rjmp	.-18     	; 0x240 <main+0x12>

00000252 <EVENT_USB_Device_Connect>:
 252:	80 ea       	ldi	r24, 0xA0	; 160
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 254:	8f cf       	rjmp	.-226    	; 0x174 <LEDs_SetAllLEDs>

00000256 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	8d cf       	rjmp	.-230    	; 0x174 <LEDs_SetAllLEDs>

0000025a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	f6 d3       	rcall	.+2028   	; 0xa4c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 260:	81 11       	cpse	r24, r1
 262:	02 c0       	rjmp	.+4      	; 0x268 <EVENT_USB_Device_ConfigurationChanged+0xe>
 264:	80 e9       	ldi	r24, 0x90	; 144
 266:	01 c0       	rjmp	.+2      	; 0x26a <EVENT_USB_Device_ConfigurationChanged+0x10>
 268:	80 e6       	ldi	r24, 0x60	; 96
 26a:	84 cf       	rjmp	.-248    	; 0x174 <LEDs_SetAllLEDs>

0000026c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	f9 c4       	rjmp	.+2546   	; 0xc64 <CDC_Device_ProcessControlRequest>

00000272 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 272:	29 2f       	mov	r18, r25
 274:	33 27       	eor	r19, r19
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	59 f0       	breq	.+22     	; 0x292 <CALLBACK_USB_GetDescriptor+0x20>
 27c:	23 30       	cpi	r18, 0x03	; 3
 27e:	31 05       	cpc	r19, r1
 280:	69 f0       	breq	.+26     	; 0x29c <CALLBACK_USB_GetDescriptor+0x2a>
 282:	21 30       	cpi	r18, 0x01	; 1
 284:	31 05       	cpc	r19, r1
 286:	e9 f4       	brne	.+58     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 288:	82 e1       	ldi	r24, 0x12	; 18
 28a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 28c:	26 e2       	ldi	r18, 0x26	; 38
 28e:	31 e0       	ldi	r19, 0x01	; 1
 290:	1c c0       	rjmp	.+56     	; 0x2ca <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 292:	8e e3       	ldi	r24, 0x3E	; 62
 294:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 296:	28 ee       	ldi	r18, 0xE8	; 232
 298:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 29a:	17 c0       	rjmp	.+46     	; 0x2ca <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 29c:	99 27       	eor	r25, r25
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	91 05       	cpc	r25, r1
 2a2:	49 f0       	breq	.+18     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x44>
 2a4:	28 f0       	brcs	.+10     	; 0x2b0 <CALLBACK_USB_GetDescriptor+0x3e>
 2a6:	02 97       	sbiw	r24, 0x02	; 2
 2a8:	61 f4       	brne	.+24     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2aa:	ec ea       	ldi	r30, 0xAC	; 172
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2b0:	e4 ee       	ldi	r30, 0xE4	; 228
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2b6:	ea ec       	ldi	r30, 0xCA	; 202
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2ba:	84 91       	lpm	r24, Z
 2bc:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 2be:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2ca:	fa 01       	movw	r30, r20
 2cc:	31 83       	std	Z+1, r19	; 0x01
 2ce:	20 83       	st	Z, r18
	return Size;
}
 2d0:	08 95       	ret

000002d2 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 2d2:	98 2f       	mov	r25, r24
 2d4:	97 30       	cpi	r25, 0x07	; 7
 2d6:	68 f5       	brcc	.+90     	; 0x332 <Endpoint_ConfigureEndpoint_Prv+0x60>
 2d8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 2dc:	98 17       	cp	r25, r24
 2de:	39 f0       	breq	.+14     	; 0x2ee <Endpoint_ConfigureEndpoint_Prv+0x1c>
 2e0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 2e4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 2e8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <Endpoint_ConfigureEndpoint_Prv+0x22>
 2ee:	24 2f       	mov	r18, r20
 2f0:	76 2f       	mov	r23, r22
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	21 fd       	sbrc	r18, 1
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <Endpoint_ConfigureEndpoint_Prv+0x2a>
 2f8:	9f 5f       	subi	r25, 0xFF	; 255
 2fa:	ec cf       	rjmp	.-40     	; 0x2d4 <Endpoint_ConfigureEndpoint_Prv+0x2>
 2fc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 300:	3e 7f       	andi	r19, 0xFE	; 254
 302:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 306:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 30a:	3d 7f       	andi	r19, 0xFD	; 253
 30c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 310:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 314:	31 60       	ori	r19, 0x01	; 1
 316:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 31a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 31e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 322:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 326:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 32a:	27 fd       	sbrc	r18, 7
 32c:	e5 cf       	rjmp	.-54     	; 0x2f8 <Endpoint_ConfigureEndpoint_Prv+0x26>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
 332:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	08 95       	ret

0000033a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 33a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
 33e:	87 ff       	sbrs	r24, 7
 340:	11 c0       	rjmp	.+34     	; 0x364 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 346:	82 fd       	sbrc	r24, 2
 348:	05 c0       	rjmp	.+10     	; 0x354 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 34a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
 34e:	81 11       	cpse	r24, r1
 350:	f8 cf       	rjmp	.-16     	; 0x342 <Endpoint_ClearStatusStage+0x8>
 352:	11 c0       	rjmp	.+34     	; 0x376 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 354:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 358:	8b 77       	andi	r24, 0x7B	; 123
 35a:	0b c0       	rjmp	.+22     	; 0x372 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 35c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
 360:	88 23       	and	r24, r24
 362:	49 f0       	breq	.+18     	; 0x376 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 364:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 368:	80 ff       	sbrs	r24, 0
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 36c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 370:	8e 77       	andi	r24, 0x7E	; 126
 372:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 376:	08 95       	ret

00000378 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 378:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 37c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 380:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 382:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 386:	84 2f       	mov	r24, r20
 388:	81 70       	andi	r24, 0x01	; 1
 38a:	40 ff       	sbrs	r20, 0
 38c:	23 c0       	rjmp	.+70     	; 0x3d4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 38e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 392:	80 fd       	sbrc	r24, 0
 394:	1d c0       	rjmp	.+58     	; 0x3d0 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 396:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 39a:	88 23       	and	r24, r24
 39c:	99 f0       	breq	.+38     	; 0x3c4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 39e:	85 30       	cpi	r24, 0x05	; 5
 3a0:	99 f0       	breq	.+38     	; 0x3c8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 3a2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 3a6:	85 fd       	sbrc	r24, 5
 3a8:	11 c0       	rjmp	.+34     	; 0x3cc <Endpoint_WaitUntilReady+0x54>
 3aa:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 3ae:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 3b2:	24 17       	cp	r18, r20
 3b4:	35 07       	cpc	r19, r21
 3b6:	29 f3       	breq	.-54     	; 0x382 <Endpoint_WaitUntilReady+0xa>
 3b8:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 3ba:	11 f0       	breq	.+4      	; 0x3c0 <Endpoint_WaitUntilReady+0x48>
 3bc:	9a 01       	movw	r18, r20
 3be:	e1 cf       	rjmp	.-62     	; 0x382 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3d4:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 3d8:	42 ff       	sbrs	r20, 2
 3da:	dd cf       	rjmp	.-70     	; 0x396 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 3dc:	08 95       	ret

000003de <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 3e6:	49 d0       	rcall	.+146    	; 0x47a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 3e8:	50 d0       	rcall	.+160    	; 0x48a <USB_INT_ClearAllInterrupts>
 3ea:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	88 81       	ld	r24, Y
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	88 83       	st	Y, r24
 3f4:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	88 83       	st	Y, r24
 3fa:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3fc:	8f 7d       	andi	r24, 0xDF	; 223
 3fe:	88 83       	st	Y, r24
 400:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 68       	ori	r24, 0x80	; 128
 408:	80 83       	st	Z, r24
 40a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 40c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 410:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 414:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 418:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 41c:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	f8 01       	movw	r30, r16
 422:	80 81       	ld	r24, Z
 424:	8b 7f       	andi	r24, 0xFB	; 251
 426:	80 83       	st	Z, r24
 428:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	88 83       	st	Y, r24
 42e:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	4e df       	rcall	.-356    	; 0x2d2 <Endpoint_ConfigureEndpoint_Prv>
 436:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	8e 7f       	andi	r24, 0xFE	; 254
 43e:	80 83       	st	Z, r24
 440:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	81 60       	ori	r24, 0x01	; 1
 448:	80 83       	st	Z, r24
 44a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	80 83       	st	Z, r24
 450:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 452:	80 81       	ld	r24, Z
 454:	8e 7f       	andi	r24, 0xFE	; 254
 456:	80 83       	st	Z, r24
 458:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 45a:	80 61       	ori	r24, 0x10	; 16
 45c:	88 83       	st	Y, r24
 45e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <USB_Init>:
 468:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <USB_IsInitialized>

	USB_ResetInterface();
 478:	b2 cf       	rjmp	.-156    	; 0x3de <USB_ResetInterface>

0000047a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 47a:	e8 ed       	ldi	r30, 0xD8	; 216
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	8c 7f       	andi	r24, 0xFC	; 252
 482:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 484:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 488:	08 95       	ret

0000048a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 48a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 48e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 492:	08 95       	ret

00000494 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	0b b6       	in	r0, 0x3b	; 59
 4a0:	0f 92       	push	r0
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 4ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 4be:	82 ff       	sbrs	r24, 2
 4c0:	0a c0       	rjmp	.+20     	; 0x4d6 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 4c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4c6:	82 ff       	sbrs	r24, 2
 4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 4ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 4ce:	8b 7f       	andi	r24, 0xFB	; 251
 4d0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 4d4:	a8 d2       	rcall	.+1360   	; 0xa26 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 4d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 4da:	80 ff       	sbrs	r24, 0
 4dc:	1d c0       	rjmp	.+58     	; 0x518 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 4de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 4e2:	80 ff       	sbrs	r24, 0
 4e4:	19 c0       	rjmp	.+50     	; 0x518 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 4e6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 4ea:	8e 7f       	andi	r24, 0xFE	; 254
 4ec:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 4f0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 4f4:	80 ff       	sbrs	r24, 0
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 4fc:	8e e0       	ldi	r24, 0x0E	; 14
 4fe:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 500:	09 b4       	in	r0, 0x29	; 41
 502:	00 fe       	sbrs	r0, 0
 504:	fd cf       	rjmp	.-6      	; 0x500 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
			EVENT_USB_Device_Connect();
 50c:	a2 de       	rcall	.-700    	; 0x252 <EVENT_USB_Device_Connect>
 50e:	04 c0       	rjmp	.+8      	; 0x518 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 510:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 512:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 516:	9f de       	rcall	.-706    	; 0x256 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 518:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 51c:	80 ff       	sbrs	r24, 0
 51e:	18 c0       	rjmp	.+48     	; 0x550 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 520:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 524:	80 ff       	sbrs	r24, 0
 526:	14 c0       	rjmp	.+40     	; 0x550 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 528:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 52c:	8e 7f       	andi	r24, 0xFE	; 254
 52e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 532:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 536:	80 61       	ori	r24, 0x10	; 16
 538:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 53c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 540:	80 62       	ori	r24, 0x20	; 32
 542:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 546:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 548:	85 e0       	ldi	r24, 0x05	; 5
 54a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 54e:	6b d2       	rcall	.+1238   	; 0xa26 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 550:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 554:	84 ff       	sbrs	r24, 4
 556:	2d c0       	rjmp	.+90     	; 0x5b2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 558:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 55c:	84 ff       	sbrs	r24, 4
 55e:	29 c0       	rjmp	.+82     	; 0x5b2 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 564:	8e e0       	ldi	r24, 0x0E	; 14
 566:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 568:	09 b4       	in	r0, 0x29	; 41
 56a:	00 fe       	sbrs	r0, 0
 56c:	fd cf       	rjmp	.-6      	; 0x568 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 56e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 578:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 57c:	8f 7e       	andi	r24, 0xEF	; 239
 57e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 582:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 586:	8f 7e       	andi	r24, 0xEF	; 239
 588:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 58c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 590:	81 60       	ori	r24, 0x01	; 1
 592:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 596:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
 59a:	81 11       	cpse	r24, r1
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 59e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 5a2:	87 fd       	sbrc	r24, 7
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__vector_10+0x116>
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__vector_10+0x118>
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 5b0:	3a d2       	rcall	.+1140   	; 0xa26 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 5b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5b6:	83 ff       	sbrs	r24, 3
 5b8:	22 c0       	rjmp	.+68     	; 0x5fe <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 5ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5be:	83 ff       	sbrs	r24, 3
 5c0:	1e c0       	rjmp	.+60     	; 0x5fe <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 5c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5c6:	87 7f       	andi	r24, 0xF7	; 247
 5c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 5d2:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5e4:	8e 7f       	andi	r24, 0xFE	; 254
 5e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5ee:	80 61       	ori	r24, 0x10	; 16
 5f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5f4:	42 e0       	ldi	r20, 0x02	; 2
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	6b de       	rcall	.-810    	; 0x2d2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 5fc:	14 d2       	rcall	.+1064   	; 0xa26 <USB_Event_Stub>
 5fe:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0b be       	out	0x3b, r0	; 59
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <Endpoint_Write_Control_Stream_LE>:
 624:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <USB_ControlRequest+0x6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 628:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <USB_ControlRequest+0x7>
 62c:	26 17       	cp	r18, r22
 62e:	37 07       	cpc	r19, r23
 630:	48 f0       	brcs	.+18     	; 0x644 <Endpoint_Write_Control_Stream_LE+0x20>
 632:	61 15       	cp	r22, r1
 634:	71 05       	cpc	r23, r1
 636:	39 f4       	brne	.+14     	; 0x646 <Endpoint_Write_Control_Stream_LE+0x22>
 638:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63c:	2e 77       	andi	r18, 0x7E	; 126
 63e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 642:	01 c0       	rjmp	.+2      	; 0x646 <Endpoint_Write_Control_Stream_LE+0x22>
 644:	b9 01       	movw	r22, r18
 646:	fc 01       	movw	r30, r24
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	61 15       	cp	r22, r1
 64c:	71 05       	cpc	r23, r1
 64e:	69 f1       	breq	.+90     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x86>
 650:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
 654:	88 23       	and	r24, r24
 656:	d1 f1       	breq	.+116    	; 0x6cc <Endpoint_Write_Control_Stream_LE+0xa8>
 658:	85 30       	cpi	r24, 0x05	; 5
 65a:	d1 f1       	breq	.+116    	; 0x6d0 <Endpoint_Write_Control_Stream_LE+0xac>
 65c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 660:	83 fd       	sbrc	r24, 3
 662:	32 c0       	rjmp	.+100    	; 0x6c8 <Endpoint_Write_Control_Stream_LE+0xa4>
 664:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 668:	82 fd       	sbrc	r24, 2
 66a:	28 c0       	rjmp	.+80     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0x98>
 66c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 670:	80 ff       	sbrs	r24, 0
 672:	eb cf       	rjmp	.-42     	; 0x64a <Endpoint_Write_Control_Stream_LE+0x26>
 674:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 678:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 67c:	61 15       	cp	r22, r1
 67e:	71 05       	cpc	r23, r1
 680:	51 f0       	breq	.+20     	; 0x696 <Endpoint_Write_Control_Stream_LE+0x72>
 682:	88 30       	cpi	r24, 0x08	; 8
 684:	91 05       	cpc	r25, r1
 686:	38 f4       	brcc	.+14     	; 0x696 <Endpoint_Write_Control_Stream_LE+0x72>
 688:	21 91       	ld	r18, Z+
 68a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 68e:	61 50       	subi	r22, 0x01	; 1
 690:	71 09       	sbc	r23, r1
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	f3 cf       	rjmp	.-26     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x58>
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	08 97       	sbiw	r24, 0x08	; 8
 69a:	09 f0       	breq	.+2      	; 0x69e <Endpoint_Write_Control_Stream_LE+0x7a>
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a2:	8e 77       	andi	r24, 0x7E	; 126
 6a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a8:	d0 cf       	rjmp	.-96     	; 0x64a <Endpoint_Write_Control_Stream_LE+0x26>
 6aa:	21 11       	cpse	r18, r1
 6ac:	d1 cf       	rjmp	.-94     	; 0x650 <Endpoint_Write_Control_Stream_LE+0x2c>
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0x98>
 6b0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
 6b4:	88 23       	and	r24, r24
 6b6:	51 f0       	breq	.+20     	; 0x6cc <Endpoint_Write_Control_Stream_LE+0xa8>
 6b8:	85 30       	cpi	r24, 0x05	; 5
 6ba:	51 f0       	breq	.+20     	; 0x6d0 <Endpoint_Write_Control_Stream_LE+0xac>
 6bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c0:	82 ff       	sbrs	r24, 2
 6c2:	f6 cf       	rjmp	.-20     	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0x8c>
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	08 95       	ret
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	08 95       	ret
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	08 95       	ret

000006d4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6d4:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <USB_ControlRequest+0x6>
 6d8:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <USB_ControlRequest+0x7>
 6dc:	26 17       	cp	r18, r22
 6de:	37 07       	cpc	r19, r23
 6e0:	48 f0       	brcs	.+18     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6e2:	61 15       	cp	r22, r1
 6e4:	71 05       	cpc	r23, r1
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ec:	2e 77       	andi	r18, 0x7E	; 126
 6ee:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x22>
 6f4:	b9 01       	movw	r22, r18
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6fa:	61 15       	cp	r22, r1
 6fc:	71 05       	cpc	r23, r1
 6fe:	71 f1       	breq	.+92     	; 0x75c <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 700:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 704:	88 23       	and	r24, r24
 706:	d9 f1       	breq	.+118    	; 0x77e <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 708:	85 30       	cpi	r24, 0x05	; 5
 70a:	d9 f1       	breq	.+118    	; 0x782 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 710:	83 fd       	sbrc	r24, 3
 712:	33 c0       	rjmp	.+102    	; 0x77a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 718:	82 fd       	sbrc	r24, 2
 71a:	29 c0       	rjmp	.+82     	; 0x76e <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 71c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 720:	80 ff       	sbrs	r24, 0
 722:	eb cf       	rjmp	.-42     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 724:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 728:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	59 f0       	breq	.+22     	; 0x748 <Endpoint_Write_Control_PStream_LE+0x74>
 732:	88 30       	cpi	r24, 0x08	; 8
 734:	91 05       	cpc	r25, r1
 736:	40 f4       	brcc	.+16     	; 0x748 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 738:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 73a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 73e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 740:	61 50       	subi	r22, 0x01	; 1
 742:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	f2 cf       	rjmp	.-28     	; 0x72c <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 748:	21 e0       	ldi	r18, 0x01	; 1
 74a:	08 97       	sbiw	r24, 0x08	; 8
 74c:	09 f0       	breq	.+2      	; 0x750 <Endpoint_Write_Control_PStream_LE+0x7c>
 74e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 750:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 754:	8e 77       	andi	r24, 0x7E	; 126
 756:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 75a:	cf cf       	rjmp	.-98     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 75c:	21 11       	cpse	r18, r1
 75e:	d0 cf       	rjmp	.-96     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x2c>
 760:	06 c0       	rjmp	.+12     	; 0x76e <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 762:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 766:	88 23       	and	r24, r24
 768:	51 f0       	breq	.+20     	; 0x77e <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 76a:	85 30       	cpi	r24, 0x05	; 5
 76c:	51 f0       	breq	.+20     	; 0x782 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 76e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 772:	82 ff       	sbrs	r24, 2
 774:	f6 cf       	rjmp	.-20     	; 0x762 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 782:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 784:	08 95       	ret

00000786 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	aa 97       	sbiw	r28, 0x2a	; 42
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	ec e7       	ldi	r30, 0x7C	; 124
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 7a2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 7a6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	e4 38       	cpi	r30, 0x84	; 132
 7ac:	f2 07       	cpc	r31, r18
 7ae:	c9 f7       	brne	.-14     	; 0x7a2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 7b0:	5d dd       	rcall	.-1350   	; 0x26c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 7b6:	83 ff       	sbrs	r24, 3
 7b8:	1d c1       	rjmp	.+570    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 7ba:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 7be:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <USB_ControlRequest+0x1>
 7c2:	49 2f       	mov	r20, r25
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	4a 30       	cpi	r20, 0x0A	; 10
 7c8:	51 05       	cpc	r21, r1
 7ca:	08 f0       	brcs	.+2      	; 0x7ce <USB_Device_ProcessControlRequest+0x48>
 7cc:	13 c1       	rjmp	.+550    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
 7ce:	fa 01       	movw	r30, r20
 7d0:	e4 5b       	subi	r30, 0xB4	; 180
 7d2:	ff 4f       	sbci	r31, 0xFF	; 255
 7d4:	e6 c2       	rjmp	.+1484   	; 0xda2 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7d6:	80 38       	cpi	r24, 0x80	; 128
 7d8:	81 f0       	breq	.+32     	; 0x7fa <USB_Device_ProcessControlRequest+0x74>
 7da:	82 38       	cpi	r24, 0x82	; 130
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <USB_Device_ProcessControlRequest+0x5a>
 7de:	0a c1       	rjmp	.+532    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7e0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
 7e4:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7ea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 7ee:	85 fb       	bst	r24, 5
 7f0:	88 27       	eor	r24, r24
 7f2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 7fa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 7fe:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <USB_Device_RemoteWakeupEnabled>
 802:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 804:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 806:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 80a:	97 7f       	andi	r25, 0xF7	; 247
 80c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 810:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 814:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 818:	c5 c0       	rjmp	.+394    	; 0x9a4 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 81a:	28 2f       	mov	r18, r24
 81c:	2d 7f       	andi	r18, 0xFD	; 253
 81e:	09 f0       	breq	.+2      	; 0x822 <USB_Device_ProcessControlRequest+0x9c>
 820:	e9 c0       	rjmp	.+466    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 822:	88 23       	and	r24, r24
 824:	19 f0       	breq	.+6      	; 0x82c <USB_Device_ProcessControlRequest+0xa6>
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	61 f0       	breq	.+24     	; 0x842 <USB_Device_ProcessControlRequest+0xbc>
 82a:	e4 c0       	rjmp	.+456    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 82c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	09 f0       	breq	.+2      	; 0x836 <USB_Device_ProcessControlRequest+0xb0>
 834:	df c0       	rjmp	.+446    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 836:	93 30       	cpi	r25, 0x03	; 3
 838:	09 f0       	breq	.+2      	; 0x83c <USB_Device_ProcessControlRequest+0xb6>
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <USB_Device_RemoteWakeupEnabled>
 840:	2b c0       	rjmp	.+86     	; 0x898 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 842:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 846:	81 11       	cpse	r24, r1
 848:	27 c0       	rjmp	.+78     	; 0x898 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 84a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
 84e:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 850:	09 f4       	brne	.+2      	; 0x854 <USB_Device_ProcessControlRequest+0xce>
 852:	d0 c0       	rjmp	.+416    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 854:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 858:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 85c:	20 ff       	sbrs	r18, 0
 85e:	1c c0       	rjmp	.+56     	; 0x898 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 860:	93 30       	cpi	r25, 0x03	; 3
 862:	21 f4       	brne	.+8      	; 0x86c <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 864:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 868:	80 62       	ori	r24, 0x20	; 32
 86a:	14 c0       	rjmp	.+40     	; 0x894 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 86c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 870:	90 61       	ori	r25, 0x10	; 16
 872:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 876:	21 e0       	ldi	r18, 0x01	; 1
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a9 01       	movw	r20, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <USB_Device_ProcessControlRequest+0xfc>
 87e:	44 0f       	add	r20, r20
 880:	55 1f       	adc	r21, r21
 882:	8a 95       	dec	r24
 884:	e2 f7       	brpl	.-8      	; 0x87e <USB_Device_ProcessControlRequest+0xf8>
 886:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 88a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 88e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 892:	88 60       	ori	r24, 0x08	; 8
 894:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 898:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 89c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a0:	87 7f       	andi	r24, 0xF7	; 247
 8a2:	83 c0       	rjmp	.+262    	; 0x9aa <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8a4:	81 11       	cpse	r24, r1
 8a6:	a6 c0       	rjmp	.+332    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 8a8:	10 91 7e 01 	lds	r17, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 8ac:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8ae:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8b0:	f8 94       	cli
 8b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b6:	87 7f       	andi	r24, 0xF7	; 247
 8b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8bc:	3e dd       	rcall	.-1412   	; 0x33a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 8c2:	80 ff       	sbrs	r24, 0
 8c4:	fc cf       	rjmp	.-8      	; 0x8be <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 8ca:	80 78       	andi	r24, 0x80	; 128
 8cc:	81 2b       	or	r24, r17

				UDADDR = Temp;
 8ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 8d2:	80 68       	ori	r24, 0x80	; 128
 8d4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8d8:	11 11       	cpse	r17, r1
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <USB_Device_ProcessControlRequest+0x15a>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <USB_Device_ProcessControlRequest+0x15c>
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8e6:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 8e8:	85 c0       	rjmp	.+266    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8ea:	80 58       	subi	r24, 0x80	; 128
 8ec:	82 30       	cpi	r24, 0x02	; 2
 8ee:	08 f0       	brcs	.+2      	; 0x8f2 <USB_Device_ProcessControlRequest+0x16c>
 8f0:	81 c0       	rjmp	.+258    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8f2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 8f6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USB_ControlRequest+0x3>
 8fa:	8c 3d       	cpi	r24, 0xDC	; 220
 8fc:	53 e0       	ldi	r21, 0x03	; 3
 8fe:	95 07       	cpc	r25, r21
 900:	71 f5       	brne	.+92     	; 0x95e <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 906:	8a e2       	ldi	r24, 0x2A	; 42
 908:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 90a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 90c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 90e:	de 01       	movw	r26, r28
 910:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 912:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 914:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 916:	51 e2       	ldi	r21, 0x21	; 33
 918:	e3 2f       	mov	r30, r19
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 920:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 922:	20 ff       	sbrs	r18, 0
 924:	03 c0       	rjmp	.+6      	; 0x92c <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 926:	e2 95       	swap	r30
 928:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 92a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 92c:	ef 70       	andi	r30, 0x0F	; 15
 92e:	8e 2f       	mov	r24, r30
 930:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 932:	ea 30       	cpi	r30, 0x0A	; 10
 934:	10 f0       	brcs	.+4      	; 0x93a <USB_Device_ProcessControlRequest+0x1b4>
 936:	c7 96       	adiw	r24, 0x37	; 55
 938:	01 c0       	rjmp	.+2      	; 0x93c <USB_Device_ProcessControlRequest+0x1b6>
 93a:	c0 96       	adiw	r24, 0x30	; 48
 93c:	8d 93       	st	X+, r24
 93e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 940:	2f 5f       	subi	r18, 0xFF	; 255
 942:	24 31       	cpi	r18, 0x14	; 20
 944:	49 f7       	brne	.-46     	; 0x918 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 946:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 948:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94c:	87 7f       	andi	r24, 0xF7	; 247
 94e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 952:	6a e2       	ldi	r22, 0x2A	; 42
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	64 de       	rcall	.-824    	; 0x624 <Endpoint_Write_Control_Stream_LE>
 95c:	12 c0       	rjmp	.+36     	; 0x982 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 95e:	ae 01       	movw	r20, r28
 960:	4f 5f       	subi	r20, 0xFF	; 255
 962:	5f 4f       	sbci	r21, 0xFF	; 255
 964:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
 968:	84 dc       	rcall	.-1784   	; 0x272 <CALLBACK_USB_GetDescriptor>
 96a:	bc 01       	movw	r22, r24
 96c:	89 2b       	or	r24, r25
 96e:	09 f4       	brne	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0x1ec>
 970:	41 c0       	rjmp	.+130    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
 972:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 976:	97 7f       	andi	r25, 0xF7	; 247
 978:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 97c:	89 81       	ldd	r24, Y+1	; 0x01
 97e:	9a 81       	ldd	r25, Y+2	; 0x02
 980:	a9 de       	rcall	.-686    	; 0x6d4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 982:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 986:	8b 77       	andi	r24, 0x7B	; 123
 988:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 98c:	33 c0       	rjmp	.+102    	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 98e:	80 38       	cpi	r24, 0x80	; 128
 990:	89 f5       	brne	.+98     	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 992:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 996:	87 7f       	andi	r24, 0xF7	; 247
 998:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 99c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9a0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9a8:	8e 77       	andi	r24, 0x7E	; 126
 9aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 9ae:	c5 dc       	rcall	.-1654   	; 0x33a <Endpoint_ClearStatusStage>
 9b0:	21 c0       	rjmp	.+66     	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9b2:	81 11       	cpse	r24, r1
 9b4:	1f c0       	rjmp	.+62     	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9b6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 9ba:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USB_ControlRequest+0x3>
 9be:	99 27       	eor	r25, r25
 9c0:	02 97       	sbiw	r24, 0x02	; 2
 9c2:	c4 f4       	brge	.+48     	; 0x9f4 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9c8:	87 7f       	andi	r24, 0xF7	; 247
 9ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9ce:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
 9d2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 9d6:	b1 dc       	rcall	.-1694   	; 0x33a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 9d8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_Device_ConfigurationNumber>
 9dc:	81 11       	cpse	r24, r1
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9e0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9e4:	87 fd       	sbrc	r24, 7
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <USB_Device_ProcessControlRequest+0x266>
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0x268>
 9ec:	84 e0       	ldi	r24, 0x04	; 4
 9ee:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 9f2:	33 dc       	rcall	.-1946   	; 0x25a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9f8:	83 ff       	sbrs	r24, 3
 9fa:	0a c0       	rjmp	.+20     	; 0xa10 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9fc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a00:	80 62       	ori	r24, 0x20	; 32
 a02:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a0a:	87 7f       	andi	r24, 0xF7	; 247
 a0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 a10:	aa 96       	adiw	r28, 0x2a	; 42
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	df 91       	pop	r29
 a1e:	cf 91       	pop	r28
 a20:	1f 91       	pop	r17
 a22:	0f 91       	pop	r16
 a24:	08 95       	ret

00000a26 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 a26:	08 95       	ret

00000a28 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a28:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a2a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_DeviceState>
 a2e:	88 23       	and	r24, r24
 a30:	59 f0       	breq	.+22     	; 0xa48 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a32:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 a36:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a38:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a40:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 a42:	a1 de       	rcall	.-702    	; 0x786 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a44:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 a48:	cf 91       	pop	r28
 a4a:	08 95       	ret

00000a4c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	ec 01       	movw	r28, r24
 a54:	fc 01       	movw	r30, r24
 a56:	3d 96       	adiw	r30, 0x0d	; 13
 a58:	89 e0       	ldi	r24, 0x09	; 9
 a5a:	df 01       	movw	r26, r30
 a5c:	1d 92       	st	X+, r1
 a5e:	8a 95       	dec	r24
 a60:	e9 f7       	brne	.-6      	; 0xa5c <CDC_Device_ConfigureEndpoints+0x10>
 a62:	11 e0       	ldi	r17, 0x01	; 1
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	81 13       	cpse	r24, r17
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <CDC_Device_ConfigureEndpoints+0x28>
 a6a:	ea 81       	ldd	r30, Y+2	; 0x02
 a6c:	fb 81       	ldd	r31, Y+3	; 0x03
 a6e:	9c 81       	ldd	r25, Y+4	; 0x04
 a70:	20 e8       	ldi	r18, 0x80	; 128
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <CDC_Device_ConfigureEndpoints+0x36>
 a74:	8d 81       	ldd	r24, Y+5	; 0x05
 a76:	81 13       	cpse	r24, r17
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <CDC_Device_ConfigureEndpoints+0x3a>
 a7a:	ee 81       	ldd	r30, Y+6	; 0x06
 a7c:	ff 81       	ldd	r31, Y+7	; 0x07
 a7e:	98 85       	ldd	r25, Y+8	; 0x08
 a80:	20 e0       	ldi	r18, 0x00	; 0
 a82:	82 e0       	ldi	r24, 0x02	; 2
 a84:	0d c0       	rjmp	.+26     	; 0xaa0 <CDC_Device_ConfigureEndpoints+0x54>
 a86:	89 85       	ldd	r24, Y+9	; 0x09
 a88:	81 17       	cp	r24, r17
 a8a:	29 f0       	breq	.+10     	; 0xa96 <CDC_Device_ConfigureEndpoints+0x4a>
 a8c:	1f 5f       	subi	r17, 0xFF	; 255
 a8e:	17 30       	cpi	r17, 0x07	; 7
 a90:	49 f7       	brne	.-46     	; 0xa64 <CDC_Device_ConfigureEndpoints+0x18>
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	22 c0       	rjmp	.+68     	; 0xada <CDC_Device_ConfigureEndpoints+0x8e>
 a96:	ea 85       	ldd	r30, Y+10	; 0x0a
 a98:	fb 85       	ldd	r31, Y+11	; 0x0b
 a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
 a9c:	20 e8       	ldi	r18, 0x80	; 128
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	91 11       	cpse	r25, r1
 aa2:	94 e0       	ldi	r25, 0x04	; 4
 aa4:	68 e0       	ldi	r22, 0x08	; 8
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	40 e0       	ldi	r20, 0x00	; 0
 aaa:	6e 17       	cp	r22, r30
 aac:	7f 07       	cpc	r23, r31
 aae:	20 f4       	brcc	.+8      	; 0xab8 <CDC_Device_ConfigureEndpoints+0x6c>
 ab0:	4f 5f       	subi	r20, 0xFF	; 255
 ab2:	66 0f       	add	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	f9 cf       	rjmp	.-14     	; 0xaaa <CDC_Device_ConfigureEndpoints+0x5e>
 ab8:	42 95       	swap	r20
 aba:	40 7f       	andi	r20, 0xF0	; 240
 abc:	92 60       	ori	r25, 0x02	; 2
 abe:	49 2b       	or	r20, r25
 ac0:	b0 e4       	ldi	r27, 0x40	; 64
 ac2:	8b 9f       	mul	r24, r27
 ac4:	c0 01       	movw	r24, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	61 e0       	ldi	r22, 0x01	; 1
 aca:	21 11       	cpse	r18, r1
 acc:	01 c0       	rjmp	.+2      	; 0xad0 <CDC_Device_ConfigureEndpoints+0x84>
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	68 2b       	or	r22, r24
 ad2:	81 2f       	mov	r24, r17
 ad4:	fe db       	rcall	.-2052   	; 0x2d2 <Endpoint_ConfigureEndpoint_Prv>
 ad6:	81 11       	cpse	r24, r1
 ad8:	d9 cf       	rjmp	.-78     	; 0xa8c <CDC_Device_ConfigureEndpoints+0x40>
 ada:	df 91       	pop	r29
 adc:	cf 91       	pop	r28
 ade:	1f 91       	pop	r17
 ae0:	08 95       	ret

00000ae2 <CDC_Device_SendByte>:
 ae2:	0f 93       	push	r16
 ae4:	1f 93       	push	r17
 ae6:	cf 93       	push	r28
 ae8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_DeviceState>
 aec:	24 30       	cpi	r18, 0x04	; 4
 aee:	f1 f4       	brne	.+60     	; 0xb2c <CDC_Device_SendByte+0x4a>
 af0:	fc 01       	movw	r30, r24
 af2:	07 85       	ldd	r16, Z+15	; 0x0f
 af4:	10 89       	ldd	r17, Z+16	; 0x10
 af6:	21 89       	ldd	r18, Z+17	; 0x11
 af8:	32 89       	ldd	r19, Z+18	; 0x12
 afa:	01 2b       	or	r16, r17
 afc:	02 2b       	or	r16, r18
 afe:	03 2b       	or	r16, r19
 b00:	a9 f0       	breq	.+42     	; 0xb2c <CDC_Device_SendByte+0x4a>
 b02:	c6 2f       	mov	r28, r22
 b04:	81 81       	ldd	r24, Z+1	; 0x01
 b06:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b0e:	85 ff       	sbrs	r24, 5
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <CDC_Device_SendByte+0x38>
 b12:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	0a c0       	rjmp	.+20     	; 0xb2e <CDC_Device_SendByte+0x4c>
 b1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b1e:	8e 77       	andi	r24, 0x7E	; 126
 b20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b24:	29 dc       	rcall	.-1966   	; 0x378 <Endpoint_WaitUntilReady>
 b26:	88 23       	and	r24, r24
 b28:	a1 f3       	breq	.-24     	; 0xb12 <CDC_Device_SendByte+0x30>
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <CDC_Device_SendByte+0x4c>
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	08 95       	ret

00000b36 <CDC_Device_putchar>:
 b36:	fb 01       	movw	r30, r22
 b38:	68 2f       	mov	r22, r24
 b3a:	84 85       	ldd	r24, Z+12	; 0x0c
 b3c:	95 85       	ldd	r25, Z+13	; 0x0d
 b3e:	d1 df       	rcall	.-94     	; 0xae2 <CDC_Device_SendByte>
 b40:	21 e0       	ldi	r18, 0x01	; 1
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	81 11       	cpse	r24, r1
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <CDC_Device_putchar+0x16>
 b48:	20 e0       	ldi	r18, 0x00	; 0
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	88 27       	eor	r24, r24
 b4e:	99 27       	eor	r25, r25
 b50:	82 1b       	sub	r24, r18
 b52:	93 0b       	sbc	r25, r19
 b54:	08 95       	ret

00000b56 <CDC_Device_Flush>:
 b56:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_DeviceState>
 b5a:	24 30       	cpi	r18, 0x04	; 4
 b5c:	29 f5       	brne	.+74     	; 0xba8 <CDC_Device_Flush+0x52>
 b5e:	fc 01       	movw	r30, r24
 b60:	47 85       	ldd	r20, Z+15	; 0x0f
 b62:	50 89       	ldd	r21, Z+16	; 0x10
 b64:	61 89       	ldd	r22, Z+17	; 0x11
 b66:	72 89       	ldd	r23, Z+18	; 0x12
 b68:	45 2b       	or	r20, r21
 b6a:	46 2b       	or	r20, r22
 b6c:	47 2b       	or	r20, r23
 b6e:	e1 f0       	breq	.+56     	; 0xba8 <CDC_Device_Flush+0x52>
 b70:	81 81       	ldd	r24, Z+1	; 0x01
 b72:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b76:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b7a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b7e:	89 2b       	or	r24, r25
 b80:	89 f0       	breq	.+34     	; 0xba4 <CDC_Device_Flush+0x4e>
 b82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b8a:	8e 77       	andi	r24, 0x7E	; 126
 b8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b90:	95 fd       	sbrc	r25, 5
 b92:	08 c0       	rjmp	.+16     	; 0xba4 <CDC_Device_Flush+0x4e>
 b94:	f1 db       	rcall	.-2078   	; 0x378 <Endpoint_WaitUntilReady>
 b96:	81 11       	cpse	r24, r1
 b98:	08 c0       	rjmp	.+16     	; 0xbaa <CDC_Device_Flush+0x54>
 b9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b9e:	8e 77       	andi	r24, 0x7E	; 126
 ba0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	08 95       	ret
 ba8:	82 e0       	ldi	r24, 0x02	; 2
 baa:	08 95       	ret

00000bac <CDC_Device_USBTask>:
 bac:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_DeviceState>
 bb0:	24 30       	cpi	r18, 0x04	; 4
 bb2:	51 f4       	brne	.+20     	; 0xbc8 <CDC_Device_USBTask+0x1c>
 bb4:	fc 01       	movw	r30, r24
 bb6:	47 85       	ldd	r20, Z+15	; 0x0f
 bb8:	50 89       	ldd	r21, Z+16	; 0x10
 bba:	61 89       	ldd	r22, Z+17	; 0x11
 bbc:	72 89       	ldd	r23, Z+18	; 0x12
 bbe:	45 2b       	or	r20, r21
 bc0:	46 2b       	or	r20, r22
 bc2:	47 2b       	or	r20, r23
 bc4:	09 f0       	breq	.+2      	; 0xbc8 <CDC_Device_USBTask+0x1c>
 bc6:	c7 cf       	rjmp	.-114    	; 0xb56 <CDC_Device_Flush>
 bc8:	08 95       	ret

00000bca <CDC_Device_ReceiveByte>:
 bca:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_DeviceState>
 bce:	24 30       	cpi	r18, 0x04	; 4
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <CDC_Device_ReceiveByte+0xe>
 bd2:	8f ef       	ldi	r24, 0xFF	; 255
 bd4:	9f ef       	ldi	r25, 0xFF	; 255
 bd6:	08 95       	ret
 bd8:	fc 01       	movw	r30, r24
 bda:	47 85       	ldd	r20, Z+15	; 0x0f
 bdc:	50 89       	ldd	r21, Z+16	; 0x10
 bde:	61 89       	ldd	r22, Z+17	; 0x11
 be0:	72 89       	ldd	r23, Z+18	; 0x12
 be2:	45 2b       	or	r20, r21
 be4:	46 2b       	or	r20, r22
 be6:	47 2b       	or	r20, r23
 be8:	a1 f3       	breq	.-24     	; 0xbd2 <CDC_Device_ReceiveByte+0x8>
 bea:	85 81       	ldd	r24, Z+5	; 0x05
 bec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 bf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf4:	82 ff       	sbrs	r24, 2
 bf6:	ed cf       	rjmp	.-38     	; 0xbd2 <CDC_Device_ReceiveByte+0x8>
 bf8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 bfc:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 c00:	89 2b       	or	r24, r25
 c02:	21 f0       	breq	.+8      	; 0xc0c <CDC_Device_ReceiveByte+0x42>
 c04:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <CDC_Device_ReceiveByte+0x46>
 c0c:	2f ef       	ldi	r18, 0xFF	; 255
 c0e:	3f ef       	ldi	r19, 0xFF	; 255
 c10:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 c14:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 c18:	89 2b       	or	r24, r25
 c1a:	29 f4       	brne	.+10     	; 0xc26 <CDC_Device_ReceiveByte+0x5c>
 c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c20:	8b 77       	andi	r24, 0x7B	; 123
 c22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c26:	c9 01       	movw	r24, r18
 c28:	08 95       	ret

00000c2a <CDC_Device_getchar>:
 c2a:	fc 01       	movw	r30, r24
 c2c:	84 85       	ldd	r24, Z+12	; 0x0c
 c2e:	95 85       	ldd	r25, Z+13	; 0x0d
 c30:	cc df       	rcall	.-104    	; 0xbca <CDC_Device_ReceiveByte>
 c32:	97 ff       	sbrs	r25, 7
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <CDC_Device_getchar+0x10>
 c36:	8e ef       	ldi	r24, 0xFE	; 254
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	08 95       	ret

00000c3c <CDC_Device_CreateStream>:
 c3c:	fb 01       	movw	r30, r22
 c3e:	2e e0       	ldi	r18, 0x0E	; 14
 c40:	db 01       	movw	r26, r22
 c42:	1d 92       	st	X+, r1
 c44:	2a 95       	dec	r18
 c46:	e9 f7       	brne	.-6      	; 0xc42 <CDC_Device_CreateStream+0x6>
 c48:	23 e0       	ldi	r18, 0x03	; 3
 c4a:	23 83       	std	Z+3, r18	; 0x03
 c4c:	2b e9       	ldi	r18, 0x9B	; 155
 c4e:	35 e0       	ldi	r19, 0x05	; 5
 c50:	31 87       	std	Z+9, r19	; 0x09
 c52:	20 87       	std	Z+8, r18	; 0x08
 c54:	25 e1       	ldi	r18, 0x15	; 21
 c56:	36 e0       	ldi	r19, 0x06	; 6
 c58:	33 87       	std	Z+11, r19	; 0x0b
 c5a:	22 87       	std	Z+10, r18	; 0x0a
 c5c:	95 87       	std	Z+13, r25	; 0x0d
 c5e:	84 87       	std	Z+12, r24	; 0x0c
 c60:	08 95       	ret

00000c62 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 c62:	08 95       	ret

00000c64 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29
 c68:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
 c6e:	83 ff       	sbrs	r24, 3
 c70:	95 c0       	rjmp	.+298    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 c72:	88 81       	ld	r24, Y
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <USB_ControlRequest+0x4>
 c7a:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <USB_ControlRequest+0x5>
 c7e:	28 17       	cp	r18, r24
 c80:	39 07       	cpc	r19, r25
 c82:	09 f0       	breq	.+2      	; 0xc86 <CDC_Device_ProcessControlRequest+0x22>
 c84:	8b c0       	rjmp	.+278    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
 c86:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest+0x1>
 c8a:	81 32       	cpi	r24, 0x21	; 33
 c8c:	59 f0       	breq	.+22     	; 0xca4 <CDC_Device_ProcessControlRequest+0x40>
 c8e:	18 f4       	brcc	.+6      	; 0xc96 <CDC_Device_ProcessControlRequest+0x32>
 c90:	80 32       	cpi	r24, 0x20	; 32
 c92:	d1 f1       	breq	.+116    	; 0xd08 <CDC_Device_ProcessControlRequest+0xa4>
 c94:	83 c0       	rjmp	.+262    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
 c96:	82 32       	cpi	r24, 0x22	; 34
 c98:	09 f4       	brne	.+2      	; 0xc9c <CDC_Device_ProcessControlRequest+0x38>
 c9a:	5f c0       	rjmp	.+190    	; 0xd5a <CDC_Device_ProcessControlRequest+0xf6>
 c9c:	83 32       	cpi	r24, 0x23	; 35
 c9e:	09 f4       	brne	.+2      	; 0xca2 <CDC_Device_ProcessControlRequest+0x3e>
 ca0:	6d c0       	rjmp	.+218    	; 0xd7c <CDC_Device_ProcessControlRequest+0x118>
 ca2:	7c c0       	rjmp	.+248    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 ca4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
 ca8:	81 3a       	cpi	r24, 0xA1	; 161
 caa:	09 f0       	breq	.+2      	; 0xcae <CDC_Device_ProcessControlRequest+0x4a>
 cac:	77 c0       	rjmp	.+238    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb2:	87 7f       	andi	r24, 0xF7	; 247
 cb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
 cba:	98 89       	ldd	r25, Y+16	; 0x10
 cbc:	a9 89       	ldd	r26, Y+17	; 0x11
 cbe:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 cc0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 cc4:	49 2f       	mov	r20, r25
 cc6:	5a 2f       	mov	r21, r26
 cc8:	6b 2f       	mov	r22, r27
 cca:	77 27       	eor	r23, r23
 ccc:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
 cd0:	ad 01       	movw	r20, r26
 cd2:	66 27       	eor	r22, r22
 cd4:	77 27       	eor	r23, r23
 cd6:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
 cda:	8b 2f       	mov	r24, r27
 cdc:	99 27       	eor	r25, r25
 cde:	aa 27       	eor	r26, r26
 ce0:	bb 27       	eor	r27, r27
 ce2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 ce6:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ce8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 cec:	8c 89       	ldd	r24, Y+20	; 0x14
 cee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 cf2:	8d 89       	ldd	r24, Y+21	; 0x15
 cf4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cfc:	8e 77       	andi	r24, 0x7E	; 126
 cfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d06:	19 cb       	rjmp	.-2510   	; 0x33a <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d08:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
 d0c:	81 32       	cpi	r24, 0x21	; 33
 d0e:	09 f0       	breq	.+2      	; 0xd12 <CDC_Device_ProcessControlRequest+0xae>
 d10:	45 c0       	rjmp	.+138    	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d16:	87 7f       	andi	r24, 0xF7	; 247
 d18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 d1c:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
 d20:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
 d24:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
 d28:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 d2c:	3f 87       	std	Y+15, r19	; 0x0f
 d2e:	28 8b       	std	Y+16, r18	; 0x10
 d30:	99 8b       	std	Y+17, r25	; 0x11
 d32:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 d34:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 d38:	8b 8b       	std	Y+19, r24	; 0x13
 d3a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 d3e:	8c 8b       	std	Y+20, r24	; 0x14
 d40:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 d44:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d4a:	8b 77       	andi	r24, 0x7B	; 123
 d4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 d50:	f4 da       	rcall	.-2584   	; 0x33a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d52:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d54:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d56:	cf 91       	pop	r28
 d58:	84 cf       	rjmp	.-248    	; 0xc62 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d5a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
 d5e:	81 32       	cpi	r24, 0x21	; 33
 d60:	e9 f4       	brne	.+58     	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d66:	87 7f       	andi	r24, 0xF7	; 247
 d68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d6c:	e6 da       	rcall	.-2612   	; 0x33a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 d6e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d72:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d74:	ce 01       	movw	r24, r28
 d76:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d78:	cf 91       	pop	r28
 d7a:	73 cf       	rjmp	.-282    	; 0xc62 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d7c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest>
 d80:	81 32       	cpi	r24, 0x21	; 33
 d82:	61 f4       	brne	.+24     	; 0xd9c <CDC_Device_ProcessControlRequest+0x138>
 d84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d88:	87 7f       	andi	r24, 0xF7	; 247
 d8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d8e:	d5 da       	rcall	.-2646   	; 0x33a <Endpoint_ClearStatusStage>
 d90:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <USB_ControlRequest+0x2>
			}

			break;
	}
}
 d94:	ce 01       	movw	r24, r28
 d96:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d98:	cf 91       	pop	r28
 d9a:	63 cf       	rjmp	.-314    	; 0xc62 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 d9c:	df 91       	pop	r29
 d9e:	cf 91       	pop	r28
 da0:	08 95       	ret

00000da2 <__tablejump2__>:
 da2:	ee 0f       	add	r30, r30
 da4:	ff 1f       	adc	r31, r31
 da6:	00 24       	eor	r0, r0
 da8:	00 1c       	adc	r0, r0
 daa:	0b be       	out	0x3b, r0	; 59
 dac:	07 90       	elpm	r0, Z+
 dae:	f6 91       	elpm	r31, Z
 db0:	e0 2d       	mov	r30, r0
 db2:	09 94       	ijmp

00000db4 <fputs>:
 db4:	ef 92       	push	r14
 db6:	ff 92       	push	r15
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	db 01       	movw	r26, r22
 dc2:	13 96       	adiw	r26, 0x03	; 3
 dc4:	2c 91       	ld	r18, X
 dc6:	21 ff       	sbrs	r18, 1
 dc8:	18 c0       	rjmp	.+48     	; 0xdfa <fputs+0x46>
 dca:	8b 01       	movw	r16, r22
 dcc:	7c 01       	movw	r14, r24
 dce:	d0 e0       	ldi	r29, 0x00	; 0
 dd0:	c0 e0       	ldi	r28, 0x00	; 0
 dd2:	f7 01       	movw	r30, r14
 dd4:	81 91       	ld	r24, Z+
 dd6:	7f 01       	movw	r14, r30
 dd8:	88 23       	and	r24, r24
 dda:	61 f0       	breq	.+24     	; 0xdf4 <fputs+0x40>
 ddc:	d8 01       	movw	r26, r16
 dde:	18 96       	adiw	r26, 0x08	; 8
 de0:	ed 91       	ld	r30, X+
 de2:	fc 91       	ld	r31, X
 de4:	19 97       	sbiw	r26, 0x09	; 9
 de6:	b8 01       	movw	r22, r16
 de8:	09 95       	icall
 dea:	89 2b       	or	r24, r25
 dec:	91 f3       	breq	.-28     	; 0xdd2 <fputs+0x1e>
 dee:	df ef       	ldi	r29, 0xFF	; 255
 df0:	cf ef       	ldi	r28, 0xFF	; 255
 df2:	ef cf       	rjmp	.-34     	; 0xdd2 <fputs+0x1e>
 df4:	8d 2f       	mov	r24, r29
 df6:	9c 2f       	mov	r25, r28
 df8:	02 c0       	rjmp	.+4      	; 0xdfe <fputs+0x4a>
 dfa:	8f ef       	ldi	r24, 0xFF	; 255
 dfc:	9f ef       	ldi	r25, 0xFF	; 255
 dfe:	df 91       	pop	r29
 e00:	cf 91       	pop	r28
 e02:	1f 91       	pop	r17
 e04:	0f 91       	pop	r16
 e06:	ff 90       	pop	r15
 e08:	ef 90       	pop	r14
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
