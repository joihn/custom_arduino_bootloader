
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000ce2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005086  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a2b  00000000  00000000  00005fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b07  00000000  00000000  00007a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  0000a51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002486  00000000  00000000  0000abec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002be3  00000000  00000000  0000d072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000fc55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
   6:	00 00       	nop
   8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
   a:	00 00       	nop
   c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
   e:	00 00       	nop
  10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
  12:	00 00       	nop
  14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
  16:	00 00       	nop
  18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
  22:	00 00       	nop
  24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
  26:	00 00       	nop
  28:	a7 c2       	rjmp	.+1358   	; 0x578 <__vector_10>
  2a:	00 00       	nop
  2c:	aa c0       	rjmp	.+340    	; 0x182 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
  36:	00 00       	nop
  38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
  42:	00 00       	nop
  44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
  46:	00 00       	nop
  48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
  4e:	00 00       	nop
  50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
  52:	00 00       	nop
  54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
  56:	00 00       	nop
  58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
  5e:	00 00       	nop
  60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
  62:	00 00       	nop
  64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
  66:	00 00       	nop
  68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
  6e:	00 00       	nop
  70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
  72:	00 00       	nop
  74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
  76:	00 00       	nop
  78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
  7e:	00 00       	nop
  80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
  82:	00 00       	nop
  84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
  86:	00 00       	nop
  88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
  8e:	00 00       	nop
  90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
  92:	00 00       	nop
  94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
  96:	00 00       	nop
  98:	f1 04       	cpc	r15, r1
  9a:	13 05       	cpc	r17, r3
  9c:	00 06       	cpc	r0, r16
  9e:	13 05       	cpc	r17, r3
  a0:	00 06       	cpc	r0, r16
  a2:	58 05       	cpc	r21, r8
  a4:	7b 05       	cpc	r23, r11
  a6:	00 06       	cpc	r0, r16
  a8:	cd 05       	cpc	r28, r13
  aa:	df 05       	cpc	r29, r15

000000ac <ProductString>:
  ac:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  bc:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000cc <ManufacturerString>:
  cc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  dc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e6 <LanguageString>:
  e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
  ea:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  fa:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 10a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 11a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 12a:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 01     .$...........@..
 13a:	00 00 05 25 01 01 01 09 05 81 02 40 00 01 00 00     ...%.......@....
 14a:	05 25 01 01 03                                      .%...

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 15f:	00 01 00                                            ...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_clear_bss>:
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
 176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
 178:	ae 30       	cpi	r26, 0x0E	; 14
 17a:	b2 07       	cpc	r27, r18
 17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
 17e:	e4 d0       	rcall	.+456    	; 0x348 <main>
 180:	74 c5       	rjmp	.+2792   	; 0xc6a <_exit>

00000182 <__bad_interrupt>:
 182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	89 2b       	or	r24, r25
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	08 95       	ret

0000018e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 18e:	84 b7       	in	r24, 0x34	; 52
 190:	87 7f       	andi	r24, 0xF7	; 247
 192:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	a8 95       	wdr
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 19e:	88 61       	ori	r24, 0x18	; 24
 1a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1a8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ba:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	8f 71       	andi	r24, 0x1F	; 31
 1c0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1c2:	8d b1       	in	r24, 0x0d	; 13
 1c4:	8f 7c       	andi	r24, 0xCF	; 207
 1c6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	80 6e       	ori	r24, 0xE0	; 224
 1cc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1ce:	8e b1       	in	r24, 0x0e	; 14
 1d0:	80 63       	ori	r24, 0x30	; 48
 1d2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 6f       	ori	r24, 0xF0	; 240
 1d8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1e0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1e2:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1e4:	b3 c1       	rjmp	.+870    	; 0x54c <USB_Init>

000001e6 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1e6:	80 ea       	ldi	r24, 0xA0	; 160
 1e8:	cd cf       	rjmp	.-102    	; 0x184 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and MIDI management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	cb cf       	rjmp	.-106    	; 0x184 <LEDs_SetAllLEDs>

000001ee <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the MIDI management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1ee:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 1f0:	42 e3       	ldi	r20, 0x32	; 50
 1f2:	61 e8       	ldi	r22, 0x81	; 129
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	df d0       	rcall	.+446    	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>
 1f8:	c8 2f       	mov	r28, r24
 1fa:	42 e3       	ldi	r20, 0x32	; 50
 1fc:	60 e8       	ldi	r22, 0x80	; 128
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	da d0       	rcall	.+436    	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>
	                                            MIDI_STREAM_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MIDI_STREAM_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 202:	88 23       	and	r24, r24
 204:	11 f0       	breq	.+4      	; 0x20a <EVENT_USB_Device_ConfigurationChanged+0x1c>
 206:	c1 11       	cpse	r28, r1
 208:	02 c0       	rjmp	.+4      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x20>
 20a:	80 e9       	ldi	r24, 0x90	; 144
 20c:	01 c0       	rjmp	.+2      	; 0x210 <EVENT_USB_Device_ConfigurationChanged+0x22>
}
 20e:	80 e6       	ldi	r24, 0x60	; 96
	                                            MIDI_STREAM_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MIDI_STREAM_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 210:	cf 91       	pop	r28
 212:	b8 cf       	rjmp	.-144    	; 0x184 <LEDs_SetAllLEDs>

00000214 <MIDI_Task>:

/** Task to handle the generation of MIDI note change events in response to presses of the board joystick, and send them
 *  to the host.
 */
void MIDI_Task(void)
{
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <MIDI_Task+0x8>
 21c:	00 d0       	rcall	.+0      	; 0x21e <MIDI_Task+0xa>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	static uint8_t PrevJoystickStatus;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	09 f0       	breq	.+2      	; 0x22c <MIDI_Task+0x18>
 22a:	86 c0       	rjmp	.+268    	; 0x338 <MIDI_Task+0x124>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 232:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);

	if (Endpoint_IsINReady())
 236:	80 ff       	sbrs	r24, 0
 238:	52 c0       	rjmp	.+164    	; 0x2de <MIDI_Task+0xca>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 23a:	83 b1       	in	r24, 0x03	; 3
 23c:	1c b1       	in	r17, 0x0c	; 12
 23e:	10 95       	com	r17
 240:	10 73       	andi	r17, 0x30	; 48
 242:	16 95       	lsr	r17
 244:	80 95       	com	r24
 246:	80 7e       	andi	r24, 0xE0	; 224
 248:	18 2b       	or	r17, r24
	{
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 24a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	21 27       	eor	r18, r17

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 250:	62 9b       	sbis	0x0c, 2	; 12
 252:	02 c0       	rjmp	.+4      	; 0x258 <MIDI_Task+0x44>
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	01 c0       	rjmp	.+2      	; 0x25a <MIDI_Task+0x46>
 258:	39 e0       	ldi	r19, 0x09	; 9

		if (JoystickChanges & JOY_LEFT)
 25a:	26 ff       	sbrs	r18, 6
 25c:	04 c0       	rjmp	.+8      	; 0x266 <MIDI_Task+0x52>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 25e:	16 fd       	sbrc	r17, 6
 260:	04 c0       	rjmp	.+8      	; 0x26a <MIDI_Task+0x56>
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	03 c0       	rjmp	.+6      	; 0x26c <MIDI_Task+0x58>

	Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);

	if (Endpoint_IsINReady())
	{
		uint8_t MIDICommand = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	01 c0       	rjmp	.+2      	; 0x26c <MIDI_Task+0x58>
		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

		if (JoystickChanges & JOY_LEFT)
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 26a:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
 26c:	27 ff       	sbrs	r18, 7
 26e:	05 c0       	rjmp	.+10     	; 0x27a <MIDI_Task+0x66>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3D;
 270:	9d e3       	ldi	r25, 0x3D	; 61
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 272:	17 fd       	sbrc	r17, 7
 274:	04 c0       	rjmp	.+8      	; 0x27e <MIDI_Task+0x6a>
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	03 c0       	rjmp	.+6      	; 0x280 <MIDI_Task+0x6c>
 27a:	9c e3       	ldi	r25, 0x3C	; 60
 27c:	01 c0       	rjmp	.+2      	; 0x280 <MIDI_Task+0x6c>
 27e:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
 280:	23 ff       	sbrs	r18, 3
 282:	06 c0       	rjmp	.+12     	; 0x290 <MIDI_Task+0x7c>
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3E;
 284:	9e e3       	ldi	r25, 0x3E	; 62
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 286:	13 fd       	sbrc	r17, 3
 288:	02 c0       	rjmp	.+4      	; 0x28e <MIDI_Task+0x7a>
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	01 c0       	rjmp	.+2      	; 0x290 <MIDI_Task+0x7c>
 28e:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
 290:	24 ff       	sbrs	r18, 4
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <MIDI_Task+0x8c>
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3F;
 294:	9f e3       	ldi	r25, 0x3F	; 63
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 296:	14 fd       	sbrc	r17, 4
 298:	02 c0       	rjmp	.+4      	; 0x29e <MIDI_Task+0x8a>
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <MIDI_Task+0x8c>
 29e:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
 2a0:	25 ff       	sbrs	r18, 5
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <MIDI_Task+0x98>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2a4:	15 fd       	sbrc	r17, 5
 2a6:	45 c0       	rjmp	.+138    	; 0x332 <MIDI_Task+0x11e>
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	44 c0       	rjmp	.+136    	; 0x334 <MIDI_Task+0x120>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
 2ac:	88 23       	and	r24, r24
 2ae:	a9 f0       	breq	.+42     	; 0x2da <MIDI_Task+0xc6>
		{
			MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 2b0:	28 2f       	mov	r18, r24
 2b2:	22 95       	swap	r18
 2b4:	2f 70       	andi	r18, 0x0F	; 15
 2b6:	29 83       	std	Y+1, r18	; 0x01
 2b8:	83 2b       	or	r24, r19
 2ba:	8a 83       	std	Y+2, r24	; 0x02
 2bc:	9b 83       	std	Y+3, r25	; 0x03
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	8c 83       	std	Y+4, r24	; 0x04
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};

			/* Write the MIDI event packet to the endpoint */
			Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	1c d2       	rcall	.+1080   	; 0x708 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2d4:	8e 77       	andi	r24, 0x7E	; 126
 2d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			/* Send the data in the endpoint to the host */
			Endpoint_ClearIN();
		}

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
 2da:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the MIDI OUT stream */
	Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPNUM);

	/* Check if a MIDI command has been received */
	if (Endpoint_IsOUTReceived())
 2e8:	82 ff       	sbrs	r24, 2
 2ea:	26 c0       	rjmp	.+76     	; 0x338 <MIDI_Task+0x124>
	{
		MIDI_EventPacket_t MIDIEvent;

		/* Read the MIDI event packet from the endpoint */
		Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	51 d2       	rcall	.+1186   	; 0x79c <Endpoint_Read_Stream_LE>

		/* Check to see if the sent command is a note on message with a non-zero velocity */
		if ((MIDIEvent.Command == (MIDI_COMMAND_NOTE_ON >> 4)) && (MIDIEvent.Data3 > 0))
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	8f 70       	andi	r24, 0x0F	; 15
 2fe:	89 30       	cpi	r24, 0x09	; 9
 300:	51 f4       	brne	.+20     	; 0x316 <MIDI_Task+0x102>
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	88 23       	and	r24, r24
 306:	39 f0       	breq	.+14     	; 0x316 <MIDI_Task+0x102>
		{
			/* Change LEDs depending on the pitch of the sent note */
			LEDs_SetAllLEDs(MIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	81 34       	cpi	r24, 0x41	; 65
 30c:	10 f4       	brcc	.+4      	; 0x312 <MIDI_Task+0xfe>
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	03 c0       	rjmp	.+6      	; 0x318 <MIDI_Task+0x104>
 312:	80 e1       	ldi	r24, 0x10	; 16
		}
		else
		{
			/* Turn off all LEDs in response to non Note On messages */
			LEDs_SetAllLEDs(LEDS_NO_LEDS);
 314:	01 c0       	rjmp	.+2      	; 0x318 <MIDI_Task+0x104>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	35 df       	rcall	.-406    	; 0x184 <LEDs_SetAllLEDs>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 31a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 31e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		}

		/* If the endpoint is now empty, clear the bank */
		if (!(Endpoint_BytesInEndpoint()))
 322:	89 2b       	or	r24, r25
 324:	49 f4       	brne	.+18     	; 0x338 <MIDI_Task+0x124>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 326:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 32a:	8b 77       	andi	r24, 0x7B	; 123
 32c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 330:	03 c0       	rjmp	.+6      	; 0x338 <MIDI_Task+0x124>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 332:	80 e9       	ldi	r24, 0x90	; 144
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 334:	9b e3       	ldi	r25, 0x3B	; 59
 336:	bc cf       	rjmp	.-136    	; 0x2b0 <MIDI_Task+0x9c>
		{
			/* Clear the endpoint ready for new packet */
			Endpoint_ClearOUT();
		}
	}
}
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 348:	22 df       	rcall	.-444    	; 0x18e <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	1b df       	rcall	.-458    	; 0x184 <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		MIDI_Task();
 34e:	78 94       	sei
 350:	61 df       	rcall	.-318    	; 0x214 <MIDI_Task>
		USB_USBTask();
 352:	70 d4       	rcall	.+2272   	; 0xc34 <USB_USBTask>
 354:	fd cf       	rjmp	.-6      	; 0x350 <main+0x8>

00000356 <CALLBACK_USB_GetDescriptor>:
 356:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 358:	33 27       	eor	r19, r19
 35a:	22 30       	cpi	r18, 0x02	; 2
 35c:	31 05       	cpc	r19, r1
 35e:	59 f0       	breq	.+22     	; 0x376 <CALLBACK_USB_GetDescriptor+0x20>
 360:	23 30       	cpi	r18, 0x03	; 3
 362:	31 05       	cpc	r19, r1
 364:	69 f0       	breq	.+26     	; 0x380 <CALLBACK_USB_GetDescriptor+0x2a>
 366:	21 30       	cpi	r18, 0x01	; 1
 368:	31 05       	cpc	r19, r1
 36a:	e9 f4       	brne	.+58     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 36c:	82 e1       	ldi	r24, 0x12	; 18
 36e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 370:	2f e4       	ldi	r18, 0x4F	; 79
 372:	31 e0       	ldi	r19, 0x01	; 1
 374:	1c c0       	rjmp	.+56     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 376:	85 e6       	ldi	r24, 0x65	; 101
 378:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 37a:	2a ee       	ldi	r18, 0xEA	; 234
 37c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 37e:	17 c0       	rjmp	.+46     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 380:	99 27       	eor	r25, r25
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 05       	cpc	r25, r1
 386:	49 f0       	breq	.+18     	; 0x39a <CALLBACK_USB_GetDescriptor+0x44>
 388:	28 f0       	brcs	.+10     	; 0x394 <CALLBACK_USB_GetDescriptor+0x3e>
 38a:	02 97       	sbiw	r24, 0x02	; 2
 38c:	61 f4       	brne	.+24     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 38e:	ec ea       	ldi	r30, 0xAC	; 172
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	05 c0       	rjmp	.+10     	; 0x39e <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 394:	e6 ee       	ldi	r30, 0xE6	; 230
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 39a:	ec ec       	ldi	r30, 0xCC	; 204
 39c:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	84 91       	lpm	r24, Z
 3a0:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 3a2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3ae:	fa 01       	movw	r30, r20
 3b0:	31 83       	std	Z+1, r19	; 0x01
 3b2:	20 83       	st	Z, r18
	return Size;
}
 3b4:	08 95       	ret

000003b6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 3b6:	98 2f       	mov	r25, r24
 3b8:	97 30       	cpi	r25, 0x07	; 7
 3ba:	68 f5       	brcc	.+90     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3c0:	98 17       	cp	r25, r24
 3c2:	39 f0       	breq	.+14     	; 0x3d2 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 3c4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3c8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3cc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <Endpoint_ConfigureEndpoint_Prv+0x22>
 3d2:	24 2f       	mov	r18, r20
 3d4:	76 2f       	mov	r23, r22
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	21 fd       	sbrc	r18, 1
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 3dc:	9f 5f       	subi	r25, 0xFF	; 255
 3de:	ec cf       	rjmp	.-40     	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv+0x2>
 3e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3e4:	3e 7f       	andi	r19, 0xFE	; 254
 3e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3ea:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3ee:	3d 7f       	andi	r19, 0xFD	; 253
 3f0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3f4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3f8:	31 60       	ori	r19, 0x01	; 1
 3fa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3fe:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 402:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 406:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 40a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 40e:	27 fd       	sbrc	r18, 7
 410:	e5 cf       	rjmp	.-54     	; 0x3dc <Endpoint_ConfigureEndpoint_Prv+0x26>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
 416:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret

0000041e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 41e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest>
 422:	87 ff       	sbrs	r24, 7
 424:	11 c0       	rjmp	.+34     	; 0x448 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 42a:	82 fd       	sbrc	r24, 2
 42c:	05 c0       	rjmp	.+10     	; 0x438 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 42e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 432:	81 11       	cpse	r24, r1
 434:	f8 cf       	rjmp	.-16     	; 0x426 <Endpoint_ClearStatusStage+0x8>
 436:	11 c0       	rjmp	.+34     	; 0x45a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 438:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43c:	8b 77       	andi	r24, 0x7B	; 123
 43e:	0b c0       	rjmp	.+22     	; 0x456 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 440:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 444:	88 23       	and	r24, r24
 446:	49 f0       	breq	.+18     	; 0x45a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 44c:	80 ff       	sbrs	r24, 0
 44e:	f8 cf       	rjmp	.-16     	; 0x440 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 450:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 454:	8e 77       	andi	r24, 0x7E	; 126
 456:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 45a:	08 95       	ret

0000045c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 45c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 460:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 464:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 466:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 46a:	84 2f       	mov	r24, r20
 46c:	81 70       	andi	r24, 0x01	; 1
 46e:	40 ff       	sbrs	r20, 0
 470:	23 c0       	rjmp	.+70     	; 0x4b8 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 476:	80 fd       	sbrc	r24, 0
 478:	1d c0       	rjmp	.+58     	; 0x4b4 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 47a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 47e:	88 23       	and	r24, r24
 480:	99 f0       	breq	.+38     	; 0x4a8 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 482:	85 30       	cpi	r24, 0x05	; 5
 484:	99 f0       	breq	.+38     	; 0x4ac <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 486:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 48a:	85 fd       	sbrc	r24, 5
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <Endpoint_WaitUntilReady+0x54>
 48e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 492:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 496:	24 17       	cp	r18, r20
 498:	35 07       	cpc	r19, r21
 49a:	29 f3       	breq	.-54     	; 0x466 <Endpoint_WaitUntilReady+0xa>
 49c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 49e:	11 f0       	breq	.+4      	; 0x4a4 <Endpoint_WaitUntilReady+0x48>
 4a0:	9a 01       	movw	r18, r20
 4a2:	e1 cf       	rjmp	.-62     	; 0x466 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 4a4:	84 e0       	ldi	r24, 0x04	; 4
 4a6:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4b8:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4bc:	42 ff       	sbrs	r20, 2
 4be:	dd cf       	rjmp	.-70     	; 0x47a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4c0:	08 95       	ret

000004c2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4ca:	49 d0       	rcall	.+146    	; 0x55e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4cc:	50 d0       	rcall	.+160    	; 0x56e <USB_INT_ClearAllInterrupts>
 4ce:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
 4d2:	88 81       	ld	r24, Y
 4d4:	8f 77       	andi	r24, 0x7F	; 127
 4d6:	88 83       	st	Y, r24
 4d8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	88 83       	st	Y, r24
 4de:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	88 83       	st	Y, r24
 4e4:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	80 68       	ori	r24, 0x80	; 128
 4ec:	80 83       	st	Z, r24
 4ee:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4f0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 4f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 4f8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 4fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 500:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	f8 01       	movw	r30, r16
 506:	80 81       	ld	r24, Z
 508:	8b 7f       	andi	r24, 0xFB	; 251
 50a:	80 83       	st	Z, r24
 50c:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	88 83       	st	Y, r24
 512:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	4e df       	rcall	.-356    	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>
 51a:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	80 83       	st	Z, r24
 524:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
 52e:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 530:	88 60       	ori	r24, 0x08	; 8
 532:	80 83       	st	Z, r24
 534:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 536:	80 81       	ld	r24, Z
 538:	8e 7f       	andi	r24, 0xFE	; 254
 53a:	80 83       	st	Z, r24
 53c:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	88 83       	st	Y, r24
 542:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	08 95       	ret

0000054c <USB_Init>:
 54c:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	81 60       	ori	r24, 0x01	; 1
 554:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_IsInitialized>

	USB_ResetInterface();
 55c:	b2 cf       	rjmp	.-156    	; 0x4c2 <USB_ResetInterface>

0000055e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 55e:	e8 ed       	ldi	r30, 0xD8	; 216
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	8c 7f       	andi	r24, 0xFC	; 252
 566:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 568:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 56c:	08 95       	ret

0000056e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 56e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 572:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 576:	08 95       	ret

00000578 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	0b b6       	in	r0, 0x3b	; 59
 584:	0f 92       	push	r0
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 59e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5a2:	82 ff       	sbrs	r24, 2
 5a4:	0a c0       	rjmp	.+20     	; 0x5ba <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 5a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5aa:	82 ff       	sbrs	r24, 2
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 5ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5b2:	8b 7f       	andi	r24, 0xFB	; 251
 5b4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5b8:	3c d3       	rcall	.+1656   	; 0xc32 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5ba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5be:	80 ff       	sbrs	r24, 0
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5c2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5c6:	80 ff       	sbrs	r24, 0
 5c8:	19 c0       	rjmp	.+50     	; 0x5fc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5ca:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 5ce:	8e 7f       	andi	r24, 0xFE	; 254
 5d0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5d4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5d8:	80 ff       	sbrs	r24, 0
 5da:	0c c0       	rjmp	.+24     	; 0x5f4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5dc:	8c e0       	ldi	r24, 0x0C	; 12
 5de:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5e4:	09 b4       	in	r0, 0x29	; 41
 5e6:	00 fe       	sbrs	r0, 0
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 5f0:	fa dd       	rcall	.-1036   	; 0x1e6 <EVENT_USB_Device_Connect>
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5f4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 5fa:	f7 dd       	rcall	.-1042   	; 0x1ea <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 600:	80 ff       	sbrs	r24, 0
 602:	18 c0       	rjmp	.+48     	; 0x634 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 604:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 608:	80 ff       	sbrs	r24, 0
 60a:	14 c0       	rjmp	.+40     	; 0x634 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 60c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 610:	8e 7f       	andi	r24, 0xFE	; 254
 612:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 616:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 61a:	80 61       	ori	r24, 0x10	; 16
 61c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 620:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 624:	80 62       	ori	r24, 0x20	; 32
 626:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 62a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 62c:	85 e0       	ldi	r24, 0x05	; 5
 62e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 632:	ff d2       	rcall	.+1534   	; 0xc32 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 634:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 638:	84 ff       	sbrs	r24, 4
 63a:	2d c0       	rjmp	.+90     	; 0x696 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 63c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 640:	84 ff       	sbrs	r24, 4
 642:	29 c0       	rjmp	.+82     	; 0x696 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 644:	8c e0       	ldi	r24, 0x0C	; 12
 646:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 648:	8e e0       	ldi	r24, 0x0E	; 14
 64a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 64c:	09 b4       	in	r0, 0x29	; 41
 64e:	00 fe       	sbrs	r0, 0
 650:	fd cf       	rjmp	.-6      	; 0x64c <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 652:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 656:	8f 7d       	andi	r24, 0xDF	; 223
 658:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 65c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 660:	8f 7e       	andi	r24, 0xEF	; 239
 662:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 666:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 66a:	8f 7e       	andi	r24, 0xEF	; 239
 66c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 670:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 674:	81 60       	ori	r24, 0x01	; 1
 676:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 67a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_ConfigurationNumber>
 67e:	81 11       	cpse	r24, r1
 680:	06 c0       	rjmp	.+12     	; 0x68e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 682:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 686:	87 fd       	sbrc	r24, 7
 688:	02 c0       	rjmp	.+4      	; 0x68e <__vector_10+0x116>
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	01 c0       	rjmp	.+2      	; 0x690 <__vector_10+0x118>
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 694:	ce d2       	rcall	.+1436   	; 0xc32 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 696:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 69a:	83 ff       	sbrs	r24, 3
 69c:	22 c0       	rjmp	.+68     	; 0x6e2 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 69e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6a2:	83 ff       	sbrs	r24, 3
 6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6aa:	87 7f       	andi	r24, 0xF7	; 247
 6ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 6b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6be:	8e 7f       	andi	r24, 0xFE	; 254
 6c0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6c8:	8e 7f       	andi	r24, 0xFE	; 254
 6ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6d2:	80 61       	ori	r24, 0x10	; 16
 6d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6d8:	42 e0       	ldi	r20, 0x02	; 2
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	6b de       	rcall	.-810    	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6e0:	a8 d2       	rcall	.+1360   	; 0xc32 <USB_Event_Stub>
 6e2:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0b be       	out	0x3b, r0	; 59
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <Endpoint_Write_Stream_LE>:
 708:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 70a:	df 92       	push	r13
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	ec 01       	movw	r28, r24
 71a:	8b 01       	movw	r16, r22
 71c:	7a 01       	movw	r14, r20
 71e:	9e de       	rcall	.-708    	; 0x45c <Endpoint_WaitUntilReady>
 720:	81 11       	cpse	r24, r1
 722:	33 c0       	rjmp	.+102    	; 0x78a <Endpoint_Write_Stream_LE+0x82>
 724:	e1 14       	cp	r14, r1
 726:	f1 04       	cpc	r15, r1
 728:	39 f0       	breq	.+14     	; 0x738 <Endpoint_Write_Stream_LE+0x30>
 72a:	f7 01       	movw	r30, r14
 72c:	80 81       	ld	r24, Z
 72e:	91 81       	ldd	r25, Z+1	; 0x01
 730:	08 1b       	sub	r16, r24
 732:	19 0b       	sbc	r17, r25
 734:	c8 0f       	add	r28, r24
 736:	d9 1f       	adc	r29, r25
 738:	c1 2c       	mov	r12, r1
 73a:	d1 2c       	mov	r13, r1
 73c:	01 15       	cp	r16, r1
 73e:	11 05       	cpc	r17, r1
 740:	19 f1       	breq	.+70     	; 0x788 <Endpoint_Write_Stream_LE+0x80>
 742:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 746:	85 fd       	sbrc	r24, 5
 748:	16 c0       	rjmp	.+44     	; 0x776 <Endpoint_Write_Stream_LE+0x6e>
 74a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 74e:	8e 77       	andi	r24, 0x7E	; 126
 750:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 754:	6f d2       	rcall	.+1246   	; 0xc34 <USB_USBTask>
 756:	e1 14       	cp	r14, r1
 758:	f1 04       	cpc	r15, r1
 75a:	49 f0       	breq	.+18     	; 0x76e <Endpoint_Write_Stream_LE+0x66>
 75c:	f7 01       	movw	r30, r14
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	c8 0e       	add	r12, r24
 764:	d9 1e       	adc	r13, r25
 766:	d1 82       	std	Z+1, r13	; 0x01
 768:	c0 82       	st	Z, r12
 76a:	85 e0       	ldi	r24, 0x05	; 5
 76c:	0e c0       	rjmp	.+28     	; 0x78a <Endpoint_Write_Stream_LE+0x82>
 76e:	76 de       	rcall	.-788    	; 0x45c <Endpoint_WaitUntilReady>
 770:	88 23       	and	r24, r24
 772:	21 f3       	breq	.-56     	; 0x73c <Endpoint_Write_Stream_LE+0x34>
 774:	0a c0       	rjmp	.+20     	; 0x78a <Endpoint_Write_Stream_LE+0x82>
 776:	89 91       	ld	r24, Y+
 778:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 77c:	01 50       	subi	r16, 0x01	; 1
 77e:	11 09       	sbc	r17, r1
 780:	ff ef       	ldi	r31, 0xFF	; 255
 782:	cf 1a       	sub	r12, r31
 784:	df 0a       	sbc	r13, r31
 786:	da cf       	rjmp	.-76     	; 0x73c <Endpoint_Write_Stream_LE+0x34>
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	df 90       	pop	r13
 798:	cf 90       	pop	r12
 79a:	08 95       	ret

0000079c <Endpoint_Read_Stream_LE>:
 79c:	cf 92       	push	r12
 79e:	df 92       	push	r13
 7a0:	ef 92       	push	r14
 7a2:	ff 92       	push	r15
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	ec 01       	movw	r28, r24
 7ae:	8b 01       	movw	r16, r22
 7b0:	7a 01       	movw	r14, r20
 7b2:	54 de       	rcall	.-856    	; 0x45c <Endpoint_WaitUntilReady>
 7b4:	81 11       	cpse	r24, r1
 7b6:	33 c0       	rjmp	.+102    	; 0x81e <Endpoint_Read_Stream_LE+0x82>
 7b8:	e1 14       	cp	r14, r1
 7ba:	f1 04       	cpc	r15, r1
 7bc:	39 f0       	breq	.+14     	; 0x7cc <Endpoint_Read_Stream_LE+0x30>
 7be:	f7 01       	movw	r30, r14
 7c0:	80 81       	ld	r24, Z
 7c2:	91 81       	ldd	r25, Z+1	; 0x01
 7c4:	08 1b       	sub	r16, r24
 7c6:	19 0b       	sbc	r17, r25
 7c8:	c8 0f       	add	r28, r24
 7ca:	d9 1f       	adc	r29, r25
 7cc:	c1 2c       	mov	r12, r1
 7ce:	d1 2c       	mov	r13, r1
 7d0:	01 15       	cp	r16, r1
 7d2:	11 05       	cpc	r17, r1
 7d4:	19 f1       	breq	.+70     	; 0x81c <Endpoint_Read_Stream_LE+0x80>
 7d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7da:	85 fd       	sbrc	r24, 5
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <Endpoint_Read_Stream_LE+0x6e>
 7de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7e2:	8b 77       	andi	r24, 0x7B	; 123
 7e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7e8:	25 d2       	rcall	.+1098   	; 0xc34 <USB_USBTask>
 7ea:	e1 14       	cp	r14, r1
 7ec:	f1 04       	cpc	r15, r1
 7ee:	49 f0       	breq	.+18     	; 0x802 <Endpoint_Read_Stream_LE+0x66>
 7f0:	f7 01       	movw	r30, r14
 7f2:	80 81       	ld	r24, Z
 7f4:	91 81       	ldd	r25, Z+1	; 0x01
 7f6:	c8 0e       	add	r12, r24
 7f8:	d9 1e       	adc	r13, r25
 7fa:	d1 82       	std	Z+1, r13	; 0x01
 7fc:	c0 82       	st	Z, r12
 7fe:	85 e0       	ldi	r24, 0x05	; 5
 800:	0e c0       	rjmp	.+28     	; 0x81e <Endpoint_Read_Stream_LE+0x82>
 802:	2c de       	rcall	.-936    	; 0x45c <Endpoint_WaitUntilReady>
 804:	88 23       	and	r24, r24
 806:	21 f3       	breq	.-56     	; 0x7d0 <Endpoint_Read_Stream_LE+0x34>
 808:	0a c0       	rjmp	.+20     	; 0x81e <Endpoint_Read_Stream_LE+0x82>
 80a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 80e:	89 93       	st	Y+, r24
 810:	01 50       	subi	r16, 0x01	; 1
 812:	11 09       	sbc	r17, r1
 814:	ff ef       	ldi	r31, 0xFF	; 255
 816:	cf 1a       	sub	r12, r31
 818:	df 0a       	sbc	r13, r31
 81a:	da cf       	rjmp	.-76     	; 0x7d0 <Endpoint_Read_Stream_LE+0x34>
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	df 90       	pop	r13
 82c:	cf 90       	pop	r12
 82e:	08 95       	ret

00000830 <Endpoint_Write_Control_Stream_LE>:
 830:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <USB_ControlRequest+0x6>
 834:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <USB_ControlRequest+0x7>
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 f0       	brcs	.+18     	; 0x850 <Endpoint_Write_Control_Stream_LE+0x20>
 83e:	61 15       	cp	r22, r1
 840:	71 05       	cpc	r23, r1
 842:	39 f4       	brne	.+14     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x22>
 844:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 848:	2e 77       	andi	r18, 0x7E	; 126
 84a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 84e:	01 c0       	rjmp	.+2      	; 0x852 <Endpoint_Write_Control_Stream_LE+0x22>
 850:	b9 01       	movw	r22, r18
 852:	fc 01       	movw	r30, r24
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	61 15       	cp	r22, r1
 858:	71 05       	cpc	r23, r1
 85a:	69 f1       	breq	.+90     	; 0x8b6 <Endpoint_Write_Control_Stream_LE+0x86>
 85c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 860:	88 23       	and	r24, r24
 862:	d1 f1       	breq	.+116    	; 0x8d8 <Endpoint_Write_Control_Stream_LE+0xa8>
 864:	85 30       	cpi	r24, 0x05	; 5
 866:	d1 f1       	breq	.+116    	; 0x8dc <Endpoint_Write_Control_Stream_LE+0xac>
 868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 86c:	83 fd       	sbrc	r24, 3
 86e:	32 c0       	rjmp	.+100    	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0xa4>
 870:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 874:	82 fd       	sbrc	r24, 2
 876:	28 c0       	rjmp	.+80     	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x98>
 878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 87c:	80 ff       	sbrs	r24, 0
 87e:	eb cf       	rjmp	.-42     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x26>
 880:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 884:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 888:	61 15       	cp	r22, r1
 88a:	71 05       	cpc	r23, r1
 88c:	51 f0       	breq	.+20     	; 0x8a2 <Endpoint_Write_Control_Stream_LE+0x72>
 88e:	88 30       	cpi	r24, 0x08	; 8
 890:	91 05       	cpc	r25, r1
 892:	38 f4       	brcc	.+14     	; 0x8a2 <Endpoint_Write_Control_Stream_LE+0x72>
 894:	21 91       	ld	r18, Z+
 896:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 89a:	61 50       	subi	r22, 0x01	; 1
 89c:	71 09       	sbc	r23, r1
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	f3 cf       	rjmp	.-26     	; 0x888 <Endpoint_Write_Control_Stream_LE+0x58>
 8a2:	21 e0       	ldi	r18, 0x01	; 1
 8a4:	08 97       	sbiw	r24, 0x08	; 8
 8a6:	09 f0       	breq	.+2      	; 0x8aa <Endpoint_Write_Control_Stream_LE+0x7a>
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8ae:	8e 77       	andi	r24, 0x7E	; 126
 8b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b4:	d0 cf       	rjmp	.-96     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x26>
 8b6:	21 11       	cpse	r18, r1
 8b8:	d1 cf       	rjmp	.-94     	; 0x85c <Endpoint_Write_Control_Stream_LE+0x2c>
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x98>
 8bc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 8c0:	88 23       	and	r24, r24
 8c2:	51 f0       	breq	.+20     	; 0x8d8 <Endpoint_Write_Control_Stream_LE+0xa8>
 8c4:	85 30       	cpi	r24, 0x05	; 5
 8c6:	51 f0       	breq	.+20     	; 0x8dc <Endpoint_Write_Control_Stream_LE+0xac>
 8c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8cc:	82 ff       	sbrs	r24, 2
 8ce:	f6 cf       	rjmp	.-20     	; 0x8bc <Endpoint_Write_Control_Stream_LE+0x8c>
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	08 95       	ret
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	08 95       	ret
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	08 95       	ret
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	08 95       	ret

000008e0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8e0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <USB_ControlRequest+0x6>
 8e4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <USB_ControlRequest+0x7>
 8e8:	26 17       	cp	r18, r22
 8ea:	37 07       	cpc	r19, r23
 8ec:	48 f0       	brcs	.+18     	; 0x900 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8ee:	61 15       	cp	r22, r1
 8f0:	71 05       	cpc	r23, r1
 8f2:	39 f4       	brne	.+14     	; 0x902 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8f8:	2e 77       	andi	r18, 0x7E	; 126
 8fa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <Endpoint_Write_Control_PStream_LE+0x22>
 900:	b9 01       	movw	r22, r18
 902:	fc 01       	movw	r30, r24
 904:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	71 f1       	breq	.+92     	; 0x968 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 90c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 910:	88 23       	and	r24, r24
 912:	d9 f1       	breq	.+118    	; 0x98a <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 914:	85 30       	cpi	r24, 0x05	; 5
 916:	d9 f1       	breq	.+118    	; 0x98e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 91c:	83 fd       	sbrc	r24, 3
 91e:	33 c0       	rjmp	.+102    	; 0x986 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 920:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 924:	82 fd       	sbrc	r24, 2
 926:	29 c0       	rjmp	.+82     	; 0x97a <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 92c:	80 ff       	sbrs	r24, 0
 92e:	eb cf       	rjmp	.-42     	; 0x906 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 930:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 934:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 938:	61 15       	cp	r22, r1
 93a:	71 05       	cpc	r23, r1
 93c:	59 f0       	breq	.+22     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x74>
 93e:	88 30       	cpi	r24, 0x08	; 8
 940:	91 05       	cpc	r25, r1
 942:	40 f4       	brcc	.+16     	; 0x954 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 944:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 946:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 94a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 94c:	61 50       	subi	r22, 0x01	; 1
 94e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	f2 cf       	rjmp	.-28     	; 0x938 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 954:	21 e0       	ldi	r18, 0x01	; 1
 956:	08 97       	sbiw	r24, 0x08	; 8
 958:	09 f0       	breq	.+2      	; 0x95c <Endpoint_Write_Control_PStream_LE+0x7c>
 95a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 95c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 960:	8e 77       	andi	r24, 0x7E	; 126
 962:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 966:	cf cf       	rjmp	.-98     	; 0x906 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 968:	21 11       	cpse	r18, r1
 96a:	d0 cf       	rjmp	.-96     	; 0x90c <Endpoint_Write_Control_PStream_LE+0x2c>
 96c:	06 c0       	rjmp	.+12     	; 0x97a <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 96e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 972:	88 23       	and	r24, r24
 974:	51 f0       	breq	.+20     	; 0x98a <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 976:	85 30       	cpi	r24, 0x05	; 5
 978:	51 f0       	breq	.+20     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 97a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 97e:	82 ff       	sbrs	r24, 2
 980:	f6 cf       	rjmp	.-20     	; 0x96e <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 98e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 990:	08 95       	ret

00000992 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	aa 97       	sbiw	r28, 0x2a	; 42
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	e6 e0       	ldi	r30, 0x06	; 6
 9ac:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9ae:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9b4:	21 e0       	ldi	r18, 0x01	; 1
 9b6:	ee 30       	cpi	r30, 0x0E	; 14
 9b8:	f2 07       	cpc	r31, r18
 9ba:	c9 f7       	brne	.-14     	; 0x9ae <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9bc:	3a d1       	rcall	.+628    	; 0xc32 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 9c2:	83 ff       	sbrs	r24, 3
 9c4:	1d c1       	rjmp	.+570    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 9ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <USB_ControlRequest+0x1>
 9ce:	49 2f       	mov	r20, r25
 9d0:	50 e0       	ldi	r21, 0x00	; 0
 9d2:	4a 30       	cpi	r20, 0x0A	; 10
 9d4:	51 05       	cpc	r21, r1
 9d6:	08 f0       	brcs	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0x48>
 9d8:	13 c1       	rjmp	.+550    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
 9da:	fa 01       	movw	r30, r20
 9dc:	e4 5b       	subi	r30, 0xB4	; 180
 9de:	ff 4f       	sbci	r31, 0xFF	; 255
 9e0:	3b c1       	rjmp	.+630    	; 0xc58 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9e2:	80 38       	cpi	r24, 0x80	; 128
 9e4:	81 f0       	breq	.+32     	; 0xa06 <USB_Device_ProcessControlRequest+0x74>
 9e6:	82 38       	cpi	r24, 0x82	; 130
 9e8:	09 f0       	breq	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x5a>
 9ea:	0a c1       	rjmp	.+532    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_ControlRequest+0x4>
 9f0:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 9fa:	85 fb       	bst	r24, 5
 9fc:	88 27       	eor	r24, r24
 9fe:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a00:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a06:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a0a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <USB_Device_RemoteWakeupEnabled>
 a0e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a10:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a12:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a16:	97 7f       	andi	r25, 0xF7	; 247
 a18:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 a20:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a24:	c5 c0       	rjmp	.+394    	; 0xbb0 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a26:	28 2f       	mov	r18, r24
 a28:	2d 7f       	andi	r18, 0xFD	; 253
 a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x9c>
 a2c:	e9 c0       	rjmp	.+466    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a2e:	88 23       	and	r24, r24
 a30:	19 f0       	breq	.+6      	; 0xa38 <USB_Device_ProcessControlRequest+0xa6>
 a32:	82 30       	cpi	r24, 0x02	; 2
 a34:	61 f0       	breq	.+24     	; 0xa4e <USB_Device_ProcessControlRequest+0xbc>
 a36:	e4 c0       	rjmp	.+456    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a38:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	09 f0       	breq	.+2      	; 0xa42 <USB_Device_ProcessControlRequest+0xb0>
 a40:	df c0       	rjmp	.+446    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a42:	93 30       	cpi	r25, 0x03	; 3
 a44:	09 f0       	breq	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0xb6>
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_Device_RemoteWakeupEnabled>
 a4c:	2b c0       	rjmp	.+86     	; 0xaa4 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a4e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 a52:	81 11       	cpse	r24, r1
 a54:	27 c0       	rjmp	.+78     	; 0xaa4 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a56:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <USB_ControlRequest+0x4>
 a5a:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a5c:	09 f4       	brne	.+2      	; 0xa60 <USB_Device_ProcessControlRequest+0xce>
 a5e:	d0 c0       	rjmp	.+416    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a60:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a64:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a68:	20 ff       	sbrs	r18, 0
 a6a:	1c c0       	rjmp	.+56     	; 0xaa4 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a6c:	93 30       	cpi	r25, 0x03	; 3
 a6e:	21 f4       	brne	.+8      	; 0xa78 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a74:	80 62       	ori	r24, 0x20	; 32
 a76:	14 c0       	rjmp	.+40     	; 0xaa0 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a78:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a7c:	90 61       	ori	r25, 0x10	; 16
 a7e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a82:	21 e0       	ldi	r18, 0x01	; 1
 a84:	30 e0       	ldi	r19, 0x00	; 0
 a86:	a9 01       	movw	r20, r18
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <USB_Device_ProcessControlRequest+0xfc>
 a8a:	44 0f       	add	r20, r20
 a8c:	55 1f       	adc	r21, r21
 a8e:	8a 95       	dec	r24
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <USB_Device_ProcessControlRequest+0xf8>
 a92:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 a96:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a9a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a9e:	88 60       	ori	r24, 0x08	; 8
 aa0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aa4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aac:	87 7f       	andi	r24, 0xF7	; 247
 aae:	83 c0       	rjmp	.+262    	; 0xbb6 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ab0:	81 11       	cpse	r24, r1
 ab2:	a6 c0       	rjmp	.+332    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 ab4:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 ab8:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 aba:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 abc:	f8 94       	cli
 abe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ac2:	87 7f       	andi	r24, 0xF7	; 247
 ac4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ac8:	aa dc       	rcall	.-1708   	; 0x41e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ace:	80 ff       	sbrs	r24, 0
 ad0:	fc cf       	rjmp	.-8      	; 0xaca <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ad2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ad6:	80 78       	andi	r24, 0x80	; 128
 ad8:	81 2b       	or	r24, r17

				UDADDR = Temp;
 ada:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 ade:	80 68       	ori	r24, 0x80	; 128
 ae0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ae4:	11 11       	cpse	r17, r1
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <USB_Device_ProcessControlRequest+0x15a>
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	01 c0       	rjmp	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x15c>
 aec:	83 e0       	ldi	r24, 0x03	; 3
 aee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 af2:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 af4:	85 c0       	rjmp	.+266    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 af6:	80 58       	subi	r24, 0x80	; 128
 af8:	82 30       	cpi	r24, 0x02	; 2
 afa:	08 f0       	brcs	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0x16c>
 afc:	81 c0       	rjmp	.+258    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 afe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 b02:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <USB_ControlRequest+0x3>
 b06:	8c 3d       	cpi	r24, 0xDC	; 220
 b08:	53 e0       	ldi	r21, 0x03	; 3
 b0a:	95 07       	cpc	r25, r21
 b0c:	71 f5       	brne	.+92     	; 0xb6a <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b0e:	83 e0       	ldi	r24, 0x03	; 3
 b10:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b12:	8a e2       	ldi	r24, 0x2A	; 42
 b14:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b16:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b18:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b1a:	de 01       	movw	r26, r28
 b1c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b1e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b20:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b22:	51 e2       	ldi	r21, 0x21	; 33
 b24:	e3 2f       	mov	r30, r19
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b2c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b2e:	20 ff       	sbrs	r18, 0
 b30:	03 c0       	rjmp	.+6      	; 0xb38 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 b32:	e2 95       	swap	r30
 b34:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b36:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b38:	ef 70       	andi	r30, 0x0F	; 15
 b3a:	8e 2f       	mov	r24, r30
 b3c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b3e:	ea 30       	cpi	r30, 0x0A	; 10
 b40:	10 f0       	brcs	.+4      	; 0xb46 <USB_Device_ProcessControlRequest+0x1b4>
 b42:	c7 96       	adiw	r24, 0x37	; 55
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <USB_Device_ProcessControlRequest+0x1b6>
 b46:	c0 96       	adiw	r24, 0x30	; 48
 b48:	8d 93       	st	X+, r24
 b4a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b4c:	2f 5f       	subi	r18, 0xFF	; 255
 b4e:	24 31       	cpi	r18, 0x14	; 20
 b50:	49 f7       	brne	.-46     	; 0xb24 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b52:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b58:	87 7f       	andi	r24, 0xF7	; 247
 b5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b5e:	6a e2       	ldi	r22, 0x2A	; 42
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	ce 01       	movw	r24, r28
 b64:	01 96       	adiw	r24, 0x01	; 1
 b66:	64 de       	rcall	.-824    	; 0x830 <Endpoint_Write_Control_Stream_LE>
 b68:	12 c0       	rjmp	.+36     	; 0xb8e <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b6a:	ae 01       	movw	r20, r28
 b6c:	4f 5f       	subi	r20, 0xFF	; 255
 b6e:	5f 4f       	sbci	r21, 0xFF	; 255
 b70:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <USB_ControlRequest+0x4>
 b74:	f0 db       	rcall	.-2080   	; 0x356 <CALLBACK_USB_GetDescriptor>
 b76:	bc 01       	movw	r22, r24
 b78:	89 2b       	or	r24, r25
 b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x1ec>
 b7c:	41 c0       	rjmp	.+130    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
 b7e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b82:	97 7f       	andi	r25, 0xF7	; 247
 b84:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	9a 81       	ldd	r25, Y+2	; 0x02
 b8c:	a9 de       	rcall	.-686    	; 0x8e0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b92:	8b 77       	andi	r24, 0x7B	; 123
 b94:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b98:	33 c0       	rjmp	.+102    	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b9a:	80 38       	cpi	r24, 0x80	; 128
 b9c:	89 f5       	brne	.+98     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ba2:	87 7f       	andi	r24, 0xF7	; 247
 ba4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ba8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bb4:	8e 77       	andi	r24, 0x7E	; 126
 bb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bba:	31 dc       	rcall	.-1950   	; 0x41e <Endpoint_ClearStatusStage>
 bbc:	21 c0       	rjmp	.+66     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bbe:	81 11       	cpse	r24, r1
 bc0:	1f c0       	rjmp	.+62     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bc2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 bc6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <USB_ControlRequest+0x3>
 bca:	99 27       	eor	r25, r25
 bcc:	02 97       	sbiw	r24, 0x02	; 2
 bce:	c4 f4       	brge	.+48     	; 0xc00 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bd4:	87 7f       	andi	r24, 0xF7	; 247
 bd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bda:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x2>
 bde:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 be2:	1d dc       	rcall	.-1990   	; 0x41e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 be4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_ConfigurationNumber>
 be8:	81 11       	cpse	r24, r1
 bea:	06 c0       	rjmp	.+12     	; 0xbf8 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bec:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bf0:	87 fd       	sbrc	r24, 7
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <USB_Device_ProcessControlRequest+0x266>
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0x268>
 bf8:	84 e0       	ldi	r24, 0x04	; 4
 bfa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 bfe:	f7 da       	rcall	.-2578   	; 0x1ee <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c04:	83 ff       	sbrs	r24, 3
 c06:	0a c0       	rjmp	.+20     	; 0xc1c <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c0c:	80 62       	ori	r24, 0x20	; 32
 c0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c16:	87 7f       	andi	r24, 0xF7	; 247
 c18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c1c:	aa 96       	adiw	r28, 0x2a	; 42
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	0f 91       	pop	r16
 c30:	08 95       	ret

00000c32 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c32:	08 95       	ret

00000c34 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c34:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c36:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_DeviceState>
 c3a:	88 23       	and	r24, r24
 c3c:	59 f0       	breq	.+22     	; 0xc54 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c3e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c42:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c44:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c4c:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c4e:	a1 de       	rcall	.-702    	; 0x992 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c50:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c54:	cf 91       	pop	r28
 c56:	08 95       	ret

00000c58 <__tablejump2__>:
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	00 24       	eor	r0, r0
 c5e:	00 1c       	adc	r0, r0
 c60:	0b be       	out	0x3b, r0	; 59
 c62:	07 90       	elpm	r0, Z+
 c64:	f6 91       	elpm	r31, Z
 c66:	e0 2d       	mov	r30, r0
 c68:	09 94       	ijmp

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
