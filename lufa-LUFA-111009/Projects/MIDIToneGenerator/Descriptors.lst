   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  12               	.global	CALLBACK_USB_GetDescriptor
  14               	CALLBACK_USB_GetDescriptor:
  15               	.LFB97:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = USB_CSCP_NoDeviceClass,
  51:Descriptors.c **** 	.SubClass               = USB_CSCP_NoDeviceSubclass,
  52:Descriptors.c **** 	.Protocol               = USB_CSCP_NoDeviceProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x03EB,
  57:Descriptors.c **** 	.ProductID              = 0x2048,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYP
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize   = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces          = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber      = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex    = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes         = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption      = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.Audio_ControlInterface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber          = 0,
  94:Descriptors.c **** 			.AlternateSetting         = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints           = 0,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                    = AUDIO_CSCP_AudioClass,
  99:Descriptors.c **** 			.SubClass                 = AUDIO_CSCP_ControlSubclass,
 100:Descriptors.c **** 			.Protocol                 = AUDIO_CSCP_ControlProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex        = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.Audio_ControlInterface_SPC =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_Header,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.ACSpecification          = VERSION_BCD(01.00),
 111:Descriptors.c **** 			.TotalLength              = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 112:Descriptors.c **** 
 113:Descriptors.c **** 			.InCollection             = 1,
 114:Descriptors.c **** 			.InterfaceNumber          = 1,
 115:Descriptors.c **** 		},
 116:Descriptors.c **** 
 117:Descriptors.c **** 	.Audio_StreamInterface =
 118:Descriptors.c **** 		{
 119:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface
 120:Descriptors.c **** 
 121:Descriptors.c **** 			.InterfaceNumber          = 1,
 122:Descriptors.c **** 			.AlternateSetting         = 0,
 123:Descriptors.c **** 
 124:Descriptors.c **** 			.TotalEndpoints           = 2,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.Class                    = AUDIO_CSCP_AudioClass,
 127:Descriptors.c **** 			.SubClass                 = AUDIO_CSCP_MIDIStreamingSubclass,
 128:Descriptors.c **** 			.Protocol                 = AUDIO_CSCP_StreamingProtocol,
 129:Descriptors.c **** 
 130:Descriptors.c **** 			.InterfaceStrIndex        = NO_DESCRIPTOR
 131:Descriptors.c **** 		},
 132:Descriptors.c **** 
 133:Descriptors.c **** 	.Audio_StreamInterface_SPC =
 134:Descriptors.c **** 		{
 135:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t), .Type = DT
 136:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_General,
 137:Descriptors.c **** 
 138:Descriptors.c **** 			.AudioSpecification       = VERSION_BCD(01.00),
 139:Descriptors.c **** 
 140:Descriptors.c **** 			.TotalLength              = (sizeof(USB_Descriptor_Configuration_t) -
 141:Descriptors.c **** 			                             offsetof(USB_Descriptor_Configuration_t, Audio_StreamInterface_SPC)
 142:Descriptors.c **** 		},
 143:Descriptors.c **** 
 144:Descriptors.c **** 	.MIDI_In_Jack_Emb =
 145:Descriptors.c **** 		{
 146:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = DTYPE_CSIn
 147:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.JackType                 = MIDI_JACKTYPE_Embedded,
 150:Descriptors.c **** 			.JackID                   = 0x01,
 151:Descriptors.c **** 
 152:Descriptors.c **** 			.JackStrIndex             = NO_DESCRIPTOR
 153:Descriptors.c **** 		},
 154:Descriptors.c **** 
 155:Descriptors.c **** 	.MIDI_In_Jack_Ext =
 156:Descriptors.c **** 		{
 157:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = DTYPE_CSIn
 158:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.JackType                 = MIDI_JACKTYPE_External,
 161:Descriptors.c **** 			.JackID                   = 0x02,
 162:Descriptors.c **** 
 163:Descriptors.c **** 			.JackStrIndex             = NO_DESCRIPTOR
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.MIDI_Out_Jack_Emb =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = DTYPE_CSI
 169:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 170:Descriptors.c **** 
 171:Descriptors.c **** 			.JackType                 = MIDI_JACKTYPE_Embedded,
 172:Descriptors.c **** 			.JackID                   = 0x03,
 173:Descriptors.c **** 
 174:Descriptors.c **** 			.NumberOfPins             = 1,
 175:Descriptors.c **** 			.SourceJackID             = {0x02},
 176:Descriptors.c **** 			.SourcePinID              = {0x01},
 177:Descriptors.c **** 
 178:Descriptors.c **** 			.JackStrIndex             = NO_DESCRIPTOR
 179:Descriptors.c **** 		},
 180:Descriptors.c **** 
 181:Descriptors.c **** 	.MIDI_Out_Jack_Ext =
 182:Descriptors.c **** 		{
 183:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = DTYPE_CSI
 184:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 185:Descriptors.c **** 
 186:Descriptors.c **** 			.JackType                 = MIDI_JACKTYPE_External,
 187:Descriptors.c **** 			.JackID                   = 0x04,
 188:Descriptors.c **** 
 189:Descriptors.c **** 			.NumberOfPins             = 1,
 190:Descriptors.c **** 			.SourceJackID             = {0x01},
 191:Descriptors.c **** 			.SourcePinID              = {0x01},
 192:Descriptors.c **** 
 193:Descriptors.c **** 			.JackStrIndex             = NO_DESCRIPTOR
 194:Descriptors.c **** 		},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	.MIDI_In_Jack_Endpoint =
 197:Descriptors.c **** 		{
 198:Descriptors.c **** 			.Endpoint =
 199:Descriptors.c **** 				{
 200:Descriptors.c **** 					.Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t), .Type = DTY
 201:Descriptors.c **** 
 202:Descriptors.c **** 					.EndpointAddress     = (ENDPOINT_DIR_OUT | MIDI_STREAM_OUT_EPNUM),
 203:Descriptors.c **** 					.Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 204:Descriptors.c **** 					.EndpointSize        = MIDI_STREAM_EPSIZE,
 205:Descriptors.c **** 					.PollingIntervalMS   = 0x01
 206:Descriptors.c **** 				},
 207:Descriptors.c **** 
 208:Descriptors.c **** 			.Refresh                  = 0,
 209:Descriptors.c **** 			.SyncEndpointNumber       = 0
 210:Descriptors.c **** 		},
 211:Descriptors.c **** 
 212:Descriptors.c **** 	.MIDI_In_Jack_Endpoint_SPC =
 213:Descriptors.c **** 		{
 214:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type = DTYPE_
 215:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 216:Descriptors.c **** 
 217:Descriptors.c **** 			.TotalEmbeddedJacks       = 0x01,
 218:Descriptors.c **** 			.AssociatedJackID         = {0x01}
 219:Descriptors.c **** 		},
 220:Descriptors.c **** 
 221:Descriptors.c **** 	.MIDI_Out_Jack_Endpoint =
 222:Descriptors.c **** 		{
 223:Descriptors.c **** 			.Endpoint =
 224:Descriptors.c **** 				{
 225:Descriptors.c **** 					.Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t), .Type = DTY
 226:Descriptors.c **** 
 227:Descriptors.c **** 					.EndpointAddress     = (ENDPOINT_DIR_IN | MIDI_STREAM_IN_EPNUM),
 228:Descriptors.c **** 					.Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 229:Descriptors.c **** 					.EndpointSize        = MIDI_STREAM_EPSIZE,
 230:Descriptors.c **** 					.PollingIntervalMS   = 0x01
 231:Descriptors.c **** 				},
 232:Descriptors.c **** 
 233:Descriptors.c **** 			.Refresh                  = 0,
 234:Descriptors.c **** 			.SyncEndpointNumber       = 0
 235:Descriptors.c **** 		},
 236:Descriptors.c **** 
 237:Descriptors.c **** 	.MIDI_Out_Jack_Endpoint_SPC =
 238:Descriptors.c **** 		{
 239:Descriptors.c **** 			.Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type = DTYPE_
 240:Descriptors.c **** 			.Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 241:Descriptors.c **** 
 242:Descriptors.c **** 			.TotalEmbeddedJacks       = 0x01,
 243:Descriptors.c **** 			.AssociatedJackID         = {0x03}
 244:Descriptors.c **** 		}
 245:Descriptors.c **** };
 246:Descriptors.c **** 
 247:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 248:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 249:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 250:Descriptors.c ****  */
 251:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 252:Descriptors.c **** {
 253:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 254:Descriptors.c **** 
 255:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 256:Descriptors.c **** };
 257:Descriptors.c **** 
 258:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 259:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 260:Descriptors.c ****  *  Descriptor.
 261:Descriptors.c ****  */
 262:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 263:Descriptors.c **** {
 264:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 265:Descriptors.c **** 
 266:Descriptors.c **** 	.UnicodeString          = L"Dean Camera"
 267:Descriptors.c **** };
 268:Descriptors.c **** 
 269:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 270:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 271:Descriptors.c ****  *  Descriptor.
 272:Descriptors.c ****  */
 273:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 274:Descriptors.c **** {
 275:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(14), .Type = DTYPE_String},
 276:Descriptors.c **** 
 277:Descriptors.c **** 	.UnicodeString          = L"LUFA MIDI Demo"
 278:Descriptors.c **** };
 279:Descriptors.c **** 
 280:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 281:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 282:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 283:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 284:Descriptors.c ****  *  USB host.
 285:Descriptors.c ****  */
 286:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 287:Descriptors.c ****                                     const uint8_t wIndex,
 288:Descriptors.c ****                                     const void** const DescriptorAddress)
 289:Descriptors.c **** {
  17               		.loc 1 289 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 290:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 291:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 292:Descriptors.c **** 
 293:Descriptors.c **** 	const void* Address = NULL;
 294:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 295:Descriptors.c **** 
 296:Descriptors.c **** 	switch (DescriptorType)
  24               		.loc 1 296 0
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L12
 297:Descriptors.c **** 	{
 298:Descriptors.c **** 		case DTYPE_Device:
 299:Descriptors.c **** 			Address = &DeviceDescriptor;
 300:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 300 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 299:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 299 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L2
  44               	.LVL2:
  45               	.L3:
 301:Descriptors.c **** 			break;
 302:Descriptors.c **** 		case DTYPE_Configuration:
 303:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 304:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 304 0
  47 0020 85E6      		ldi r24,lo8(101)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 303:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 303 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 305:Descriptors.c **** 			break;
  53               		.loc 1 305 0
  54 0028 00C0      		rjmp .L2
  55               	.LVL4:
  56               	.L4:
 306:Descriptors.c **** 		case DTYPE_String:
 307:Descriptors.c **** 			switch (DescriptorNumber)
  57               		.loc 1 307 0
  58 002a 9927      		clr r25
  59               	.LVL5:
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 00F0      		brlo .L7
  64 0034 0297      		sbiw r24,2
  65 0036 01F4      		brne .L12
  66               	.LVL6:
  67               	.LBB2:
 308:Descriptors.c **** 			{
 309:Descriptors.c **** 				case 0x00:
 310:Descriptors.c **** 					Address = &LanguageString;
 311:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 312:Descriptors.c **** 					break;
 313:Descriptors.c **** 				case 0x01:
 314:Descriptors.c **** 					Address = &ManufacturerString;
 315:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 316:Descriptors.c **** 					break;
 317:Descriptors.c **** 				case 0x02:
 318:Descriptors.c **** 					Address = &ProductString;
 319:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  68               		.loc 1 319 0
  69 0038 E0E0      		ldi r30,lo8(ProductString)
  70 003a F0E0      		ldi r31,hi8(ProductString)
  71 003c 00C0      		rjmp .L13
  72               	.LVL7:
  73               	.L7:
  74               	.LBE2:
  75               	.LBB3:
 311:Descriptors.c **** 					break;
  76               		.loc 1 311 0
  77 003e E0E0      		ldi r30,lo8(LanguageString)
  78 0040 F0E0      		ldi r31,hi8(LanguageString)
  79 0042 00C0      		rjmp .L13
  80               	.LVL8:
  81               	.L6:
  82               	.LBE3:
  83               	.LBB4:
 315:Descriptors.c **** 					break;
  84               		.loc 1 315 0
  85 0044 E0E0      		ldi r30,lo8(ManufacturerString)
  86 0046 F0E0      		ldi r31,hi8(ManufacturerString)
  87               	.LVL9:
  88               	.L13:
  89               	.LBE4:
  90               	.LBB5:
  91               		.loc 1 319 0
  92               	/* #APP */
  93               	 ;  319 "Descriptors.c" 1
  94 0048 8491      		lpm r24, Z
  95               		
  96               	 ;  0 "" 2
  97               	.LVL10:
  98               	/* #NOAPP */
  99               	.LBE5:
 100 004a 90E0      		ldi r25,0
 101               	.LVL11:
 318:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 102               		.loc 1 318 0
 103 004c 9F01      		movw r18,r30
 320:Descriptors.c **** 					break;
 104               		.loc 1 320 0
 105 004e 00C0      		rjmp .L2
 106               	.LVL12:
 107               	.L12:
 294:Descriptors.c **** 
 108               		.loc 1 294 0
 109 0050 80E0      		ldi r24,0
 110 0052 90E0      		ldi r25,0
 293:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 111               		.loc 1 293 0
 112 0054 20E0      		ldi r18,0
 113 0056 30E0      		ldi r19,0
 114               	.LVL13:
 115               	.L2:
 321:Descriptors.c **** 			}
 322:Descriptors.c **** 
 323:Descriptors.c **** 			break;
 324:Descriptors.c **** 	}
 325:Descriptors.c **** 
 326:Descriptors.c **** 	*DescriptorAddress = Address;
 116               		.loc 1 326 0
 117 0058 FA01      		movw r30,r20
 118 005a 3183      		std Z+1,r19
 119 005c 2083      		st Z,r18
 327:Descriptors.c **** 	return Size;
 328:Descriptors.c **** }
 120               		.loc 1 328 0
 121 005e 0895      		ret
 122               		.cfi_endproc
 123               	.LFE97:
 125               	.global	ProductString
 126               		.section	.progmem.data,"a",@progbits
 129               	ProductString:
 130 0000 1E        		.byte	30
 131 0001 03        		.byte	3
 132 0002 4C00      		.string	"L"
 133 0004 5500      		.string	"U"
 134 0006 4600      		.string	"F"
 135 0008 4100      		.string	"A"
 136 000a 2000      		.string	" "
 137 000c 4D00      		.string	"M"
 138 000e 4900      		.string	"I"
 139 0010 4400      		.string	"D"
 140 0012 4900      		.string	"I"
 141 0014 2000      		.string	" "
 142 0016 4400      		.string	"D"
 143 0018 6500      		.string	"e"
 144 001a 6D00      		.string	"m"
 145 001c 6F00      		.string	"o"
 146 001e 00        		.string	""
 147 001f 00        		.string	""
 148               	.global	ManufacturerString
 151               	ManufacturerString:
 152 0020 18        		.byte	24
 153 0021 03        		.byte	3
 154 0022 4400      		.string	"D"
 155 0024 6500      		.string	"e"
 156 0026 6100      		.string	"a"
 157 0028 6E00      		.string	"n"
 158 002a 2000      		.string	" "
 159 002c 4300      		.string	"C"
 160 002e 6100      		.string	"a"
 161 0030 6D00      		.string	"m"
 162 0032 6500      		.string	"e"
 163 0034 7200      		.string	"r"
 164 0036 6100      		.string	"a"
 165 0038 00        		.string	""
 166 0039 00        		.string	""
 167               	.global	LanguageString
 170               	LanguageString:
 171 003a 04        		.byte	4
 172 003b 03        		.byte	3
 173 003c 0904      		.word	1033
 174               	.global	ConfigurationDescriptor
 177               	ConfigurationDescriptor:
 178 003e 09        		.byte	9
 179 003f 02        		.byte	2
 180 0040 6500      		.word	101
 181 0042 02        		.byte	2
 182 0043 01        		.byte	1
 183 0044 00        		.byte	0
 184 0045 C0        		.byte	-64
 185 0046 32        		.byte	50
 186 0047 09        		.byte	9
 187 0048 04        		.byte	4
 188 0049 00        		.byte	0
 189 004a 00        		.byte	0
 190 004b 00        		.byte	0
 191 004c 01        		.byte	1
 192 004d 01        		.byte	1
 193 004e 00        		.byte	0
 194 004f 00        		.byte	0
 195 0050 09        		.byte	9
 196 0051 24        		.byte	36
 197 0052 01        		.byte	1
 198 0053 0001      		.word	256
 199 0055 0900      		.word	9
 200 0057 01        		.byte	1
 201 0058 01        		.byte	1
 202 0059 09        		.byte	9
 203 005a 04        		.byte	4
 204 005b 01        		.byte	1
 205 005c 00        		.byte	0
 206 005d 02        		.byte	2
 207 005e 01        		.byte	1
 208 005f 03        		.byte	3
 209 0060 00        		.byte	0
 210 0061 00        		.byte	0
 211 0062 07        		.byte	7
 212 0063 24        		.byte	36
 213 0064 01        		.byte	1
 214 0065 0001      		.word	256
 215 0067 4100      		.word	65
 216 0069 06        		.byte	6
 217 006a 24        		.byte	36
 218 006b 02        		.byte	2
 219 006c 01        		.byte	1
 220 006d 01        		.byte	1
 221 006e 00        		.byte	0
 222 006f 06        		.byte	6
 223 0070 24        		.byte	36
 224 0071 02        		.byte	2
 225 0072 02        		.byte	2
 226 0073 02        		.byte	2
 227 0074 00        		.byte	0
 228 0075 09        		.byte	9
 229 0076 24        		.byte	36
 230 0077 03        		.byte	3
 231 0078 01        		.byte	1
 232 0079 03        		.byte	3
 233 007a 01        		.byte	1
 234 007b 02        		.byte	2
 235 007c 01        		.byte	1
 236 007d 00        		.byte	0
 237 007e 09        		.byte	9
 238 007f 24        		.byte	36
 239 0080 03        		.byte	3
 240 0081 02        		.byte	2
 241 0082 04        		.byte	4
 242 0083 01        		.byte	1
 243 0084 01        		.byte	1
 244 0085 01        		.byte	1
 245 0086 00        		.byte	0
 246 0087 09        		.byte	9
 247 0088 05        		.byte	5
 248 0089 01        		.byte	1
 249 008a 02        		.byte	2
 250 008b 4000      		.word	64
 251 008d 01        		.byte	1
 252 008e 00        		.byte	0
 253 008f 00        		.byte	0
 254 0090 05        		.byte	5
 255 0091 25        		.byte	37
 256 0092 01        		.byte	1
 257 0093 01        		.byte	1
 258 0094 01        		.byte	1
 259 0095 09        		.byte	9
 260 0096 05        		.byte	5
 261 0097 82        		.byte	-126
 262 0098 02        		.byte	2
 263 0099 4000      		.word	64
 264 009b 01        		.byte	1
 265 009c 00        		.byte	0
 266 009d 00        		.byte	0
 267 009e 05        		.byte	5
 268 009f 25        		.byte	37
 269 00a0 01        		.byte	1
 270 00a1 01        		.byte	1
 271 00a2 03        		.byte	3
 272               	.global	DeviceDescriptor
 275               	DeviceDescriptor:
 276 00a3 12        		.byte	18
 277 00a4 01        		.byte	1
 278 00a5 1001      		.word	272
 279 00a7 00        		.byte	0
 280 00a8 00        		.byte	0
 281 00a9 00        		.byte	0
 282 00aa 08        		.byte	8
 283 00ab EB03      		.word	1003
 284 00ad 4820      		.word	8264
 285 00af 0100      		.word	1
 286 00b1 01        		.byte	1
 287 00b2 02        		.byte	2
 288 00b3 00        		.byte	0
 289 00b4 01        		.byte	1
 290               		.text
 291               	.Letext0:
 292               		.file 2 "/usr/lib/avr/include/stdint.h"
 293               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 294               		.file 4 "../../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 295               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/Audio.h"
 296               		.file 6 "../../LUFA/Drivers/USB/Class/Device/../Common/MIDI.h"
 297               		.file 7 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/cc7OcxAH.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc7OcxAH.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc7OcxAH.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc7OcxAH.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc7OcxAH.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc7OcxAH.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc7OcxAH.s:14     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/cc7OcxAH.s:275    .progmem.data:00000000000000a3 DeviceDescriptor
     /tmp/cc7OcxAH.s:177    .progmem.data:000000000000003e ConfigurationDescriptor
     /tmp/cc7OcxAH.s:129    .progmem.data:0000000000000000 ProductString
     /tmp/cc7OcxAH.s:170    .progmem.data:000000000000003a LanguageString
     /tmp/cc7OcxAH.s:151    .progmem.data:0000000000000020 ManufacturerString

NO UNDEFINED SYMBOLS
