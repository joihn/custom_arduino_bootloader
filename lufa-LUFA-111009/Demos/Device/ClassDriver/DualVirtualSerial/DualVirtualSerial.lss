
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000ea6  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ea6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080017e  0080017e  00000fb8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e80  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dd6  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003228  00000000  00000000  00008f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000848  00000000  00000000  0000c15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002925  00000000  00000000  0000c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003439  00000000  00000000  0000f2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00012702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__bad_interrupt>
   6:	00 00       	nop
   8:	dc c0       	rjmp	.+440    	; 0x1c2 <__bad_interrupt>
   a:	00 00       	nop
   c:	da c0       	rjmp	.+436    	; 0x1c2 <__bad_interrupt>
   e:	00 00       	nop
  10:	d8 c0       	rjmp	.+432    	; 0x1c2 <__bad_interrupt>
  12:	00 00       	nop
  14:	d6 c0       	rjmp	.+428    	; 0x1c2 <__bad_interrupt>
  16:	00 00       	nop
  18:	d4 c0       	rjmp	.+424    	; 0x1c2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d2 c0       	rjmp	.+420    	; 0x1c2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d0 c0       	rjmp	.+416    	; 0x1c2 <__bad_interrupt>
  22:	00 00       	nop
  24:	ce c0       	rjmp	.+412    	; 0x1c2 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c2       	rjmp	.+1246   	; 0x508 <__vector_10>
  2a:	00 00       	nop
  2c:	ca c0       	rjmp	.+404    	; 0x1c2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c8 c0       	rjmp	.+400    	; 0x1c2 <__bad_interrupt>
  32:	00 00       	nop
  34:	c6 c0       	rjmp	.+396    	; 0x1c2 <__bad_interrupt>
  36:	00 00       	nop
  38:	c4 c0       	rjmp	.+392    	; 0x1c2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c2 c0       	rjmp	.+388    	; 0x1c2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c0 c0       	rjmp	.+384    	; 0x1c2 <__bad_interrupt>
  42:	00 00       	nop
  44:	be c0       	rjmp	.+380    	; 0x1c2 <__bad_interrupt>
  46:	00 00       	nop
  48:	bc c0       	rjmp	.+376    	; 0x1c2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ba c0       	rjmp	.+372    	; 0x1c2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b8 c0       	rjmp	.+368    	; 0x1c2 <__bad_interrupt>
  52:	00 00       	nop
  54:	b6 c0       	rjmp	.+364    	; 0x1c2 <__bad_interrupt>
  56:	00 00       	nop
  58:	b4 c0       	rjmp	.+360    	; 0x1c2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b2 c0       	rjmp	.+356    	; 0x1c2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b0 c0       	rjmp	.+352    	; 0x1c2 <__bad_interrupt>
  62:	00 00       	nop
  64:	ae c0       	rjmp	.+348    	; 0x1c2 <__bad_interrupt>
  66:	00 00       	nop
  68:	ac c0       	rjmp	.+344    	; 0x1c2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	aa c0       	rjmp	.+340    	; 0x1c2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a8 c0       	rjmp	.+336    	; 0x1c2 <__bad_interrupt>
  72:	00 00       	nop
  74:	a6 c0       	rjmp	.+332    	; 0x1c2 <__bad_interrupt>
  76:	00 00       	nop
  78:	a4 c0       	rjmp	.+328    	; 0x1c2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a2 c0       	rjmp	.+324    	; 0x1c2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a0 c0       	rjmp	.+320    	; 0x1c2 <__bad_interrupt>
  82:	00 00       	nop
  84:	9e c0       	rjmp	.+316    	; 0x1c2 <__bad_interrupt>
  86:	00 00       	nop
  88:	9c c0       	rjmp	.+312    	; 0x1c2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9a c0       	rjmp	.+308    	; 0x1c2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	98 c0       	rjmp	.+304    	; 0x1c2 <__bad_interrupt>
  92:	00 00       	nop
  94:	96 c0       	rjmp	.+300    	; 0x1c2 <__bad_interrupt>
  96:	00 00       	nop
  98:	6f 04       	cpc	r6, r15
  9a:	91 04       	cpc	r9, r1
  9c:	7e 05       	cpc	r23, r14
  9e:	91 04       	cpc	r9, r1
  a0:	7e 05       	cpc	r23, r14
  a2:	d6 04       	cpc	r13, r6
  a4:	f9 04       	cpc	r15, r9
  a6:	7e 05       	cpc	r23, r14
  a8:	4b 05       	cpc	r20, r11
  aa:	5d 05       	cpc	r21, r13

000000ac <ProductString>:
  ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
  bc:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
 102:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
 112:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
 122:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
 132:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
 142:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 152:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 162:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 172:	10 00 01                                            ...

00000175 <DeviceDescriptor>:
 175:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
 185:	dc 01 00                                            ...

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d0 e2       	ldi	r29, 0x20	; 32
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	11 e0       	ldi	r17, 0x01	; 1
 196:	a0 e0       	ldi	r26, 0x00	; 0
 198:	b1 e0       	ldi	r27, 0x01	; 1
 19a:	e6 ea       	ldi	r30, 0xA6	; 166
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	0b bf       	out	0x3b, r16	; 59
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x14>
 1a4:	07 90       	elpm	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	ae 37       	cpi	r26, 0x7E	; 126
 1aa:	b1 07       	cpc	r27, r17
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0x10>

000001ae <__do_clear_bss>:
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	ae e7       	ldi	r26, 0x7E	; 126
 1b2:	b1 e0       	ldi	r27, 0x01	; 1
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
 1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
 1b8:	ac 38       	cpi	r26, 0x8C	; 140
 1ba:	b2 07       	cpc	r27, r18
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
 1be:	5f d0       	rcall	.+190    	; 0x27e <main>
 1c0:	70 c6       	rjmp	.+3296   	; 0xea2 <_exit>

000001c2 <__bad_interrupt>:
 1c2:	1e cf       	rjmp	.-452    	; 0x0 <__vectors>

000001c4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	08 95       	ret

000001ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ce:	84 b7       	in	r24, 0x34	; 52
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	a8 95       	wdr
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1de:	88 61       	ori	r24, 0x18	; 24
 1e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1fa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	8f 71       	andi	r24, 0x1F	; 31
 200:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 202:	8d b1       	in	r24, 0x0d	; 13
 204:	8f 7c       	andi	r24, 0xCF	; 207
 206:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	80 6e       	ori	r24, 0xE0	; 224
 20c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 20e:	8e b1       	in	r24, 0x0e	; 14
 210:	80 63       	ori	r24, 0x30	; 48
 212:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 6f       	ori	r24, 0xF0	; 240
 218:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 220:	5d c1       	rjmp	.+698    	; 0x4dc <USB_Init>

00000222 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 222:	83 b1       	in	r24, 0x03	; 3
 224:	9c b1       	in	r25, 0x0c	; 12
 226:	90 95       	com	r25
 228:	90 73       	andi	r25, 0x30	; 48
 22a:	96 95       	lsr	r25
 22c:	80 95       	com	r24
 22e:	80 7e       	andi	r24, 0xE0	; 224
 230:	89 2b       	or	r24, r25
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
 232:	87 fd       	sbrc	r24, 7
 234:	0b c0       	rjmp	.+22     	; 0x24c <CheckJoystickMovement+0x2a>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 236:	84 fd       	sbrc	r24, 4
 238:	0c c0       	rjmp	.+24     	; 0x252 <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 23a:	86 fd       	sbrc	r24, 6
 23c:	0d c0       	rjmp	.+26     	; 0x258 <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 23e:	83 fd       	sbrc	r24, 3
 240:	0e c0       	rjmp	.+28     	; 0x25e <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 242:	85 fd       	sbrc	r24, 5
 244:	0f c0       	rjmp	.+30     	; 0x264 <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 246:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
 24a:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 24c:	60 e7       	ldi	r22, 0x70	; 112
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	0b c0       	rjmp	.+22     	; 0x268 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 252:	60 e6       	ldi	r22, 0x60	; 96
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	08 c0       	rjmp	.+16     	; 0x268 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 258:	60 e5       	ldi	r22, 0x50	; 80
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	05 c0       	rjmp	.+10     	; 0x268 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 25e:	6f e3       	ldi	r22, 0x3F	; 63
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	02 c0       	rjmp	.+4      	; 0x268 <CheckJoystickMovement+0x46>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 264:	6c e2       	ldi	r22, 0x2C	; 44
 266:	71 e0       	ldi	r23, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
 268:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 26c:	81 11       	cpse	r24, r1
 26e:	06 c0       	rjmp	.+12     	; 0x27c <CheckJoystickMovement+0x5a>
	{
		ActionSent = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>

		CDC_Device_SendString(&VirtualSerial1_CDC_Interface, ReportString);
 276:	86 e1       	ldi	r24, 0x16	; 22
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	b7 c4       	rjmp	.+2414   	; 0xbea <CDC_Device_SendString>
 27c:	08 95       	ret

0000027e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 27e:	a7 df       	rcall	.-178    	; 0x1ce <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	a0 df       	rcall	.-192    	; 0x1c4 <LEDs_SetAllLEDs>
	sei();
 284:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 286:	cd df       	rcall	.-102    	; 0x222 <CheckJoystickMovement>

		/* Discard all received data on the first CDC interface */
		CDC_Device_ReceiveByte(&VirtualSerial1_CDC_Interface);
 288:	86 e1       	ldi	r24, 0x16	; 22
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	31 d5       	rcall	.+2658   	; 0xcf0 <CDC_Device_ReceiveByte>

		/* Echo all received data on the second CDC interface */
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	2e d5       	rcall	.+2652   	; 0xcf0 <CDC_Device_ReceiveByte>
 294:	97 fd       	sbrc	r25, 7
		if (!(ReceivedByte < 0))
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <main+0x22>
		  CDC_Device_SendByte(&VirtualSerial2_CDC_Interface, (uint8_t)ReceivedByte);
 298:	68 2f       	mov	r22, r24
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	c4 d4       	rcall	.+2440   	; 0xc28 <CDC_Device_SendByte>

		CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
 2a0:	86 e1       	ldi	r24, 0x16	; 22
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	16 d5       	rcall	.+2604   	; 0xcd2 <CDC_Device_USBTask>
		CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	13 d5       	rcall	.+2598   	; 0xcd2 <CDC_Device_USBTask>
 2ac:	41 d4       	rcall	.+2178   	; 0xb30 <USB_USBTask>
		USB_USBTask();
 2ae:	eb cf       	rjmp	.-42     	; 0x286 <main+0x8>

000002b0 <EVENT_USB_Device_Connect>:
 2b0:	80 ea       	ldi	r24, 0xA0	; 160
	}
 2b2:	88 cf       	rjmp	.-240    	; 0x1c4 <LEDs_SetAllLEDs>

000002b4 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	86 cf       	rjmp	.-244    	; 0x1c4 <LEDs_SetAllLEDs>

000002b8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 2b8:	cf 93       	push	r28
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 2ba:	86 e1       	ldi	r24, 0x16	; 22
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	4a d4       	rcall	.+2196   	; 0xb54 <CDC_Device_ConfigureEndpoints>
 2c0:	c8 2f       	mov	r28, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	46 d4       	rcall	.+2188   	; 0xb54 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2c8:	cc 23       	and	r28, r28
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <EVENT_USB_Device_ConfigurationChanged+0x18>
 2cc:	81 11       	cpse	r24, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <EVENT_USB_Device_ConfigurationChanged+0x1c>
 2d0:	80 e9       	ldi	r24, 0x90	; 144
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <EVENT_USB_Device_ConfigurationChanged+0x1e>
}
 2d4:	80 e6       	ldi	r24, 0x60	; 96
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2d6:	cf 91       	pop	r28
 2d8:	75 cf       	rjmp	.-278    	; 0x1c4 <LEDs_SetAllLEDs>

000002da <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial1_CDC_Interface);
 2da:	86 e1       	ldi	r24, 0x16	; 22
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	39 d5       	rcall	.+2674   	; 0xd52 <CDC_Device_ProcessControlRequest>
	CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	36 c5       	rjmp	.+2668   	; 0xd52 <CDC_Device_ProcessControlRequest>

000002e6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2e6:	29 2f       	mov	r18, r25
 2e8:	33 27       	eor	r19, r19
 2ea:	22 30       	cpi	r18, 0x02	; 2
 2ec:	31 05       	cpc	r19, r1
 2ee:	59 f0       	breq	.+22     	; 0x306 <CALLBACK_USB_GetDescriptor+0x20>
 2f0:	23 30       	cpi	r18, 0x03	; 3
 2f2:	31 05       	cpc	r19, r1
 2f4:	69 f0       	breq	.+26     	; 0x310 <CALLBACK_USB_GetDescriptor+0x2a>
 2f6:	21 30       	cpi	r18, 0x01	; 1
 2f8:	31 05       	cpc	r19, r1
 2fa:	e9 f4       	brne	.+58     	; 0x336 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2fc:	82 e1       	ldi	r24, 0x12	; 18
 2fe:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 300:	25 e7       	ldi	r18, 0x75	; 117
 302:	31 e0       	ldi	r19, 0x01	; 1
 304:	1c c0       	rjmp	.+56     	; 0x33e <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 306:	83 e8       	ldi	r24, 0x83	; 131
 308:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 30a:	22 ef       	ldi	r18, 0xF2	; 242
 30c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 30e:	17 c0       	rjmp	.+46     	; 0x33e <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 310:	99 27       	eor	r25, r25
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	91 05       	cpc	r25, r1
 316:	49 f0       	breq	.+18     	; 0x32a <CALLBACK_USB_GetDescriptor+0x44>
 318:	28 f0       	brcs	.+10     	; 0x324 <CALLBACK_USB_GetDescriptor+0x3e>
 31a:	02 97       	sbiw	r24, 0x02	; 2
 31c:	61 f4       	brne	.+24     	; 0x336 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 31e:	ec ea       	ldi	r30, 0xAC	; 172
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	05 c0       	rjmp	.+10     	; 0x32e <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 324:	ee ee       	ldi	r30, 0xEE	; 238
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 32a:	e4 ed       	ldi	r30, 0xD4	; 212
 32c:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 32e:	84 91       	lpm	r24, Z
 330:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 332:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 334:	04 c0       	rjmp	.+8      	; 0x33e <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 33e:	fa 01       	movw	r30, r20
 340:	31 83       	std	Z+1, r19	; 0x01
 342:	20 83       	st	Z, r18
	return Size;
}
 344:	08 95       	ret

00000346 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 346:	98 2f       	mov	r25, r24
 348:	97 30       	cpi	r25, 0x07	; 7
 34a:	68 f5       	brcc	.+90     	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv+0x60>
 34c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 350:	98 17       	cp	r25, r24
 352:	39 f0       	breq	.+14     	; 0x362 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 354:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 358:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 35c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 360:	03 c0       	rjmp	.+6      	; 0x368 <Endpoint_ConfigureEndpoint_Prv+0x22>
 362:	24 2f       	mov	r18, r20
 364:	76 2f       	mov	r23, r22
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 fd       	sbrc	r18, 1
 36a:	02 c0       	rjmp	.+4      	; 0x370 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 36c:	9f 5f       	subi	r25, 0xFF	; 255
 36e:	ec cf       	rjmp	.-40     	; 0x348 <Endpoint_ConfigureEndpoint_Prv+0x2>
 370:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 374:	3e 7f       	andi	r19, 0xFE	; 254
 376:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 37a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 37e:	3d 7f       	andi	r19, 0xFD	; 253
 380:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 384:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 388:	31 60       	ori	r19, 0x01	; 1
 38a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 38e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 392:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 396:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 39a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 39e:	27 fd       	sbrc	r18, 7
 3a0:	e5 cf       	rjmp	.-54     	; 0x36c <Endpoint_ConfigureEndpoint_Prv+0x26>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret

000003ae <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3ae:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>
 3b2:	87 ff       	sbrs	r24, 7
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 3ba:	82 fd       	sbrc	r24, 2
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3be:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>
 3c2:	81 11       	cpse	r24, r1
 3c4:	f8 cf       	rjmp	.-16     	; 0x3b6 <Endpoint_ClearStatusStage+0x8>
 3c6:	11 c0       	rjmp	.+34     	; 0x3ea <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3cc:	8b 77       	andi	r24, 0x7B	; 123
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3d0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>
 3d4:	88 23       	and	r24, r24
 3d6:	49 f0       	breq	.+18     	; 0x3ea <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3dc:	80 ff       	sbrs	r24, 0
 3de:	f8 cf       	rjmp	.-16     	; 0x3d0 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3e4:	8e 77       	andi	r24, 0x7E	; 126
 3e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3ea:	08 95       	ret

000003ec <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 3ec:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 3f0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 3f4:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 3f6:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3fa:	84 2f       	mov	r24, r20
 3fc:	81 70       	andi	r24, 0x01	; 1
 3fe:	40 ff       	sbrs	r20, 0
 400:	23 c0       	rjmp	.+70     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 402:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 406:	80 fd       	sbrc	r24, 0
 408:	1d c0       	rjmp	.+58     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 40a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 40e:	88 23       	and	r24, r24
 410:	99 f0       	breq	.+38     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 412:	85 30       	cpi	r24, 0x05	; 5
 414:	99 f0       	breq	.+38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 416:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 41a:	85 fd       	sbrc	r24, 5
 41c:	11 c0       	rjmp	.+34     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 41e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 422:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 426:	24 17       	cp	r18, r20
 428:	35 07       	cpc	r19, r21
 42a:	29 f3       	breq	.-54     	; 0x3f6 <Endpoint_WaitUntilReady+0xa>
 42c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 42e:	11 f0       	breq	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	9a 01       	movw	r18, r20
 432:	e1 cf       	rjmp	.-62     	; 0x3f6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 448:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 44c:	42 ff       	sbrs	r20, 2
 44e:	dd cf       	rjmp	.-70     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 450:	08 95       	ret

00000452 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 45a:	49 d0       	rcall	.+146    	; 0x4ee <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 45c:	50 d0       	rcall	.+160    	; 0x4fe <USB_INT_ClearAllInterrupts>
 45e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	88 81       	ld	r24, Y
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	88 83       	st	Y, r24
 468:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 46a:	80 68       	ori	r24, 0x80	; 128
 46c:	88 83       	st	Y, r24
 46e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 470:	8f 7d       	andi	r24, 0xDF	; 223
 472:	88 83       	st	Y, r24
 474:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	80 83       	st	Z, r24
 47e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 480:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 484:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 488:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 48c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 490:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	f8 01       	movw	r30, r16
 496:	80 81       	ld	r24, Z
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	80 83       	st	Z, r24
 49c:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	88 83       	st	Y, r24
 4a2:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	4e df       	rcall	.-356    	; 0x346 <Endpoint_ConfigureEndpoint_Prv>
 4aa:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	8e 7f       	andi	r24, 0xFE	; 254
 4b2:	80 83       	st	Z, r24
 4b4:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	80 83       	st	Z, r24
 4be:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4c0:	88 60       	ori	r24, 0x08	; 8
 4c2:	80 83       	st	Z, r24
 4c4:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4c6:	80 81       	ld	r24, Z
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	80 83       	st	Z, r24
 4cc:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	88 83       	st	Y, r24
 4d2:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	08 95       	ret

000004dc <USB_Init>:
 4dc:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <USB_IsInitialized>

	USB_ResetInterface();
 4ec:	b2 cf       	rjmp	.-156    	; 0x452 <USB_ResetInterface>

000004ee <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4ee:	e8 ed       	ldi	r30, 0xD8	; 216
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	8c 7f       	andi	r24, 0xFC	; 252
 4f6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4f8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 4fc:	08 95       	ret

000004fe <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 4fe:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 502:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 506:	08 95       	ret

00000508 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	0b b6       	in	r0, 0x3b	; 59
 514:	0f 92       	push	r0
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 52e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 532:	82 ff       	sbrs	r24, 2
 534:	0a c0       	rjmp	.+20     	; 0x54a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 536:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 53a:	82 ff       	sbrs	r24, 2
 53c:	06 c0       	rjmp	.+12     	; 0x54a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 53e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 542:	8b 7f       	andi	r24, 0xFB	; 251
 544:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 548:	f2 d2       	rcall	.+1508   	; 0xb2e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 54a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 54e:	80 ff       	sbrs	r24, 0
 550:	1d c0       	rjmp	.+58     	; 0x58c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 552:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 556:	80 ff       	sbrs	r24, 0
 558:	19 c0       	rjmp	.+50     	; 0x58c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 55a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 55e:	8e 7f       	andi	r24, 0xFE	; 254
 560:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 564:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 568:	80 ff       	sbrs	r24, 0
 56a:	0c c0       	rjmp	.+24     	; 0x584 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 56c:	8c e0       	ldi	r24, 0x0C	; 12
 56e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 574:	09 b4       	in	r0, 0x29	; 41
 576:	00 fe       	sbrs	r0, 0
 578:	fd cf       	rjmp	.-6      	; 0x574 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 580:	97 de       	rcall	.-722    	; 0x2b0 <EVENT_USB_Device_Connect>
 582:	04 c0       	rjmp	.+8      	; 0x58c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 584:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 586:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 58a:	94 de       	rcall	.-728    	; 0x2b4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 58c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 590:	80 ff       	sbrs	r24, 0
 592:	18 c0       	rjmp	.+48     	; 0x5c4 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 594:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 598:	80 ff       	sbrs	r24, 0
 59a:	14 c0       	rjmp	.+40     	; 0x5c4 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 59c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
 5a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5aa:	80 61       	ori	r24, 0x10	; 16
 5ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5b0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5b4:	80 62       	ori	r24, 0x20	; 32
 5b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5ba:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 5bc:	85 e0       	ldi	r24, 0x05	; 5
 5be:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 5c2:	b5 d2       	rcall	.+1386   	; 0xb2e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 5c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 5c8:	84 ff       	sbrs	r24, 4
 5ca:	2d c0       	rjmp	.+90     	; 0x626 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 5cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5d0:	84 ff       	sbrs	r24, 4
 5d2:	29 c0       	rjmp	.+82     	; 0x626 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5d4:	8c e0       	ldi	r24, 0x0C	; 12
 5d6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5d8:	8e e0       	ldi	r24, 0x0E	; 14
 5da:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5dc:	09 b4       	in	r0, 0x29	; 41
 5de:	00 fe       	sbrs	r0, 0
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5e6:	8f 7d       	andi	r24, 0xDF	; 223
 5e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 5ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 5f0:	8f 7e       	andi	r24, 0xEF	; 239
 5f2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 5f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5fa:	8f 7e       	andi	r24, 0xEF	; 239
 5fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 600:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 604:	81 60       	ori	r24, 0x01	; 1
 606:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 60a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_Device_ConfigurationNumber>
 60e:	81 11       	cpse	r24, r1
 610:	06 c0       	rjmp	.+12     	; 0x61e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 612:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 616:	87 fd       	sbrc	r24, 7
 618:	02 c0       	rjmp	.+4      	; 0x61e <__vector_10+0x116>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	01 c0       	rjmp	.+2      	; 0x620 <__vector_10+0x118>
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 624:	84 d2       	rcall	.+1288   	; 0xb2e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 626:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 62a:	83 ff       	sbrs	r24, 3
 62c:	22 c0       	rjmp	.+68     	; 0x672 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 62e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 632:	83 ff       	sbrs	r24, 3
 634:	1e c0       	rjmp	.+60     	; 0x672 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 636:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 63a:	87 7f       	andi	r24, 0xF7	; 247
 63c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 646:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 64a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 64e:	8e 7f       	andi	r24, 0xFE	; 254
 650:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 654:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 65e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 662:	80 61       	ori	r24, 0x10	; 16
 664:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 668:	42 e0       	ldi	r20, 0x02	; 2
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	6b de       	rcall	.-810    	; 0x346 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 670:	5e d2       	rcall	.+1212   	; 0xb2e <USB_Event_Stub>
 672:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0b be       	out	0x3b, r0	; 59
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <Endpoint_Write_Stream_LE>:
 698:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 69a:	df 92       	push	r13
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	ec 01       	movw	r28, r24
 6aa:	8b 01       	movw	r16, r22
 6ac:	7a 01       	movw	r14, r20
 6ae:	9e de       	rcall	.-708    	; 0x3ec <Endpoint_WaitUntilReady>
 6b0:	81 11       	cpse	r24, r1
 6b2:	33 c0       	rjmp	.+102    	; 0x71a <Endpoint_Write_Stream_LE+0x82>
 6b4:	e1 14       	cp	r14, r1
 6b6:	f1 04       	cpc	r15, r1
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <Endpoint_Write_Stream_LE+0x30>
 6ba:	f7 01       	movw	r30, r14
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	08 1b       	sub	r16, r24
 6c2:	19 0b       	sbc	r17, r25
 6c4:	c8 0f       	add	r28, r24
 6c6:	d9 1f       	adc	r29, r25
 6c8:	c1 2c       	mov	r12, r1
 6ca:	d1 2c       	mov	r13, r1
 6cc:	01 15       	cp	r16, r1
 6ce:	11 05       	cpc	r17, r1
 6d0:	19 f1       	breq	.+70     	; 0x718 <Endpoint_Write_Stream_LE+0x80>
 6d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6d6:	85 fd       	sbrc	r24, 5
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <Endpoint_Write_Stream_LE+0x6e>
 6da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6de:	8e 77       	andi	r24, 0x7E	; 126
 6e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6e4:	25 d2       	rcall	.+1098   	; 0xb30 <USB_USBTask>
 6e6:	e1 14       	cp	r14, r1
 6e8:	f1 04       	cpc	r15, r1
 6ea:	49 f0       	breq	.+18     	; 0x6fe <Endpoint_Write_Stream_LE+0x66>
 6ec:	f7 01       	movw	r30, r14
 6ee:	80 81       	ld	r24, Z
 6f0:	91 81       	ldd	r25, Z+1	; 0x01
 6f2:	c8 0e       	add	r12, r24
 6f4:	d9 1e       	adc	r13, r25
 6f6:	d1 82       	std	Z+1, r13	; 0x01
 6f8:	c0 82       	st	Z, r12
 6fa:	85 e0       	ldi	r24, 0x05	; 5
 6fc:	0e c0       	rjmp	.+28     	; 0x71a <Endpoint_Write_Stream_LE+0x82>
 6fe:	76 de       	rcall	.-788    	; 0x3ec <Endpoint_WaitUntilReady>
 700:	88 23       	and	r24, r24
 702:	21 f3       	breq	.-56     	; 0x6cc <Endpoint_Write_Stream_LE+0x34>
 704:	0a c0       	rjmp	.+20     	; 0x71a <Endpoint_Write_Stream_LE+0x82>
 706:	89 91       	ld	r24, Y+
 708:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 70c:	01 50       	subi	r16, 0x01	; 1
 70e:	11 09       	sbc	r17, r1
 710:	ff ef       	ldi	r31, 0xFF	; 255
 712:	cf 1a       	sub	r12, r31
 714:	df 0a       	sbc	r13, r31
 716:	da cf       	rjmp	.-76     	; 0x6cc <Endpoint_Write_Stream_LE+0x34>
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	08 95       	ret

0000072c <Endpoint_Write_Control_Stream_LE>:
 72c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <USB_ControlRequest+0x6>
 730:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <USB_ControlRequest+0x7>
 734:	26 17       	cp	r18, r22
 736:	37 07       	cpc	r19, r23
 738:	48 f0       	brcs	.+18     	; 0x74c <Endpoint_Write_Control_Stream_LE+0x20>
 73a:	61 15       	cp	r22, r1
 73c:	71 05       	cpc	r23, r1
 73e:	39 f4       	brne	.+14     	; 0x74e <Endpoint_Write_Control_Stream_LE+0x22>
 740:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 744:	2e 77       	andi	r18, 0x7E	; 126
 746:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 74a:	01 c0       	rjmp	.+2      	; 0x74e <Endpoint_Write_Control_Stream_LE+0x22>
 74c:	b9 01       	movw	r22, r18
 74e:	fc 01       	movw	r30, r24
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	61 15       	cp	r22, r1
 754:	71 05       	cpc	r23, r1
 756:	69 f1       	breq	.+90     	; 0x7b2 <Endpoint_Write_Control_Stream_LE+0x86>
 758:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>
 75c:	88 23       	and	r24, r24
 75e:	d1 f1       	breq	.+116    	; 0x7d4 <Endpoint_Write_Control_Stream_LE+0xa8>
 760:	85 30       	cpi	r24, 0x05	; 5
 762:	d1 f1       	breq	.+116    	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0xac>
 764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 768:	83 fd       	sbrc	r24, 3
 76a:	32 c0       	rjmp	.+100    	; 0x7d0 <Endpoint_Write_Control_Stream_LE+0xa4>
 76c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 770:	82 fd       	sbrc	r24, 2
 772:	28 c0       	rjmp	.+80     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0x98>
 774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 778:	80 ff       	sbrs	r24, 0
 77a:	eb cf       	rjmp	.-42     	; 0x752 <Endpoint_Write_Control_Stream_LE+0x26>
 77c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 780:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	51 f0       	breq	.+20     	; 0x79e <Endpoint_Write_Control_Stream_LE+0x72>
 78a:	88 30       	cpi	r24, 0x08	; 8
 78c:	91 05       	cpc	r25, r1
 78e:	38 f4       	brcc	.+14     	; 0x79e <Endpoint_Write_Control_Stream_LE+0x72>
 790:	21 91       	ld	r18, Z+
 792:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 796:	61 50       	subi	r22, 0x01	; 1
 798:	71 09       	sbc	r23, r1
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	f3 cf       	rjmp	.-26     	; 0x784 <Endpoint_Write_Control_Stream_LE+0x58>
 79e:	21 e0       	ldi	r18, 0x01	; 1
 7a0:	08 97       	sbiw	r24, 0x08	; 8
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <Endpoint_Write_Control_Stream_LE+0x7a>
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7aa:	8e 77       	andi	r24, 0x7E	; 126
 7ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b0:	d0 cf       	rjmp	.-96     	; 0x752 <Endpoint_Write_Control_Stream_LE+0x26>
 7b2:	21 11       	cpse	r18, r1
 7b4:	d1 cf       	rjmp	.-94     	; 0x758 <Endpoint_Write_Control_Stream_LE+0x2c>
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0x98>
 7b8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>
 7bc:	88 23       	and	r24, r24
 7be:	51 f0       	breq	.+20     	; 0x7d4 <Endpoint_Write_Control_Stream_LE+0xa8>
 7c0:	85 30       	cpi	r24, 0x05	; 5
 7c2:	51 f0       	breq	.+20     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0xac>
 7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c8:	82 ff       	sbrs	r24, 2
 7ca:	f6 cf       	rjmp	.-20     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x8c>
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	08 95       	ret
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	08 95       	ret
 7d4:	82 e0       	ldi	r24, 0x02	; 2
 7d6:	08 95       	ret
 7d8:	83 e0       	ldi	r24, 0x03	; 3
 7da:	08 95       	ret

000007dc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7dc:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <USB_ControlRequest+0x6>
 7e0:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <USB_ControlRequest+0x7>
 7e4:	26 17       	cp	r18, r22
 7e6:	37 07       	cpc	r19, r23
 7e8:	48 f0       	brcs	.+18     	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7ea:	61 15       	cp	r22, r1
 7ec:	71 05       	cpc	r23, r1
 7ee:	39 f4       	brne	.+14     	; 0x7fe <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7f4:	2e 77       	andi	r18, 0x7E	; 126
 7f6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <Endpoint_Write_Control_PStream_LE+0x22>
 7fc:	b9 01       	movw	r22, r18
 7fe:	fc 01       	movw	r30, r24
 800:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 802:	61 15       	cp	r22, r1
 804:	71 05       	cpc	r23, r1
 806:	71 f1       	breq	.+92     	; 0x864 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 808:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80c:	88 23       	and	r24, r24
 80e:	d9 f1       	breq	.+118    	; 0x886 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 810:	85 30       	cpi	r24, 0x05	; 5
 812:	d9 f1       	breq	.+118    	; 0x88a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 818:	83 fd       	sbrc	r24, 3
 81a:	33 c0       	rjmp	.+102    	; 0x882 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 81c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 820:	82 fd       	sbrc	r24, 2
 822:	29 c0       	rjmp	.+82     	; 0x876 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 824:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 828:	80 ff       	sbrs	r24, 0
 82a:	eb cf       	rjmp	.-42     	; 0x802 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 82c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 830:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 834:	61 15       	cp	r22, r1
 836:	71 05       	cpc	r23, r1
 838:	59 f0       	breq	.+22     	; 0x850 <Endpoint_Write_Control_PStream_LE+0x74>
 83a:	88 30       	cpi	r24, 0x08	; 8
 83c:	91 05       	cpc	r25, r1
 83e:	40 f4       	brcc	.+16     	; 0x850 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 840:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 842:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 846:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 848:	61 50       	subi	r22, 0x01	; 1
 84a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 84c:	01 96       	adiw	r24, 0x01	; 1
 84e:	f2 cf       	rjmp	.-28     	; 0x834 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	08 97       	sbiw	r24, 0x08	; 8
 854:	09 f0       	breq	.+2      	; 0x858 <Endpoint_Write_Control_PStream_LE+0x7c>
 856:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 858:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 85c:	8e 77       	andi	r24, 0x7E	; 126
 85e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 862:	cf cf       	rjmp	.-98     	; 0x802 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 864:	21 11       	cpse	r18, r1
 866:	d0 cf       	rjmp	.-96     	; 0x808 <Endpoint_Write_Control_PStream_LE+0x2c>
 868:	06 c0       	rjmp	.+12     	; 0x876 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 86a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 86e:	88 23       	and	r24, r24
 870:	51 f0       	breq	.+20     	; 0x886 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 872:	85 30       	cpi	r24, 0x05	; 5
 874:	51 f0       	breq	.+20     	; 0x88a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 87a:	82 ff       	sbrs	r24, 2
 87c:	f6 cf       	rjmp	.-20     	; 0x86a <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 88a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 88c:	08 95       	ret

0000088e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	aa 97       	sbiw	r28, 0x2a	; 42
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	de bf       	out	0x3e, r29	; 62
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	cd bf       	out	0x3d, r28	; 61
 8a6:	e4 e8       	ldi	r30, 0x84	; 132
 8a8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8aa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8ae:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8b0:	21 e0       	ldi	r18, 0x01	; 1
 8b2:	ec 38       	cpi	r30, 0x8C	; 140
 8b4:	f2 07       	cpc	r31, r18
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 8b8:	10 dd       	rcall	.-1504   	; 0x2da <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 8be:	83 ff       	sbrs	r24, 3
 8c0:	1d c1       	rjmp	.+570    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8c2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 8c6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <USB_ControlRequest+0x1>
 8ca:	49 2f       	mov	r20, r25
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	4a 30       	cpi	r20, 0x0A	; 10
 8d0:	51 05       	cpc	r21, r1
 8d2:	08 f0       	brcs	.+2      	; 0x8d6 <USB_Device_ProcessControlRequest+0x48>
 8d4:	13 c1       	rjmp	.+550    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
 8d6:	fa 01       	movw	r30, r20
 8d8:	e4 5b       	subi	r30, 0xB4	; 180
 8da:	ff 4f       	sbci	r31, 0xFF	; 255
 8dc:	d9 c2       	rjmp	.+1458   	; 0xe90 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8de:	80 38       	cpi	r24, 0x80	; 128
 8e0:	81 f0       	breq	.+32     	; 0x902 <USB_Device_ProcessControlRequest+0x74>
 8e2:	82 38       	cpi	r24, 0x82	; 130
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <USB_Device_ProcessControlRequest+0x5a>
 8e6:	0a c1       	rjmp	.+532    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8e8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <USB_ControlRequest+0x4>
 8ec:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8ee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8f2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 8f6:	85 fb       	bst	r24, 5
 8f8:	88 27       	eor	r24, r24
 8fa:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8fc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 900:	06 c0       	rjmp	.+12     	; 0x90e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 902:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 906:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <USB_Device_RemoteWakeupEnabled>
 90a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 90c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 90e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 912:	97 7f       	andi	r25, 0xF7	; 247
 914:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 918:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 91c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 920:	c5 c0       	rjmp	.+394    	; 0xaac <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 922:	28 2f       	mov	r18, r24
 924:	2d 7f       	andi	r18, 0xFD	; 253
 926:	09 f0       	breq	.+2      	; 0x92a <USB_Device_ProcessControlRequest+0x9c>
 928:	e9 c0       	rjmp	.+466    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 92a:	88 23       	and	r24, r24
 92c:	19 f0       	breq	.+6      	; 0x934 <USB_Device_ProcessControlRequest+0xa6>
 92e:	82 30       	cpi	r24, 0x02	; 2
 930:	61 f0       	breq	.+24     	; 0x94a <USB_Device_ProcessControlRequest+0xbc>
 932:	e4 c0       	rjmp	.+456    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 934:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	09 f0       	breq	.+2      	; 0x93e <USB_Device_ProcessControlRequest+0xb0>
 93c:	df c0       	rjmp	.+446    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 93e:	93 30       	cpi	r25, 0x03	; 3
 940:	09 f0       	breq	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0xb6>
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <USB_Device_RemoteWakeupEnabled>
 948:	2b c0       	rjmp	.+86     	; 0x9a0 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 94a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 94e:	81 11       	cpse	r24, r1
 950:	27 c0       	rjmp	.+78     	; 0x9a0 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 952:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <USB_ControlRequest+0x4>
 956:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 958:	09 f4       	brne	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0xce>
 95a:	d0 c0       	rjmp	.+416    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 95c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 960:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 964:	20 ff       	sbrs	r18, 0
 966:	1c c0       	rjmp	.+56     	; 0x9a0 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 968:	93 30       	cpi	r25, 0x03	; 3
 96a:	21 f4       	brne	.+8      	; 0x974 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 96c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 970:	80 62       	ori	r24, 0x20	; 32
 972:	14 c0       	rjmp	.+40     	; 0x99c <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 974:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 978:	90 61       	ori	r25, 0x10	; 16
 97a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 97e:	21 e0       	ldi	r18, 0x01	; 1
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	a9 01       	movw	r20, r18
 984:	02 c0       	rjmp	.+4      	; 0x98a <USB_Device_ProcessControlRequest+0xfc>
 986:	44 0f       	add	r20, r20
 988:	55 1f       	adc	r21, r21
 98a:	8a 95       	dec	r24
 98c:	e2 f7       	brpl	.-8      	; 0x986 <USB_Device_ProcessControlRequest+0xf8>
 98e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 992:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 996:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 99a:	88 60       	ori	r24, 0x08	; 8
 99c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9a8:	87 7f       	andi	r24, 0xF7	; 247
 9aa:	83 c0       	rjmp	.+262    	; 0xab2 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9ac:	81 11       	cpse	r24, r1
 9ae:	a6 c0       	rjmp	.+332    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 9b0:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 9b4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 9b6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 9b8:	f8 94       	cli
 9ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9be:	87 7f       	andi	r24, 0xF7	; 247
 9c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9c4:	f4 dc       	rcall	.-1560   	; 0x3ae <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 9ca:	80 ff       	sbrs	r24, 0
 9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 9ce:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 9d2:	80 78       	andi	r24, 0x80	; 128
 9d4:	81 2b       	or	r24, r17

				UDADDR = Temp;
 9d6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 9da:	80 68       	ori	r24, 0x80	; 128
 9dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9e0:	11 11       	cpse	r17, r1
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <USB_Device_ProcessControlRequest+0x15a>
 9e4:	82 e0       	ldi	r24, 0x02	; 2
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x15c>
 9e8:	83 e0       	ldi	r24, 0x03	; 3
 9ea:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 9ee:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 9f0:	85 c0       	rjmp	.+266    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9f2:	80 58       	subi	r24, 0x80	; 128
 9f4:	82 30       	cpi	r24, 0x02	; 2
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x16c>
 9f8:	81 c0       	rjmp	.+258    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 9fa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 9fe:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <USB_ControlRequest+0x3>
 a02:	8c 3d       	cpi	r24, 0xDC	; 220
 a04:	53 e0       	ldi	r21, 0x03	; 3
 a06:	95 07       	cpc	r25, r21
 a08:	71 f5       	brne	.+92     	; 0xa66 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a0a:	83 e0       	ldi	r24, 0x03	; 3
 a0c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a0e:	8a e2       	ldi	r24, 0x2A	; 42
 a10:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a12:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a16:	de 01       	movw	r26, r28
 a18:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a1a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a1c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a1e:	51 e2       	ldi	r21, 0x21	; 33
 a20:	e3 2f       	mov	r30, r19
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 a28:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a2a:	20 ff       	sbrs	r18, 0
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 a2e:	e2 95       	swap	r30
 a30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a32:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a34:	ef 70       	andi	r30, 0x0F	; 15
 a36:	8e 2f       	mov	r24, r30
 a38:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a3a:	ea 30       	cpi	r30, 0x0A	; 10
 a3c:	10 f0       	brcs	.+4      	; 0xa42 <USB_Device_ProcessControlRequest+0x1b4>
 a3e:	c7 96       	adiw	r24, 0x37	; 55
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0x1b6>
 a42:	c0 96       	adiw	r24, 0x30	; 48
 a44:	8d 93       	st	X+, r24
 a46:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a48:	2f 5f       	subi	r18, 0xFF	; 255
 a4a:	24 31       	cpi	r18, 0x14	; 20
 a4c:	49 f7       	brne	.-46     	; 0xa20 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a4e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a54:	87 7f       	andi	r24, 0xF7	; 247
 a56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a5a:	6a e2       	ldi	r22, 0x2A	; 42
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	ce 01       	movw	r24, r28
 a60:	01 96       	adiw	r24, 0x01	; 1
 a62:	64 de       	rcall	.-824    	; 0x72c <Endpoint_Write_Control_Stream_LE>
 a64:	12 c0       	rjmp	.+36     	; 0xa8a <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a66:	ae 01       	movw	r20, r28
 a68:	4f 5f       	subi	r20, 0xFF	; 255
 a6a:	5f 4f       	sbci	r21, 0xFF	; 255
 a6c:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <USB_ControlRequest+0x4>
 a70:	3a dc       	rcall	.-1932   	; 0x2e6 <CALLBACK_USB_GetDescriptor>
 a72:	bc 01       	movw	r22, r24
 a74:	89 2b       	or	r24, r25
 a76:	09 f4       	brne	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x1ec>
 a78:	41 c0       	rjmp	.+130    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
 a7a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a7e:	97 7f       	andi	r25, 0xF7	; 247
 a80:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	9a 81       	ldd	r25, Y+2	; 0x02
 a88:	a9 de       	rcall	.-686    	; 0x7dc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a8e:	8b 77       	andi	r24, 0x7B	; 123
 a90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a94:	33 c0       	rjmp	.+102    	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a96:	80 38       	cpi	r24, 0x80	; 128
 a98:	89 f5       	brne	.+98     	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a9e:	87 7f       	andi	r24, 0xF7	; 247
 aa0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 aa4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 aa8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 aac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ab0:	8e 77       	andi	r24, 0x7E	; 126
 ab2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ab6:	7b dc       	rcall	.-1802   	; 0x3ae <Endpoint_ClearStatusStage>
 ab8:	21 c0       	rjmp	.+66     	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 aba:	81 11       	cpse	r24, r1
 abc:	1f c0       	rjmp	.+62     	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 abe:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 ac2:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <USB_ControlRequest+0x3>
 ac6:	99 27       	eor	r25, r25
 ac8:	02 97       	sbiw	r24, 0x02	; 2
 aca:	c4 f4       	brge	.+48     	; 0xafc <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 acc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ad0:	87 7f       	andi	r24, 0xF7	; 247
 ad2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ad6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
 ada:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 ade:	67 dc       	rcall	.-1842   	; 0x3ae <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 ae0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_Device_ConfigurationNumber>
 ae4:	81 11       	cpse	r24, r1
 ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ae8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 aec:	87 fd       	sbrc	r24, 7
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <USB_Device_ProcessControlRequest+0x266>
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	01 c0       	rjmp	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x268>
 af4:	84 e0       	ldi	r24, 0x04	; 4
 af6:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 afa:	de db       	rcall	.-2116   	; 0x2b8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 afc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b00:	83 ff       	sbrs	r24, 3
 b02:	0a c0       	rjmp	.+20     	; 0xb18 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b08:	80 62       	ori	r24, 0x20	; 32
 b0a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b12:	87 7f       	andi	r24, 0xF7	; 247
 b14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 b18:	aa 96       	adiw	r28, 0x2a	; 42
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
 b1e:	de bf       	out	0x3e, r29	; 62
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	cd bf       	out	0x3d, r28	; 61
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	1f 91       	pop	r17
 b2a:	0f 91       	pop	r16
 b2c:	08 95       	ret

00000b2e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b2e:	08 95       	ret

00000b30 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b30:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b32:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_DeviceState>
 b36:	88 23       	and	r24, r24
 b38:	59 f0       	breq	.+22     	; 0xb50 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b3a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b3e:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b40:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b48:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 b4a:	a1 de       	rcall	.-702    	; 0x88e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b4c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 b50:	cf 91       	pop	r28
 b52:	08 95       	ret

00000b54 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b54:	1f 93       	push	r17
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	ec 01       	movw	r28, r24
 b5c:	fc 01       	movw	r30, r24
 b5e:	3d 96       	adiw	r30, 0x0d	; 13
 b60:	89 e0       	ldi	r24, 0x09	; 9
 b62:	df 01       	movw	r26, r30
 b64:	1d 92       	st	X+, r1
 b66:	8a 95       	dec	r24
 b68:	e9 f7       	brne	.-6      	; 0xb64 <CDC_Device_ConfigureEndpoints+0x10>
 b6a:	11 e0       	ldi	r17, 0x01	; 1
 b6c:	89 81       	ldd	r24, Y+1	; 0x01
 b6e:	81 13       	cpse	r24, r17
 b70:	05 c0       	rjmp	.+10     	; 0xb7c <CDC_Device_ConfigureEndpoints+0x28>
 b72:	ea 81       	ldd	r30, Y+2	; 0x02
 b74:	fb 81       	ldd	r31, Y+3	; 0x03
 b76:	9c 81       	ldd	r25, Y+4	; 0x04
 b78:	20 e8       	ldi	r18, 0x80	; 128
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <CDC_Device_ConfigureEndpoints+0x36>
 b7c:	8d 81       	ldd	r24, Y+5	; 0x05
 b7e:	81 13       	cpse	r24, r17
 b80:	06 c0       	rjmp	.+12     	; 0xb8e <CDC_Device_ConfigureEndpoints+0x3a>
 b82:	ee 81       	ldd	r30, Y+6	; 0x06
 b84:	ff 81       	ldd	r31, Y+7	; 0x07
 b86:	98 85       	ldd	r25, Y+8	; 0x08
 b88:	20 e0       	ldi	r18, 0x00	; 0
 b8a:	82 e0       	ldi	r24, 0x02	; 2
 b8c:	0d c0       	rjmp	.+26     	; 0xba8 <CDC_Device_ConfigureEndpoints+0x54>
 b8e:	89 85       	ldd	r24, Y+9	; 0x09
 b90:	81 17       	cp	r24, r17
 b92:	29 f0       	breq	.+10     	; 0xb9e <CDC_Device_ConfigureEndpoints+0x4a>
 b94:	1f 5f       	subi	r17, 0xFF	; 255
 b96:	17 30       	cpi	r17, 0x07	; 7
 b98:	49 f7       	brne	.-46     	; 0xb6c <CDC_Device_ConfigureEndpoints+0x18>
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	22 c0       	rjmp	.+68     	; 0xbe2 <CDC_Device_ConfigureEndpoints+0x8e>
 b9e:	ea 85       	ldd	r30, Y+10	; 0x0a
 ba0:	fb 85       	ldd	r31, Y+11	; 0x0b
 ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
 ba4:	20 e8       	ldi	r18, 0x80	; 128
 ba6:	83 e0       	ldi	r24, 0x03	; 3
 ba8:	91 11       	cpse	r25, r1
 baa:	94 e0       	ldi	r25, 0x04	; 4
 bac:	68 e0       	ldi	r22, 0x08	; 8
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	40 e0       	ldi	r20, 0x00	; 0
 bb2:	6e 17       	cp	r22, r30
 bb4:	7f 07       	cpc	r23, r31
 bb6:	20 f4       	brcc	.+8      	; 0xbc0 <CDC_Device_ConfigureEndpoints+0x6c>
 bb8:	4f 5f       	subi	r20, 0xFF	; 255
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	f9 cf       	rjmp	.-14     	; 0xbb2 <CDC_Device_ConfigureEndpoints+0x5e>
 bc0:	42 95       	swap	r20
 bc2:	40 7f       	andi	r20, 0xF0	; 240
 bc4:	92 60       	ori	r25, 0x02	; 2
 bc6:	49 2b       	or	r20, r25
 bc8:	b0 e4       	ldi	r27, 0x40	; 64
 bca:	8b 9f       	mul	r24, r27
 bcc:	c0 01       	movw	r24, r0
 bce:	11 24       	eor	r1, r1
 bd0:	61 e0       	ldi	r22, 0x01	; 1
 bd2:	21 11       	cpse	r18, r1
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <CDC_Device_ConfigureEndpoints+0x84>
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	68 2b       	or	r22, r24
 bda:	81 2f       	mov	r24, r17
 bdc:	b4 db       	rcall	.-2200   	; 0x346 <Endpoint_ConfigureEndpoint_Prv>
 bde:	81 11       	cpse	r24, r1
 be0:	d9 cf       	rjmp	.-78     	; 0xb94 <CDC_Device_ConfigureEndpoints+0x40>
 be2:	df 91       	pop	r29
 be4:	cf 91       	pop	r28
 be6:	1f 91       	pop	r17
 be8:	08 95       	ret

00000bea <CDC_Device_SendString>:
 bea:	db 01       	movw	r26, r22
 bec:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_DeviceState>
 bf0:	24 30       	cpi	r18, 0x04	; 4
 bf2:	c1 f4       	brne	.+48     	; 0xc24 <CDC_Device_SendString+0x3a>
 bf4:	fc 01       	movw	r30, r24
 bf6:	47 85       	ldd	r20, Z+15	; 0x0f
 bf8:	50 89       	ldd	r21, Z+16	; 0x10
 bfa:	61 89       	ldd	r22, Z+17	; 0x11
 bfc:	72 89       	ldd	r23, Z+18	; 0x12
 bfe:	45 2b       	or	r20, r21
 c00:	46 2b       	or	r20, r22
 c02:	47 2b       	or	r20, r23
 c04:	79 f0       	breq	.+30     	; 0xc24 <CDC_Device_SendString+0x3a>
 c06:	81 81       	ldd	r24, Z+1	; 0x01
 c08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c0c:	fd 01       	movw	r30, r26
 c0e:	01 90       	ld	r0, Z+
 c10:	00 20       	and	r0, r0
 c12:	e9 f7       	brne	.-6      	; 0xc0e <CDC_Device_SendString+0x24>
 c14:	31 97       	sbiw	r30, 0x01	; 1
 c16:	bf 01       	movw	r22, r30
 c18:	6a 1b       	sub	r22, r26
 c1a:	7b 0b       	sbc	r23, r27
 c1c:	40 e0       	ldi	r20, 0x00	; 0
 c1e:	50 e0       	ldi	r21, 0x00	; 0
 c20:	cd 01       	movw	r24, r26
 c22:	3a cd       	rjmp	.-1420   	; 0x698 <Endpoint_Write_Stream_LE>
 c24:	82 e0       	ldi	r24, 0x02	; 2
 c26:	08 95       	ret

00000c28 <CDC_Device_SendByte>:
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_DeviceState>
 c32:	24 30       	cpi	r18, 0x04	; 4
 c34:	f1 f4       	brne	.+60     	; 0xc72 <CDC_Device_SendByte+0x4a>
 c36:	fc 01       	movw	r30, r24
 c38:	07 85       	ldd	r16, Z+15	; 0x0f
 c3a:	10 89       	ldd	r17, Z+16	; 0x10
 c3c:	21 89       	ldd	r18, Z+17	; 0x11
 c3e:	32 89       	ldd	r19, Z+18	; 0x12
 c40:	01 2b       	or	r16, r17
 c42:	02 2b       	or	r16, r18
 c44:	03 2b       	or	r16, r19
 c46:	a9 f0       	breq	.+42     	; 0xc72 <CDC_Device_SendByte+0x4a>
 c48:	c6 2f       	mov	r28, r22
 c4a:	81 81       	ldd	r24, Z+1	; 0x01
 c4c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c54:	85 ff       	sbrs	r24, 5
 c56:	04 c0       	rjmp	.+8      	; 0xc60 <CDC_Device_SendByte+0x38>
 c58:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	0a c0       	rjmp	.+20     	; 0xc74 <CDC_Device_SendByte+0x4c>
 c60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c64:	8e 77       	andi	r24, 0x7E	; 126
 c66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c6a:	c0 db       	rcall	.-2176   	; 0x3ec <Endpoint_WaitUntilReady>
 c6c:	88 23       	and	r24, r24
 c6e:	a1 f3       	breq	.-24     	; 0xc58 <CDC_Device_SendByte+0x30>
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <CDC_Device_SendByte+0x4c>
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	cf 91       	pop	r28
 c76:	1f 91       	pop	r17
 c78:	0f 91       	pop	r16
 c7a:	08 95       	ret

00000c7c <CDC_Device_Flush>:
 c7c:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_DeviceState>
 c80:	24 30       	cpi	r18, 0x04	; 4
 c82:	29 f5       	brne	.+74     	; 0xcce <CDC_Device_Flush+0x52>
 c84:	fc 01       	movw	r30, r24
 c86:	47 85       	ldd	r20, Z+15	; 0x0f
 c88:	50 89       	ldd	r21, Z+16	; 0x10
 c8a:	61 89       	ldd	r22, Z+17	; 0x11
 c8c:	72 89       	ldd	r23, Z+18	; 0x12
 c8e:	45 2b       	or	r20, r21
 c90:	46 2b       	or	r20, r22
 c92:	47 2b       	or	r20, r23
 c94:	e1 f0       	breq	.+56     	; 0xcce <CDC_Device_Flush+0x52>
 c96:	81 81       	ldd	r24, Z+1	; 0x01
 c98:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c9c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 ca0:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 ca4:	89 2b       	or	r24, r25
 ca6:	89 f0       	breq	.+34     	; 0xcca <CDC_Device_Flush+0x4e>
 ca8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb0:	8e 77       	andi	r24, 0x7E	; 126
 cb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cb6:	95 fd       	sbrc	r25, 5
 cb8:	08 c0       	rjmp	.+16     	; 0xcca <CDC_Device_Flush+0x4e>
 cba:	98 db       	rcall	.-2256   	; 0x3ec <Endpoint_WaitUntilReady>
 cbc:	81 11       	cpse	r24, r1
 cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <CDC_Device_Flush+0x54>
 cc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cc4:	8e 77       	andi	r24, 0x7E	; 126
 cc6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	08 95       	ret
 cce:	82 e0       	ldi	r24, 0x02	; 2
 cd0:	08 95       	ret

00000cd2 <CDC_Device_USBTask>:
 cd2:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_DeviceState>
 cd6:	24 30       	cpi	r18, 0x04	; 4
 cd8:	51 f4       	brne	.+20     	; 0xcee <CDC_Device_USBTask+0x1c>
 cda:	fc 01       	movw	r30, r24
 cdc:	47 85       	ldd	r20, Z+15	; 0x0f
 cde:	50 89       	ldd	r21, Z+16	; 0x10
 ce0:	61 89       	ldd	r22, Z+17	; 0x11
 ce2:	72 89       	ldd	r23, Z+18	; 0x12
 ce4:	45 2b       	or	r20, r21
 ce6:	46 2b       	or	r20, r22
 ce8:	47 2b       	or	r20, r23
 cea:	09 f0       	breq	.+2      	; 0xcee <CDC_Device_USBTask+0x1c>
 cec:	c7 cf       	rjmp	.-114    	; 0xc7c <CDC_Device_Flush>
 cee:	08 95       	ret

00000cf0 <CDC_Device_ReceiveByte>:
 cf0:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_DeviceState>
 cf4:	24 30       	cpi	r18, 0x04	; 4
 cf6:	19 f0       	breq	.+6      	; 0xcfe <CDC_Device_ReceiveByte+0xe>
 cf8:	8f ef       	ldi	r24, 0xFF	; 255
 cfa:	9f ef       	ldi	r25, 0xFF	; 255
 cfc:	08 95       	ret
 cfe:	fc 01       	movw	r30, r24
 d00:	47 85       	ldd	r20, Z+15	; 0x0f
 d02:	50 89       	ldd	r21, Z+16	; 0x10
 d04:	61 89       	ldd	r22, Z+17	; 0x11
 d06:	72 89       	ldd	r23, Z+18	; 0x12
 d08:	45 2b       	or	r20, r21
 d0a:	46 2b       	or	r20, r22
 d0c:	47 2b       	or	r20, r23
 d0e:	a1 f3       	breq	.-24     	; 0xcf8 <CDC_Device_ReceiveByte+0x8>
 d10:	85 81       	ldd	r24, Z+5	; 0x05
 d12:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 d16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d1a:	82 ff       	sbrs	r24, 2
 d1c:	ed cf       	rjmp	.-38     	; 0xcf8 <CDC_Device_ReceiveByte+0x8>
 d1e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 d22:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 d26:	89 2b       	or	r24, r25
 d28:	21 f0       	breq	.+8      	; 0xd32 <CDC_Device_ReceiveByte+0x42>
 d2a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 d2e:	30 e0       	ldi	r19, 0x00	; 0
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <CDC_Device_ReceiveByte+0x46>
 d32:	2f ef       	ldi	r18, 0xFF	; 255
 d34:	3f ef       	ldi	r19, 0xFF	; 255
 d36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 d3a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 d3e:	89 2b       	or	r24, r25
 d40:	29 f4       	brne	.+10     	; 0xd4c <CDC_Device_ReceiveByte+0x5c>
 d42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d46:	8b 77       	andi	r24, 0x7B	; 123
 d48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d4c:	c9 01       	movw	r24, r18
 d4e:	08 95       	ret

00000d50 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 d50:	08 95       	ret

00000d52 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
 d5c:	83 ff       	sbrs	r24, 3
 d5e:	95 c0       	rjmp	.+298    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d60:	88 81       	ld	r24, Y
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <USB_ControlRequest+0x4>
 d68:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <USB_ControlRequest+0x5>
 d6c:	28 17       	cp	r18, r24
 d6e:	39 07       	cpc	r19, r25
 d70:	09 f0       	breq	.+2      	; 0xd74 <CDC_Device_ProcessControlRequest+0x22>
 d72:	8b c0       	rjmp	.+278    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
 d74:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <USB_ControlRequest+0x1>
 d78:	81 32       	cpi	r24, 0x21	; 33
 d7a:	59 f0       	breq	.+22     	; 0xd92 <CDC_Device_ProcessControlRequest+0x40>
 d7c:	18 f4       	brcc	.+6      	; 0xd84 <CDC_Device_ProcessControlRequest+0x32>
 d7e:	80 32       	cpi	r24, 0x20	; 32
 d80:	d1 f1       	breq	.+116    	; 0xdf6 <CDC_Device_ProcessControlRequest+0xa4>
 d82:	83 c0       	rjmp	.+262    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
 d84:	82 32       	cpi	r24, 0x22	; 34
 d86:	09 f4       	brne	.+2      	; 0xd8a <CDC_Device_ProcessControlRequest+0x38>
 d88:	5f c0       	rjmp	.+190    	; 0xe48 <CDC_Device_ProcessControlRequest+0xf6>
 d8a:	83 32       	cpi	r24, 0x23	; 35
 d8c:	09 f4       	brne	.+2      	; 0xd90 <CDC_Device_ProcessControlRequest+0x3e>
 d8e:	6d c0       	rjmp	.+218    	; 0xe6a <CDC_Device_ProcessControlRequest+0x118>
 d90:	7c c0       	rjmp	.+248    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d92:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>
 d96:	81 3a       	cpi	r24, 0xA1	; 161
 d98:	09 f0       	breq	.+2      	; 0xd9c <CDC_Device_ProcessControlRequest+0x4a>
 d9a:	77 c0       	rjmp	.+238    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da0:	87 7f       	andi	r24, 0xF7	; 247
 da2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 da6:	8f 85       	ldd	r24, Y+15	; 0x0f
 da8:	98 89       	ldd	r25, Y+16	; 0x10
 daa:	a9 89       	ldd	r26, Y+17	; 0x11
 dac:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 dae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 db2:	49 2f       	mov	r20, r25
 db4:	5a 2f       	mov	r21, r26
 db6:	6b 2f       	mov	r22, r27
 db8:	77 27       	eor	r23, r23
 dba:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
 dbe:	ad 01       	movw	r20, r26
 dc0:	66 27       	eor	r22, r22
 dc2:	77 27       	eor	r23, r23
 dc4:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
 dc8:	8b 2f       	mov	r24, r27
 dca:	99 27       	eor	r25, r25
 dcc:	aa 27       	eor	r26, r26
 dce:	bb 27       	eor	r27, r27
 dd0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 dd4:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dd6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 dda:	8c 89       	ldd	r24, Y+20	; 0x14
 ddc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 de0:	8d 89       	ldd	r24, Y+21	; 0x15
 de2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 de6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dea:	8e 77       	andi	r24, 0x7E	; 126
 dec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 df0:	df 91       	pop	r29
 df2:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 df4:	dc ca       	rjmp	.-2632   	; 0x3ae <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 df6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>
 dfa:	81 32       	cpi	r24, 0x21	; 33
 dfc:	09 f0       	breq	.+2      	; 0xe00 <CDC_Device_ProcessControlRequest+0xae>
 dfe:	45 c0       	rjmp	.+138    	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e04:	87 7f       	andi	r24, 0xF7	; 247
 e06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e0a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
 e0e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
 e12:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
 e16:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 e1a:	3f 87       	std	Y+15, r19	; 0x0f
 e1c:	28 8b       	std	Y+16, r18	; 0x10
 e1e:	99 8b       	std	Y+17, r25	; 0x11
 e20:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e22:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 e26:	8b 8b       	std	Y+19, r24	; 0x13
 e28:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e2c:	8c 8b       	std	Y+20, r24	; 0x14
 e2e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 e32:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e38:	8b 77       	andi	r24, 0x7B	; 123
 e3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 e3e:	b7 da       	rcall	.-2706   	; 0x3ae <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e40:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e42:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e44:	cf 91       	pop	r28
 e46:	84 cf       	rjmp	.-248    	; 0xd50 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e48:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>
 e4c:	81 32       	cpi	r24, 0x21	; 33
 e4e:	e9 f4       	brne	.+58     	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e54:	87 7f       	andi	r24, 0xF7	; 247
 e56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e5a:	a9 da       	rcall	.-2734   	; 0x3ae <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 e5c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e60:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e62:	ce 01       	movw	r24, r28
 e64:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e66:	cf 91       	pop	r28
 e68:	73 cf       	rjmp	.-282    	; 0xd50 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e6a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USB_ControlRequest>
 e6e:	81 32       	cpi	r24, 0x21	; 33
 e70:	61 f4       	brne	.+24     	; 0xe8a <CDC_Device_ProcessControlRequest+0x138>
 e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e76:	87 7f       	andi	r24, 0xF7	; 247
 e78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e7c:	98 da       	rcall	.-2768   	; 0x3ae <Endpoint_ClearStatusStage>
 e7e:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <USB_ControlRequest+0x2>
			}

			break;
	}
}
 e82:	ce 01       	movw	r24, r28
 e84:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e86:	cf 91       	pop	r28
 e88:	63 cf       	rjmp	.-314    	; 0xd50 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 e8a:	df 91       	pop	r29
 e8c:	cf 91       	pop	r28
 e8e:	08 95       	ret

00000e90 <__tablejump2__>:
 e90:	ee 0f       	add	r30, r30
 e92:	ff 1f       	adc	r31, r31
 e94:	00 24       	eor	r0, r0
 e96:	00 1c       	adc	r0, r0
 e98:	0b be       	out	0x3b, r0	; 59
 e9a:	07 90       	elpm	r0, Z+
 e9c:	f6 91       	elpm	r31, Z
 e9e:	e0 2d       	mov	r30, r0
 ea0:	09 94       	ijmp

00000ea2 <_exit>:
 ea2:	f8 94       	cli

00000ea4 <__stop_program>:
 ea4:	ff cf       	rjmp	.-2      	; 0xea4 <__stop_program>
