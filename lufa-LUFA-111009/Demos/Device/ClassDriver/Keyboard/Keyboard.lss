
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000104a  000010de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010e  0080010e  000010ec  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005763  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cac  00000000  00000000  00006b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f98  00000000  00000000  000087c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  0000b760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002388  00000000  00000000  0000bf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031eb  00000000  00000000  0000e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  000114cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c2       	rjmp	.+1304   	; 0x542 <__vector_10>
      2a:	00 00       	nop
      2c:	b9 c0       	rjmp	.+370    	; 0x1a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c0       	rjmp	.+346    	; 0x1a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c0       	rjmp	.+314    	; 0x1a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	ca 04       	cpc	r12, r10
      9a:	ec 04       	cpc	r14, r12
      9c:	d9 05       	cpc	r29, r9
      9e:	ec 04       	cpc	r14, r12
      a0:	d9 05       	cpc	r29, r9
      a2:	31 05       	cpc	r19, r1
      a4:	54 05       	cpc	r21, r4
      a6:	d9 05       	cpc	r29, r9
      a8:	a6 05       	cpc	r26, r6
      aa:	b8 05       	cpc	r27, r8

000000ac <ProductString>:
      ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
      bc:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
      cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
      d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     112:	00 01                                               ..

00000114 <DeviceDescriptor>:
     114:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     124:	00 01                                               ..

00000126 <KeyboardReport>:
     126:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     136:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     146:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     156:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0 00     %e....)e..u.....

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ea e4       	ldi	r30, 0x4A	; 74
     17a:	f0 e1       	ldi	r31, 0x10	; 16
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 30       	cpi	r26, 0x0E	; 14
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ae e0       	ldi	r26, 0x0E	; 14
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a3 32       	cpi	r26, 0x23	; 35
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	33 d0       	rcall	.+102    	; 0x204 <main>
     19e:	53 c7       	rjmp	.+3750   	; 0x1046 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a2:	9b b1       	in	r25, 0x0b	; 11
     1a4:	9f 70       	andi	r25, 0x0F	; 15
     1a6:	89 2b       	or	r24, r25
     1a8:	8b b9       	out	0x0b, r24	; 11
     1aa:	08 95       	ret

000001ac <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1ac:	84 b7       	in	r24, 0x34	; 52
     1ae:	87 7f       	andi	r24, 0xF7	; 247
     1b0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	a8 95       	wdr
     1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1bc:	88 61       	ori	r24, 0x18	; 24
     1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1c6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	80 e8       	ldi	r24, 0x80	; 128
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1d4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1d8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     1da:	84 b1       	in	r24, 0x04	; 4
     1dc:	8f 71       	andi	r24, 0x1F	; 31
     1de:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     1e0:	8d b1       	in	r24, 0x0d	; 13
     1e2:	8f 7c       	andi	r24, 0xCF	; 207
     1e4:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     1e6:	85 b1       	in	r24, 0x05	; 5
     1e8:	80 6e       	ori	r24, 0xE0	; 224
     1ea:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     1ec:	8e b1       	in	r24, 0x0e	; 14
     1ee:	80 63       	ori	r24, 0x30	; 48
     1f0:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1f2:	8a b1       	in	r24, 0x0a	; 10
     1f4:	80 6f       	ori	r24, 0xF0	; 240
     1f6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1f8:	8b b1       	in	r24, 0x0b	; 11
     1fa:	8f 70       	andi	r24, 0x0F	; 15
     1fc:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1fe:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     200:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     202:	89 c1       	rjmp	.+786    	; 0x516 <USB_Init>

00000204 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     204:	d3 df       	rcall	.-90     	; 0x1ac <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     206:	80 e1       	ldi	r24, 0x10	; 16
     208:	cc df       	rcall	.-104    	; 0x1a2 <LEDs_SetAllLEDs>
	sei();
     20a:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
     210:	4e d6       	rcall	.+3228   	; 0xeae <HID_Device_USBTask>
     212:	e9 d4       	rcall	.+2514   	; 0xbe6 <USB_USBTask>
     214:	fb cf       	rjmp	.-10     	; 0x20c <main+0x8>

00000216 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     216:	80 ea       	ldi	r24, 0xA0	; 160
     218:	c4 cf       	rjmp	.-120    	; 0x1a2 <LEDs_SetAllLEDs>

0000021a <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     21a:	80 e1       	ldi	r24, 0x10	; 16
     21c:	c2 cf       	rjmp	.-124    	; 0x1a2 <LEDs_SetAllLEDs>

0000021e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	1a d6       	rcall	.+3124   	; 0xe58 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     224:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     228:	94 60       	ori	r25, 0x04	; 4
     22a:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     22e:	81 11       	cpse	r24, r1
     230:	02 c0       	rjmp	.+4      	; 0x236 <EVENT_USB_Device_ConfigurationChanged+0x18>
     232:	80 e9       	ldi	r24, 0x90	; 144
     234:	01 c0       	rjmp	.+2      	; 0x238 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     236:	80 e6       	ldi	r24, 0x60	; 96
     238:	b4 cf       	rjmp	.-152    	; 0x1a2 <LEDs_SetAllLEDs>

0000023a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	e5 c4       	rjmp	.+2506   	; 0xc0a <HID_Device_ProcessControlRequest>

00000240 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     240:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     244:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	29 f0       	breq	.+10     	; 0x256 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     252:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     256:	08 95       	ret

00000258 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     25e:	83 b1       	in	r24, 0x03	; 3
     260:	9c b1       	in	r25, 0x0c	; 12
     262:	90 95       	com	r25
     264:	90 73       	andi	r25, 0x30	; 48
     266:	96 95       	lsr	r25
     268:	80 95       	com	r24
     26a:	80 7e       	andi	r24, 0xE0	; 224
     26c:	98 2b       	or	r25, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     26e:	2c b1       	in	r18, 0x0c	; 12
     270:	20 95       	com	r18
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;

	if (JoyStatus_LCL & JOY_UP)
     272:	97 ff       	sbrs	r25, 7
     274:	02 c0       	rjmp	.+4      	; 0x27a <CALLBACK_HID_Device_CreateHIDReport+0x22>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	03 c0       	rjmp	.+6      	; 0x280 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	else if (JoyStatus_LCL & JOY_DOWN)
     27a:	94 ff       	sbrs	r25, 4
     27c:	04 c0       	rjmp	.+8      	; 0x286 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	82 83       	std	Z+2, r24	; 0x02
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	01 c0       	rjmp	.+2      	; 0x288 <CALLBACK_HID_Device_CreateHIDReport+0x30>
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
     288:	96 ff       	sbrs	r25, 6
     28a:	05 c0       	rjmp	.+10     	; 0x296 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
     28c:	df 01       	movw	r26, r30
     28e:	a8 0f       	add	r26, r24
     290:	b1 1d       	adc	r27, r1
     292:	36 e0       	ldi	r19, 0x06	; 6
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <CALLBACK_HID_Device_CreateHIDReport+0x4a>
	else if (JoyStatus_LCL & JOY_RIGHT)
     296:	93 ff       	sbrs	r25, 3
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <CALLBACK_HID_Device_CreateHIDReport+0x50>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
     29a:	df 01       	movw	r26, r30
     29c:	a8 0f       	add	r26, r24
     29e:	b1 1d       	adc	r27, r1
     2a0:	37 e0       	ldi	r19, 0x07	; 7
     2a2:	12 96       	adiw	r26, 0x02	; 2
     2a4:	3c 93       	st	X, r19
     2a6:	8f 5f       	subi	r24, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
     2a8:	95 ff       	sbrs	r25, 5
     2aa:	07 c0       	rjmp	.+14     	; 0x2ba <CALLBACK_HID_Device_CreateHIDReport+0x62>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
     2ac:	df 01       	movw	r26, r30
     2ae:	a8 0f       	add	r26, r24
     2b0:	b1 1d       	adc	r27, r1
     2b2:	98 e0       	ldi	r25, 0x08	; 8
     2b4:	12 96       	adiw	r26, 0x02	; 2
     2b6:	9c 93       	st	X, r25
     2b8:	8f 5f       	subi	r24, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     2ba:	22 ff       	sbrs	r18, 2
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <CALLBACK_HID_Device_CreateHIDReport+0x74>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
     2be:	df 01       	movw	r26, r30
     2c0:	a8 0f       	add	r26, r24
     2c2:	b1 1d       	adc	r27, r1
     2c4:	89 e0       	ldi	r24, 0x09	; 9
     2c6:	12 96       	adiw	r26, 0x02	; 2
     2c8:	8c 93       	st	X, r24
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <CALLBACK_HID_Device_CreateHIDReport+0x78>

	if (UsedKeyCodes)
     2cc:	88 23       	and	r24, r24
     2ce:	11 f0       	breq	.+4      	; 0x2d4 <CALLBACK_HID_Device_CreateHIDReport+0x7c>
	  KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	f8 01       	movw	r30, r16
     2da:	91 83       	std	Z+1, r25	; 0x01
     2dc:	80 83       	st	Z, r24
	return false;
}
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     2e6:	f9 01       	movw	r30, r18
     2e8:	90 81       	ld	r25, Z
     2ea:	90 ff       	sbrs	r25, 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     2ee:	80 e1       	ldi	r24, 0x10	; 16
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     2f4:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     2f6:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     2f8:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     2fa:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
     2fc:	52 cf       	rjmp	.-348    	; 0x1a2 <LEDs_SetAllLEDs>

000002fe <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2fe:	29 2f       	mov	r18, r25
     300:	33 27       	eor	r19, r19
     302:	23 30       	cpi	r18, 0x03	; 3
     304:	31 05       	cpc	r19, r1
     306:	e1 f0       	breq	.+56     	; 0x340 <CALLBACK_USB_GetDescriptor+0x42>
     308:	58 f4       	brcc	.+22     	; 0x320 <CALLBACK_USB_GetDescriptor+0x22>
     30a:	21 30       	cpi	r18, 0x01	; 1
     30c:	31 05       	cpc	r19, r1
     30e:	99 f0       	breq	.+38     	; 0x336 <CALLBACK_USB_GetDescriptor+0x38>
     310:	22 30       	cpi	r18, 0x02	; 2
     312:	31 05       	cpc	r19, r1
     314:	69 f5       	brne	.+90     	; 0x370 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     316:	82 e2       	ldi	r24, 0x22	; 34
     318:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     31a:	22 ef       	ldi	r18, 0xF2	; 242
     31c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     31e:	2c c0       	rjmp	.+88     	; 0x378 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     320:	21 32       	cpi	r18, 0x21	; 33
     322:	31 05       	cpc	r19, r1
     324:	01 f1       	breq	.+64     	; 0x366 <CALLBACK_USB_GetDescriptor+0x68>
     326:	22 32       	cpi	r18, 0x22	; 34
     328:	31 05       	cpc	r19, r1
     32a:	11 f5       	brne	.+68     	; 0x370 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     32c:	8f e3       	ldi	r24, 0x3F	; 63
     32e:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     330:	26 e2       	ldi	r18, 0x26	; 38
     332:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     334:	21 c0       	rjmp	.+66     	; 0x378 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     336:	82 e1       	ldi	r24, 0x12	; 18
     338:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     33a:	24 e1       	ldi	r18, 0x14	; 20
     33c:	31 e0       	ldi	r19, 0x01	; 1
     33e:	1c c0       	rjmp	.+56     	; 0x378 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     340:	99 27       	eor	r25, r25
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	91 05       	cpc	r25, r1
     346:	49 f0       	breq	.+18     	; 0x35a <CALLBACK_USB_GetDescriptor+0x5c>
     348:	28 f0       	brcs	.+10     	; 0x354 <CALLBACK_USB_GetDescriptor+0x56>
     34a:	02 97       	sbiw	r24, 0x02	; 2
     34c:	89 f4       	brne	.+34     	; 0x370 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     34e:	ec ea       	ldi	r30, 0xAC	; 172
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	05 c0       	rjmp	.+10     	; 0x35e <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     354:	ee ee       	ldi	r30, 0xEE	; 238
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     35a:	e4 ed       	ldi	r30, 0xD4	; 212
     35c:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     35e:	84 91       	lpm	r24, Z
     360:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     362:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     364:	09 c0       	rjmp	.+18     	; 0x378 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     366:	89 e0       	ldi	r24, 0x09	; 9
     368:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     36a:	24 e0       	ldi	r18, 0x04	; 4
     36c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     36e:	04 c0       	rjmp	.+8      	; 0x378 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     378:	fa 01       	movw	r30, r20
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
	return Size;
}
     37e:	08 95       	ret

00000380 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     380:	98 2f       	mov	r25, r24
     382:	97 30       	cpi	r25, 0x07	; 7
     384:	68 f5       	brcc	.+90     	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv+0x60>
     386:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     38a:	98 17       	cp	r25, r24
     38c:	39 f0       	breq	.+14     	; 0x39c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     38e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     392:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     396:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
     39c:	24 2f       	mov	r18, r20
     39e:	76 2f       	mov	r23, r22
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	21 fd       	sbrc	r18, 1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <Endpoint_ConfigureEndpoint_Prv+0x2a>
     3a6:	9f 5f       	subi	r25, 0xFF	; 255
     3a8:	ec cf       	rjmp	.-40     	; 0x382 <Endpoint_ConfigureEndpoint_Prv+0x2>
     3aa:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3ae:	3e 7f       	andi	r19, 0xFE	; 254
     3b0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3b4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     3b8:	3d 7f       	andi	r19, 0xFD	; 253
     3ba:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     3be:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3c2:	31 60       	ori	r19, 0x01	; 1
     3c4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3c8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     3cc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     3d0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     3d4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     3d8:	27 fd       	sbrc	r18, 7
     3da:	e5 cf       	rjmp	.-54     	; 0x3a6 <Endpoint_ConfigureEndpoint_Prv+0x26>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	08 95       	ret
     3e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	08 95       	ret

000003e8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     3e8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     3ec:	87 ff       	sbrs	r24, 7
     3ee:	11 c0       	rjmp	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     3f4:	82 fd       	sbrc	r24, 2
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     3f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     3fc:	81 11       	cpse	r24, r1
     3fe:	f8 cf       	rjmp	.-16     	; 0x3f0 <Endpoint_ClearStatusStage+0x8>
     400:	11 c0       	rjmp	.+34     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     402:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     406:	8b 77       	andi	r24, 0x7B	; 123
     408:	0b c0       	rjmp	.+22     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     40a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     40e:	88 23       	and	r24, r24
     410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     416:	80 ff       	sbrs	r24, 0
     418:	f8 cf       	rjmp	.-16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     41a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     41e:	8e 77       	andi	r24, 0x7E	; 126
     420:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     424:	08 95       	ret

00000426 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     426:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     42a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     42e:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     430:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     434:	84 2f       	mov	r24, r20
     436:	81 70       	andi	r24, 0x01	; 1
     438:	40 ff       	sbrs	r20, 0
     43a:	23 c0       	rjmp	.+70     	; 0x482 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     43c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     440:	80 fd       	sbrc	r24, 0
     442:	1d c0       	rjmp	.+58     	; 0x47e <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     444:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     448:	88 23       	and	r24, r24
     44a:	99 f0       	breq	.+38     	; 0x472 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     44c:	85 30       	cpi	r24, 0x05	; 5
     44e:	99 f0       	breq	.+38     	; 0x476 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     450:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     454:	85 fd       	sbrc	r24, 5
     456:	11 c0       	rjmp	.+34     	; 0x47a <Endpoint_WaitUntilReady+0x54>
     458:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     45c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     460:	24 17       	cp	r18, r20
     462:	35 07       	cpc	r19, r21
     464:	29 f3       	breq	.-54     	; 0x430 <Endpoint_WaitUntilReady+0xa>
     466:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     468:	11 f0       	breq	.+4      	; 0x46e <Endpoint_WaitUntilReady+0x48>
     46a:	9a 01       	movw	r18, r20
     46c:	e1 cf       	rjmp	.-62     	; 0x430 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     482:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     486:	42 ff       	sbrs	r20, 2
     488:	dd cf       	rjmp	.-70     	; 0x444 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     48a:	08 95       	ret

0000048c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     494:	49 d0       	rcall	.+146    	; 0x528 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     496:	50 d0       	rcall	.+160    	; 0x538 <USB_INT_ClearAllInterrupts>
     498:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     49a:	d0 e0       	ldi	r29, 0x00	; 0
     49c:	88 81       	ld	r24, Y
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	88 83       	st	Y, r24
     4a2:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     4a4:	80 68       	ori	r24, 0x80	; 128
     4a6:	88 83       	st	Y, r24
     4a8:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     4aa:	8f 7d       	andi	r24, 0xDF	; 223
     4ac:	88 83       	st	Y, r24
     4ae:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	80 83       	st	Z, r24
     4b8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     4ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     4be:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     4c2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     4c6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     4ca:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     4cc:	10 e0       	ldi	r17, 0x00	; 0
     4ce:	f8 01       	movw	r30, r16
     4d0:	80 81       	ld	r24, Z
     4d2:	8b 7f       	andi	r24, 0xFB	; 251
     4d4:	80 83       	st	Z, r24
     4d6:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	88 83       	st	Y, r24
     4dc:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	4e df       	rcall	.-356    	; 0x380 <Endpoint_ConfigureEndpoint_Prv>
     4e4:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	80 83       	st	Z, r24
     4ee:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	81 60       	ori	r24, 0x01	; 1
     4f6:	80 83       	st	Z, r24
     4f8:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	80 83       	st	Z, r24
     4fe:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     500:	80 81       	ld	r24, Z
     502:	8e 7f       	andi	r24, 0xFE	; 254
     504:	80 83       	st	Z, r24
     506:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     508:	80 61       	ori	r24, 0x10	; 16
     50a:	88 83       	st	Y, r24
     50c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <USB_Init>:
     516:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_IsInitialized>

	USB_ResetInterface();
     526:	b2 cf       	rjmp	.-156    	; 0x48c <USB_ResetInterface>

00000528 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     528:	e8 ed       	ldi	r30, 0xD8	; 216
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8c 7f       	andi	r24, 0xFC	; 252
     530:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     532:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     536:	08 95       	ret

00000538 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     538:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     53c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     540:	08 95       	ret

00000542 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	0b b6       	in	r0, 0x3b	; 59
     54e:	0f 92       	push	r0
     550:	2f 93       	push	r18
     552:	3f 93       	push	r19
     554:	4f 93       	push	r20
     556:	5f 93       	push	r21
     558:	6f 93       	push	r22
     55a:	7f 93       	push	r23
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	af 93       	push	r26
     562:	bf 93       	push	r27
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     568:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     56c:	82 ff       	sbrs	r24, 2
     56e:	0a c0       	rjmp	.+20     	; 0x584 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     570:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     574:	82 ff       	sbrs	r24, 2
     576:	06 c0       	rjmp	.+12     	; 0x584 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     578:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     57c:	8b 7f       	andi	r24, 0xFB	; 251
     57e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     582:	5e de       	rcall	.-836    	; 0x240 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     584:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     588:	80 ff       	sbrs	r24, 0
     58a:	1d c0       	rjmp	.+58     	; 0x5c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     58c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     590:	80 ff       	sbrs	r24, 0
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     594:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     59e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     5a2:	80 ff       	sbrs	r24, 0
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     5ae:	09 b4       	in	r0, 0x29	; 41
     5b0:	00 fe       	sbrs	r0, 0
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
			EVENT_USB_Device_Connect();
     5ba:	2d de       	rcall	.-934    	; 0x216 <EVENT_USB_Device_Connect>
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5be:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     5c0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     5c4:	2a de       	rcall	.-940    	; 0x21a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     5c6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     5ca:	80 ff       	sbrs	r24, 0
     5cc:	18 c0       	rjmp	.+48     	; 0x5fe <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     5ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5d2:	80 ff       	sbrs	r24, 0
     5d4:	14 c0       	rjmp	.+40     	; 0x5fe <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     5d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5da:	8e 7f       	andi	r24, 0xFE	; 254
     5dc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     5e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     5ea:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5f4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     5f6:	85 e0       	ldi	r24, 0x05	; 5
     5f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     5fc:	f3 d2       	rcall	.+1510   	; 0xbe4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     5fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     602:	84 ff       	sbrs	r24, 4
     604:	2d c0       	rjmp	.+90     	; 0x660 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     606:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     60a:	84 ff       	sbrs	r24, 4
     60c:	29 c0       	rjmp	.+82     	; 0x660 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     612:	8e e0       	ldi	r24, 0x0E	; 14
     614:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     616:	09 b4       	in	r0, 0x29	; 41
     618:	00 fe       	sbrs	r0, 0
     61a:	fd cf       	rjmp	.-6      	; 0x616 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     61c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     620:	8f 7d       	andi	r24, 0xDF	; 223
     622:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     626:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     62a:	8f 7e       	andi	r24, 0xEF	; 239
     62c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     630:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     63a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     644:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
     648:	81 11       	cpse	r24, r1
     64a:	06 c0       	rjmp	.+12     	; 0x658 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     64c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     650:	87 fd       	sbrc	r24, 7
     652:	02 c0       	rjmp	.+4      	; 0x658 <__vector_10+0x116>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <__vector_10+0x118>
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     65e:	c2 d2       	rcall	.+1412   	; 0xbe4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     660:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     664:	83 ff       	sbrs	r24, 3
     666:	22 c0       	rjmp	.+68     	; 0x6ac <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     668:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     66c:	83 ff       	sbrs	r24, 3
     66e:	1e c0       	rjmp	.+60     	; 0x6ac <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     670:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     680:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     684:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     688:	8e 7f       	andi	r24, 0xFE	; 254
     68a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     68e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     698:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     69c:	80 61       	ori	r24, 0x10	; 16
     69e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     6a2:	42 e0       	ldi	r20, 0x02	; 2
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	6b de       	rcall	.-810    	; 0x380 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     6aa:	9c d2       	rcall	.+1336   	; 0xbe4 <USB_Event_Stub>
     6ac:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     6ae:	ef 91       	pop	r30
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <Endpoint_Write_Stream_LE>:
     6d2:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	8b 01       	movw	r16, r22
     6e6:	7a 01       	movw	r14, r20
     6e8:	9e de       	rcall	.-708    	; 0x426 <Endpoint_WaitUntilReady>
     6ea:	81 11       	cpse	r24, r1
     6ec:	33 c0       	rjmp	.+102    	; 0x754 <Endpoint_Write_Stream_LE+0x82>
     6ee:	e1 14       	cp	r14, r1
     6f0:	f1 04       	cpc	r15, r1
     6f2:	39 f0       	breq	.+14     	; 0x702 <Endpoint_Write_Stream_LE+0x30>
     6f4:	f7 01       	movw	r30, r14
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	08 1b       	sub	r16, r24
     6fc:	19 0b       	sbc	r17, r25
     6fe:	c8 0f       	add	r28, r24
     700:	d9 1f       	adc	r29, r25
     702:	c1 2c       	mov	r12, r1
     704:	d1 2c       	mov	r13, r1
     706:	01 15       	cp	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	19 f1       	breq	.+70     	; 0x752 <Endpoint_Write_Stream_LE+0x80>
     70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     710:	85 fd       	sbrc	r24, 5
     712:	16 c0       	rjmp	.+44     	; 0x740 <Endpoint_Write_Stream_LE+0x6e>
     714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     718:	8e 77       	andi	r24, 0x7E	; 126
     71a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     71e:	63 d2       	rcall	.+1222   	; 0xbe6 <USB_USBTask>
     720:	e1 14       	cp	r14, r1
     722:	f1 04       	cpc	r15, r1
     724:	49 f0       	breq	.+18     	; 0x738 <Endpoint_Write_Stream_LE+0x66>
     726:	f7 01       	movw	r30, r14
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	c8 0e       	add	r12, r24
     72e:	d9 1e       	adc	r13, r25
     730:	d1 82       	std	Z+1, r13	; 0x01
     732:	c0 82       	st	Z, r12
     734:	85 e0       	ldi	r24, 0x05	; 5
     736:	0e c0       	rjmp	.+28     	; 0x754 <Endpoint_Write_Stream_LE+0x82>
     738:	76 de       	rcall	.-788    	; 0x426 <Endpoint_WaitUntilReady>
     73a:	88 23       	and	r24, r24
     73c:	21 f3       	breq	.-56     	; 0x706 <Endpoint_Write_Stream_LE+0x34>
     73e:	0a c0       	rjmp	.+20     	; 0x754 <Endpoint_Write_Stream_LE+0x82>
     740:	89 91       	ld	r24, Y+
     742:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     746:	01 50       	subi	r16, 0x01	; 1
     748:	11 09       	sbc	r17, r1
     74a:	ff ef       	ldi	r31, 0xFF	; 255
     74c:	cf 1a       	sub	r12, r31
     74e:	df 0a       	sbc	r13, r31
     750:	da cf       	rjmp	.-76     	; 0x706 <Endpoint_Write_Stream_LE+0x34>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	08 95       	ret

00000766 <Endpoint_Write_Control_Stream_LE>:
     766:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
     76a:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
     76e:	26 17       	cp	r18, r22
     770:	37 07       	cpc	r19, r23
     772:	48 f0       	brcs	.+18     	; 0x786 <Endpoint_Write_Control_Stream_LE+0x20>
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	39 f4       	brne	.+14     	; 0x788 <Endpoint_Write_Control_Stream_LE+0x22>
     77a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     77e:	2e 77       	andi	r18, 0x7E	; 126
     780:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     784:	01 c0       	rjmp	.+2      	; 0x788 <Endpoint_Write_Control_Stream_LE+0x22>
     786:	b9 01       	movw	r22, r18
     788:	fc 01       	movw	r30, r24
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	61 15       	cp	r22, r1
     78e:	71 05       	cpc	r23, r1
     790:	69 f1       	breq	.+90     	; 0x7ec <Endpoint_Write_Control_Stream_LE+0x86>
     792:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     796:	88 23       	and	r24, r24
     798:	d1 f1       	breq	.+116    	; 0x80e <Endpoint_Write_Control_Stream_LE+0xa8>
     79a:	85 30       	cpi	r24, 0x05	; 5
     79c:	d1 f1       	breq	.+116    	; 0x812 <Endpoint_Write_Control_Stream_LE+0xac>
     79e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7a2:	83 fd       	sbrc	r24, 3
     7a4:	32 c0       	rjmp	.+100    	; 0x80a <Endpoint_Write_Control_Stream_LE+0xa4>
     7a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7aa:	82 fd       	sbrc	r24, 2
     7ac:	28 c0       	rjmp	.+80     	; 0x7fe <Endpoint_Write_Control_Stream_LE+0x98>
     7ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7b2:	80 ff       	sbrs	r24, 0
     7b4:	eb cf       	rjmp	.-42     	; 0x78c <Endpoint_Write_Control_Stream_LE+0x26>
     7b6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     7ba:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     7be:	61 15       	cp	r22, r1
     7c0:	71 05       	cpc	r23, r1
     7c2:	51 f0       	breq	.+20     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x72>
     7c4:	88 30       	cpi	r24, 0x08	; 8
     7c6:	91 05       	cpc	r25, r1
     7c8:	38 f4       	brcc	.+14     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x72>
     7ca:	21 91       	ld	r18, Z+
     7cc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7d0:	61 50       	subi	r22, 0x01	; 1
     7d2:	71 09       	sbc	r23, r1
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	f3 cf       	rjmp	.-26     	; 0x7be <Endpoint_Write_Control_Stream_LE+0x58>
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	08 97       	sbiw	r24, 0x08	; 8
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0x7a>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7e4:	8e 77       	andi	r24, 0x7E	; 126
     7e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7ea:	d0 cf       	rjmp	.-96     	; 0x78c <Endpoint_Write_Control_Stream_LE+0x26>
     7ec:	21 11       	cpse	r18, r1
     7ee:	d1 cf       	rjmp	.-94     	; 0x792 <Endpoint_Write_Control_Stream_LE+0x2c>
     7f0:	06 c0       	rjmp	.+12     	; 0x7fe <Endpoint_Write_Control_Stream_LE+0x98>
     7f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     7f6:	88 23       	and	r24, r24
     7f8:	51 f0       	breq	.+20     	; 0x80e <Endpoint_Write_Control_Stream_LE+0xa8>
     7fa:	85 30       	cpi	r24, 0x05	; 5
     7fc:	51 f0       	breq	.+20     	; 0x812 <Endpoint_Write_Control_Stream_LE+0xac>
     7fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     802:	82 ff       	sbrs	r24, 2
     804:	f6 cf       	rjmp	.-20     	; 0x7f2 <Endpoint_Write_Control_Stream_LE+0x8c>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 95       	ret
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	08 95       	ret
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	08 95       	ret

00000816 <Endpoint_Read_Control_Stream_LE>:
     816:	61 15       	cp	r22, r1
     818:	71 05       	cpc	r23, r1
     81a:	29 f4       	brne	.+10     	; 0x826 <Endpoint_Read_Control_Stream_LE+0x10>
     81c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     820:	2b 77       	andi	r18, 0x7B	; 123
     822:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     826:	fc 01       	movw	r30, r24
     828:	61 15       	cp	r22, r1
     82a:	71 05       	cpc	r23, r1
     82c:	31 f1       	breq	.+76     	; 0x87a <Endpoint_Read_Control_Stream_LE+0x64>
     82e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     832:	88 23       	and	r24, r24
     834:	51 f1       	breq	.+84     	; 0x88a <Endpoint_Read_Control_Stream_LE+0x74>
     836:	85 30       	cpi	r24, 0x05	; 5
     838:	51 f1       	breq	.+84     	; 0x88e <Endpoint_Read_Control_Stream_LE+0x78>
     83a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     83e:	83 fd       	sbrc	r24, 3
     840:	22 c0       	rjmp	.+68     	; 0x886 <Endpoint_Read_Control_Stream_LE+0x70>
     842:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     846:	82 ff       	sbrs	r24, 2
     848:	ef cf       	rjmp	.-34     	; 0x828 <Endpoint_Read_Control_Stream_LE+0x12>
     84a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     84e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     852:	89 2b       	or	r24, r25
     854:	31 f0       	breq	.+12     	; 0x862 <Endpoint_Read_Control_Stream_LE+0x4c>
     856:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     85a:	81 93       	st	Z+, r24
     85c:	61 50       	subi	r22, 0x01	; 1
     85e:	71 09       	sbc	r23, r1
     860:	a1 f7       	brne	.-24     	; 0x84a <Endpoint_Read_Control_Stream_LE+0x34>
     862:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     866:	8b 77       	andi	r24, 0x7B	; 123
     868:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     86c:	dd cf       	rjmp	.-70     	; 0x828 <Endpoint_Read_Control_Stream_LE+0x12>
     86e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     872:	88 23       	and	r24, r24
     874:	51 f0       	breq	.+20     	; 0x88a <Endpoint_Read_Control_Stream_LE+0x74>
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	51 f0       	breq	.+20     	; 0x88e <Endpoint_Read_Control_Stream_LE+0x78>
     87a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87e:	80 ff       	sbrs	r24, 0
     880:	f6 cf       	rjmp	.-20     	; 0x86e <Endpoint_Read_Control_Stream_LE+0x58>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	08 95       	ret
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	08 95       	ret
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	08 95       	ret

00000892 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     892:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
     896:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
     89a:	26 17       	cp	r18, r22
     89c:	37 07       	cpc	r19, r23
     89e:	48 f0       	brcs	.+18     	; 0x8b2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8a0:	61 15       	cp	r22, r1
     8a2:	71 05       	cpc	r23, r1
     8a4:	39 f4       	brne	.+14     	; 0x8b4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8aa:	2e 77       	andi	r18, 0x7E	; 126
     8ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <Endpoint_Write_Control_PStream_LE+0x22>
     8b2:	b9 01       	movw	r22, r18
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8b8:	61 15       	cp	r22, r1
     8ba:	71 05       	cpc	r23, r1
     8bc:	71 f1       	breq	.+92     	; 0x91a <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8c2:	88 23       	and	r24, r24
     8c4:	d9 f1       	breq	.+118    	; 0x93c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8c6:	85 30       	cpi	r24, 0x05	; 5
     8c8:	d9 f1       	breq	.+118    	; 0x940 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8ce:	83 fd       	sbrc	r24, 3
     8d0:	33 c0       	rjmp	.+102    	; 0x938 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8d6:	82 fd       	sbrc	r24, 2
     8d8:	29 c0       	rjmp	.+82     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     8de:	80 ff       	sbrs	r24, 0
     8e0:	eb cf       	rjmp	.-42     	; 0x8b8 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     8e2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     8e6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     8ea:	61 15       	cp	r22, r1
     8ec:	71 05       	cpc	r23, r1
     8ee:	59 f0       	breq	.+22     	; 0x906 <Endpoint_Write_Control_PStream_LE+0x74>
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	91 05       	cpc	r25, r1
     8f4:	40 f4       	brcc	.+16     	; 0x906 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8f6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8f8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     8fc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     8fe:	61 50       	subi	r22, 0x01	; 1
     900:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	f2 cf       	rjmp	.-28     	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	08 97       	sbiw	r24, 0x08	; 8
     90a:	09 f0       	breq	.+2      	; 0x90e <Endpoint_Write_Control_PStream_LE+0x7c>
     90c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     90e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     912:	8e 77       	andi	r24, 0x7E	; 126
     914:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     918:	cf cf       	rjmp	.-98     	; 0x8b8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     91a:	21 11       	cpse	r18, r1
     91c:	d0 cf       	rjmp	.-96     	; 0x8be <Endpoint_Write_Control_PStream_LE+0x2c>
     91e:	06 c0       	rjmp	.+12     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     920:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     924:	88 23       	and	r24, r24
     926:	51 f0       	breq	.+20     	; 0x93c <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     928:	85 30       	cpi	r24, 0x05	; 5
     92a:	51 f0       	breq	.+20     	; 0x940 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     92c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     930:	82 ff       	sbrs	r24, 2
     932:	f6 cf       	rjmp	.-20     	; 0x920 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     940:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     942:	08 95       	ret

00000944 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	aa 97       	sbiw	r28, 0x2a	; 42
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	eb e1       	ldi	r30, 0x1B	; 27
     95e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     960:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     964:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	e3 32       	cpi	r30, 0x23	; 35
     96a:	f2 07       	cpc	r31, r18
     96c:	c9 f7       	brne	.-14     	; 0x960 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     96e:	65 dc       	rcall	.-1846   	; 0x23a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     970:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     974:	83 ff       	sbrs	r24, 3
     976:	1d c1       	rjmp	.+570    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     978:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     97c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x1>
     980:	49 2f       	mov	r20, r25
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	4a 30       	cpi	r20, 0x0A	; 10
     986:	51 05       	cpc	r21, r1
     988:	08 f0       	brcs	.+2      	; 0x98c <USB_Device_ProcessControlRequest+0x48>
     98a:	13 c1       	rjmp	.+550    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
     98c:	fa 01       	movw	r30, r20
     98e:	e4 5b       	subi	r30, 0xB4	; 180
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	33 c3       	rjmp	.+1638   	; 0xffa <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     994:	80 38       	cpi	r24, 0x80	; 128
     996:	81 f0       	breq	.+32     	; 0x9b8 <USB_Device_ProcessControlRequest+0x74>
     998:	82 38       	cpi	r24, 0x82	; 130
     99a:	09 f0       	breq	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0x5a>
     99c:	0a c1       	rjmp	.+532    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     99e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
     9a2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
     9ac:	85 fb       	bst	r24, 5
     9ae:	88 27       	eor	r24, r24
     9b0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     9b8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9bc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <USB_Device_RemoteWakeupEnabled>
     9c0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9c2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9c8:	97 7f       	andi	r25, 0xF7	; 247
     9ca:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     9d2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9d6:	c5 c0       	rjmp	.+394    	; 0xb62 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9d8:	28 2f       	mov	r18, r24
     9da:	2d 7f       	andi	r18, 0xFD	; 253
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0x9c>
     9de:	e9 c0       	rjmp	.+466    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9e0:	88 23       	and	r24, r24
     9e2:	19 f0       	breq	.+6      	; 0x9ea <USB_Device_ProcessControlRequest+0xa6>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	61 f0       	breq	.+24     	; 0xa00 <USB_Device_ProcessControlRequest+0xbc>
     9e8:	e4 c0       	rjmp	.+456    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     9ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0xb0>
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     9f4:	93 30       	cpi	r25, 0x03	; 3
     9f6:	09 f0       	breq	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0xb6>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_Device_RemoteWakeupEnabled>
     9fe:	2b c0       	rjmp	.+86     	; 0xa56 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a00:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     a04:	81 11       	cpse	r24, r1
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a08:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
     a0c:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a0e:	09 f4       	brne	.+2      	; 0xa12 <USB_Device_ProcessControlRequest+0xce>
     a10:	d0 c0       	rjmp	.+416    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a12:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a16:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a1a:	20 ff       	sbrs	r18, 0
     a1c:	1c c0       	rjmp	.+56     	; 0xa56 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a1e:	93 30       	cpi	r25, 0x03	; 3
     a20:	21 f4       	brne	.+8      	; 0xa2a <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a22:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	14 c0       	rjmp	.+40     	; 0xa52 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a2a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a2e:	90 61       	ori	r25, 0x10	; 16
     a30:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	a9 01       	movw	r20, r18
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <USB_Device_ProcessControlRequest+0xfc>
     a3c:	44 0f       	add	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	8a 95       	dec	r24
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <USB_Device_ProcessControlRequest+0xf8>
     a44:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     a48:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a4c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a56:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	83 c0       	rjmp	.+262    	; 0xb68 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a62:	81 11       	cpse	r24, r1
     a64:	a6 c0       	rjmp	.+332    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     a66:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     a6a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     a6c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     a6e:	f8 94       	cli
     a70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a7a:	b6 dc       	rcall	.-1684   	; 0x3e8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     a80:	80 ff       	sbrs	r24, 0
     a82:	fc cf       	rjmp	.-8      	; 0xa7c <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a84:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     a88:	80 78       	andi	r24, 0x80	; 128
     a8a:	81 2b       	or	r24, r17

				UDADDR = Temp;
     a8c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
     a90:	80 68       	ori	r24, 0x80	; 128
     a92:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     a96:	11 11       	cpse	r17, r1
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <USB_Device_ProcessControlRequest+0x15a>
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x15c>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     aa4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     aa6:	85 c0       	rjmp	.+266    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aa8:	80 58       	subi	r24, 0x80	; 128
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	08 f0       	brcs	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x16c>
     aae:	81 c0       	rjmp	.+258    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ab0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     ab4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
     ab8:	8c 3d       	cpi	r24, 0xDC	; 220
     aba:	53 e0       	ldi	r21, 0x03	; 3
     abc:	95 07       	cpc	r25, r21
     abe:	71 f5       	brne	.+92     	; 0xb1c <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ac4:	8a e2       	ldi	r24, 0x2A	; 42
     ac6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ac8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     aca:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     acc:	de 01       	movw	r26, r28
     ace:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ad0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ad2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ad4:	51 e2       	ldi	r21, 0x21	; 33
     ad6:	e3 2f       	mov	r30, r19
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     ade:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ae0:	20 ff       	sbrs	r18, 0
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
     ae4:	e2 95       	swap	r30
     ae6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     ae8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     aea:	ef 70       	andi	r30, 0x0F	; 15
     aec:	8e 2f       	mov	r24, r30
     aee:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     af0:	ea 30       	cpi	r30, 0x0A	; 10
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <USB_Device_ProcessControlRequest+0x1b4>
     af4:	c7 96       	adiw	r24, 0x37	; 55
     af6:	01 c0       	rjmp	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x1b6>
     af8:	c0 96       	adiw	r24, 0x30	; 48
     afa:	8d 93       	st	X+, r24
     afc:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	24 31       	cpi	r18, 0x14	; 20
     b02:	49 f7       	brne	.-46     	; 0xad6 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b04:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b10:	6a e2       	ldi	r22, 0x2A	; 42
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	26 de       	rcall	.-948    	; 0x766 <Endpoint_Write_Control_Stream_LE>
     b1a:	12 c0       	rjmp	.+36     	; 0xb40 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b1c:	ae 01       	movw	r20, r28
     b1e:	4f 5f       	subi	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
     b26:	eb db       	rcall	.-2090   	; 0x2fe <CALLBACK_USB_GetDescriptor>
     b28:	bc 01       	movw	r22, r24
     b2a:	89 2b       	or	r24, r25
     b2c:	09 f4       	brne	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0x1ec>
     b2e:	41 c0       	rjmp	.+130    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
     b30:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b34:	97 7f       	andi	r25, 0xF7	; 247
     b36:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	a9 de       	rcall	.-686    	; 0x892 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b44:	8b 77       	andi	r24, 0x7B	; 123
     b46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b4a:	33 c0       	rjmp	.+102    	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b4c:	80 38       	cpi	r24, 0x80	; 128
     b4e:	89 f5       	brne	.+98     	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b54:	87 7f       	andi	r24, 0xF7	; 247
     b56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b5a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b5e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b66:	8e 77       	andi	r24, 0x7E	; 126
     b68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     b6c:	3d dc       	rcall	.-1926   	; 0x3e8 <Endpoint_ClearStatusStage>
     b6e:	21 c0       	rjmp	.+66     	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b70:	81 11       	cpse	r24, r1
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b74:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     b78:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
     b7c:	99 27       	eor	r25, r25
     b7e:	02 97       	sbiw	r24, 0x02	; 2
     b80:	c4 f4       	brge	.+48     	; 0xbb2 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b86:	87 7f       	andi	r24, 0xF7	; 247
     b88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b8c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     b90:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     b94:	29 dc       	rcall	.-1966   	; 0x3e8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     b96:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_ConfigurationNumber>
     b9a:	81 11       	cpse	r24, r1
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b9e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ba2:	87 fd       	sbrc	r24, 7
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <USB_Device_ProcessControlRequest+0x266>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x268>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     bb0:	36 db       	rcall	.-2452   	; 0x21e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bb6:	83 ff       	sbrs	r24, 3
     bb8:	0a c0       	rjmp	.+20     	; 0xbce <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     bbe:	80 62       	ori	r24, 0x20	; 32
     bc0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     bce:	aa 96       	adiw	r28, 0x2a	; 42
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret

00000be4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     be4:	08 95       	ret

00000be6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     be6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     be8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     bec:	88 23       	and	r24, r24
     bee:	59 f0       	breq	.+22     	; 0xc06 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     bf0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     bf4:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bf6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     bfe:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     c00:	a1 de       	rcall	.-702    	; 0x944 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c02:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c0a:	6f 92       	push	r6
     c0c:	7f 92       	push	r7
     c0e:	8f 92       	push	r8
     c10:	9f 92       	push	r9
     c12:	af 92       	push	r10
     c14:	bf 92       	push	r11
     c16:	cf 92       	push	r12
     c18:	df 92       	push	r13
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	00 d0       	rcall	.+0      	; 0xc28 <HID_Device_ProcessControlRequest+0x1e>
     c28:	1f 92       	push	r1
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c30:	ad b6       	in	r10, 0x3d	; 61
     c32:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c38:	83 ff       	sbrs	r24, 3
     c3a:	f7 c0       	rjmp	.+494    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c3c:	f7 01       	movw	r30, r14
     c3e:	80 81       	ld	r24, Z
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
     c46:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x5>
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	09 f0       	breq	.+2      	; 0xc52 <HID_Device_ProcessControlRequest+0x48>
     c50:	ec c0       	rjmp	.+472    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
	  return;

	switch (USB_ControlRequest.bRequest)
     c52:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x1>
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	09 f4       	brne	.+2      	; 0xc5c <HID_Device_ProcessControlRequest+0x52>
     c5a:	96 c0       	rjmp	.+300    	; 0xd88 <HID_Device_ProcessControlRequest+0x17e>
     c5c:	30 f4       	brcc	.+12     	; 0xc6a <HID_Device_ProcessControlRequest+0x60>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	71 f0       	breq	.+28     	; 0xc7e <HID_Device_ProcessControlRequest+0x74>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	09 f4       	brne	.+2      	; 0xc68 <HID_Device_ProcessControlRequest+0x5e>
     c66:	c9 c0       	rjmp	.+402    	; 0xdfa <HID_Device_ProcessControlRequest+0x1f0>
     c68:	e0 c0       	rjmp	.+448    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
     c6a:	8a 30       	cpi	r24, 0x0A	; 10
     c6c:	09 f4       	brne	.+2      	; 0xc70 <HID_Device_ProcessControlRequest+0x66>
     c6e:	ad c0       	rjmp	.+346    	; 0xdca <HID_Device_ProcessControlRequest+0x1c0>
     c70:	8b 30       	cpi	r24, 0x0B	; 11
     c72:	09 f4       	brne	.+2      	; 0xc76 <HID_Device_ProcessControlRequest+0x6c>
     c74:	96 c0       	rjmp	.+300    	; 0xda2 <HID_Device_ProcessControlRequest+0x198>
     c76:	89 30       	cpi	r24, 0x09	; 9
     c78:	09 f0       	breq	.+2      	; 0xc7c <HID_Device_ProcessControlRequest+0x72>
     c7a:	d7 c0       	rjmp	.+430    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
     c7c:	48 c0       	rjmp	.+144    	; 0xd0e <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c7e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     c82:	81 3a       	cpi	r24, 0xA1	; 161
     c84:	09 f0       	breq	.+2      	; 0xc88 <HID_Device_ProcessControlRequest+0x7e>
     c86:	d1 c0       	rjmp	.+418    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
			{
     c88:	8d b6       	in	r8, 0x3d	; 61
     c8a:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     c90:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     c94:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
     c98:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     c9a:	f7 01       	movw	r30, r14
     c9c:	87 81       	ldd	r24, Z+7	; 0x07
     c9e:	48 2f       	mov	r20, r24
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	8d b7       	in	r24, 0x3d	; 61
     ca4:	9e b7       	in	r25, 0x3e	; 62
     ca6:	84 1b       	sub	r24, r20
     ca8:	95 0b       	sbc	r25, r21
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	9e bf       	out	0x3e, r25	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	8d bf       	out	0x3d, r24	; 61
     cb4:	ed b7       	in	r30, 0x3d	; 61
     cb6:	fe b7       	in	r31, 0x3e	; 62
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cf 01       	movw	r24, r30
     cc2:	ba d1       	rcall	.+884    	; 0x1038 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     cc4:	4f ef       	ldi	r20, 0xFF	; 255
     cc6:	41 0f       	add	r20, r17
     cc8:	8e 01       	movw	r16, r28
     cca:	0f 5f       	subi	r16, 0xFF	; 255
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	96 01       	movw	r18, r12
     cd0:	be 01       	movw	r22, r28
     cd2:	6d 5f       	subi	r22, 0xFD	; 253
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	c7 01       	movw	r24, r14
     cd8:	bf da       	rcall	.-2690   	; 0x258 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     cda:	f7 01       	movw	r30, r14
     cdc:	85 81       	ldd	r24, Z+5	; 0x05
     cde:	96 81       	ldd	r25, Z+6	; 0x06
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	21 f0       	breq	.+8      	; 0xcec <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     ce4:	47 81       	ldd	r20, Z+7	; 0x07
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	b6 01       	movw	r22, r12
     cea:	9d d1       	rcall	.+826    	; 0x1026 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     cfa:	69 81       	ldd	r22, Y+1	; 0x01
     cfc:	7a 81       	ldd	r23, Y+2	; 0x02
     cfe:	c6 01       	movw	r24, r12
     d00:	32 dd       	rcall	.-1436   	; 0x766 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d06:	8b 77       	andi	r24, 0x7B	; 123
     d08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d0c:	37 c0       	rjmp	.+110    	; 0xd7c <HID_Device_ProcessControlRequest+0x172>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d0e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     d12:	81 32       	cpi	r24, 0x21	; 33
     d14:	09 f0       	breq	.+2      	; 0xd18 <HID_Device_ProcessControlRequest+0x10e>
     d16:	89 c0       	rjmp	.+274    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
			{
     d18:	8d b6       	in	r8, 0x3d	; 61
     d1a:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d1c:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
     d20:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d24:	70 90 1d 01 	lds	r7, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     d28:	60 90 1e 01 	lds	r6, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d2c:	8d b7       	in	r24, 0x3d	; 61
     d2e:	9e b7       	in	r25, 0x3e	; 62
     d30:	80 1b       	sub	r24, r16
     d32:	91 0b       	sbc	r25, r17
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	9e bf       	out	0x3e, r25	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	8d bf       	out	0x3d, r24	; 61
     d3e:	ed b7       	in	r30, 0x3d	; 61
     d40:	fe b7       	in	r31, 0x3e	; 62
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     d50:	b8 01       	movw	r22, r16
     d52:	cf 01       	movw	r24, r30
     d54:	60 dd       	rcall	.-1344   	; 0x816 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d5a:	8e 77       	andi	r24, 0x7E	; 126
     d5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	71 10       	cpse	r7, r1
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <HID_Device_ProcessControlRequest+0x15e>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	02 1b       	sub	r16, r18
     d6c:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     d6e:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d70:	3d 1d       	adc	r19, r13
     d72:	4f ef       	ldi	r20, 0xFF	; 255
     d74:	46 0d       	add	r20, r6
     d76:	67 2d       	mov	r22, r7
     d78:	c7 01       	movw	r24, r14
     d7a:	b5 da       	rcall	.-2710   	; 0x2e6 <CALLBACK_HID_Device_ProcessHIDReport>
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	9e be       	out	0x3e, r9	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	8d be       	out	0x3d, r8	; 61
     d86:	51 c0       	rjmp	.+162    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d88:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     d8c:	81 3a       	cpi	r24, 0xA1	; 161
     d8e:	09 f0       	breq	.+2      	; 0xd92 <HID_Device_ProcessControlRequest+0x188>
     d90:	4c c0       	rjmp	.+152    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     d9c:	f7 01       	movw	r30, r14
     d9e:	80 85       	ldd	r24, Z+8	; 0x08
     da0:	3c c0       	rjmp	.+120    	; 0xe1a <HID_Device_ProcessControlRequest+0x210>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     da2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     da6:	81 32       	cpi	r24, 0x21	; 33
     da8:	09 f0       	breq	.+2      	; 0xdac <HID_Device_ProcessControlRequest+0x1a2>
     daa:	3f c0       	rjmp	.+126    	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
     dac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     db0:	87 7f       	andi	r24, 0xF7	; 247
     db2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     db6:	18 db       	rcall	.-2512   	; 0x3e8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     db8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	91 11       	cpse	r25, r1
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <HID_Device_ProcessControlRequest+0x1ba>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	f7 01       	movw	r30, r14
     dc6:	80 87       	std	Z+8, r24	; 0x08
     dc8:	30 c0       	rjmp	.+96     	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dca:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     dce:	81 32       	cpi	r24, 0x21	; 33
     dd0:	61 f5       	brne	.+88     	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
     dd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dd6:	87 7f       	andi	r24, 0xF7	; 247
     dd8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ddc:	05 db       	rcall	.-2550   	; 0x3e8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     dde:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
     de2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
     de6:	88 27       	eor	r24, r24
     de8:	36 e0       	ldi	r19, 0x06	; 6
     dea:	96 95       	lsr	r25
     dec:	87 95       	ror	r24
     dee:	3a 95       	dec	r19
     df0:	e1 f7       	brne	.-8      	; 0xdea <HID_Device_ProcessControlRequest+0x1e0>
     df2:	f7 01       	movw	r30, r14
     df4:	92 87       	std	Z+10, r25	; 0x0a
     df6:	81 87       	std	Z+9, r24	; 0x09
     df8:	18 c0       	rjmp	.+48     	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dfa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
     dfe:	81 3a       	cpi	r24, 0xA1	; 161
     e00:	a1 f4       	brne	.+40     	; 0xe2a <HID_Device_ProcessControlRequest+0x220>
     e02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e06:	87 7f       	andi	r24, 0xF7	; 247
     e08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e0c:	f7 01       	movw	r30, r14
     e0e:	81 85       	ldd	r24, Z+9	; 0x09
     e10:	92 85       	ldd	r25, Z+10	; 0x0a
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e18:	87 95       	ror	r24
     e1a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e22:	8e 77       	andi	r24, 0x7E	; 126
     e24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e28:	df da       	rcall	.-2626   	; 0x3e8 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	be be       	out	0x3e, r11	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	ad be       	out	0x3d, r10	; 61
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	9f 90       	pop	r9
     e50:	8f 90       	pop	r8
     e52:	7f 90       	pop	r7
     e54:	6f 90       	pop	r6
     e56:	08 95       	ret

00000e58 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e5e:	dc 01       	movw	r26, r24
     e60:	18 96       	adiw	r26, 0x08	; 8
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	ed 01       	movw	r28, r26
     e66:	19 92       	st	Y+, r1
     e68:	8a 95       	dec	r24
     e6a:	e9 f7       	brne	.-6      	; 0xe66 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount           = 500;
     e70:	84 ef       	ldi	r24, 0xF4	; 244
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	92 87       	std	Z+10, r25	; 0x0a
     e76:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     e78:	84 81       	ldd	r24, Z+4	; 0x04
     e7a:	81 11       	cpse	r24, r1
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <HID_Device_ConfigureEndpoints+0x2a>
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <HID_Device_ConfigureEndpoints+0x2c>
     e82:	44 e0       	ldi	r20, 0x04	; 4
     e84:	62 81       	ldd	r22, Z+2	; 0x02
     e86:	73 81       	ldd	r23, Z+3	; 0x03
     e88:	81 81       	ldd	r24, Z+1	; 0x01
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     e8a:	28 e0       	ldi	r18, 0x08	; 8
     e8c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     e8e:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e90:	26 17       	cp	r18, r22
     e92:	37 07       	cpc	r19, r23
     e94:	20 f4       	brcc	.+8      	; 0xe9e <HID_Device_ConfigureEndpoints+0x46>
				{
					MaskVal++;
     e96:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	f9 cf       	rjmp	.-14     	; 0xe90 <HID_Device_ConfigureEndpoints+0x38>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e9e:	42 60       	ori	r20, 0x02	; 2
     ea0:	92 95       	swap	r25
     ea2:	90 7f       	andi	r25, 0xF0	; 240
     ea4:	49 2b       	or	r20, r25
     ea6:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	69 ca       	rjmp	.-2862   	; 0x380 <Endpoint_ConfigureEndpoint_Prv>

00000eae <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <HID_Device_USBTask+0x20>
     ece:	1f 92       	push	r1
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     ed6:	ad b6       	in	r10, 0x3d	; 61
     ed8:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     eda:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_DeviceState>
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	09 f0       	breq	.+2      	; 0xee4 <HID_Device_USBTask+0x36>
     ee2:	73 c0       	rjmp	.+230    	; 0xfca <HID_Device_USBTask+0x11c>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     ee4:	f7 01       	movw	r30, r14
     ee6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ee8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
     ef0:	85 ff       	sbrs	r24, 5
     ef2:	6b c0       	rjmp	.+214    	; 0xfca <HID_Device_USBTask+0x11c>
	{
     ef4:	8d b6       	in	r8, 0x3d	; 61
     ef6:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ef8:	47 81       	ldd	r20, Z+7	; 0x07
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	8d b7       	in	r24, 0x3d	; 61
     efe:	9e b7       	in	r25, 0x3e	; 62
     f00:	84 1b       	sub	r24, r20
     f02:	95 0b       	sbc	r25, r21
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	9e bf       	out	0x3e, r25	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	8d bf       	out	0x3d, r24	; 61
     f0e:	ed b7       	in	r30, 0x3d	; 61
     f10:	fe b7       	in	r31, 0x3e	; 62
     f12:	31 96       	adiw	r30, 0x01	; 1
     f14:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     f16:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f18:	1a 82       	std	Y+2, r1	; 0x02
     f1a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	cf 01       	movw	r24, r30
     f22:	8a d0       	rcall	.+276    	; 0x1038 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f24:	8e 01       	movw	r16, r28
     f26:	0f 5f       	subi	r16, 0xFF	; 255
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	96 01       	movw	r18, r12
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	be 01       	movw	r22, r28
     f30:	6d 5f       	subi	r22, 0xFD	; 253
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	c7 01       	movw	r24, r14
     f36:	90 d9       	rcall	.-3296   	; 0x258 <CALLBACK_HID_Device_CreateHIDReport>
     f38:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f3a:	f7 01       	movw	r30, r14
     f3c:	81 85       	ldd	r24, Z+9	; 0x09
     f3e:	92 85       	ldd	r25, Z+10	; 0x0a
     f40:	89 2b       	or	r24, r25
     f42:	29 f0       	breq	.+10     	; 0xf4e <HID_Device_USBTask+0xa0>
     f44:	11 e0       	ldi	r17, 0x01	; 1
     f46:	83 85       	ldd	r24, Z+11	; 0x0b
     f48:	94 85       	ldd	r25, Z+12	; 0x0c
     f4a:	89 2b       	or	r24, r25
     f4c:	09 f0       	breq	.+2      	; 0xf50 <HID_Device_USBTask+0xa2>
     f4e:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f50:	f7 01       	movw	r30, r14
     f52:	65 80       	ldd	r6, Z+5	; 0x05
     f54:	76 80       	ldd	r7, Z+6	; 0x06
     f56:	61 14       	cp	r6, r1
     f58:	71 04       	cpc	r7, r1
     f5a:	81 f0       	breq	.+32     	; 0xf7c <HID_Device_USBTask+0xce>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f5c:	49 81       	ldd	r20, Y+1	; 0x01
     f5e:	5a 81       	ldd	r21, Y+2	; 0x02
     f60:	b3 01       	movw	r22, r6
     f62:	c6 01       	movw	r24, r12
     f64:	53 d0       	rcall	.+166    	; 0x100c <memcmp>
     f66:	01 e0       	ldi	r16, 0x01	; 1
     f68:	89 2b       	or	r24, r25
     f6a:	09 f4       	brne	.+2      	; 0xf6e <HID_Device_USBTask+0xc0>
     f6c:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f6e:	f7 01       	movw	r30, r14
     f70:	47 81       	ldd	r20, Z+7	; 0x07
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	b6 01       	movw	r22, r12
     f76:	c3 01       	movw	r24, r6
     f78:	56 d0       	rcall	.+172    	; 0x1026 <memcpy>
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <HID_Device_USBTask+0xd0>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     f7c:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	89 2b       	or	r24, r25
     f84:	e9 f0       	breq	.+58     	; 0xfc0 <HID_Device_USBTask+0x112>
     f86:	51 10       	cpse	r5, r1
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <HID_Device_USBTask+0xe4>
     f8a:	01 11       	cpse	r16, r1
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <HID_Device_USBTask+0xe4>
     f8e:	10 ff       	sbrs	r17, 0
     f90:	17 c0       	rjmp	.+46     	; 0xfc0 <HID_Device_USBTask+0x112>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     f92:	f7 01       	movw	r30, r14
     f94:	81 85       	ldd	r24, Z+9	; 0x09
     f96:	92 85       	ldd	r25, Z+10	; 0x0a
     f98:	94 87       	std	Z+12, r25	; 0x0c
     f9a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     f9c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fa6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     faa:	69 81       	ldd	r22, Y+1	; 0x01
     fac:	7a 81       	ldd	r23, Y+2	; 0x02
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	c6 01       	movw	r24, r12
     fb4:	8e db       	rcall	.-2276   	; 0x6d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fba:	8e 77       	andi	r24, 0x7E	; 126
     fbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	9e be       	out	0x3e, r9	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	8d be       	out	0x3d, r8	; 61

			Endpoint_ClearIN();
		}
	}
}
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	be be       	out	0x3e, r11	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	ad be       	out	0x3d, r10	; 61
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	9f 90       	pop	r9
     ff0:	8f 90       	pop	r8
     ff2:	7f 90       	pop	r7
     ff4:	6f 90       	pop	r6
     ff6:	5f 90       	pop	r5
     ff8:	08 95       	ret

00000ffa <__tablejump2__>:
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	00 24       	eor	r0, r0
    1000:	00 1c       	adc	r0, r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	07 90       	elpm	r0, Z+
    1006:	f6 91       	elpm	r31, Z
    1008:	e0 2d       	mov	r30, r0
    100a:	09 94       	ijmp

0000100c <memcmp>:
    100c:	fb 01       	movw	r30, r22
    100e:	dc 01       	movw	r26, r24
    1010:	04 c0       	rjmp	.+8      	; 0x101a <memcmp+0xe>
    1012:	8d 91       	ld	r24, X+
    1014:	01 90       	ld	r0, Z+
    1016:	80 19       	sub	r24, r0
    1018:	21 f4       	brne	.+8      	; 0x1022 <memcmp+0x16>
    101a:	41 50       	subi	r20, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	c8 f7       	brcc	.-14     	; 0x1012 <memcmp+0x6>
    1020:	88 1b       	sub	r24, r24
    1022:	99 0b       	sbc	r25, r25
    1024:	08 95       	ret

00001026 <memcpy>:
    1026:	fb 01       	movw	r30, r22
    1028:	dc 01       	movw	r26, r24
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <memcpy+0xa>
    102c:	01 90       	ld	r0, Z+
    102e:	0d 92       	st	X+, r0
    1030:	41 50       	subi	r20, 0x01	; 1
    1032:	50 40       	sbci	r21, 0x00	; 0
    1034:	d8 f7       	brcc	.-10     	; 0x102c <memcpy+0x6>
    1036:	08 95       	ret

00001038 <memset>:
    1038:	dc 01       	movw	r26, r24
    103a:	01 c0       	rjmp	.+2      	; 0x103e <memset+0x6>
    103c:	6d 93       	st	X+, r22
    103e:	41 50       	subi	r20, 0x01	; 1
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	e0 f7       	brcc	.-8      	; 0x103c <memset+0x4>
    1044:	08 95       	ret

00001046 <_exit>:
    1046:	f8 94       	cli

00001048 <__stop_program>:
    1048:	ff cf       	rjmp	.-2      	; 0x1048 <__stop_program>
