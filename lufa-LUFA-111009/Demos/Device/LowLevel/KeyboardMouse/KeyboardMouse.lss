
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000dc6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005105  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001adc  00000000  00000000  0000616d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c99  00000000  00000000  00007c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000a8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021d1  00000000  00000000  0000affc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d04  00000000  00000000  0000d1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000fed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ea c0       	rjmp	.+468    	; 0x1d6 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__bad_interrupt>
   6:	00 00       	nop
   8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__bad_interrupt>
   a:	00 00       	nop
   c:	f4 c0       	rjmp	.+488    	; 0x1f6 <__bad_interrupt>
   e:	00 00       	nop
  10:	f2 c0       	rjmp	.+484    	; 0x1f6 <__bad_interrupt>
  12:	00 00       	nop
  14:	f0 c0       	rjmp	.+480    	; 0x1f6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ee c0       	rjmp	.+476    	; 0x1f6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ea c0       	rjmp	.+468    	; 0x1f6 <__bad_interrupt>
  22:	00 00       	nop
  24:	e8 c0       	rjmp	.+464    	; 0x1f6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c3       	rjmp	.+1720   	; 0x6e2 <__vector_10>
  2a:	00 00       	nop
  2c:	e4 c0       	rjmp	.+456    	; 0x1f6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e2 c0       	rjmp	.+452    	; 0x1f6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__bad_interrupt>
  36:	00 00       	nop
  38:	de c0       	rjmp	.+444    	; 0x1f6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	dc c0       	rjmp	.+440    	; 0x1f6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	da c0       	rjmp	.+436    	; 0x1f6 <__bad_interrupt>
  42:	00 00       	nop
  44:	d8 c0       	rjmp	.+432    	; 0x1f6 <__bad_interrupt>
  46:	00 00       	nop
  48:	d6 c0       	rjmp	.+428    	; 0x1f6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d4 c0       	rjmp	.+424    	; 0x1f6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d2 c0       	rjmp	.+420    	; 0x1f6 <__bad_interrupt>
  52:	00 00       	nop
  54:	d0 c0       	rjmp	.+416    	; 0x1f6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ce c0       	rjmp	.+412    	; 0x1f6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cc c0       	rjmp	.+408    	; 0x1f6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	ca c0       	rjmp	.+404    	; 0x1f6 <__bad_interrupt>
  62:	00 00       	nop
  64:	c8 c0       	rjmp	.+400    	; 0x1f6 <__bad_interrupt>
  66:	00 00       	nop
  68:	c6 c0       	rjmp	.+396    	; 0x1f6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c4 c0       	rjmp	.+392    	; 0x1f6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c2 c0       	rjmp	.+388    	; 0x1f6 <__bad_interrupt>
  72:	00 00       	nop
  74:	c0 c0       	rjmp	.+384    	; 0x1f6 <__bad_interrupt>
  76:	00 00       	nop
  78:	be c0       	rjmp	.+380    	; 0x1f6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bc c0       	rjmp	.+376    	; 0x1f6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ba c0       	rjmp	.+372    	; 0x1f6 <__bad_interrupt>
  82:	00 00       	nop
  84:	b8 c0       	rjmp	.+368    	; 0x1f6 <__bad_interrupt>
  86:	00 00       	nop
  88:	b6 c0       	rjmp	.+364    	; 0x1f6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b4 c0       	rjmp	.+360    	; 0x1f6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b2 c0       	rjmp	.+356    	; 0x1f6 <__bad_interrupt>
  92:	00 00       	nop
  94:	b0 c0       	rjmp	.+352    	; 0x1f6 <__bad_interrupt>
  96:	00 00       	nop
  98:	5c 05       	cpc	r21, r12
  9a:	7e 05       	cpc	r23, r14
  9c:	6b 06       	cpc	r6, r27
  9e:	7e 05       	cpc	r23, r14
  a0:	6b 06       	cpc	r6, r27
  a2:	c3 05       	cpc	r28, r3
  a4:	e6 05       	cpc	r30, r6
  a6:	6b 06       	cpc	r6, r27
  a8:	38 06       	cpc	r3, r24
  aa:	4a 06       	cpc	r4, r26

000000ac <ProductString>:
  ac:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
  bc:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
  cc:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
  dc:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000e8 <ManufacturerString>:
  e8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  f8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000102 <LanguageString>:
 102:	04 03 09 04                                         ....

00000106 <ConfigurationDescriptor>:
 106:	09 02 49 00 02 01 00 c0 32 09 04 00 00 02 03 01     ..I.....2.......
 116:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 126:	00 01 07 05 02 03 08 00 01 09 04 01 00 01 03 01     ................
 136:	02 00 09 21 11 01 00 01 22 36 00 07 05 83 03 08     ...!...."6......
 146:	00 01 00 00 00 00 00 00 00                          .........

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
 15f:	00 01                                               ..

00000161 <KeyboardReport>:
 161:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 171:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 181:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 191:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000001a0 <MouseReport>:
 1a0:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 1b0:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 1c0:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
 1d0:	75 08 81 06 c0 c0                                   u.....

000001d6 <__ctors_end>:
 1d6:	11 24       	eor	r1, r1
 1d8:	1f be       	out	0x3f, r1	; 63
 1da:	cf ef       	ldi	r28, 0xFF	; 255
 1dc:	d0 e2       	ldi	r29, 0x20	; 32
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	cd bf       	out	0x3d, r28	; 61

000001e2 <__do_clear_bss>:
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	a0 e0       	ldi	r26, 0x00	; 0
 1e6:	b1 e0       	ldi	r27, 0x01	; 1
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
 1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
 1ec:	a8 31       	cpi	r26, 0x18	; 24
 1ee:	b2 07       	cpc	r27, r18
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
 1f2:	40 d1       	rcall	.+640    	; 0x474 <main>
 1f4:	ac c5       	rjmp	.+2904   	; 0xd4e <_exit>

000001f6 <__bad_interrupt>:
 1f6:	04 cf       	rjmp	.-504    	; 0x0 <__vectors>

000001f8 <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1f8:	83 b1       	in	r24, 0x03	; 3
 1fa:	9c b1       	in	r25, 0x0c	; 12
 1fc:	90 95       	com	r25
 1fe:	90 73       	andi	r25, 0x30	; 48
 200:	96 95       	lsr	r25
 202:	80 95       	com	r24
 204:	80 7e       	andi	r24, 0xE0	; 224
			}
 206:	89 2b       	or	r24, r25
 208:	08 95       	ret

0000020a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	9f 70       	andi	r25, 0x0F	; 15
 20e:	89 2b       	or	r24, r25
 210:	8b b9       	out	0x0b, r24	; 11
 212:	08 95       	ret

00000214 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 214:	84 b7       	in	r24, 0x34	; 52
 216:	87 7f       	andi	r24, 0xF7	; 247
 218:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	a8 95       	wdr
 220:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 224:	88 61       	ori	r24, 0x18	; 24
 226:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 22a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 22e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 23c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 240:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 242:	84 b1       	in	r24, 0x04	; 4
 244:	8f 71       	andi	r24, 0x1F	; 31
 246:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	8f 7c       	andi	r24, 0xCF	; 207
 24c:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	80 6e       	ori	r24, 0xE0	; 224
 252:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 254:	8e b1       	in	r24, 0x0e	; 14
 256:	80 63       	ori	r24, 0x30	; 48
 258:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	80 6f       	ori	r24, 0xF0	; 240
 25e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 266:	27 c2       	rjmp	.+1102   	; 0x6b6 <USB_Init>

00000268 <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 268:	80 ea       	ldi	r24, 0xA0	; 160
 26a:	cf cf       	rjmp	.-98     	; 0x20a <LEDs_SetAllLEDs>

0000026c <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	cd cf       	rjmp	.-102    	; 0x20a <LEDs_SetAllLEDs>

00000270 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 270:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 272:	42 e0       	ldi	r20, 0x02	; 2
 274:	61 ec       	ldi	r22, 0xC1	; 193
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	53 d1       	rcall	.+678    	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
 27a:	c8 2f       	mov	r28, r24
 27c:	42 e0       	ldi	r20, 0x02	; 2
 27e:	60 ec       	ldi	r22, 0xC0	; 192
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	4e d1       	rcall	.+668    	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
 284:	c8 23       	and	r28, r24
 286:	42 e0       	ldi	r20, 0x02	; 2
 288:	61 ec       	ldi	r22, 0xC1	; 193
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	49 d1       	rcall	.+658    	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 28e:	cc 23       	and	r28, r28
 290:	11 f0       	breq	.+4      	; 0x296 <EVENT_USB_Device_ConfigurationChanged+0x26>
 292:	81 11       	cpse	r24, r1
 294:	02 c0       	rjmp	.+4      	; 0x29a <EVENT_USB_Device_ConfigurationChanged+0x2a>
 296:	80 e9       	ldi	r24, 0x90	; 144
 298:	01 c0       	rjmp	.+2      	; 0x29c <EVENT_USB_Device_ConfigurationChanged+0x2c>
}
 29a:	80 e6       	ldi	r24, 0x60	; 96
	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 29c:	cf 91       	pop	r28
 29e:	b5 cf       	rjmp	.-150    	; 0x20a <LEDs_SetAllLEDs>

000002a0 <Keyboard_ProcessLEDReport>:
 *  LED report can be sent through either the control endpoint (via a HID SetReport request) or the HID OUT
 *  endpoint, the processing code is placed here to avoid duplicating it and potentially having different
 *  behaviour depending on the method used to sent it.
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
 2a0:	98 2f       	mov	r25, r24
	uint8_t LEDMask = LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
 2a2:	80 ff       	sbrs	r24, 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Keyboard_ProcessLEDReport+0xa>
	  LEDMask |= LEDS_LED1;
 2a6:	80 e3       	ldi	r24, 0x30	; 48
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <Keyboard_ProcessLEDReport+0xc>
 *  endpoint, the processing code is placed here to avoid duplicating it and potentially having different
 *  behaviour depending on the method used to sent it.
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;
 2aa:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
 2ac:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
 2ae:	80 68       	ori	r24, 0x80	; 128

	if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
 2b0:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
 2b2:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
 2b4:	aa cf       	rjmp	.-172    	; 0x20a <LEDs_SetAllLEDs>

000002b6 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
	uint8_t* ReportData;
	uint8_t  ReportSize;

	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 2be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <USB_ControlRequest+0x1>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	19 f0       	breq	.+6      	; 0x2cc <EVENT_USB_Device_ControlRequest+0x16>
 2c6:	89 30       	cpi	r24, 0x09	; 9
 2c8:	51 f1       	breq	.+84     	; 0x31e <EVENT_USB_Device_ControlRequest+0x68>
 2ca:	49 c0       	rjmp	.+146    	; 0x35e <EVENT_USB_Device_ControlRequest+0xa8>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>
 2d0:	81 3a       	cpi	r24, 0xA1	; 161
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <EVENT_USB_Device_ControlRequest+0x20>
 2d4:	44 c0       	rjmp	.+136    	; 0x35e <EVENT_USB_Device_ControlRequest+0xa8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
 2e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 2e4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USB_ControlRequest+0x5>
 2e8:	89 2b       	or	r24, r25
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x3e>
					ReportSize = sizeof(KeyboardReportData);
				}
				else
				{
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
 2ec:	c3 e0       	ldi	r28, 0x03	; 3
					ReportData = (uint8_t*)&KeyboardReportData;
					ReportSize = sizeof(KeyboardReportData);
				}
				else
				{
					ReportData = (uint8_t*)&MouseReportData;
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	11 e0       	ldi	r17, 0x01	; 1
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <EVENT_USB_Device_ControlRequest+0x44>

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
				{
					ReportData = (uint8_t*)&KeyboardReportData;
					ReportSize = sizeof(KeyboardReportData);
 2f4:	c8 e0       	ldi	r28, 0x08	; 8
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
				{
					ReportData = (uint8_t*)&KeyboardReportData;
 2f6:	03 e0       	ldi	r16, 0x03	; 3
 2f8:	11 e0       	ldi	r17, 0x01	; 1
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
				}

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
 2fc:	be 01       	movw	r22, r28
 2fe:	c8 01       	movw	r24, r16
 300:	02 d3       	rcall	.+1540   	; 0x906 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 302:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 306:	8b 77       	andi	r24, 0x7B	; 123
 308:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
 30c:	ae 01       	movw	r20, r28
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	c8 01       	movw	r24, r16
				Keyboard_ProcessLEDReport(LEDStatus);
			}

			break;
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
 31a:	0f 91       	pop	r16
 31c:	11 c5       	rjmp	.+2594   	; 0xd40 <memset>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 31e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>
 322:	81 32       	cpi	r24, 0x21	; 33
 324:	e1 f4       	brne	.+56     	; 0x35e <EVENT_USB_Device_ControlRequest+0xa8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 326:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 330:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 334:	82 fd       	sbrc	r24, 2
 336:	05 c0       	rjmp	.+10     	; 0x342 <EVENT_USB_Device_ControlRequest+0x8c>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 338:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 33c:	81 11       	cpse	r24, r1
 33e:	f8 cf       	rjmp	.-16     	; 0x330 <EVENT_USB_Device_ControlRequest+0x7a>
 340:	0e c0       	rjmp	.+28     	; 0x35e <EVENT_USB_Device_ControlRequest+0xa8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 342:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 34a:	8b 77       	andi	r24, 0x7B	; 123
 34c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 350:	1b d1       	rcall	.+566    	; 0x588 <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
 352:	8c 2f       	mov	r24, r28
			}

			break;
	}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
 35a:	0f 91       	pop	r16
 35c:	a1 cf       	rjmp	.-190    	; 0x2a0 <Keyboard_ProcessLEDReport>
			}

			break;
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <Keyboard_HID_Task>:
 *  keyboard IN endpoint when the host is ready for more data. Additionally, it processes host LED status
 *  reports sent to the device via the keyboard OUT reporting endpoint.
 */
void Keyboard_HID_Task(void)
{
	uint8_t JoyStatus_LCL = Joystick_GetStatus();
 368:	47 df       	rcall	.-370    	; 0x1f8 <Joystick_GetStatus>

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 36a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <USB_DeviceState>
 36e:	94 30       	cpi	r25, 0x04	; 4
 370:	09 f0       	breq	.+2      	; 0x374 <Keyboard_HID_Task+0xc>
 372:	43 c0       	rjmp	.+134    	; 0x3fa <Keyboard_HID_Task+0x92>
	  return;

	/* Check if board button is not pressed, if so mouse mode enabled */
	if (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
 374:	62 9b       	sbis	0x0c, 2	; 12
 376:	18 c0       	rjmp	.+48     	; 0x3a8 <Keyboard_HID_Task+0x40>
	{
		/* Make sent key uppercase by indicating that the left shift key is pressed */
		KeyboardReportData.Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
 378:	22 e0       	ldi	r18, 0x02	; 2
 37a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <KeyboardReportData>

		if (JoyStatus_LCL & JOY_UP)
 37e:	87 fd       	sbrc	r24, 7
 380:	03 c0       	rjmp	.+6      	; 0x388 <Keyboard_HID_Task+0x20>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_A;
		else if (JoyStatus_LCL & JOY_DOWN)
 382:	84 ff       	sbrs	r24, 4
 384:	03 c0       	rjmp	.+6      	; 0x38c <Keyboard_HID_Task+0x24>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_B;
 386:	95 e0       	ldi	r25, 0x05	; 5
 388:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <KeyboardReportData+0x2>

		if (JoyStatus_LCL & JOY_LEFT)
 38c:	86 ff       	sbrs	r24, 6
 38e:	02 c0       	rjmp	.+4      	; 0x394 <Keyboard_HID_Task+0x2c>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_C;
 390:	96 e0       	ldi	r25, 0x06	; 6
 392:	03 c0       	rjmp	.+6      	; 0x39a <Keyboard_HID_Task+0x32>
		else if (JoyStatus_LCL & JOY_RIGHT)
 394:	83 ff       	sbrs	r24, 3
 396:	03 c0       	rjmp	.+6      	; 0x39e <Keyboard_HID_Task+0x36>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_D;
 398:	97 e0       	ldi	r25, 0x07	; 7
 39a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <KeyboardReportData+0x2>

		if (JoyStatus_LCL & JOY_PRESS)
 39e:	85 ff       	sbrs	r24, 5
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <Keyboard_HID_Task+0x40>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_E;
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <KeyboardReportData+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 3b2:	85 ff       	sbrs	r24, 5
 3b4:	13 c0       	rjmp	.+38     	; 0x3dc <Keyboard_HID_Task+0x74>
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	68 e0       	ldi	r22, 0x08	; 8
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	57 d2       	rcall	.+1198   	; 0x872 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3c8:	8e 77       	andi	r24, 0x7E	; 126
 3ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&KeyboardReportData, 0, sizeof(KeyboardReportData));
 3ce:	88 e0       	ldi	r24, 0x08	; 8
 3d0:	e3 e0       	ldi	r30, 0x03	; 3
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	df 01       	movw	r26, r30
 3d6:	1d 92       	st	X+, r1
 3d8:	8a 95       	dec	r24
 3da:	e9 f7       	brne	.-6      	; 0x3d6 <Keyboard_HID_Task+0x6e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 3e6:	85 ff       	sbrs	r24, 5
 3e8:	08 c0       	rjmp	.+16     	; 0x3fa <Keyboard_HID_Task+0x92>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 3ea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	{
		/* Read in and process the LED report from the host */
		Keyboard_ProcessLEDReport(Endpoint_Read_8());
 3ee:	58 df       	rcall	.-336    	; 0x2a0 <Keyboard_ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3f4:	8b 77       	andi	r24, 0x7B	; 123
 3f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3fa:	08 95       	ret

000003fc <Mouse_HID_Task>:

/** Mouse task. This generates the next mouse HID report for the host, and transmits it via the
 *  mouse IN endpoint when the host is ready for more data.
 */
void Mouse_HID_Task(void)
{
 3fc:	cf 93       	push	r28
	uint8_t JoyStatus_LCL = Joystick_GetStatus();
 3fe:	fc de       	rcall	.-520    	; 0x1f8 <Joystick_GetStatus>

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 400:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <USB_DeviceState>
 404:	94 30       	cpi	r25, 0x04	; 4
 406:	a1 f5       	brne	.+104    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	  return;

	/* Check if board button is pressed, if so mouse mode enabled */
	if (Buttons_GetStatus() & BUTTONS_BUTTON1)
 408:	62 99       	sbic	0x0c, 2	; 12
 40a:	19 c0       	rjmp	.+50     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		if (JoyStatus_LCL & JOY_UP)
 40c:	87 ff       	sbrs	r24, 7
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		  MouseReportData.Y =  1;
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		else if (JoyStatus_LCL & JOY_DOWN)
 414:	84 ff       	sbrs	r24, 4
 416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		  MouseReportData.Y = -1;
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>

		if (JoyStatus_LCL & JOY_RIGHT)
 41e:	83 ff       	sbrs	r24, 3
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		  MouseReportData.X =  1;
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		else if (JoyStatus_LCL & JOY_LEFT)
 426:	86 ff       	sbrs	r24, 6
 428:	03 c0       	rjmp	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		  MouseReportData.X = -1;
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>

		if (JoyStatus_LCL & JOY_PRESS)
 430:	85 ff       	sbrs	r24, 5
 432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		  MouseReportData.Button |= (1 << 0);
 434:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 43e:	c3 e0       	ldi	r28, 0x03	; 3
 440:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 444:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

	/* Check if Mouse Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 448:	85 ff       	sbrs	r24, 5
 44a:	12 c0       	rjmp	.+36     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	{
		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0c d2       	rcall	.+1048   	; 0x872 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 45a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 45e:	8e 77       	andi	r24, 0x7E	; 126
 460:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&MouseReportData, 0, sizeof(MouseReportData));
 464:	e0 e0       	ldi	r30, 0x00	; 0
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	df 01       	movw	r26, r30
 46a:	1d 92       	st	X+, r1
 46c:	ca 95       	dec	r28
 46e:	e9 f7       	brne	.-6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	}
}
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 474:	cf de       	rcall	.-610    	; 0x214 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 476:	80 e1       	ldi	r24, 0x10	; 16
 478:	c8 de       	rcall	.-624    	; 0x20a <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		Keyboard_HID_Task();
 47a:	78 94       	sei
		Mouse_HID_Task();
 47c:	75 df       	rcall	.-278    	; 0x368 <Keyboard_HID_Task>
 47e:	be df       	rcall	.-132    	; 0x3fc <Mouse_HID_Task>
		USB_USBTask();
 480:	44 d4       	rcall	.+2184   	; 0xd0a <USB_USBTask>
 482:	fc cf       	rjmp	.-8      	; 0x47c <main+0x8>

00000484 <CALLBACK_USB_GetDescriptor>:
 484:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 486:	33 27       	eor	r19, r19
 488:	23 30       	cpi	r18, 0x03	; 3
 48a:	31 05       	cpc	r19, r1
 48c:	c1 f0       	breq	.+48     	; 0x4be <CALLBACK_USB_GetDescriptor+0x3a>
 48e:	58 f4       	brcc	.+22     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x22>
 490:	21 30       	cpi	r18, 0x01	; 1
 492:	31 05       	cpc	r19, r1
 494:	79 f0       	breq	.+30     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x30>
 496:	22 30       	cpi	r18, 0x02	; 2
 498:	31 05       	cpc	r19, r1
 49a:	91 f5       	brne	.+100    	; 0x500 <CALLBACK_USB_GetDescriptor+0x7c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 49c:	89 e4       	ldi	r24, 0x49	; 73
 49e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 4a0:	26 e0       	ldi	r18, 0x06	; 6
 4a2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 4a4:	39 c0       	rjmp	.+114    	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4a6:	21 32       	cpi	r18, 0x21	; 33
 4a8:	31 05       	cpc	r19, r1
 4aa:	e1 f0       	breq	.+56     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x60>
 4ac:	22 32       	cpi	r18, 0x22	; 34
 4ae:	31 05       	cpc	r19, r1
 4b0:	01 f1       	breq	.+64     	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x6e>
 4b2:	26 c0       	rjmp	.+76     	; 0x500 <CALLBACK_USB_GetDescriptor+0x7c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 4b4:	82 e1       	ldi	r24, 0x12	; 18
 4b6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 4b8:	2f e4       	ldi	r18, 0x4F	; 79
 4ba:	31 e0       	ldi	r19, 0x01	; 1
 4bc:	2d c0       	rjmp	.+90     	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 4be:	99 27       	eor	r25, r25
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	91 05       	cpc	r25, r1
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x54>
 4c6:	28 f0       	brcs	.+10     	; 0x4d2 <CALLBACK_USB_GetDescriptor+0x4e>
 4c8:	02 97       	sbiw	r24, 0x02	; 2
 4ca:	d1 f4       	brne	.+52     	; 0x500 <CALLBACK_USB_GetDescriptor+0x7c>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4cc:	ec ea       	ldi	r30, 0xAC	; 172
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4d2:	e2 e0       	ldi	r30, 0x02	; 2
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <CALLBACK_USB_GetDescriptor+0x58>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4d8:	e8 ee       	ldi	r30, 0xE8	; 232
 4da:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4dc:	84 91       	lpm	r24, Z
 4de:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 4e0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 4e2:	1a c0       	rjmp	.+52     	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
 4e4:	89 e0       	ldi	r24, 0x09	; 9
 4e6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
 4e8:	66 23       	and	r22, r22
 4ea:	79 f0       	breq	.+30     	; 0x50a <CALLBACK_USB_GetDescriptor+0x86>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
 4ec:	28 e3       	ldi	r18, 0x38	; 56
 4ee:	31 e0       	ldi	r19, 0x01	; 1
 4f0:	13 c0       	rjmp	.+38     	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
 4f2:	66 23       	and	r22, r22
 4f4:	69 f0       	breq	.+26     	; 0x510 <CALLBACK_USB_GetDescriptor+0x8c>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
 4f6:	86 e3       	ldi	r24, 0x36	; 54
 4f8:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
 4fa:	20 ea       	ldi	r18, 0xA0	; 160
 4fc:	31 e0       	ldi	r19, 0x01	; 1
 4fe:	0c c0       	rjmp	.+24     	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	07 c0       	rjmp	.+14     	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
 50a:	28 e1       	ldi	r18, 0x18	; 24
 50c:	31 e0       	ldi	r19, 0x01	; 1
 50e:	04 c0       	rjmp	.+8      	; 0x518 <CALLBACK_USB_GetDescriptor+0x94>
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
 510:	8f e3       	ldi	r24, 0x3F	; 63
 512:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
 514:	21 e6       	ldi	r18, 0x61	; 97
 516:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
 518:	fa 01       	movw	r30, r20
 51a:	31 83       	std	Z+1, r19	; 0x01
 51c:	20 83       	st	Z, r18
	return Size;
}
 51e:	08 95       	ret

00000520 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 520:	98 2f       	mov	r25, r24
 522:	97 30       	cpi	r25, 0x07	; 7
 524:	68 f5       	brcc	.+90     	; 0x580 <Endpoint_ConfigureEndpoint_Prv+0x60>
 526:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 52a:	98 17       	cp	r25, r24
 52c:	39 f0       	breq	.+14     	; 0x53c <Endpoint_ConfigureEndpoint_Prv+0x1c>
 52e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 532:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 536:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 53a:	03 c0       	rjmp	.+6      	; 0x542 <Endpoint_ConfigureEndpoint_Prv+0x22>
 53c:	24 2f       	mov	r18, r20
 53e:	76 2f       	mov	r23, r22
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	21 fd       	sbrc	r18, 1
 544:	02 c0       	rjmp	.+4      	; 0x54a <Endpoint_ConfigureEndpoint_Prv+0x2a>
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	ec cf       	rjmp	.-40     	; 0x522 <Endpoint_ConfigureEndpoint_Prv+0x2>
 54a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 54e:	3e 7f       	andi	r19, 0xFE	; 254
 550:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 554:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 558:	3d 7f       	andi	r19, 0xFD	; 253
 55a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 55e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 562:	31 60       	ori	r19, 0x01	; 1
 564:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 568:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 56c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 570:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 574:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 578:	27 fd       	sbrc	r18, 7
 57a:	e5 cf       	rjmp	.-54     	; 0x546 <Endpoint_ConfigureEndpoint_Prv+0x26>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
 580:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	08 95       	ret

00000588 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 588:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>
 58c:	87 ff       	sbrs	r24, 7
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 594:	82 fd       	sbrc	r24, 2
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 598:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 59c:	81 11       	cpse	r24, r1
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <Endpoint_ClearStatusStage+0x8>
 5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a6:	8b 77       	andi	r24, 0x7B	; 123
 5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 5ae:	88 23       	and	r24, r24
 5b0:	49 f0       	breq	.+18     	; 0x5c4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5b6:	80 ff       	sbrs	r24, 0
 5b8:	f8 cf       	rjmp	.-16     	; 0x5aa <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5be:	8e 77       	andi	r24, 0x7E	; 126
 5c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c4:	08 95       	ret

000005c6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 5c6:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5ca:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 5ce:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 5d0:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 5d4:	84 2f       	mov	r24, r20
 5d6:	81 70       	andi	r24, 0x01	; 1
 5d8:	40 ff       	sbrs	r20, 0
 5da:	23 c0       	rjmp	.+70     	; 0x622 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 5e0:	80 fd       	sbrc	r24, 0
 5e2:	1d c0       	rjmp	.+58     	; 0x61e <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e8:	88 23       	and	r24, r24
 5ea:	99 f0       	breq	.+38     	; 0x612 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ec:	85 30       	cpi	r24, 0x05	; 5
 5ee:	99 f0       	breq	.+38     	; 0x616 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5f4:	85 fd       	sbrc	r24, 5
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <Endpoint_WaitUntilReady+0x54>
 5f8:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 5fc:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 600:	24 17       	cp	r18, r20
 602:	35 07       	cpc	r19, r21
 604:	29 f3       	breq	.-54     	; 0x5d0 <Endpoint_WaitUntilReady+0xa>
 606:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 608:	11 f0       	breq	.+4      	; 0x60e <Endpoint_WaitUntilReady+0x48>
 60a:	9a 01       	movw	r18, r20
 60c:	e1 cf       	rjmp	.-62     	; 0x5d0 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 622:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 626:	42 ff       	sbrs	r20, 2
 628:	dd cf       	rjmp	.-70     	; 0x5e4 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 62a:	08 95       	ret

0000062c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 634:	49 d0       	rcall	.+146    	; 0x6c8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 636:	50 d0       	rcall	.+160    	; 0x6d8 <USB_INT_ClearAllInterrupts>
 638:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	88 81       	ld	r24, Y
 63e:	8f 77       	andi	r24, 0x7F	; 127
 640:	88 83       	st	Y, r24
 642:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 644:	80 68       	ori	r24, 0x80	; 128
 646:	88 83       	st	Y, r24
 648:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 64a:	8f 7d       	andi	r24, 0xDF	; 223
 64c:	88 83       	st	Y, r24
 64e:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	80 68       	ori	r24, 0x80	; 128
 656:	80 83       	st	Z, r24
 658:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 65a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 65e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 662:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 666:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 66a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 66c:	10 e0       	ldi	r17, 0x00	; 0
 66e:	f8 01       	movw	r30, r16
 670:	80 81       	ld	r24, Z
 672:	8b 7f       	andi	r24, 0xFB	; 251
 674:	80 83       	st	Z, r24
 676:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	88 83       	st	Y, r24
 67c:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	4e df       	rcall	.-356    	; 0x520 <Endpoint_ConfigureEndpoint_Prv>
 684:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	8e 7f       	andi	r24, 0xFE	; 254
 68c:	80 83       	st	Z, r24
 68e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	81 60       	ori	r24, 0x01	; 1
 696:	80 83       	st	Z, r24
 698:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 69a:	88 60       	ori	r24, 0x08	; 8
 69c:	80 83       	st	Z, r24
 69e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6a0:	80 81       	ld	r24, Z
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
 6a6:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 6a8:	80 61       	ori	r24, 0x10	; 16
 6aa:	88 83       	st	Y, r24
 6ac:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	08 95       	ret

000006b6 <USB_Init>:
 6b6:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_IsInitialized>

	USB_ResetInterface();
 6c6:	b2 cf       	rjmp	.-156    	; 0x62c <USB_ResetInterface>

000006c8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 6c8:	e8 ed       	ldi	r30, 0xD8	; 216
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	8c 7f       	andi	r24, 0xFC	; 252
 6d0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 6d2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6d6:	08 95       	ret

000006d8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 6d8:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 6dc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6e0:	08 95       	ret

000006e2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	0b b6       	in	r0, 0x3b	; 59
 6ee:	0f 92       	push	r0
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 708:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 70c:	82 ff       	sbrs	r24, 2
 70e:	0a c0       	rjmp	.+20     	; 0x724 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 710:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 714:	82 ff       	sbrs	r24, 2
 716:	06 c0       	rjmp	.+12     	; 0x724 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 718:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 71c:	8b 7f       	andi	r24, 0xFB	; 251
 71e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 722:	f2 d2       	rcall	.+1508   	; 0xd08 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 724:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 728:	80 ff       	sbrs	r24, 0
 72a:	1d c0       	rjmp	.+58     	; 0x766 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 72c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 730:	80 ff       	sbrs	r24, 0
 732:	19 c0       	rjmp	.+50     	; 0x766 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 734:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 738:	8e 7f       	andi	r24, 0xFE	; 254
 73a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 73e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 742:	80 ff       	sbrs	r24, 0
 744:	0c c0       	rjmp	.+24     	; 0x75e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 746:	8c e0       	ldi	r24, 0x0C	; 12
 748:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 74a:	8e e0       	ldi	r24, 0x0E	; 14
 74c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 74e:	09 b4       	in	r0, 0x29	; 41
 750:	00 fe       	sbrs	r0, 0
 752:	fd cf       	rjmp	.-6      	; 0x74e <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
			EVENT_USB_Device_Connect();
 75a:	86 dd       	rcall	.-1268   	; 0x268 <EVENT_USB_Device_Connect>
 75c:	04 c0       	rjmp	.+8      	; 0x766 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 75e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 760:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 764:	83 dd       	rcall	.-1274   	; 0x26c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 766:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 76a:	80 ff       	sbrs	r24, 0
 76c:	18 c0       	rjmp	.+48     	; 0x79e <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 76e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 772:	80 ff       	sbrs	r24, 0
 774:	14 c0       	rjmp	.+40     	; 0x79e <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 776:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 77a:	8e 7f       	andi	r24, 0xFE	; 254
 77c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 780:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 784:	80 61       	ori	r24, 0x10	; 16
 786:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 78a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 78e:	80 62       	ori	r24, 0x20	; 32
 790:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 794:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 796:	85 e0       	ldi	r24, 0x05	; 5
 798:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 79c:	b5 d2       	rcall	.+1386   	; 0xd08 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 79e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7a2:	84 ff       	sbrs	r24, 4
 7a4:	2d c0       	rjmp	.+90     	; 0x800 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 7a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7aa:	84 ff       	sbrs	r24, 4
 7ac:	29 c0       	rjmp	.+82     	; 0x800 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7ae:	8c e0       	ldi	r24, 0x0C	; 12
 7b0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7b2:	8e e0       	ldi	r24, 0x0E	; 14
 7b4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7b6:	09 b4       	in	r0, 0x29	; 41
 7b8:	00 fe       	sbrs	r0, 0
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 7bc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 7c0:	8f 7d       	andi	r24, 0xDF	; 223
 7c2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 7c6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 7ca:	8f 7e       	andi	r24, 0xEF	; 239
 7cc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 7d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7d4:	8f 7e       	andi	r24, 0xEF	; 239
 7d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7da:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 7de:	81 60       	ori	r24, 0x01	; 1
 7e0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 7e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
 7e8:	81 11       	cpse	r24, r1
 7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7ec:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7f0:	87 fd       	sbrc	r24, 7
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__vector_10+0x116>
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <__vector_10+0x118>
 7f8:	84 e0       	ldi	r24, 0x04	; 4
 7fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7fe:	84 d2       	rcall	.+1288   	; 0xd08 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 800:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 804:	83 ff       	sbrs	r24, 3
 806:	22 c0       	rjmp	.+68     	; 0x84c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 808:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 80c:	83 ff       	sbrs	r24, 3
 80e:	1e c0       	rjmp	.+60     	; 0x84c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 810:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 814:	87 7f       	andi	r24, 0xF7	; 247
 816:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 820:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 824:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 82e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 832:	8e 7f       	andi	r24, 0xFE	; 254
 834:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 838:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 83c:	80 61       	ori	r24, 0x10	; 16
 83e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 842:	42 e0       	ldi	r20, 0x02	; 2
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	6b de       	rcall	.-810    	; 0x520 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 84a:	5e d2       	rcall	.+1212   	; 0xd08 <USB_Event_Stub>
 84c:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 84e:	ef 91       	pop	r30
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	0f 90       	pop	r0
 866:	0b be       	out	0x3b, r0	; 59
 868:	0f 90       	pop	r0
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	0f 90       	pop	r0
 86e:	1f 90       	pop	r1
 870:	18 95       	reti

00000872 <Endpoint_Write_Stream_LE>:
 872:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 874:	df 92       	push	r13
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	ec 01       	movw	r28, r24
 884:	8b 01       	movw	r16, r22
 886:	7a 01       	movw	r14, r20
 888:	9e de       	rcall	.-708    	; 0x5c6 <Endpoint_WaitUntilReady>
 88a:	81 11       	cpse	r24, r1
 88c:	33 c0       	rjmp	.+102    	; 0x8f4 <Endpoint_Write_Stream_LE+0x82>
 88e:	e1 14       	cp	r14, r1
 890:	f1 04       	cpc	r15, r1
 892:	39 f0       	breq	.+14     	; 0x8a2 <Endpoint_Write_Stream_LE+0x30>
 894:	f7 01       	movw	r30, r14
 896:	80 81       	ld	r24, Z
 898:	91 81       	ldd	r25, Z+1	; 0x01
 89a:	08 1b       	sub	r16, r24
 89c:	19 0b       	sbc	r17, r25
 89e:	c8 0f       	add	r28, r24
 8a0:	d9 1f       	adc	r29, r25
 8a2:	c1 2c       	mov	r12, r1
 8a4:	d1 2c       	mov	r13, r1
 8a6:	01 15       	cp	r16, r1
 8a8:	11 05       	cpc	r17, r1
 8aa:	19 f1       	breq	.+70     	; 0x8f2 <Endpoint_Write_Stream_LE+0x80>
 8ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b0:	85 fd       	sbrc	r24, 5
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <Endpoint_Write_Stream_LE+0x6e>
 8b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b8:	8e 77       	andi	r24, 0x7E	; 126
 8ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8be:	25 d2       	rcall	.+1098   	; 0xd0a <USB_USBTask>
 8c0:	e1 14       	cp	r14, r1
 8c2:	f1 04       	cpc	r15, r1
 8c4:	49 f0       	breq	.+18     	; 0x8d8 <Endpoint_Write_Stream_LE+0x66>
 8c6:	f7 01       	movw	r30, r14
 8c8:	80 81       	ld	r24, Z
 8ca:	91 81       	ldd	r25, Z+1	; 0x01
 8cc:	c8 0e       	add	r12, r24
 8ce:	d9 1e       	adc	r13, r25
 8d0:	d1 82       	std	Z+1, r13	; 0x01
 8d2:	c0 82       	st	Z, r12
 8d4:	85 e0       	ldi	r24, 0x05	; 5
 8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <Endpoint_Write_Stream_LE+0x82>
 8d8:	76 de       	rcall	.-788    	; 0x5c6 <Endpoint_WaitUntilReady>
 8da:	88 23       	and	r24, r24
 8dc:	21 f3       	breq	.-56     	; 0x8a6 <Endpoint_Write_Stream_LE+0x34>
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <Endpoint_Write_Stream_LE+0x82>
 8e0:	89 91       	ld	r24, Y+
 8e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8e6:	01 50       	subi	r16, 0x01	; 1
 8e8:	11 09       	sbc	r17, r1
 8ea:	ff ef       	ldi	r31, 0xFF	; 255
 8ec:	cf 1a       	sub	r12, r31
 8ee:	df 0a       	sbc	r13, r31
 8f0:	da cf       	rjmp	.-76     	; 0x8a6 <Endpoint_Write_Stream_LE+0x34>
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	08 95       	ret

00000906 <Endpoint_Write_Control_Stream_LE>:
 906:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <USB_ControlRequest+0x6>
 90a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <USB_ControlRequest+0x7>
 90e:	26 17       	cp	r18, r22
 910:	37 07       	cpc	r19, r23
 912:	48 f0       	brcs	.+18     	; 0x926 <Endpoint_Write_Control_Stream_LE+0x20>
 914:	61 15       	cp	r22, r1
 916:	71 05       	cpc	r23, r1
 918:	39 f4       	brne	.+14     	; 0x928 <Endpoint_Write_Control_Stream_LE+0x22>
 91a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 91e:	2e 77       	andi	r18, 0x7E	; 126
 920:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 924:	01 c0       	rjmp	.+2      	; 0x928 <Endpoint_Write_Control_Stream_LE+0x22>
 926:	b9 01       	movw	r22, r18
 928:	fc 01       	movw	r30, r24
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	69 f1       	breq	.+90     	; 0x98c <Endpoint_Write_Control_Stream_LE+0x86>
 932:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 936:	88 23       	and	r24, r24
 938:	d1 f1       	breq	.+116    	; 0x9ae <Endpoint_Write_Control_Stream_LE+0xa8>
 93a:	85 30       	cpi	r24, 0x05	; 5
 93c:	d1 f1       	breq	.+116    	; 0x9b2 <Endpoint_Write_Control_Stream_LE+0xac>
 93e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 942:	83 fd       	sbrc	r24, 3
 944:	32 c0       	rjmp	.+100    	; 0x9aa <Endpoint_Write_Control_Stream_LE+0xa4>
 946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94a:	82 fd       	sbrc	r24, 2
 94c:	28 c0       	rjmp	.+80     	; 0x99e <Endpoint_Write_Control_Stream_LE+0x98>
 94e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 952:	80 ff       	sbrs	r24, 0
 954:	eb cf       	rjmp	.-42     	; 0x92c <Endpoint_Write_Control_Stream_LE+0x26>
 956:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 95a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 95e:	61 15       	cp	r22, r1
 960:	71 05       	cpc	r23, r1
 962:	51 f0       	breq	.+20     	; 0x978 <Endpoint_Write_Control_Stream_LE+0x72>
 964:	88 30       	cpi	r24, 0x08	; 8
 966:	91 05       	cpc	r25, r1
 968:	38 f4       	brcc	.+14     	; 0x978 <Endpoint_Write_Control_Stream_LE+0x72>
 96a:	21 91       	ld	r18, Z+
 96c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 970:	61 50       	subi	r22, 0x01	; 1
 972:	71 09       	sbc	r23, r1
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	f3 cf       	rjmp	.-26     	; 0x95e <Endpoint_Write_Control_Stream_LE+0x58>
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	08 97       	sbiw	r24, 0x08	; 8
 97c:	09 f0       	breq	.+2      	; 0x980 <Endpoint_Write_Control_Stream_LE+0x7a>
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 984:	8e 77       	andi	r24, 0x7E	; 126
 986:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 98a:	d0 cf       	rjmp	.-96     	; 0x92c <Endpoint_Write_Control_Stream_LE+0x26>
 98c:	21 11       	cpse	r18, r1
 98e:	d1 cf       	rjmp	.-94     	; 0x932 <Endpoint_Write_Control_Stream_LE+0x2c>
 990:	06 c0       	rjmp	.+12     	; 0x99e <Endpoint_Write_Control_Stream_LE+0x98>
 992:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 996:	88 23       	and	r24, r24
 998:	51 f0       	breq	.+20     	; 0x9ae <Endpoint_Write_Control_Stream_LE+0xa8>
 99a:	85 30       	cpi	r24, 0x05	; 5
 99c:	51 f0       	breq	.+20     	; 0x9b2 <Endpoint_Write_Control_Stream_LE+0xac>
 99e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9a2:	82 ff       	sbrs	r24, 2
 9a4:	f6 cf       	rjmp	.-20     	; 0x992 <Endpoint_Write_Control_Stream_LE+0x8c>
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	08 95       	ret
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	08 95       	ret
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	08 95       	ret
 9b2:	83 e0       	ldi	r24, 0x03	; 3
 9b4:	08 95       	ret

000009b6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9b6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <USB_ControlRequest+0x6>
 9ba:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <USB_ControlRequest+0x7>
 9be:	26 17       	cp	r18, r22
 9c0:	37 07       	cpc	r19, r23
 9c2:	48 f0       	brcs	.+18     	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9c4:	61 15       	cp	r22, r1
 9c6:	71 05       	cpc	r23, r1
 9c8:	39 f4       	brne	.+14     	; 0x9d8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9ca:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9ce:	2e 77       	andi	r18, 0x7E	; 126
 9d0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <Endpoint_Write_Control_PStream_LE+0x22>
 9d6:	b9 01       	movw	r22, r18
 9d8:	fc 01       	movw	r30, r24
 9da:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9dc:	61 15       	cp	r22, r1
 9de:	71 05       	cpc	r23, r1
 9e0:	71 f1       	breq	.+92     	; 0xa3e <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9e6:	88 23       	and	r24, r24
 9e8:	d9 f1       	breq	.+118    	; 0xa60 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9ea:	85 30       	cpi	r24, 0x05	; 5
 9ec:	d9 f1       	breq	.+118    	; 0xa64 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9f2:	83 fd       	sbrc	r24, 3
 9f4:	33 c0       	rjmp	.+102    	; 0xa5c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9fa:	82 fd       	sbrc	r24, 2
 9fc:	29 c0       	rjmp	.+82     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 a02:	80 ff       	sbrs	r24, 0
 a04:	eb cf       	rjmp	.-42     	; 0x9dc <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a06:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 a0a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 a0e:	61 15       	cp	r22, r1
 a10:	71 05       	cpc	r23, r1
 a12:	59 f0       	breq	.+22     	; 0xa2a <Endpoint_Write_Control_PStream_LE+0x74>
 a14:	88 30       	cpi	r24, 0x08	; 8
 a16:	91 05       	cpc	r25, r1
 a18:	40 f4       	brcc	.+16     	; 0xa2a <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a1a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a1c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 a20:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 a22:	61 50       	subi	r22, 0x01	; 1
 a24:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	f2 cf       	rjmp	.-28     	; 0xa0e <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 a2a:	21 e0       	ldi	r18, 0x01	; 1
 a2c:	08 97       	sbiw	r24, 0x08	; 8
 a2e:	09 f0       	breq	.+2      	; 0xa32 <Endpoint_Write_Control_PStream_LE+0x7c>
 a30:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a36:	8e 77       	andi	r24, 0x7E	; 126
 a38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a3c:	cf cf       	rjmp	.-98     	; 0x9dc <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a3e:	21 11       	cpse	r18, r1
 a40:	d0 cf       	rjmp	.-96     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0x2c>
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a44:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a48:	88 23       	and	r24, r24
 a4a:	51 f0       	breq	.+20     	; 0xa60 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a4c:	85 30       	cpi	r24, 0x05	; 5
 a4e:	51 f0       	breq	.+20     	; 0xa64 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a54:	82 ff       	sbrs	r24, 2
 a56:	f6 cf       	rjmp	.-20     	; 0xa44 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 a60:	82 e0       	ldi	r24, 0x02	; 2
 a62:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 a64:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a66:	08 95       	ret

00000a68 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a68:	0f 93       	push	r16
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
 a74:	aa 97       	sbiw	r28, 0x2a	; 42
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	e0 e1       	ldi	r30, 0x10	; 16
 a82:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a84:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a88:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a8a:	21 e0       	ldi	r18, 0x01	; 1
 a8c:	e8 31       	cpi	r30, 0x18	; 24
 a8e:	f2 07       	cpc	r31, r18
 a90:	c9 f7       	brne	.-14     	; 0xa84 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a92:	11 dc       	rcall	.-2014   	; 0x2b6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 a98:	83 ff       	sbrs	r24, 3
 a9a:	1d c1       	rjmp	.+570    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a9c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 aa0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <USB_ControlRequest+0x1>
 aa4:	49 2f       	mov	r20, r25
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	4a 30       	cpi	r20, 0x0A	; 10
 aaa:	51 05       	cpc	r21, r1
 aac:	08 f0       	brcs	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x48>
 aae:	13 c1       	rjmp	.+550    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
 ab0:	fa 01       	movw	r30, r20
 ab2:	e4 5b       	subi	r30, 0xB4	; 180
 ab4:	ff 4f       	sbci	r31, 0xFF	; 255
 ab6:	3b c1       	rjmp	.+630    	; 0xd2e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ab8:	80 38       	cpi	r24, 0x80	; 128
 aba:	81 f0       	breq	.+32     	; 0xadc <USB_Device_ProcessControlRequest+0x74>
 abc:	82 38       	cpi	r24, 0x82	; 130
 abe:	09 f0       	breq	.+2      	; 0xac2 <USB_Device_ProcessControlRequest+0x5a>
 ac0:	0a c1       	rjmp	.+532    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ac2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 ac6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ac8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 acc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 ad0:	85 fb       	bst	r24, 5
 ad2:	88 27       	eor	r24, r24
 ad4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ad6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 adc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ae0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <USB_Device_RemoteWakeupEnabled>
 ae4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ae6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ae8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aec:	97 7f       	andi	r25, 0xF7	; 247
 aee:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 af2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 af6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 afa:	c5 c0       	rjmp	.+394    	; 0xc86 <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 afc:	28 2f       	mov	r18, r24
 afe:	2d 7f       	andi	r18, 0xFD	; 253
 b00:	09 f0       	breq	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0x9c>
 b02:	e9 c0       	rjmp	.+466    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b04:	88 23       	and	r24, r24
 b06:	19 f0       	breq	.+6      	; 0xb0e <USB_Device_ProcessControlRequest+0xa6>
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	61 f0       	breq	.+24     	; 0xb24 <USB_Device_ProcessControlRequest+0xbc>
 b0c:	e4 c0       	rjmp	.+456    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b0e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Device_ProcessControlRequest+0xb0>
 b16:	df c0       	rjmp	.+446    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b18:	93 30       	cpi	r25, 0x03	; 3
 b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0xb6>
 b1c:	80 e0       	ldi	r24, 0x00	; 0
 b1e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <USB_Device_RemoteWakeupEnabled>
 b22:	2b c0       	rjmp	.+86     	; 0xb7a <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b24:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 b28:	81 11       	cpse	r24, r1
 b2a:	27 c0       	rjmp	.+78     	; 0xb7a <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b2c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 b30:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b32:	09 f4       	brne	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0xce>
 b34:	d0 c0       	rjmp	.+416    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b36:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b3a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b3e:	20 ff       	sbrs	r18, 0
 b40:	1c c0       	rjmp	.+56     	; 0xb7a <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b42:	93 30       	cpi	r25, 0x03	; 3
 b44:	21 f4       	brne	.+8      	; 0xb4e <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b46:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b4a:	80 62       	ori	r24, 0x20	; 32
 b4c:	14 c0       	rjmp	.+40     	; 0xb76 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b4e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b52:	90 61       	ori	r25, 0x10	; 16
 b54:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b58:	21 e0       	ldi	r18, 0x01	; 1
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	a9 01       	movw	r20, r18
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <USB_Device_ProcessControlRequest+0xfc>
 b60:	44 0f       	add	r20, r20
 b62:	55 1f       	adc	r21, r21
 b64:	8a 95       	dec	r24
 b66:	e2 f7       	brpl	.-8      	; 0xb60 <USB_Device_ProcessControlRequest+0xf8>
 b68:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 b6c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b74:	88 60       	ori	r24, 0x08	; 8
 b76:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b7a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b82:	87 7f       	andi	r24, 0xF7	; 247
 b84:	83 c0       	rjmp	.+262    	; 0xc8c <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b86:	81 11       	cpse	r24, r1
 b88:	a6 c0       	rjmp	.+332    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b8a:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 b8e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b90:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b92:	f8 94       	cli
 b94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b98:	87 7f       	andi	r24, 0xF7	; 247
 b9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b9e:	f4 dc       	rcall	.-1560   	; 0x588 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ba0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ba4:	80 ff       	sbrs	r24, 0
 ba6:	fc cf       	rjmp	.-8      	; 0xba0 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ba8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 bac:	80 78       	andi	r24, 0x80	; 128
 bae:	81 2b       	or	r24, r17

				UDADDR = Temp;
 bb0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 bb4:	80 68       	ori	r24, 0x80	; 128
 bb6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bba:	11 11       	cpse	r17, r1
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <USB_Device_ProcessControlRequest+0x15a>
 bbe:	82 e0       	ldi	r24, 0x02	; 2
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <USB_Device_ProcessControlRequest+0x15c>
 bc2:	83 e0       	ldi	r24, 0x03	; 3
 bc4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bc8:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 bca:	85 c0       	rjmp	.+266    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bcc:	80 58       	subi	r24, 0x80	; 128
 bce:	82 30       	cpi	r24, 0x02	; 2
 bd0:	08 f0       	brcs	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x16c>
 bd2:	81 c0       	rjmp	.+258    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bd4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 bd8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x3>
 bdc:	8c 3d       	cpi	r24, 0xDC	; 220
 bde:	53 e0       	ldi	r21, 0x03	; 3
 be0:	95 07       	cpc	r25, r21
 be2:	71 f5       	brne	.+92     	; 0xc40 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 be4:	83 e0       	ldi	r24, 0x03	; 3
 be6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 be8:	8a e2       	ldi	r24, 0x2A	; 42
 bea:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bec:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bee:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bf0:	de 01       	movw	r26, r28
 bf2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bf4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bf6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bf8:	51 e2       	ldi	r21, 0x21	; 33
 bfa:	e3 2f       	mov	r30, r19
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
 bfe:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 c02:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 c04:	20 ff       	sbrs	r18, 0
 c06:	03 c0       	rjmp	.+6      	; 0xc0e <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 c08:	e2 95       	swap	r30
 c0a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c0c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 c0e:	ef 70       	andi	r30, 0x0F	; 15
 c10:	8e 2f       	mov	r24, r30
 c12:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c14:	ea 30       	cpi	r30, 0x0A	; 10
 c16:	10 f0       	brcs	.+4      	; 0xc1c <USB_Device_ProcessControlRequest+0x1b4>
 c18:	c7 96       	adiw	r24, 0x37	; 55
 c1a:	01 c0       	rjmp	.+2      	; 0xc1e <USB_Device_ProcessControlRequest+0x1b6>
 c1c:	c0 96       	adiw	r24, 0x30	; 48
 c1e:	8d 93       	st	X+, r24
 c20:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c22:	2f 5f       	subi	r18, 0xFF	; 255
 c24:	24 31       	cpi	r18, 0x14	; 20
 c26:	49 f7       	brne	.-46     	; 0xbfa <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c28:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c2e:	87 7f       	andi	r24, 0xF7	; 247
 c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c34:	6a e2       	ldi	r22, 0x2A	; 42
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	ce 01       	movw	r24, r28
 c3a:	01 96       	adiw	r24, 0x01	; 1
 c3c:	64 de       	rcall	.-824    	; 0x906 <Endpoint_Write_Control_Stream_LE>
 c3e:	12 c0       	rjmp	.+36     	; 0xc64 <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c40:	ae 01       	movw	r20, r28
 c42:	4f 5f       	subi	r20, 0xFF	; 255
 c44:	5f 4f       	sbci	r21, 0xFF	; 255
 c46:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <USB_ControlRequest+0x4>
 c4a:	1c dc       	rcall	.-1992   	; 0x484 <CALLBACK_USB_GetDescriptor>
 c4c:	bc 01       	movw	r22, r24
 c4e:	89 2b       	or	r24, r25
 c50:	09 f4       	brne	.+2      	; 0xc54 <USB_Device_ProcessControlRequest+0x1ec>
 c52:	41 c0       	rjmp	.+130    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
 c54:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c58:	97 7f       	andi	r25, 0xF7	; 247
 c5a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c5e:	89 81       	ldd	r24, Y+1	; 0x01
 c60:	9a 81       	ldd	r25, Y+2	; 0x02
 c62:	a9 de       	rcall	.-686    	; 0x9b6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c68:	8b 77       	andi	r24, 0x7B	; 123
 c6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c6e:	33 c0       	rjmp	.+102    	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c70:	80 38       	cpi	r24, 0x80	; 128
 c72:	89 f5       	brne	.+98     	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c78:	87 7f       	andi	r24, 0xF7	; 247
 c7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c7e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c8a:	8e 77       	andi	r24, 0x7E	; 126
 c8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c90:	7b dc       	rcall	.-1802   	; 0x588 <Endpoint_ClearStatusStage>
 c92:	21 c0       	rjmp	.+66     	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c94:	81 11       	cpse	r24, r1
 c96:	1f c0       	rjmp	.+62     	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c98:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 c9c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USB_ControlRequest+0x3>
 ca0:	99 27       	eor	r25, r25
 ca2:	02 97       	sbiw	r24, 0x02	; 2
 ca4:	c4 f4       	brge	.+48     	; 0xcd6 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ca6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 caa:	87 7f       	andi	r24, 0xF7	; 247
 cac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cb0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_ControlRequest+0x2>
 cb4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 cb8:	67 dc       	rcall	.-1842   	; 0x588 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 cba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_Device_ConfigurationNumber>
 cbe:	81 11       	cpse	r24, r1
 cc0:	06 c0       	rjmp	.+12     	; 0xcce <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cc2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cc6:	87 fd       	sbrc	r24, 7
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <USB_Device_ProcessControlRequest+0x266>
 cca:	81 e0       	ldi	r24, 0x01	; 1
 ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <USB_Device_ProcessControlRequest+0x268>
 cce:	84 e0       	ldi	r24, 0x04	; 4
 cd0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 cd4:	cd da       	rcall	.-2662   	; 0x270 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cda:	83 ff       	sbrs	r24, 3
 cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cde:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 ce2:	80 62       	ori	r24, 0x20	; 32
 ce4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ce8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cec:	87 7f       	andi	r24, 0xF7	; 247
 cee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 cf2:	aa 96       	adiw	r28, 0x2a	; 42
 cf4:	0f b6       	in	r0, 0x3f	; 63
 cf6:	f8 94       	cli
 cf8:	de bf       	out	0x3e, r29	; 62
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	cd bf       	out	0x3d, r28	; 61
 cfe:	df 91       	pop	r29
 d00:	cf 91       	pop	r28
 d02:	1f 91       	pop	r17
 d04:	0f 91       	pop	r16
 d06:	08 95       	ret

00000d08 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 d08:	08 95       	ret

00000d0a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d0a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 d0c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_DeviceState>
 d10:	88 23       	and	r24, r24
 d12:	59 f0       	breq	.+22     	; 0xd2a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 d14:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 d18:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d1a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 d22:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 d24:	a1 de       	rcall	.-702    	; 0xa68 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d26:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 d2a:	cf 91       	pop	r28
 d2c:	08 95       	ret

00000d2e <__tablejump2__>:
 d2e:	ee 0f       	add	r30, r30
 d30:	ff 1f       	adc	r31, r31
 d32:	00 24       	eor	r0, r0
 d34:	00 1c       	adc	r0, r0
 d36:	0b be       	out	0x3b, r0	; 59
 d38:	07 90       	elpm	r0, Z+
 d3a:	f6 91       	elpm	r31, Z
 d3c:	e0 2d       	mov	r30, r0
 d3e:	09 94       	ijmp

00000d40 <memset>:
 d40:	dc 01       	movw	r26, r24
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <memset+0x6>
 d44:	6d 93       	st	X+, r22
 d46:	41 50       	subi	r20, 0x01	; 1
 d48:	50 40       	sbci	r21, 0x00	; 0
 d4a:	e0 f7       	brcc	.-8      	; 0xd44 <memset+0x4>
 d4c:	08 95       	ret

00000d4e <_exit>:
 d4e:	f8 94       	cli

00000d50 <__stop_program>:
 d50:	ff cf       	rjmp	.-2      	; 0xd50 <__stop_program>
