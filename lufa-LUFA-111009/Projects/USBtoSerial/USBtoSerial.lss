
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f88  0000101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800116  00800116  00001032  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063b8  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f4b  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034be  00000000  00000000  00009677  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000950  00000000  00000000  0000cb38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002886  00000000  00000000  0000d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003735  00000000  00000000  0000fd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00013443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
   2:	00 00       	nop
   4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
   a:	00 00       	nop
   c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
   e:	00 00       	nop
  10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
  22:	00 00       	nop
  24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
  26:	00 00       	nop
  28:	ee c2       	rjmp	.+1500   	; 0x606 <__vector_10>
  2a:	00 00       	nop
  2c:	b4 c3       	rjmp	.+1896   	; 0x796 <__vector_11>
  2e:	00 00       	nop
  30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
  32:	00 00       	nop
  34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
  36:	00 00       	nop
  38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
  42:	00 00       	nop
  44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
  46:	00 00       	nop
  48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
  52:	00 00       	nop
  54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
  56:	00 00       	nop
  58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
  5e:	00 00       	nop
  60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c1       	rjmp	.+742    	; 0x34c <__vector_25>
  66:	00 00       	nop
  68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
  72:	00 00       	nop
  74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
  76:	00 00       	nop
  78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
  7e:	00 00       	nop
  80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
  82:	00 00       	nop
  84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
  86:	00 00       	nop
  88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
  8e:	00 00       	nop
  90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
  92:	00 00       	nop
  94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
  96:	00 00       	nop
  98:	e4 04       	cpc	r14, r4
  9a:	06 05       	cpc	r16, r6
  9c:	f1 05       	cpc	r31, r1
  9e:	06 05       	cpc	r16, r6
  a0:	f1 05       	cpc	r31, r1
  a2:	4b 05       	cpc	r20, r11
  a4:	6d 05       	cpc	r22, r13
  a6:	f1 05       	cpc	r31, r1
  a8:	bf 05       	cpc	r27, r15
  aa:	d1 05       	cpc	r29, r1

000000ac <ProductString>:
  ac:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
  bc:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
  cc:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000dc <ManufacturerString>:
  dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
  f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
  fa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
 10a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 11a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 12a:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000138 <DeviceDescriptor>:
 138:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
 148:	dc 01                                               ..

0000014a <__ctors_end>:
 14a:	11 24       	eor	r1, r1
 14c:	1f be       	out	0x3f, r1	; 63
 14e:	cf ef       	ldi	r28, 0xFF	; 255
 150:	d0 e2       	ldi	r29, 0x20	; 32
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
 156:	11 e0       	ldi	r17, 0x01	; 1
 158:	a0 e0       	ldi	r26, 0x00	; 0
 15a:	b1 e0       	ldi	r27, 0x01	; 1
 15c:	e8 e8       	ldi	r30, 0x88	; 136
 15e:	ff e0       	ldi	r31, 0x0F	; 15
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	0b bf       	out	0x3b, r16	; 59
 164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x14>
 166:	07 90       	elpm	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	a6 31       	cpi	r26, 0x16	; 22
 16c:	b1 07       	cpc	r27, r17
 16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0x10>

00000170 <__do_clear_bss>:
 170:	22 e0       	ldi	r18, 0x02	; 2
 172:	a6 e1       	ldi	r26, 0x16	; 22
 174:	b1 e0       	ldi	r27, 0x01	; 1
 176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
 178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
 17a:	a8 33       	cpi	r26, 0x38	; 56
 17c:	b2 07       	cpc	r27, r18
 17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
 180:	5c d0       	rcall	.+184    	; 0x23a <main>
 182:	00 c7       	rjmp	.+3584   	; 0xf84 <_exit>

00000184 <__bad_interrupt>:
 184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	89 2b       	or	r24, r25
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	08 95       	ret

00000190 <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 190:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
 192:	a0 81       	ld	r26, Z
 194:	b1 81       	ldd	r27, Z+1	; 0x01
 196:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
 1a2:	26 81       	ldd	r18, Z+6	; 0x06
 1a4:	37 81       	ldd	r19, Z+7	; 0x07
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
 1ac:	84 81       	ldd	r24, Z+4	; 0x04
 1ae:	95 81       	ldd	r25, Z+5	; 0x05
 1b0:	91 83       	std	Z+1, r25	; 0x01
 1b2:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 1b4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 1b6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
 1b8:	81 85       	ldd	r24, Z+9	; 0x09
 1ba:	92 85       	ldd	r25, Z+10	; 0x0a
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	92 87       	std	Z+10, r25	; 0x0a
 1c0:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1c2:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 1c4:	08 95       	ret

000001c6 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 1c6:	fc 01       	movw	r30, r24
		
			uint8_t Data = *Buffer->Out;
 1c8:	a2 81       	ldd	r26, Z+2	; 0x02
 1ca:	b3 81       	ldd	r27, Z+3	; 0x03
 1cc:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
 1ce:	b3 83       	std	Z+3, r27	; 0x03
 1d0:	a2 83       	std	Z+2, r26	; 0x02
 1d2:	26 81       	ldd	r18, Z+6	; 0x06
 1d4:	37 81       	ldd	r19, Z+7	; 0x07
 1d6:	a2 17       	cp	r26, r18
 1d8:	b3 07       	cpc	r27, r19
 1da:	21 f4       	brne	.+8      	; 0x1e4 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
 1dc:	24 81       	ldd	r18, Z+4	; 0x04
 1de:	35 81       	ldd	r19, Z+5	; 0x05
 1e0:	33 83       	std	Z+3, r19	; 0x03
 1e2:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 1e4:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 1e6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
 1e8:	21 85       	ldd	r18, Z+9	; 0x09
 1ea:	32 85       	ldd	r19, Z+10	; 0x0a
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	31 09       	sbc	r19, r1
 1f0:	32 87       	std	Z+10, r19	; 0x0a
 1f2:	21 87       	std	Z+9, r18	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1f4:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
 1f6:	08 95       	ret

000001f8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1f8:	84 b7       	in	r24, 0x34	; 52
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	a8 95       	wdr
 204:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 208:	88 61       	ori	r24, 0x18	; 24
 20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 20e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 212:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 220:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 224:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	80 6f       	ori	r24, 0xF0	; 240
 22a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 232:	d3 d1       	rcall	.+934    	; 0x5da <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	85 bd       	out	0x25, r24	; 37
 238:	08 95       	ret

0000023a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 23a:	de df       	rcall	.-68     	; 0x1f8 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 23c:	e1 e2       	ldi	r30, 0x21	; 33
 23e:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 240:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 242:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
 244:	81 ea       	ldi	r24, 0xA1	; 161
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 24c:	93 83       	std	Z+3, r25	; 0x03
 24e:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 250:	95 83       	std	Z+5, r25	; 0x05
 252:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 254:	81 e2       	ldi	r24, 0x21	; 33
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	97 83       	std	Z+7, r25	; 0x07
 25a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 25c:	20 e8       	ldi	r18, 0x80	; 128
 25e:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
 260:	12 86       	std	Z+10, r1	; 0x0a
 262:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 264:	3f bf       	out	0x3f, r19	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 266:	e6 e9       	ldi	r30, 0x96	; 150
 268:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 26a:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 26c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
 26e:	86 e1       	ldi	r24, 0x16	; 22
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	91 83       	std	Z+1, r25	; 0x01
 274:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 276:	93 83       	std	Z+3, r25	; 0x03
 278:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 27a:	95 83       	std	Z+5, r25	; 0x05
 27c:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 27e:	86 e9       	ldi	r24, 0x96	; 150
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	97 83       	std	Z+7, r25	; 0x07
 284:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 286:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
 288:	12 86       	std	Z+10, r1	; 0x0a
 28a:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 28c:	3f bf       	out	0x3f, r19	; 63

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	7a df       	rcall	.-268    	; 0x186 <LEDs_SetAllLEDs>
	sei();
 292:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 294:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 296:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
 298:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <USBtoUSART_Buffer+0x9>
 29c:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <USBtoUSART_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 2a0:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 2a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <USBtoUSART_Buffer+0x8>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 17       	cp	r24, r18
 2aa:	93 07       	cpc	r25, r19
 2ac:	49 f0       	breq	.+18     	; 0x2c0 <main+0x86>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	6e d5       	rcall	.+2780   	; 0xd90 <CDC_Device_ReceiveByte>

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 2b4:	97 fd       	sbrc	r25, 7
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <main+0x86>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 2b8:	68 2f       	mov	r22, r24
 2ba:	81 e2       	ldi	r24, 0x21	; 33
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	68 df       	rcall	.-304    	; 0x190 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 2c0:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 2c2:	f8 94       	cli
 2c4:	c0 91 9f 01 	lds	r28, 0x019F	; 0x80019f <USARTtoUSB_Buffer+0x9>
 2c8:	d0 91 a0 01 	lds	r29, 0x01A0	; 0x8001a0 <USARTtoUSB_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 2cc:	8f bf       	out	0x3f, r24	; 63
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
 2ce:	a8 99       	sbic	0x15, 0	; 21
 2d0:	10 c0       	rjmp	.+32     	; 0x2f2 <main+0xb8>
 2d2:	c1 36       	cpi	r28, 0x61	; 97
 2d4:	d1 05       	cpc	r29, r1
 2d6:	68 f4       	brcc	.+26     	; 0x2f2 <main+0xb8>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 2d8:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 2da:	f8 94       	cli
 2dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USBtoUSART_Buffer+0x9>
 2e0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <USBtoUSART_Buffer+0xa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 2e4:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 2e6:	89 2b       	or	r24, r25
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 2e8:	e1 f0       	breq	.+56     	; 0x322 <main+0xe8>
 2ea:	81 e2       	ldi	r24, 0x21	; 33
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	6b df       	rcall	.-298    	; 0x1c6 <RingBuffer_Remove>
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <main+0xdc>
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
 2f2:	a8 9a       	sbi	0x15, 0	; 21

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 2f4:	20 97       	sbiw	r28, 0x00	; 0
 2f6:	81 f3       	breq	.-32     	; 0x2d8 <main+0x9e>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
 2f8:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x2>
 2fc:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <USARTtoUSB_Buffer+0x3>
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 300:	60 81       	ld	r22, Z
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	e3 d4       	rcall	.+2502   	; 0xcce <CDC_Device_SendByte>
 308:	21 97       	sbiw	r28, 0x01	; 1
 30a:	81 11       	cpse	r24, r1
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
 30c:	e5 cf       	rjmp	.-54     	; 0x2d8 <main+0x9e>
 30e:	86 e9       	ldi	r24, 0x96	; 150
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	59 df       	rcall	.-334    	; 0x1c6 <RingBuffer_Remove>
 314:	ef cf       	rjmp	.-34     	; 0x2f4 <main+0xba>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 316:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UDR1 = DataByte;
 31a:	95 ff       	sbrs	r25, 5
 31c:	fc cf       	rjmp	.-8      	; 0x316 <main+0xdc>

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 31e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 326:	26 d5       	rcall	.+2636   	; 0xd74 <CDC_Device_USBTask>
 328:	76 d4       	rcall	.+2284   	; 0xc16 <USB_USBTask>
	}
 32a:	b4 cf       	rjmp	.-152    	; 0x294 <main+0x5a>

0000032c <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 32c:	80 ea       	ldi	r24, 0xA0	; 160
 32e:	2b cf       	rjmp	.-426    	; 0x186 <LEDs_SetAllLEDs>

00000330 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	29 cf       	rjmp	.-430    	; 0x186 <LEDs_SetAllLEDs>

00000334 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	7f d4       	rcall	.+2302   	; 0xc38 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 33a:	81 11       	cpse	r24, r1
 33c:	02 c0       	rjmp	.+4      	; 0x342 <EVENT_USB_Device_ConfigurationChanged+0xe>
 33e:	80 e9       	ldi	r24, 0x90	; 144
 340:	01 c0       	rjmp	.+2      	; 0x344 <EVENT_USB_Device_ConfigurationChanged+0x10>
 342:	80 e6       	ldi	r24, 0x60	; 96
 344:	20 cf       	rjmp	.-448    	; 0x186 <LEDs_SetAllLEDs>

00000346 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	52 c5       	rjmp	.+2724   	; 0xdf0 <CDC_Device_ProcessControlRequest>

0000034c <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	0b b6       	in	r0, 0x3b	; 59
 358:	0f 92       	push	r0
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 372:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 376:	8e b3       	in	r24, 0x1e	; 30
 378:	84 30       	cpi	r24, 0x04	; 4
 37a:	19 f4       	brne	.+6      	; 0x382 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 37c:	86 e9       	ldi	r24, 0x96	; 150
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	07 df       	rcall	.-498    	; 0x190 <RingBuffer_Insert>
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0b be       	out	0x3b, r0	; 59
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 3a8:	cf 93       	push	r28
 3aa:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 3ac:	84 89       	ldd	r24, Z+20	; 0x14
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	21 f0       	breq	.+8      	; 0x3ba <EVENT_CDC_Device_LineEncodingChanged+0x12>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	21 f4       	brne	.+8      	; 0x3be <EVENT_CDC_Device_LineEncodingChanged+0x16>
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
			break;
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
 3b6:	c0 e2       	ldi	r28, 0x20	; 32
			break;
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <EVENT_CDC_Device_LineEncodingChanged+0x18>
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
 3ba:	c0 e3       	ldi	r28, 0x30	; 48
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;
 3be:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 3c0:	83 89       	ldd	r24, Z+19	; 0x13
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
 3c6:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 3c8:	85 89       	ldd	r24, Z+21	; 0x15
 3ca:	87 30       	cpi	r24, 0x07	; 7
 3cc:	31 f0       	breq	.+12     	; 0x3da <EVENT_CDC_Device_LineEncodingChanged+0x32>
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	31 f0       	breq	.+12     	; 0x3de <EVENT_CDC_Device_LineEncodingChanged+0x36>
 3d2:	86 30       	cpi	r24, 0x06	; 6
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 3d6:	c2 60       	ori	r28, 0x02	; 2
			break;
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
 3da:	c4 60       	ori	r28, 0x04	; 4
			break;
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 3de:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 3e0:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1A = 0;
 3e4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1C = 0;
 3e8:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 3ec:	27 85       	ldd	r18, Z+15	; 0x0f
 3ee:	30 89       	ldd	r19, Z+16	; 0x10
 3f0:	41 89       	ldd	r20, Z+17	; 0x11
 3f2:	52 89       	ldd	r21, Z+18	; 0x12
 3f4:	da 01       	movw	r26, r20
 3f6:	c9 01       	movw	r24, r18
 3f8:	b6 95       	lsr	r27
 3fa:	a7 95       	ror	r26
 3fc:	97 95       	ror	r25
 3fe:	87 95       	ror	r24
 400:	bc 01       	movw	r22, r24
 402:	cd 01       	movw	r24, r26
 404:	60 5c       	subi	r22, 0xC0	; 192
 406:	7d 4b       	sbci	r23, 0xBD	; 189
 408:	80 4f       	sbci	r24, 0xF0	; 240
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	90 d5       	rcall	.+2848   	; 0xf2e <__udivmodsi4>
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	31 09       	sbc	r19, r1
 412:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 416:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 41a:	c0 93 ca 00 	sts	0x00CA, r28	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	UCSR1A = (1 << U2X1);
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 424:	88 e9       	ldi	r24, 0x98	; 152
 426:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 42e:	29 2f       	mov	r18, r25
 430:	33 27       	eor	r19, r19
 432:	22 30       	cpi	r18, 0x02	; 2
 434:	31 05       	cpc	r19, r1
 436:	59 f0       	breq	.+22     	; 0x44e <CALLBACK_USB_GetDescriptor+0x20>
 438:	23 30       	cpi	r18, 0x03	; 3
 43a:	31 05       	cpc	r19, r1
 43c:	69 f0       	breq	.+26     	; 0x458 <CALLBACK_USB_GetDescriptor+0x2a>
 43e:	21 30       	cpi	r18, 0x01	; 1
 440:	31 05       	cpc	r19, r1
 442:	e9 f4       	brne	.+58     	; 0x47e <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 444:	82 e1       	ldi	r24, 0x12	; 18
 446:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 448:	28 e3       	ldi	r18, 0x38	; 56
 44a:	31 e0       	ldi	r19, 0x01	; 1
 44c:	1c c0       	rjmp	.+56     	; 0x486 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 44e:	8e e3       	ldi	r24, 0x3E	; 62
 450:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 452:	2a ef       	ldi	r18, 0xFA	; 250
 454:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 456:	17 c0       	rjmp	.+46     	; 0x486 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 458:	99 27       	eor	r25, r25
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	91 05       	cpc	r25, r1
 45e:	49 f0       	breq	.+18     	; 0x472 <CALLBACK_USB_GetDescriptor+0x44>
 460:	28 f0       	brcs	.+10     	; 0x46c <CALLBACK_USB_GetDescriptor+0x3e>
 462:	02 97       	sbiw	r24, 0x02	; 2
 464:	61 f4       	brne	.+24     	; 0x47e <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 466:	ec ea       	ldi	r30, 0xAC	; 172
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	05 c0       	rjmp	.+10     	; 0x476 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 46c:	e6 ef       	ldi	r30, 0xF6	; 246
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 472:	ec ed       	ldi	r30, 0xDC	; 220
 474:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 476:	84 91       	lpm	r24, Z
 478:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 47a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 47c:	04 c0       	rjmp	.+8      	; 0x486 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 486:	fa 01       	movw	r30, r20
 488:	31 83       	std	Z+1, r19	; 0x01
 48a:	20 83       	st	Z, r18
	return Size;
}
 48c:	08 95       	ret

0000048e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 48e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 492:	eb ee       	ldi	r30, 0xEB	; 235
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
 49c:	ed ee       	ldi	r30, 0xED	; 237
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	10 82       	st	Z, r1
 4a2:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 4a6:	40 83       	st	Z, r20
 4a8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 4ac:	88 1f       	adc	r24, r24
 4ae:	88 27       	eor	r24, r24
 4b0:	88 1f       	adc	r24, r24
 4b2:	08 95       	ret

000004b4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4b4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>
 4b8:	87 ff       	sbrs	r24, 7
 4ba:	0f c0       	rjmp	.+30     	; 0x4da <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 4c0:	82 fd       	sbrc	r24, 2
 4c2:	04 c0       	rjmp	.+8      	; 0x4cc <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4c4:	8e b3       	in	r24, 0x1e	; 30
 4c6:	81 11       	cpse	r24, r1
 4c8:	f9 cf       	rjmp	.-14     	; 0x4bc <Endpoint_ClearStatusStage+0x8>
 4ca:	10 c0       	rjmp	.+32     	; 0x4ec <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4d0:	8b 77       	andi	r24, 0x7B	; 123
 4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4d4:	8e b3       	in	r24, 0x1e	; 30
 4d6:	88 23       	and	r24, r24
 4d8:	49 f0       	breq	.+18     	; 0x4ec <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4de:	80 ff       	sbrs	r24, 0
 4e0:	f9 cf       	rjmp	.-14     	; 0x4d4 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4e6:	8e 77       	andi	r24, 0x7E	; 126
 4e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4ec:	08 95       	ret

000004ee <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 4ee:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 4f2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 4f6:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 4f8:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 4fc:	84 2f       	mov	r24, r20
 4fe:	81 70       	andi	r24, 0x01	; 1
 500:	40 ff       	sbrs	r20, 0
 502:	22 c0       	rjmp	.+68     	; 0x548 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 504:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 508:	80 fd       	sbrc	r24, 0
 50a:	1c c0       	rjmp	.+56     	; 0x544 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 50c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 50e:	88 23       	and	r24, r24
 510:	99 f0       	breq	.+38     	; 0x538 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 512:	85 30       	cpi	r24, 0x05	; 5
 514:	99 f0       	breq	.+38     	; 0x53c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 516:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 51a:	85 fd       	sbrc	r24, 5
 51c:	11 c0       	rjmp	.+34     	; 0x540 <Endpoint_WaitUntilReady+0x52>
 51e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 522:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 526:	24 17       	cp	r18, r20
 528:	35 07       	cpc	r19, r21
 52a:	31 f3       	breq	.-52     	; 0x4f8 <Endpoint_WaitUntilReady+0xa>
 52c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 52e:	11 f0       	breq	.+4      	; 0x534 <Endpoint_WaitUntilReady+0x46>
 530:	9a 01       	movw	r18, r20
 532:	e2 cf       	rjmp	.-60     	; 0x4f8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 534:	84 e0       	ldi	r24, 0x04	; 4
 536:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 548:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 54c:	42 ff       	sbrs	r20, 2
 54e:	de cf       	rjmp	.-68     	; 0x50c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 550:	08 95       	ret

00000552 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 55a:	48 d0       	rcall	.+144    	; 0x5ec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 55c:	4f d0       	rcall	.+158    	; 0x5fc <USB_INT_ClearAllInterrupts>
 55e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 560:	d0 e0       	ldi	r29, 0x00	; 0
 562:	88 81       	ld	r24, Y
 564:	8f 77       	andi	r24, 0x7F	; 127
 566:	88 83       	st	Y, r24
 568:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	88 83       	st	Y, r24
 56e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 570:	8f 7d       	andi	r24, 0xDF	; 223
 572:	88 83       	st	Y, r24
 574:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	80 68       	ori	r24, 0x80	; 128
 57c:	80 83       	st	Z, r24
 57e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 580:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 582:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 586:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 58a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 58e:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 590:	10 e0       	ldi	r17, 0x00	; 0
 592:	f8 01       	movw	r30, r16
 594:	80 81       	ld	r24, Z
 596:	8b 7f       	andi	r24, 0xFB	; 251
 598:	80 83       	st	Z, r24
 59a:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	88 83       	st	Y, r24
 5a0:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	73 df       	rcall	.-282    	; 0x48e <Endpoint_ConfigureEndpoint_Prv>
 5a8:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	80 83       	st	Z, r24
 5b2:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	81 60       	ori	r24, 0x01	; 1
 5ba:	80 83       	st	Z, r24
 5bc:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5be:	88 60       	ori	r24, 0x08	; 8
 5c0:	80 83       	st	Z, r24
 5c2:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5c4:	80 81       	ld	r24, Z
 5c6:	8e 7f       	andi	r24, 0xFE	; 254
 5c8:	80 83       	st	Z, r24
 5ca:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 5cc:	80 61       	ori	r24, 0x10	; 16
 5ce:	88 83       	st	Y, r24
 5d0:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <USB_Init>:
 5da:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <USB_IsInitialized>

	USB_ResetInterface();
 5ea:	b3 cf       	rjmp	.-154    	; 0x552 <USB_ResetInterface>

000005ec <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 5ec:	e8 ed       	ldi	r30, 0xD8	; 216
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	8c 7f       	andi	r24, 0xFC	; 252
 5f4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5f6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5fa:	08 95       	ret

000005fc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 5fc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 600:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 604:	08 95       	ret

00000606 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	0b b6       	in	r0, 0x3b	; 59
 612:	0f 92       	push	r0
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 62c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 630:	82 ff       	sbrs	r24, 2
 632:	0a c0       	rjmp	.+20     	; 0x648 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 634:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 638:	82 ff       	sbrs	r24, 2
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 63c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 640:	8b 7f       	andi	r24, 0xFB	; 251
 642:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 646:	e6 d2       	rcall	.+1484   	; 0xc14 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 648:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 64c:	80 ff       	sbrs	r24, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 650:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 654:	80 ff       	sbrs	r24, 0
 656:	17 c0       	rjmp	.+46     	; 0x686 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 658:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 662:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 666:	80 ff       	sbrs	r24, 0
 668:	0b c0       	rjmp	.+22     	; 0x680 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 66a:	8c e0       	ldi	r24, 0x0C	; 12
 66c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 66e:	8e e0       	ldi	r24, 0x0E	; 14
 670:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 672:	09 b4       	in	r0, 0x29	; 41
 674:	00 fe       	sbrs	r0, 0
 676:	fd cf       	rjmp	.-6      	; 0x672 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 678:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 67a:	8e bb       	out	0x1e, r24	; 30
 67c:	57 de       	rcall	.-850    	; 0x32c <EVENT_USB_Device_Connect>
 67e:	03 c0       	rjmp	.+6      	; 0x686 <__vector_10+0x80>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 680:	19 bc       	out	0x29, r1	; 41
			EVENT_USB_Device_Disconnect();
 682:	1e ba       	out	0x1e, r1	; 30
 684:	55 de       	rcall	.-854    	; 0x330 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 686:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 68a:	80 ff       	sbrs	r24, 0
 68c:	17 c0       	rjmp	.+46     	; 0x6bc <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 68e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 692:	80 ff       	sbrs	r24, 0
 694:	13 c0       	rjmp	.+38     	; 0x6bc <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 696:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 69a:	8e 7f       	andi	r24, 0xFE	; 254
 69c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6a4:	80 61       	ori	r24, 0x10	; 16
 6a6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 6aa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6ae:	80 62       	ori	r24, 0x20	; 32
 6b0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 6b4:	19 bc       	out	0x29, r1	; 41
 6b6:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
 6b8:	8e bb       	out	0x1e, r24	; 30
 6ba:	ac d2       	rcall	.+1368   	; 0xc14 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6bc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6c0:	84 ff       	sbrs	r24, 4
 6c2:	2c c0       	rjmp	.+88     	; 0x71c <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6c8:	84 ff       	sbrs	r24, 4
 6ca:	28 c0       	rjmp	.+80     	; 0x71c <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6cc:	8c e0       	ldi	r24, 0x0C	; 12
 6ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6d0:	8e e0       	ldi	r24, 0x0E	; 14
 6d2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6d4:	09 b4       	in	r0, 0x29	; 41
 6d6:	00 fe       	sbrs	r0, 0
 6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6da:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6de:	8f 7d       	andi	r24, 0xDF	; 223
 6e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 6e8:	8f 7e       	andi	r24, 0xEF	; 239
 6ea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6f2:	8f 7e       	andi	r24, 0xEF	; 239
 6f4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 702:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <USB_Device_ConfigurationNumber>
 706:	81 11       	cpse	r24, r1
 708:	06 c0       	rjmp	.+12     	; 0x716 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 70a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 70e:	87 fd       	sbrc	r24, 7
 710:	02 c0       	rjmp	.+4      	; 0x716 <__vector_10+0x110>
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	01 c0       	rjmp	.+2      	; 0x718 <__vector_10+0x112>
 716:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 718:	8e bb       	out	0x1e, r24	; 30
 71a:	7c d2       	rcall	.+1272   	; 0xc14 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 71c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 720:	83 ff       	sbrs	r24, 3
 722:	26 c0       	rjmp	.+76     	; 0x770 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 724:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 728:	83 ff       	sbrs	r24, 3
 72a:	22 c0       	rjmp	.+68     	; 0x770 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 72c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 730:	87 7f       	andi	r24, 0xF7	; 247
 732:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 73a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 73e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 742:	8e 7f       	andi	r24, 0xFE	; 254
 744:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 748:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 752:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 756:	80 61       	ori	r24, 0x10	; 16
 758:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 75c:	42 e0       	ldi	r20, 0x02	; 2
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 762:	95 de       	rcall	.-726    	; 0x48e <Endpoint_ConfigureEndpoint_Prv>
 764:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 768:	88 60       	ori	r24, 0x08	; 8
 76a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 76e:	52 d2       	rcall	.+1188   	; 0xc14 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0b be       	out	0x3b, r0	; 59
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	0b b6       	in	r0, 0x3b	; 59
 7a2:	0f 92       	push	r0
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 7c6:	c9 ee       	ldi	r28, 0xE9	; 233
 7c8:	d0 e0       	ldi	r29, 0x00	; 0
 7ca:	88 81       	ld	r24, Y
 7cc:	87 70       	andi	r24, 0x07	; 7
 7ce:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7d0:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 7d2:	00 ef       	ldi	r16, 0xF0	; 240
 7d4:	10 e0       	ldi	r17, 0x00	; 0
 7d6:	f8 01       	movw	r30, r16
 7d8:	80 81       	ld	r24, Z
 7da:	87 7f       	andi	r24, 0xF7	; 247
 7dc:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 7de:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 7e0:	cb d0       	rcall	.+406    	; 0x978 <USB_Device_ProcessControlRequest>
 7e2:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7e4:	f8 01       	movw	r30, r16
 7e6:	80 81       	ld	r24, Z
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	80 83       	st	Z, r24
 7ec:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	bf 91       	pop	r27
 7f8:	af 91       	pop	r26
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	7f 91       	pop	r23
 800:	6f 91       	pop	r22
 802:	5f 91       	pop	r21
 804:	4f 91       	pop	r20
 806:	3f 91       	pop	r19
 808:	2f 91       	pop	r18
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	0f 90       	pop	r0
 812:	0b be       	out	0x3b, r0	; 59
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 81e:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <USB_ControlRequest+0x6>
 822:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <USB_ControlRequest+0x7>
 826:	26 17       	cp	r18, r22
 828:	37 07       	cpc	r19, r23
 82a:	48 f0       	brcs	.+18     	; 0x83e <Endpoint_Write_Control_Stream_LE+0x20>
 82c:	61 15       	cp	r22, r1
 82e:	71 05       	cpc	r23, r1
 830:	39 f4       	brne	.+14     	; 0x840 <Endpoint_Write_Control_Stream_LE+0x22>
 832:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 836:	2e 77       	andi	r18, 0x7E	; 126
 838:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 83c:	01 c0       	rjmp	.+2      	; 0x840 <Endpoint_Write_Control_Stream_LE+0x22>
 83e:	b9 01       	movw	r22, r18
 840:	fc 01       	movw	r30, r24
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	61 15       	cp	r22, r1
 846:	71 05       	cpc	r23, r1
 848:	61 f1       	breq	.+88     	; 0x8a2 <Endpoint_Write_Control_Stream_LE+0x84>
 84a:	8e b3       	in	r24, 0x1e	; 30
 84c:	88 23       	and	r24, r24
 84e:	c9 f1       	breq	.+114    	; 0x8c2 <Endpoint_Write_Control_Stream_LE+0xa4>
 850:	85 30       	cpi	r24, 0x05	; 5
 852:	c9 f1       	breq	.+114    	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0xa8>
 854:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 858:	83 fd       	sbrc	r24, 3
 85a:	31 c0       	rjmp	.+98     	; 0x8be <Endpoint_Write_Control_Stream_LE+0xa0>
 85c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 860:	82 fd       	sbrc	r24, 2
 862:	27 c0       	rjmp	.+78     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x94>
 864:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 868:	80 ff       	sbrs	r24, 0
 86a:	ec cf       	rjmp	.-40     	; 0x844 <Endpoint_Write_Control_Stream_LE+0x26>
 86c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 870:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 874:	61 15       	cp	r22, r1
 876:	71 05       	cpc	r23, r1
 878:	51 f0       	breq	.+20     	; 0x88e <Endpoint_Write_Control_Stream_LE+0x70>
 87a:	88 30       	cpi	r24, 0x08	; 8
 87c:	91 05       	cpc	r25, r1
 87e:	38 f4       	brcc	.+14     	; 0x88e <Endpoint_Write_Control_Stream_LE+0x70>
 880:	21 91       	ld	r18, Z+
 882:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 886:	61 50       	subi	r22, 0x01	; 1
 888:	71 09       	sbc	r23, r1
 88a:	01 96       	adiw	r24, 0x01	; 1
 88c:	f3 cf       	rjmp	.-26     	; 0x874 <Endpoint_Write_Control_Stream_LE+0x56>
 88e:	21 e0       	ldi	r18, 0x01	; 1
 890:	08 97       	sbiw	r24, 0x08	; 8
 892:	09 f0       	breq	.+2      	; 0x896 <Endpoint_Write_Control_Stream_LE+0x78>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 89a:	8e 77       	andi	r24, 0x7E	; 126
 89c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8a0:	d1 cf       	rjmp	.-94     	; 0x844 <Endpoint_Write_Control_Stream_LE+0x26>
 8a2:	21 11       	cpse	r18, r1
 8a4:	d2 cf       	rjmp	.-92     	; 0x84a <Endpoint_Write_Control_Stream_LE+0x2c>
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x94>
 8a8:	8e b3       	in	r24, 0x1e	; 30
 8aa:	88 23       	and	r24, r24
 8ac:	51 f0       	breq	.+20     	; 0x8c2 <Endpoint_Write_Control_Stream_LE+0xa4>
 8ae:	85 30       	cpi	r24, 0x05	; 5
 8b0:	51 f0       	breq	.+20     	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0xa8>
 8b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b6:	82 ff       	sbrs	r24, 2
 8b8:	f7 cf       	rjmp	.-18     	; 0x8a8 <Endpoint_Write_Control_Stream_LE+0x8a>
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	08 95       	ret
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	08 95       	ret
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	08 95       	ret
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	08 95       	ret

000008ca <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8ca:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <USB_ControlRequest+0x6>
 8ce:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <USB_ControlRequest+0x7>
 8d2:	26 17       	cp	r18, r22
 8d4:	37 07       	cpc	r19, r23
 8d6:	48 f0       	brcs	.+18     	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8d8:	61 15       	cp	r22, r1
 8da:	71 05       	cpc	r23, r1
 8dc:	39 f4       	brne	.+14     	; 0x8ec <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8de:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e2:	2e 77       	andi	r18, 0x7E	; 126
 8e4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <Endpoint_Write_Control_PStream_LE+0x22>
 8ea:	b9 01       	movw	r22, r18
 8ec:	fc 01       	movw	r30, r24
 8ee:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8f0:	61 15       	cp	r22, r1
 8f2:	71 05       	cpc	r23, r1
 8f4:	69 f1       	breq	.+90     	; 0x950 <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8f6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8f8:	88 23       	and	r24, r24
 8fa:	d1 f1       	breq	.+116    	; 0x970 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8fc:	85 30       	cpi	r24, 0x05	; 5
 8fe:	d1 f1       	breq	.+116    	; 0x974 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 900:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 904:	83 fd       	sbrc	r24, 3
 906:	32 c0       	rjmp	.+100    	; 0x96c <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 908:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 90c:	82 fd       	sbrc	r24, 2
 90e:	28 c0       	rjmp	.+80     	; 0x960 <Endpoint_Write_Control_PStream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 914:	80 ff       	sbrs	r24, 0
 916:	ec cf       	rjmp	.-40     	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 918:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 91c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 920:	61 15       	cp	r22, r1
 922:	71 05       	cpc	r23, r1
 924:	59 f0       	breq	.+22     	; 0x93c <Endpoint_Write_Control_PStream_LE+0x72>
 926:	88 30       	cpi	r24, 0x08	; 8
 928:	91 05       	cpc	r25, r1
 92a:	40 f4       	brcc	.+16     	; 0x93c <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 92c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 92e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 932:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 934:	61 50       	subi	r22, 0x01	; 1
 936:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	f2 cf       	rjmp	.-28     	; 0x920 <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 93c:	21 e0       	ldi	r18, 0x01	; 1
 93e:	08 97       	sbiw	r24, 0x08	; 8
 940:	09 f0       	breq	.+2      	; 0x944 <Endpoint_Write_Control_PStream_LE+0x7a>
 942:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 948:	8e 77       	andi	r24, 0x7E	; 126
 94a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 94e:	d0 cf       	rjmp	.-96     	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 950:	21 11       	cpse	r18, r1
 952:	d1 cf       	rjmp	.-94     	; 0x8f6 <Endpoint_Write_Control_PStream_LE+0x2c>
 954:	05 c0       	rjmp	.+10     	; 0x960 <Endpoint_Write_Control_PStream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 956:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 958:	88 23       	and	r24, r24
 95a:	51 f0       	breq	.+20     	; 0x970 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 95c:	85 30       	cpi	r24, 0x05	; 5
 95e:	51 f0       	breq	.+20     	; 0x974 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 960:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 964:	82 ff       	sbrs	r24, 2
 966:	f7 cf       	rjmp	.-18     	; 0x956 <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 974:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 976:	08 95       	ret

00000978 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	aa 97       	sbiw	r28, 0x2a	; 42
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	e0 e3       	ldi	r30, 0x30	; 48
 992:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 994:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 998:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 99a:	22 e0       	ldi	r18, 0x02	; 2
 99c:	e8 33       	cpi	r30, 0x38	; 56
 99e:	f2 07       	cpc	r31, r18
 9a0:	c9 f7       	brne	.-14     	; 0x994 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9a2:	d1 dc       	rcall	.-1630   	; 0x346 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 9a8:	83 ff       	sbrs	r24, 3
 9aa:	1b c1       	rjmp	.+566    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ac:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 9b0:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <USB_ControlRequest+0x1>
 9b4:	49 2f       	mov	r20, r25
 9b6:	50 e0       	ldi	r21, 0x00	; 0
 9b8:	4a 30       	cpi	r20, 0x0A	; 10
 9ba:	51 05       	cpc	r21, r1
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x48>
 9be:	11 c1       	rjmp	.+546    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
 9c0:	fa 01       	movw	r30, r20
 9c2:	e4 5b       	subi	r30, 0xB4	; 180
 9c4:	ff 4f       	sbci	r31, 0xFF	; 255
 9c6:	d5 c2       	rjmp	.+1450   	; 0xf72 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9c8:	80 38       	cpi	r24, 0x80	; 128
 9ca:	81 f0       	breq	.+32     	; 0x9ec <USB_Device_ProcessControlRequest+0x74>
 9cc:	82 38       	cpi	r24, 0x82	; 130
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x5a>
 9d0:	08 c1       	rjmp	.+528    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9d2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest+0x4>
 9d6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 9e0:	85 fb       	bst	r24, 5
 9e2:	88 27       	eor	r24, r24
 9e4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9ec:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9f0:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <USB_Device_RemoteWakeupEnabled>
 9f4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9f6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9fc:	97 7f       	andi	r25, 0xF7	; 247
 9fe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a02:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 a06:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 a0a:	c4 c0       	rjmp	.+392    	; 0xb94 <USB_Device_ProcessControlRequest+0x21c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a0c:	28 2f       	mov	r18, r24
 a0e:	2d 7f       	andi	r18, 0xFD	; 253
 a10:	09 f0       	breq	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x9c>
 a12:	e7 c0       	rjmp	.+462    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a14:	88 23       	and	r24, r24
 a16:	19 f0       	breq	.+6      	; 0xa1e <USB_Device_ProcessControlRequest+0xa6>
 a18:	82 30       	cpi	r24, 0x02	; 2
 a1a:	61 f0       	breq	.+24     	; 0xa34 <USB_Device_ProcessControlRequest+0xbc>
 a1c:	e2 c0       	rjmp	.+452    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a1e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0xb0>
 a26:	dd c0       	rjmp	.+442    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a28:	93 30       	cpi	r25, 0x03	; 3
 a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0xb6>
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <USB_Device_RemoteWakeupEnabled>
 a32:	2b c0       	rjmp	.+86     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a34:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 a38:	81 11       	cpse	r24, r1
 a3a:	27 c0       	rjmp	.+78     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a3c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest+0x4>
 a40:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a42:	09 f4       	brne	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0xce>
 a44:	ce c0       	rjmp	.+412    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a4a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a4e:	20 ff       	sbrs	r18, 0
 a50:	1c c0       	rjmp	.+56     	; 0xa8a <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a52:	93 30       	cpi	r25, 0x03	; 3
 a54:	21 f4       	brne	.+8      	; 0xa5e <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a5a:	80 62       	ori	r24, 0x20	; 32
 a5c:	14 c0       	rjmp	.+40     	; 0xa86 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a5e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a62:	90 61       	ori	r25, 0x10	; 16
 a64:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a68:	21 e0       	ldi	r18, 0x01	; 1
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	a9 01       	movw	r20, r18
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <USB_Device_ProcessControlRequest+0xfc>
 a70:	44 0f       	add	r20, r20
 a72:	55 1f       	adc	r21, r21
 a74:	8a 95       	dec	r24
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <USB_Device_ProcessControlRequest+0xf8>
 a78:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 a7c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 a84:	88 60       	ori	r24, 0x08	; 8
 a86:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a92:	87 7f       	andi	r24, 0xF7	; 247
 a94:	82 c0       	rjmp	.+260    	; 0xb9a <USB_Device_ProcessControlRequest+0x222>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a96:	81 11       	cpse	r24, r1
 a98:	a4 c0       	rjmp	.+328    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a9a:	10 91 32 02 	lds	r17, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 a9e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 aa0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aa2:	f8 94       	cli
 aa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aa8:	87 7f       	andi	r24, 0xF7	; 247
 aaa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aae:	02 dd       	rcall	.-1532   	; 0x4b4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ab0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 ab4:	80 ff       	sbrs	r24, 0
 ab6:	fc cf       	rjmp	.-8      	; 0xab0 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ab8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 abc:	80 78       	andi	r24, 0x80	; 128
 abe:	81 2b       	or	r24, r17

				UDADDR = Temp;
 ac0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 ac4:	80 68       	ori	r24, 0x80	; 128
 ac6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 aca:	11 11       	cpse	r17, r1
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <USB_Device_ProcessControlRequest+0x15a>
 ace:	82 e0       	ldi	r24, 0x02	; 2
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0x15c>
 ad2:	83 e0       	ldi	r24, 0x03	; 3
 ad4:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ad6:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 ad8:	84 c0       	rjmp	.+264    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ada:	80 58       	subi	r24, 0x80	; 128
 adc:	82 30       	cpi	r24, 0x02	; 2
 ade:	08 f0       	brcs	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x16a>
 ae0:	80 c0       	rjmp	.+256    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ae2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 ae6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <USB_ControlRequest+0x3>
 aea:	8c 3d       	cpi	r24, 0xDC	; 220
 aec:	53 e0       	ldi	r21, 0x03	; 3
 aee:	95 07       	cpc	r25, r21
 af0:	71 f5       	brne	.+92     	; 0xb4e <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 af2:	83 e0       	ldi	r24, 0x03	; 3
 af4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 af6:	8a e2       	ldi	r24, 0x2A	; 42
 af8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 afa:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 afc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 afe:	de 01       	movw	r26, r28
 b00:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b02:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b04:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b06:	51 e2       	ldi	r21, 0x21	; 33
 b08:	e3 2f       	mov	r30, r19
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b10:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b12:	20 ff       	sbrs	r18, 0
 b14:	03 c0       	rjmp	.+6      	; 0xb1c <USB_Device_ProcessControlRequest+0x1a4>
					{
						SerialByte >>= 4;
 b16:	e2 95       	swap	r30
 b18:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b1a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b1c:	ef 70       	andi	r30, 0x0F	; 15
 b1e:	8e 2f       	mov	r24, r30
 b20:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b22:	ea 30       	cpi	r30, 0x0A	; 10
 b24:	10 f0       	brcs	.+4      	; 0xb2a <USB_Device_ProcessControlRequest+0x1b2>
 b26:	c7 96       	adiw	r24, 0x37	; 55
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0x1b4>
 b2a:	c0 96       	adiw	r24, 0x30	; 48
 b2c:	8d 93       	st	X+, r24
 b2e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	24 31       	cpi	r18, 0x14	; 20
 b34:	49 f7       	brne	.-46     	; 0xb08 <USB_Device_ProcessControlRequest+0x190>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b36:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b3c:	87 7f       	andi	r24, 0xF7	; 247
 b3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b42:	6a e2       	ldi	r22, 0x2A	; 42
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	ce 01       	movw	r24, r28
 b48:	01 96       	adiw	r24, 0x01	; 1
 b4a:	69 de       	rcall	.-814    	; 0x81e <Endpoint_Write_Control_Stream_LE>
 b4c:	12 c0       	rjmp	.+36     	; 0xb72 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b4e:	ae 01       	movw	r20, r28
 b50:	4f 5f       	subi	r20, 0xFF	; 255
 b52:	5f 4f       	sbci	r21, 0xFF	; 255
 b54:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <USB_ControlRequest+0x4>
 b58:	6a dc       	rcall	.-1836   	; 0x42e <CALLBACK_USB_GetDescriptor>
 b5a:	bc 01       	movw	r22, r24
 b5c:	89 2b       	or	r24, r25
 b5e:	09 f4       	brne	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x1ea>
 b60:	40 c0       	rjmp	.+128    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
 b62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b66:	97 7f       	andi	r25, 0xF7	; 247
 b68:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b6c:	89 81       	ldd	r24, Y+1	; 0x01
 b6e:	9a 81       	ldd	r25, Y+2	; 0x02
 b70:	ac de       	rcall	.-680    	; 0x8ca <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b76:	8b 77       	andi	r24, 0x7B	; 123
 b78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b7c:	32 c0       	rjmp	.+100    	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b7e:	80 38       	cpi	r24, 0x80	; 128
 b80:	81 f5       	brne	.+96     	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b86:	87 7f       	andi	r24, 0xF7	; 247
 b88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b8c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b98:	8e 77       	andi	r24, 0x7E	; 126
 b9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b9e:	8a dc       	rcall	.-1772   	; 0x4b4 <Endpoint_ClearStatusStage>
 ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ba2:	81 11       	cpse	r24, r1
 ba4:	1e c0       	rjmp	.+60     	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ba6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 baa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <USB_ControlRequest+0x3>
 bae:	99 27       	eor	r25, r25
 bb0:	02 97       	sbiw	r24, 0x02	; 2
 bb2:	bc f4       	brge	.+46     	; 0xbe2 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bb8:	87 7f       	andi	r24, 0xF7	; 247
 bba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bbe:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
 bc2:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 bc6:	76 dc       	rcall	.-1812   	; 0x4b4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bc8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <USB_Device_ConfigurationNumber>
 bcc:	81 11       	cpse	r24, r1
 bce:	06 c0       	rjmp	.+12     	; 0xbdc <USB_Device_ProcessControlRequest+0x264>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bd4:	87 fd       	sbrc	r24, 7
 bd6:	02 c0       	rjmp	.+4      	; 0xbdc <USB_Device_ProcessControlRequest+0x264>
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	01 c0       	rjmp	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x266>
 bdc:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 bde:	8e bb       	out	0x1e, r24	; 30
 be0:	a9 db       	rcall	.-2222   	; 0x334 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 be6:	83 ff       	sbrs	r24, 3
 be8:	0a c0       	rjmp	.+20     	; 0xbfe <USB_Device_ProcessControlRequest+0x286>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bee:	80 62       	ori	r24, 0x20	; 32
 bf0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf8:	87 7f       	andi	r24, 0xF7	; 247
 bfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bfe:	aa 96       	adiw	r28, 0x2a	; 42
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	1f 91       	pop	r17
 c10:	0f 91       	pop	r16
 c12:	08 95       	ret

00000c14 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c14:	08 95       	ret

00000c16 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c16:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c18:	8e b3       	in	r24, 0x1e	; 30
 c1a:	88 23       	and	r24, r24
 c1c:	59 f0       	breq	.+22     	; 0xc34 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c1e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c22:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c2c:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c2e:	a4 de       	rcall	.-696    	; 0x978 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c30:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c34:	cf 91       	pop	r28
 c36:	08 95       	ret

00000c38 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 c38:	1f 93       	push	r17
 c3a:	cf 93       	push	r28
 c3c:	df 93       	push	r29
 c3e:	ec 01       	movw	r28, r24
 c40:	fc 01       	movw	r30, r24
 c42:	3d 96       	adiw	r30, 0x0d	; 13
 c44:	89 e0       	ldi	r24, 0x09	; 9
 c46:	df 01       	movw	r26, r30
 c48:	1d 92       	st	X+, r1
 c4a:	8a 95       	dec	r24
 c4c:	e9 f7       	brne	.-6      	; 0xc48 <CDC_Device_ConfigureEndpoints+0x10>
 c4e:	11 e0       	ldi	r17, 0x01	; 1
 c50:	89 81       	ldd	r24, Y+1	; 0x01
 c52:	81 13       	cpse	r24, r17
 c54:	05 c0       	rjmp	.+10     	; 0xc60 <CDC_Device_ConfigureEndpoints+0x28>
 c56:	ea 81       	ldd	r30, Y+2	; 0x02
 c58:	fb 81       	ldd	r31, Y+3	; 0x03
 c5a:	9c 81       	ldd	r25, Y+4	; 0x04
 c5c:	20 e8       	ldi	r18, 0x80	; 128
 c5e:	07 c0       	rjmp	.+14     	; 0xc6e <CDC_Device_ConfigureEndpoints+0x36>
 c60:	8d 81       	ldd	r24, Y+5	; 0x05
 c62:	81 13       	cpse	r24, r17
 c64:	06 c0       	rjmp	.+12     	; 0xc72 <CDC_Device_ConfigureEndpoints+0x3a>
 c66:	ee 81       	ldd	r30, Y+6	; 0x06
 c68:	ff 81       	ldd	r31, Y+7	; 0x07
 c6a:	98 85       	ldd	r25, Y+8	; 0x08
 c6c:	20 e0       	ldi	r18, 0x00	; 0
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	0d c0       	rjmp	.+26     	; 0xc8c <CDC_Device_ConfigureEndpoints+0x54>
 c72:	89 85       	ldd	r24, Y+9	; 0x09
 c74:	81 17       	cp	r24, r17
 c76:	29 f0       	breq	.+10     	; 0xc82 <CDC_Device_ConfigureEndpoints+0x4a>
 c78:	1f 5f       	subi	r17, 0xFF	; 255
 c7a:	17 30       	cpi	r17, 0x07	; 7
 c7c:	49 f7       	brne	.-46     	; 0xc50 <CDC_Device_ConfigureEndpoints+0x18>
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	22 c0       	rjmp	.+68     	; 0xcc6 <CDC_Device_ConfigureEndpoints+0x8e>
 c82:	ea 85       	ldd	r30, Y+10	; 0x0a
 c84:	fb 85       	ldd	r31, Y+11	; 0x0b
 c86:	9c 85       	ldd	r25, Y+12	; 0x0c
 c88:	20 e8       	ldi	r18, 0x80	; 128
 c8a:	83 e0       	ldi	r24, 0x03	; 3
 c8c:	91 11       	cpse	r25, r1
 c8e:	94 e0       	ldi	r25, 0x04	; 4
 c90:	68 e0       	ldi	r22, 0x08	; 8
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	40 e0       	ldi	r20, 0x00	; 0
 c96:	6e 17       	cp	r22, r30
 c98:	7f 07       	cpc	r23, r31
 c9a:	20 f4       	brcc	.+8      	; 0xca4 <CDC_Device_ConfigureEndpoints+0x6c>
 c9c:	4f 5f       	subi	r20, 0xFF	; 255
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	f9 cf       	rjmp	.-14     	; 0xc96 <CDC_Device_ConfigureEndpoints+0x5e>
 ca4:	42 95       	swap	r20
 ca6:	40 7f       	andi	r20, 0xF0	; 240
 ca8:	92 60       	ori	r25, 0x02	; 2
 caa:	49 2b       	or	r20, r25
 cac:	b0 e4       	ldi	r27, 0x40	; 64
 cae:	8b 9f       	mul	r24, r27
 cb0:	c0 01       	movw	r24, r0
 cb2:	11 24       	eor	r1, r1
 cb4:	61 e0       	ldi	r22, 0x01	; 1
 cb6:	21 11       	cpse	r18, r1
 cb8:	01 c0       	rjmp	.+2      	; 0xcbc <CDC_Device_ConfigureEndpoints+0x84>
 cba:	60 e0       	ldi	r22, 0x00	; 0
 cbc:	68 2b       	or	r22, r24
 cbe:	81 2f       	mov	r24, r17
 cc0:	e6 db       	rcall	.-2100   	; 0x48e <Endpoint_ConfigureEndpoint_Prv>
 cc2:	81 11       	cpse	r24, r1
 cc4:	d9 cf       	rjmp	.-78     	; 0xc78 <CDC_Device_ConfigureEndpoints+0x40>
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	08 95       	ret

00000cce <CDC_Device_SendByte>:
 cce:	0f 93       	push	r16
 cd0:	1f 93       	push	r17
 cd2:	cf 93       	push	r28
 cd4:	2e b3       	in	r18, 0x1e	; 30
 cd6:	24 30       	cpi	r18, 0x04	; 4
 cd8:	f1 f4       	brne	.+60     	; 0xd16 <CDC_Device_SendByte+0x48>
 cda:	fc 01       	movw	r30, r24
 cdc:	07 85       	ldd	r16, Z+15	; 0x0f
 cde:	10 89       	ldd	r17, Z+16	; 0x10
 ce0:	21 89       	ldd	r18, Z+17	; 0x11
 ce2:	32 89       	ldd	r19, Z+18	; 0x12
 ce4:	01 2b       	or	r16, r17
 ce6:	02 2b       	or	r16, r18
 ce8:	03 2b       	or	r16, r19
 cea:	a9 f0       	breq	.+42     	; 0xd16 <CDC_Device_SendByte+0x48>
 cec:	c6 2f       	mov	r28, r22
 cee:	81 81       	ldd	r24, Z+1	; 0x01
 cf0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 cf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cf8:	85 ff       	sbrs	r24, 5
 cfa:	04 c0       	rjmp	.+8      	; 0xd04 <CDC_Device_SendByte+0x36>
 cfc:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	0a c0       	rjmp	.+20     	; 0xd18 <CDC_Device_SendByte+0x4a>
 d04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d08:	8e 77       	andi	r24, 0x7E	; 126
 d0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d0e:	ef db       	rcall	.-2082   	; 0x4ee <Endpoint_WaitUntilReady>
 d10:	88 23       	and	r24, r24
 d12:	a1 f3       	breq	.-24     	; 0xcfc <CDC_Device_SendByte+0x2e>
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <CDC_Device_SendByte+0x4a>
 d16:	82 e0       	ldi	r24, 0x02	; 2
 d18:	cf 91       	pop	r28
 d1a:	1f 91       	pop	r17
 d1c:	0f 91       	pop	r16
 d1e:	08 95       	ret

00000d20 <CDC_Device_Flush>:
 d20:	2e b3       	in	r18, 0x1e	; 30
 d22:	24 30       	cpi	r18, 0x04	; 4
 d24:	29 f5       	brne	.+74     	; 0xd70 <CDC_Device_Flush+0x50>
 d26:	fc 01       	movw	r30, r24
 d28:	47 85       	ldd	r20, Z+15	; 0x0f
 d2a:	50 89       	ldd	r21, Z+16	; 0x10
 d2c:	61 89       	ldd	r22, Z+17	; 0x11
 d2e:	72 89       	ldd	r23, Z+18	; 0x12
 d30:	45 2b       	or	r20, r21
 d32:	46 2b       	or	r20, r22
 d34:	47 2b       	or	r20, r23
 d36:	e1 f0       	breq	.+56     	; 0xd70 <CDC_Device_Flush+0x50>
 d38:	81 81       	ldd	r24, Z+1	; 0x01
 d3a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 d3e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 d42:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 d46:	89 2b       	or	r24, r25
 d48:	89 f0       	breq	.+34     	; 0xd6c <CDC_Device_Flush+0x4c>
 d4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d52:	8e 77       	andi	r24, 0x7E	; 126
 d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d58:	95 fd       	sbrc	r25, 5
 d5a:	08 c0       	rjmp	.+16     	; 0xd6c <CDC_Device_Flush+0x4c>
 d5c:	c8 db       	rcall	.-2160   	; 0x4ee <Endpoint_WaitUntilReady>
 d5e:	81 11       	cpse	r24, r1
 d60:	08 c0       	rjmp	.+16     	; 0xd72 <CDC_Device_Flush+0x52>
 d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d66:	8e 77       	andi	r24, 0x7E	; 126
 d68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d6c:	80 e0       	ldi	r24, 0x00	; 0
 d6e:	08 95       	ret
 d70:	82 e0       	ldi	r24, 0x02	; 2
 d72:	08 95       	ret

00000d74 <CDC_Device_USBTask>:
 d74:	2e b3       	in	r18, 0x1e	; 30
 d76:	24 30       	cpi	r18, 0x04	; 4
 d78:	51 f4       	brne	.+20     	; 0xd8e <CDC_Device_USBTask+0x1a>
 d7a:	fc 01       	movw	r30, r24
 d7c:	47 85       	ldd	r20, Z+15	; 0x0f
 d7e:	50 89       	ldd	r21, Z+16	; 0x10
 d80:	61 89       	ldd	r22, Z+17	; 0x11
 d82:	72 89       	ldd	r23, Z+18	; 0x12
 d84:	45 2b       	or	r20, r21
 d86:	46 2b       	or	r20, r22
 d88:	47 2b       	or	r20, r23
 d8a:	09 f0       	breq	.+2      	; 0xd8e <CDC_Device_USBTask+0x1a>
 d8c:	c9 cf       	rjmp	.-110    	; 0xd20 <CDC_Device_Flush>
 d8e:	08 95       	ret

00000d90 <CDC_Device_ReceiveByte>:
 d90:	2e b3       	in	r18, 0x1e	; 30
 d92:	24 30       	cpi	r18, 0x04	; 4
 d94:	19 f0       	breq	.+6      	; 0xd9c <CDC_Device_ReceiveByte+0xc>
 d96:	8f ef       	ldi	r24, 0xFF	; 255
 d98:	9f ef       	ldi	r25, 0xFF	; 255
 d9a:	08 95       	ret
 d9c:	fc 01       	movw	r30, r24
 d9e:	47 85       	ldd	r20, Z+15	; 0x0f
 da0:	50 89       	ldd	r21, Z+16	; 0x10
 da2:	61 89       	ldd	r22, Z+17	; 0x11
 da4:	72 89       	ldd	r23, Z+18	; 0x12
 da6:	45 2b       	or	r20, r21
 da8:	46 2b       	or	r20, r22
 daa:	47 2b       	or	r20, r23
 dac:	a1 f3       	breq	.-24     	; 0xd96 <CDC_Device_ReceiveByte+0x6>
 dae:	85 81       	ldd	r24, Z+5	; 0x05
 db0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 db8:	82 ff       	sbrs	r24, 2
 dba:	ed cf       	rjmp	.-38     	; 0xd96 <CDC_Device_ReceiveByte+0x6>
 dbc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 dc0:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 dc4:	89 2b       	or	r24, r25
 dc6:	21 f0       	breq	.+8      	; 0xdd0 <CDC_Device_ReceiveByte+0x40>
 dc8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 dcc:	30 e0       	ldi	r19, 0x00	; 0
 dce:	02 c0       	rjmp	.+4      	; 0xdd4 <CDC_Device_ReceiveByte+0x44>
 dd0:	2f ef       	ldi	r18, 0xFF	; 255
 dd2:	3f ef       	ldi	r19, 0xFF	; 255
 dd4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 dd8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 ddc:	89 2b       	or	r24, r25
 dde:	29 f4       	brne	.+10     	; 0xdea <CDC_Device_ReceiveByte+0x5a>
 de0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 de4:	8b 77       	andi	r24, 0x7B	; 123
 de6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dea:	c9 01       	movw	r24, r18
 dec:	08 95       	ret

00000dee <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 dee:	08 95       	ret

00000df0 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 df0:	cf 93       	push	r28
 df2:	df 93       	push	r29
 df4:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 df6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
 dfa:	83 ff       	sbrs	r24, 3
 dfc:	95 c0       	rjmp	.+298    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 dfe:	88 81       	ld	r24, Y
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <USB_ControlRequest+0x4>
 e06:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <USB_ControlRequest+0x5>
 e0a:	28 17       	cp	r18, r24
 e0c:	39 07       	cpc	r19, r25
 e0e:	09 f0       	breq	.+2      	; 0xe12 <CDC_Device_ProcessControlRequest+0x22>
 e10:	8b c0       	rjmp	.+278    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
 e12:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <USB_ControlRequest+0x1>
 e16:	81 32       	cpi	r24, 0x21	; 33
 e18:	59 f0       	breq	.+22     	; 0xe30 <CDC_Device_ProcessControlRequest+0x40>
 e1a:	18 f4       	brcc	.+6      	; 0xe22 <CDC_Device_ProcessControlRequest+0x32>
 e1c:	80 32       	cpi	r24, 0x20	; 32
 e1e:	d1 f1       	breq	.+116    	; 0xe94 <CDC_Device_ProcessControlRequest+0xa4>
 e20:	83 c0       	rjmp	.+262    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
 e22:	82 32       	cpi	r24, 0x22	; 34
 e24:	09 f4       	brne	.+2      	; 0xe28 <CDC_Device_ProcessControlRequest+0x38>
 e26:	5f c0       	rjmp	.+190    	; 0xee6 <CDC_Device_ProcessControlRequest+0xf6>
 e28:	83 32       	cpi	r24, 0x23	; 35
 e2a:	09 f4       	brne	.+2      	; 0xe2e <CDC_Device_ProcessControlRequest+0x3e>
 e2c:	6d c0       	rjmp	.+218    	; 0xf08 <CDC_Device_ProcessControlRequest+0x118>
 e2e:	7c c0       	rjmp	.+248    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e30:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>
 e34:	81 3a       	cpi	r24, 0xA1	; 161
 e36:	09 f0       	breq	.+2      	; 0xe3a <CDC_Device_ProcessControlRequest+0x4a>
 e38:	77 c0       	rjmp	.+238    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e3e:	87 7f       	andi	r24, 0xF7	; 247
 e40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e44:	8f 85       	ldd	r24, Y+15	; 0x0f
 e46:	98 89       	ldd	r25, Y+16	; 0x10
 e48:	a9 89       	ldd	r26, Y+17	; 0x11
 e4a:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e4c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 e50:	49 2f       	mov	r20, r25
 e52:	5a 2f       	mov	r21, r26
 e54:	6b 2f       	mov	r22, r27
 e56:	77 27       	eor	r23, r23
 e58:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
 e5c:	ad 01       	movw	r20, r26
 e5e:	66 27       	eor	r22, r22
 e60:	77 27       	eor	r23, r23
 e62:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
 e66:	8b 2f       	mov	r24, r27
 e68:	99 27       	eor	r25, r25
 e6a:	aa 27       	eor	r26, r26
 e6c:	bb 27       	eor	r27, r27
 e6e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e72:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e74:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 e78:	8c 89       	ldd	r24, Y+20	; 0x14
 e7a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 e7e:	8d 89       	ldd	r24, Y+21	; 0x15
 e80:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e88:	8e 77       	andi	r24, 0x7E	; 126
 e8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e8e:	df 91       	pop	r29
 e90:	cf 91       	pop	r28
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 e92:	10 cb       	rjmp	.-2528   	; 0x4b4 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e94:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>
 e98:	81 32       	cpi	r24, 0x21	; 33
 e9a:	09 f0       	breq	.+2      	; 0xe9e <CDC_Device_ProcessControlRequest+0xae>
 e9c:	45 c0       	rjmp	.+138    	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ea2:	87 7f       	andi	r24, 0xF7	; 247
 ea4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 ea8:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
 eac:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
 eb0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
 eb4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 eb8:	3f 87       	std	Y+15, r19	; 0x0f
 eba:	28 8b       	std	Y+16, r18	; 0x10
 ebc:	99 8b       	std	Y+17, r25	; 0x11
 ebe:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 ec0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 ec4:	8b 8b       	std	Y+19, r24	; 0x13
 ec6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 eca:	8c 8b       	std	Y+20, r24	; 0x14
 ecc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 ed0:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ed6:	8b 77       	andi	r24, 0x7B	; 123
 ed8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 edc:	eb da       	rcall	.-2602   	; 0x4b4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ede:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ee0:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ee2:	cf 91       	pop	r28
 ee4:	61 ca       	rjmp	.-2878   	; 0x3a8 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ee6:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>
 eea:	81 32       	cpi	r24, 0x21	; 33
 eec:	e9 f4       	brne	.+58     	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 eee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ef2:	87 7f       	andi	r24, 0xF7	; 247
 ef4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ef8:	dd da       	rcall	.-2630   	; 0x4b4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 efa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_ControlRequest+0x2>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 efe:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f00:	ce 01       	movw	r24, r28
 f02:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f04:	cf 91       	pop	r28
 f06:	73 cf       	rjmp	.-282    	; 0xdee <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f08:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_ControlRequest>
 f0c:	81 32       	cpi	r24, 0x21	; 33
 f0e:	61 f4       	brne	.+24     	; 0xf28 <CDC_Device_ProcessControlRequest+0x138>
 f10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 f14:	87 7f       	andi	r24, 0xF7	; 247
 f16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f1a:	cc da       	rcall	.-2664   	; 0x4b4 <Endpoint_ClearStatusStage>
 f1c:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <USB_ControlRequest+0x2>
			}

			break;
	}
}
 f20:	ce 01       	movw	r24, r28
 f22:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f24:	cf 91       	pop	r28
 f26:	63 cf       	rjmp	.-314    	; 0xdee <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f28:	df 91       	pop	r29
 f2a:	cf 91       	pop	r28
 f2c:	08 95       	ret

00000f2e <__udivmodsi4>:
 f2e:	a1 e2       	ldi	r26, 0x21	; 33
 f30:	1a 2e       	mov	r1, r26
 f32:	aa 1b       	sub	r26, r26
 f34:	bb 1b       	sub	r27, r27
 f36:	fd 01       	movw	r30, r26
 f38:	0d c0       	rjmp	.+26     	; 0xf54 <__udivmodsi4_ep>

00000f3a <__udivmodsi4_loop>:
 f3a:	aa 1f       	adc	r26, r26
 f3c:	bb 1f       	adc	r27, r27
 f3e:	ee 1f       	adc	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	a2 17       	cp	r26, r18
 f44:	b3 07       	cpc	r27, r19
 f46:	e4 07       	cpc	r30, r20
 f48:	f5 07       	cpc	r31, r21
 f4a:	20 f0       	brcs	.+8      	; 0xf54 <__udivmodsi4_ep>
 f4c:	a2 1b       	sub	r26, r18
 f4e:	b3 0b       	sbc	r27, r19
 f50:	e4 0b       	sbc	r30, r20
 f52:	f5 0b       	sbc	r31, r21

00000f54 <__udivmodsi4_ep>:
 f54:	66 1f       	adc	r22, r22
 f56:	77 1f       	adc	r23, r23
 f58:	88 1f       	adc	r24, r24
 f5a:	99 1f       	adc	r25, r25
 f5c:	1a 94       	dec	r1
 f5e:	69 f7       	brne	.-38     	; 0xf3a <__udivmodsi4_loop>
 f60:	60 95       	com	r22
 f62:	70 95       	com	r23
 f64:	80 95       	com	r24
 f66:	90 95       	com	r25
 f68:	9b 01       	movw	r18, r22
 f6a:	ac 01       	movw	r20, r24
 f6c:	bd 01       	movw	r22, r26
 f6e:	cf 01       	movw	r24, r30
 f70:	08 95       	ret

00000f72 <__tablejump2__>:
 f72:	ee 0f       	add	r30, r30
 f74:	ff 1f       	adc	r31, r31
 f76:	00 24       	eor	r0, r0
 f78:	00 1c       	adc	r0, r0
 f7a:	0b be       	out	0x3b, r0	; 59
 f7c:	07 90       	elpm	r0, Z+
 f7e:	f6 91       	elpm	r31, Z
 f80:	e0 2d       	mov	r30, r0
 f82:	09 94       	ijmp

00000f84 <_exit>:
 f84:	f8 94       	cli

00000f86 <__stop_program>:
 f86:	ff cf       	rjmp	.-2      	; 0xf86 <__stop_program>
