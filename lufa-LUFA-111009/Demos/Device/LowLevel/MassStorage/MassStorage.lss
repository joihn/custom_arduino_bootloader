
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000173e  000017d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000173e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  00001816  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a33  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002028  00000000  00000000  0000956b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d89  00000000  00000000  0000b593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  0000f31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000260d  00000000  00000000  0000fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c54  00000000  00000000  000122d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00015f25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c7       	rjmp	.+3852   	; 0xf36 <__vector_10>
      2a:	00 00       	nop
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
      66:	00 00       	nop
      68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6b c0       	rjmp	.+214    	; 0x168 <__bad_interrupt>
      92:	00 00       	nop
      94:	69 c0       	rjmp	.+210    	; 0x168 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 0a       	sbc	r5, r23
      9a:	79 0a       	sbc	r7, r25
      9c:	68 0b       	sbc	r22, r24
      9e:	79 0a       	sbc	r7, r25
      a0:	68 0b       	sbc	r22, r24
      a2:	be 0a       	sbc	r11, r30
      a4:	e1 0a       	sbc	r14, r17
      a6:	68 0b       	sbc	r22, r24
      a8:	34 0b       	sbc	r19, r20
      aa:	46 0b       	sbc	r20, r22

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      bc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      cc:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     10a:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

0000011a <DeviceDescriptor>:
     11a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     12a:	dc 01                                               ..

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d0 e2       	ldi	r29, 0x20	; 32
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ee e3       	ldi	r30, 0x3E	; 62
     140:	f7 e1       	ldi	r31, 0x17	; 23
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a4 34       	cpi	r26, 0x44	; 68
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	a4 e4       	ldi	r26, 0x44	; 68
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a1 37       	cpi	r26, 0x71	; 113
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	72 d1       	rcall	.+740    	; 0x448 <main>
     164:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     16a:	9b b1       	in	r25, 0x0b	; 11
     16c:	9f 70       	andi	r25, 0x0F	; 15
     16e:	89 2b       	or	r24, r25
     170:	8b b9       	out	0x0b, r24	; 11
     172:	08 95       	ret

00000174 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     174:	84 b7       	in	r24, 0x34	; 52
     176:	87 7f       	andi	r24, 0xF7	; 247
     178:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	a8 95       	wdr
     180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     184:	88 61       	ori	r24, 0x18	; 24
     186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     19c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1a2:	8a b1       	in	r24, 0x0a	; 10
     1a4:	80 6f       	ori	r24, 0xF0	; 240
     1a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1a8:	8b b1       	in	r24, 0x0b	; 11
     1aa:	8f 70       	andi	r24, 0x0F	; 15
     1ac:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1ae:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1b0:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1b2:	84 b1       	in	r24, 0x04	; 4
     1b4:	86 60       	ori	r24, 0x06	; 6
     1b6:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1b8:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1ba:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1bc:	8d b5       	in	r24, 0x2d	; 45
     1be:	81 60       	ori	r24, 0x01	; 1
     1c0:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1c2:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1c4:	8c e5       	ldi	r24, 0x5C	; 92
     1c6:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1c8:	8d b1       	in	r24, 0x0d	; 13
     1ca:	83 60       	ori	r24, 0x03	; 3
     1cc:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1ce:	8e b1       	in	r24, 0x0e	; 14
     1d0:	83 60       	ori	r24, 0x03	; 3
     1d2:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1d4:	9a d6       	rcall	.+3380   	; 0xf0a <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1d6:	f7 c3       	rjmp	.+2030   	; 0x9c6 <DataflashManager_ResetDataflashProtections>

000001d8 <EVENT_USB_Device_Connect>:
     1d8:	80 ea       	ldi	r24, 0xA0	; 160

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1da:	c7 df       	rcall	.-114    	; 0x16a <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1dc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1e2:	80 e1       	ldi	r24, 0x10	; 16
     1e4:	c2 cf       	rjmp	.-124    	; 0x16a <LEDs_SetAllLEDs>

000001e6 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1e6:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     1e8:	42 e3       	ldi	r20, 0x32	; 50
     1ea:	61 e8       	ldi	r22, 0x81	; 129
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	c2 d5       	rcall	.+2948   	; 0xd74 <Endpoint_ConfigureEndpoint_Prv>
     1f0:	c8 2f       	mov	r28, r24
     1f2:	42 e3       	ldi	r20, 0x32	; 50
     1f4:	60 e8       	ldi	r22, 0x80	; 128
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	bd d5       	rcall	.+2938   	; 0xd74 <Endpoint_ConfigureEndpoint_Prv>
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1fa:	88 23       	and	r24, r24
     1fc:	11 f0       	breq	.+4      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     1fe:	c1 11       	cpse	r28, r1
     200:	02 c0       	rjmp	.+4      	; 0x206 <EVENT_USB_Device_ConfigurationChanged+0x20>
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	01 c0       	rjmp	.+2      	; 0x208 <EVENT_USB_Device_ConfigurationChanged+0x22>
}
     206:	80 e6       	ldi	r24, 0x60	; 96
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     208:	cf 91       	pop	r28
     20a:	af cf       	rjmp	.-162    	; 0x16a <LEDs_SetAllLEDs>

0000020c <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     20c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <USB_ControlRequest+0x1>
     210:	8e 3f       	cpi	r24, 0xFE	; 254
     212:	81 f0       	breq	.+32     	; 0x234 <EVENT_USB_Device_ControlRequest+0x28>
     214:	8f 3f       	cpi	r24, 0xFF	; 255
     216:	f9 f4       	brne	.+62     	; 0x256 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     218:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
     21c:	81 32       	cpi	r24, 0x21	; 33
     21e:	d9 f4       	brne	.+54     	; 0x256 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     220:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     224:	87 7f       	andi	r24, 0xF7	; 247
     226:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     22a:	d8 d5       	rcall	.+2992   	; 0xddc <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     232:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     234:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
     238:	81 3a       	cpi	r24, 0xA1	; 161
     23a:	69 f4       	brne	.+26     	; 0x256 <EVENT_USB_Device_ControlRequest+0x4a>
     23c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     240:	87 7f       	andi	r24, 0xF7	; 247
     242:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     246:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     24a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     24e:	8e 77       	andi	r24, 0x7E	; 126
     250:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     254:	c3 c5       	rjmp	.+2950   	; 0xddc <Endpoint_ClearStatusStage>
     256:	08 95       	ret

00000258 <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <MassStorage_Task+0x6>
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     262:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     266:	84 30       	cpi	r24, 0x04	; 4
     268:	09 f0       	breq	.+2      	; 0x26c <MassStorage_Task+0x14>
     26a:	e9 c0       	rjmp	.+466    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     26c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     270:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     274:	82 ff       	sbrs	r24, 2
     276:	b9 c0       	rjmp	.+370    	; 0x3ea <MassStorage_Task+0x192>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     278:	1a 82       	std	Y+2, r1	; 0x02
     27a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     27c:	ae 01       	movw	r20, r28
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	6f e0       	ldi	r22, 0x0F	; 15
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	85 e4       	ldi	r24, 0x45	; 69
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	ee d7       	rcall	.+4060   	; 0x1268 <Endpoint_Read_Stream_LE>
     28c:	85 30       	cpi	r24, 0x05	; 5
     28e:	29 f4       	brne	.+10     	; 0x29a <MassStorage_Task+0x42>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     290:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     294:	88 23       	and	r24, r24
     296:	91 f3       	breq	.-28     	; 0x27c <MassStorage_Task+0x24>
     298:	a8 c0       	rjmp	.+336    	; 0x3ea <MassStorage_Task+0x192>
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     29a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <CommandBlock>
     29e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <CommandBlock+0x1>
     2a2:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <CommandBlock+0x2>
     2a6:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <CommandBlock+0x3>
     2aa:	85 35       	cpi	r24, 0x55	; 85
     2ac:	93 45       	sbci	r25, 0x53	; 83
     2ae:	a2 44       	sbci	r26, 0x42	; 66
     2b0:	b3 44       	sbci	r27, 0x43	; 67
     2b2:	69 f4       	brne	.+26     	; 0x2ce <MassStorage_Task+0x76>
     2b4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <CommandBlock+0xd>
     2b8:	81 11       	cpse	r24, r1
     2ba:	09 c0       	rjmp	.+18     	; 0x2ce <MassStorage_Task+0x76>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     2bc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CommandBlock+0xc>
     2c0:	8f 71       	andi	r24, 0x1F	; 31
     2c2:	29 f4       	brne	.+10     	; 0x2ce <MassStorage_Task+0x76>
		(CommandBlock.Flags              & 0x1F)             ||
     2c4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <CommandBlock+0xe>
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	80 31       	cpi	r24, 0x10	; 16
     2cc:	70 f0       	brcs	.+28     	; 0x2ea <MassStorage_Task+0x92>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2d2:	80 62       	ori	r24, 0x20	; 32
     2d4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2de:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2e2:	80 62       	ori	r24, 0x20	; 32
     2e4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2e8:	80 c0       	rjmp	.+256    	; 0x3ea <MassStorage_Task+0x192>

		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
     2ea:	1a 82       	std	Y+2, r1	; 0x02
     2ec:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     2ee:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <CommandBlock+0xe>
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	ae 01       	movw	r20, r28
     2f6:	4f 5f       	subi	r20, 0xFF	; 255
     2f8:	5f 4f       	sbci	r21, 0xFF	; 255
     2fa:	84 e5       	ldi	r24, 0x54	; 84
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	b4 d7       	rcall	.+3944   	; 0x1268 <Endpoint_Read_Stream_LE>
     300:	85 30       	cpi	r24, 0x05	; 5
     302:	29 f4       	brne	.+10     	; 0x30e <MassStorage_Task+0xb6>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     304:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     308:	88 23       	and	r24, r24
     30a:	89 f3       	breq	.-30     	; 0x2ee <MassStorage_Task+0x96>
     30c:	6e c0       	rjmp	.+220    	; 0x3ea <MassStorage_Task+0x192>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     30e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     312:	8b 77       	andi	r24, 0x7B	; 123
     314:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Process sent command block from the host if one has been sent */
	if (ReadInCommandBlock())
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	27 df       	rcall	.-434    	; 0x16a <LEDs_SetAllLEDs>

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     31c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CommandBlock+0xc>
     320:	87 ff       	sbrs	r24, 7
     322:	03 c0       	rjmp	.+6      	; 0x32a <MassStorage_Task+0xd2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     32a:	13 d4       	rcall	.+2086   	; 0xb52 <SCSI_DecodeSCSICommand>
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	89 27       	eor	r24, r25
     330:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
     334:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <CommandBlock+0x4>
     338:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <CommandBlock+0x5>
     33c:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <CommandBlock+0x6>
     340:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <CommandBlock+0x7>
     344:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     348:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     34c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     350:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     354:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <CommandBlock+0x8>
     358:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <CommandBlock+0x9>
     35c:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <CommandBlock+0xa>
     360:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <CommandBlock+0xb>
     364:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
     368:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
     36c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     370:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     374:	88 23       	and	r24, r24
     376:	49 f0       	breq	.+18     	; 0x38a <MassStorage_Task+0x132>
     378:	45 2b       	or	r20, r21
     37a:	46 2b       	or	r20, r22
     37c:	47 2b       	or	r20, r23
     37e:	29 f0       	breq	.+10     	; 0x38a <MassStorage_Task+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     380:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     384:	80 62       	ori	r24, 0x20	; 32
     386:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     390:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     394:	85 ff       	sbrs	r24, 5
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <MassStorage_Task+0x14a>
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     398:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     39c:	88 23       	and	r24, r24
     39e:	c1 f3       	breq	.-16     	; 0x390 <MassStorage_Task+0x138>
     3a0:	22 c0       	rjmp	.+68     	; 0x3e6 <MassStorage_Task+0x18e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3ac:	85 ff       	sbrs	r24, 5
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <MassStorage_Task+0x162>
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3b0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     3b4:	88 23       	and	r24, r24
     3b6:	c1 f3       	breq	.-16     	; 0x3a8 <MassStorage_Task+0x150>
     3b8:	16 c0       	rjmp	.+44     	; 0x3e6 <MassStorage_Task+0x18e>
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3ba:	1a 82       	std	Y+2, r1	; 0x02
     3bc:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3be:	ae 01       	movw	r20, r28
     3c0:	4f 5f       	subi	r20, 0xFF	; 255
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	6d e0       	ldi	r22, 0x0D	; 13
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	04 d7       	rcall	.+3592   	; 0x11d6 <Endpoint_Write_Stream_LE>
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	29 f4       	brne	.+10     	; 0x3dc <MassStorage_Task+0x184>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3d2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     3d6:	88 23       	and	r24, r24
     3d8:	91 f3       	breq	.-28     	; 0x3be <MassStorage_Task+0x166>
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <MassStorage_Task+0x18e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3e0:	8e 77       	andi	r24, 0x7E	; 126
     3e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Return command status block to the host */
		ReturnCommandStatus();

		/* Indicate ready */
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3e6:	80 e6       	ldi	r24, 0x60	; 96
     3e8:	c0 de       	rcall	.-640    	; 0x16a <LEDs_SetAllLEDs>
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     3ea:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     3ee:	88 23       	and	r24, r24
     3f0:	31 f1       	breq	.+76     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     3f2:	80 e1       	ldi	r24, 0x10	; 16
     3f4:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     3f8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     3fc:	88 e0       	ldi	r24, 0x08	; 8
     3fe:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     402:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     40c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     410:	80 61       	ori	r24, 0x10	; 16
     412:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     416:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     41a:	88 60       	ori	r24, 0x08	; 8
     41c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     426:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     430:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     434:	88 60       	ori	r24, 0x08	; 8
     436:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     43a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
	}
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     448:	95 de       	rcall	.-726    	; 0x174 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	8e de       	rcall	.-740    	; 0x16a <LEDs_SetAllLEDs>
	sei();
     44e:	78 94       	sei

	for (;;)
	{
		MassStorage_Task();
     450:	03 df       	rcall	.-506    	; 0x258 <MassStorage_Task>
     452:	0e 94 82 0b 	call	0x1704	; 0x1704 <USB_USBTask>
		USB_USBTask();
     456:	fc cf       	rjmp	.-8      	; 0x450 <main+0x8>

00000458 <CALLBACK_USB_GetDescriptor>:
     458:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     45a:	33 27       	eor	r19, r19
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	31 05       	cpc	r19, r1
     460:	59 f0       	breq	.+22     	; 0x478 <CALLBACK_USB_GetDescriptor+0x20>
     462:	23 30       	cpi	r18, 0x03	; 3
     464:	31 05       	cpc	r19, r1
     466:	69 f0       	breq	.+26     	; 0x482 <CALLBACK_USB_GetDescriptor+0x2a>
     468:	21 30       	cpi	r18, 0x01	; 1
     46a:	31 05       	cpc	r19, r1
     46c:	e9 f4       	brne	.+58     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     46e:	82 e1       	ldi	r24, 0x12	; 18
     470:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     472:	2a e1       	ldi	r18, 0x1A	; 26
     474:	31 e0       	ldi	r19, 0x01	; 1
     476:	1c c0       	rjmp	.+56     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     478:	80 e2       	ldi	r24, 0x20	; 32
     47a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     47c:	2a ef       	ldi	r18, 0xFA	; 250
     47e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     480:	17 c0       	rjmp	.+46     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     482:	99 27       	eor	r25, r25
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	91 05       	cpc	r25, r1
     488:	49 f0       	breq	.+18     	; 0x49c <CALLBACK_USB_GetDescriptor+0x44>
     48a:	28 f0       	brcs	.+10     	; 0x496 <CALLBACK_USB_GetDescriptor+0x3e>
     48c:	02 97       	sbiw	r24, 0x02	; 2
     48e:	61 f4       	brne	.+24     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     490:	ec ea       	ldi	r30, 0xAC	; 172
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     496:	e6 ef       	ldi	r30, 0xF6	; 246
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     49c:	ec ed       	ldi	r30, 0xDC	; 220
     49e:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4a0:	84 91       	lpm	r24, Z
     4a2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     4a4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4b0:	fa 01       	movw	r30, r20
     4b2:	31 83       	std	Z+1, r19	; 0x01
     4b4:	20 83       	st	Z, r18
	return Size;
}
     4b6:	08 95       	ret

000004b8 <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     4b8:	8e b1       	in	r24, 0x0e	; 14
     4ba:	9e b1       	in	r25, 0x0e	; 14
     4bc:	93 60       	ori	r25, 0x03	; 3
     4be:	9e b9       	out	0x0e, r25	; 14
     4c0:	9e b1       	in	r25, 0x0e	; 14
     4c2:	9c 7f       	andi	r25, 0xFC	; 252
     4c4:	83 70       	andi	r24, 0x03	; 3
     4c6:	89 2b       	or	r24, r25
     4c8:	8e b9       	out	0x0e, r24	; 14
     4ca:	08 95       	ret

000004cc <Dataflash_WaitWhileBusy>:
     4cc:	f5 df       	rcall	.-22     	; 0x4b8 <Dataflash_ToggleSelectedChipCS>
     4ce:	87 ed       	ldi	r24, 0xD7	; 215
     4d0:	8e bd       	out	0x2e, r24	; 46
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <Dataflash_WaitWhileBusy+0x6>
     4d8:	1e bc       	out	0x2e, r1	; 46
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <Dataflash_WaitWhileBusy+0xe>
     4e0:	0e b4       	in	r0, 0x2e	; 46
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	f9 cf       	rjmp	.-14     	; 0x4d8 <Dataflash_WaitWhileBusy+0xc>
     4e6:	e8 cf       	rjmp	.-48     	; 0x4b8 <Dataflash_ToggleSelectedChipCS>

000004e8 <Dataflash_SendAddressBytes>:
     4e8:	9c 01       	movw	r18, r24
     4ea:	36 95       	lsr	r19
     4ec:	27 95       	ror	r18
     4ee:	56 e0       	ldi	r21, 0x06	; 6
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	5a 95       	dec	r21
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <Dataflash_SendAddressBytes+0x8>
     4f8:	8e bd       	out	0x2e, r24	; 46
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <Dataflash_SendAddressBytes+0x12>
     500:	22 0f       	add	r18, r18
     502:	22 0f       	add	r18, r18
     504:	22 0f       	add	r18, r18
     506:	72 2b       	or	r23, r18
     508:	7e bd       	out	0x2e, r23	; 46
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <Dataflash_SendAddressBytes+0x22>
     510:	6e bd       	out	0x2e, r22	; 46
     512:	0d b4       	in	r0, 0x2d	; 45
     514:	07 fe       	sbrs	r0, 7
     516:	fd cf       	rjmp	.-6      	; 0x512 <Dataflash_SendAddressBytes+0x2a>
     518:	08 95       	ret

0000051a <Dataflash_SelectChipFromPage>:
     51a:	9c 01       	movw	r18, r24
     51c:	9e b1       	in	r25, 0x0e	; 14
     51e:	93 60       	ori	r25, 0x03	; 3
     520:	9e b9       	out	0x0e, r25	; 14
     522:	21 15       	cp	r18, r1
     524:	80 e4       	ldi	r24, 0x40	; 64
     526:	38 07       	cpc	r19, r24
     528:	40 f4       	brcc	.+16     	; 0x53a <Dataflash_SelectChipFromPage+0x20>
     52a:	8e b1       	in	r24, 0x0e	; 14
     52c:	8c 7f       	andi	r24, 0xFC	; 252
     52e:	20 ff       	sbrs	r18, 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <Dataflash_SelectChipFromPage+0x1c>
     532:	81 60       	ori	r24, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <Dataflash_SelectChipFromPage+0x1e>
     536:	82 60       	ori	r24, 0x02	; 2
     538:	8e b9       	out	0x0e, r24	; 14
     53a:	08 95       	ret

0000053c <DataflashManager_WriteBlocks>:
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	8a 01       	movw	r16, r20
     558:	4b 01       	movw	r8, r22
     55a:	5c 01       	movw	r10, r24
     55c:	39 e0       	ldi	r19, 0x09	; 9
     55e:	88 0c       	add	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	aa 1c       	adc	r10, r10
     564:	bb 1c       	adc	r11, r11
     566:	3a 95       	dec	r19
     568:	d1 f7       	brne	.-12     	; 0x55e <DataflashManager_WriteBlocks+0x22>
     56a:	4a e0       	ldi	r20, 0x0A	; 10
     56c:	b6 94       	lsr	r11
     56e:	a7 94       	ror	r10
     570:	97 94       	ror	r9
     572:	87 94       	ror	r8
     574:	4a 95       	dec	r20
     576:	d1 f7       	brne	.-12     	; 0x56c <DataflashManager_WriteBlocks+0x30>
     578:	e4 01       	movw	r28, r8
     57a:	76 2f       	mov	r23, r22
     57c:	66 27       	eor	r22, r22
     57e:	77 0f       	add	r23, r23
     580:	7b 01       	movw	r14, r22
     582:	ee 24       	eor	r14, r14
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	f8 22       	and	r15, r24
     588:	c4 01       	movw	r24, r8
     58a:	c7 df       	rcall	.-114    	; 0x51a <Dataflash_SelectChipFromPage>
     58c:	83 e5       	ldi	r24, 0x53	; 83
     58e:	8e bd       	out	0x2e, r24	; 46
     590:	0d b4       	in	r0, 0x2d	; 45
     592:	07 fe       	sbrs	r0, 7
     594:	fd cf       	rjmp	.-6      	; 0x590 <DataflashManager_WriteBlocks+0x54>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	c4 01       	movw	r24, r8
     59c:	a5 df       	rcall	.-182    	; 0x4e8 <Dataflash_SendAddressBytes>
     59e:	96 df       	rcall	.-212    	; 0x4cc <Dataflash_WaitWhileBusy>
     5a0:	84 e8       	ldi	r24, 0x84	; 132
     5a2:	8e bd       	out	0x2e, r24	; 46
     5a4:	0d b4       	in	r0, 0x2d	; 45
     5a6:	07 fe       	sbrs	r0, 7
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <DataflashManager_WriteBlocks+0x68>
     5aa:	b7 01       	movw	r22, r14
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9b df       	rcall	.-202    	; 0x4e8 <Dataflash_SendAddressBytes>
     5b2:	33 d4       	rcall	.+2150   	; 0xe1a <Endpoint_WaitUntilReady>
     5b4:	81 11       	cpse	r24, r1
     5b6:	eb c0       	rjmp	.+470    	; 0x78e <DataflashManager_WriteBlocks+0x252>
     5b8:	b7 01       	movw	r22, r14
     5ba:	94 e0       	ldi	r25, 0x04	; 4
     5bc:	76 95       	lsr	r23
     5be:	67 95       	ror	r22
     5c0:	9a 95       	dec	r25
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <DataflashManager_WriteBlocks+0x80>
     5c4:	96 2e       	mov	r9, r22
     5c6:	58 01       	movw	r10, r16
     5c8:	25 e0       	ldi	r18, 0x05	; 5
     5ca:	aa 0c       	add	r10, r10
     5cc:	bb 1c       	adc	r11, r11
     5ce:	2a 95       	dec	r18
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <DataflashManager_WriteBlocks+0x8e>
     5d2:	e1 2c       	mov	r14, r1
     5d4:	f1 2c       	mov	r15, r1
     5d6:	81 2c       	mov	r8, r1
     5d8:	01 15       	cp	r16, r1
     5da:	11 05       	cpc	r17, r1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <DataflashManager_WriteBlocks+0xa4>
     5de:	bc c0       	rjmp	.+376    	; 0x758 <DataflashManager_WriteBlocks+0x21c>
     5e0:	65 01       	movw	r12, r10
     5e2:	ce 0c       	add	r12, r14
     5e4:	df 1c       	adc	r13, r15
     5e6:	80 e2       	ldi	r24, 0x20	; 32
     5e8:	78 2e       	mov	r7, r24
     5ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ee:	85 ff       	sbrs	r24, 5
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <DataflashManager_WriteBlocks+0xbe>
     5f2:	80 e4       	ldi	r24, 0x40	; 64
     5f4:	98 12       	cpse	r9, r24
     5f6:	42 c0       	rjmp	.+132    	; 0x67c <DataflashManager_WriteBlocks+0x140>
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <DataflashManager_WriteBlocks+0xd0>
     5fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5fe:	8b 77       	andi	r24, 0x7B	; 123
     600:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     604:	0a d4       	rcall	.+2068   	; 0xe1a <Endpoint_WaitUntilReady>
     606:	88 23       	and	r24, r24
     608:	a1 f3       	breq	.-24     	; 0x5f2 <DataflashManager_WriteBlocks+0xb6>
     60a:	c1 c0       	rjmp	.+386    	; 0x78e <DataflashManager_WriteBlocks+0x252>
     60c:	5f df       	rcall	.-322    	; 0x4cc <Dataflash_WaitWhileBusy>
     60e:	81 10       	cpse	r8, r1
     610:	02 c0       	rjmp	.+4      	; 0x616 <DataflashManager_WriteBlocks+0xda>
     612:	83 e8       	ldi	r24, 0x83	; 131
     614:	01 c0       	rjmp	.+2      	; 0x618 <DataflashManager_WriteBlocks+0xdc>
     616:	86 e8       	ldi	r24, 0x86	; 134
     618:	8e bd       	out	0x2e, r24	; 46
     61a:	0d b4       	in	r0, 0x2d	; 45
     61c:	07 fe       	sbrs	r0, 7
     61e:	fd cf       	rjmp	.-6      	; 0x61a <DataflashManager_WriteBlocks+0xde>
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	ce 01       	movw	r24, r28
     626:	60 df       	rcall	.-320    	; 0x4e8 <Dataflash_SendAddressBytes>
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	8e b1       	in	r24, 0x0e	; 14
     62c:	83 70       	andi	r24, 0x03	; 3
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	09 f4       	brne	.+2      	; 0x634 <DataflashManager_WriteBlocks+0xf8>
     632:	88 26       	eor	r8, r24
     634:	ce 01       	movw	r24, r28
     636:	71 df       	rcall	.-286    	; 0x51a <Dataflash_SelectChipFromPage>
     638:	80 e4       	ldi	r24, 0x40	; 64
     63a:	c8 16       	cp	r12, r24
     63c:	d1 04       	cpc	r13, r1
     63e:	78 f4       	brcc	.+30     	; 0x65e <DataflashManager_WriteBlocks+0x122>
     640:	45 df       	rcall	.-374    	; 0x4cc <Dataflash_WaitWhileBusy>
     642:	81 10       	cpse	r8, r1
     644:	02 c0       	rjmp	.+4      	; 0x64a <DataflashManager_WriteBlocks+0x10e>
     646:	83 e5       	ldi	r24, 0x53	; 83
     648:	01 c0       	rjmp	.+2      	; 0x64c <DataflashManager_WriteBlocks+0x110>
     64a:	85 e5       	ldi	r24, 0x55	; 85
     64c:	8e bd       	out	0x2e, r24	; 46
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_WriteBlocks+0x112>
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	ce 01       	movw	r24, r28
     65a:	46 df       	rcall	.-372    	; 0x4e8 <Dataflash_SendAddressBytes>
     65c:	37 df       	rcall	.-402    	; 0x4cc <Dataflash_WaitWhileBusy>
     65e:	81 10       	cpse	r8, r1
     660:	02 c0       	rjmp	.+4      	; 0x666 <DataflashManager_WriteBlocks+0x12a>
     662:	84 e8       	ldi	r24, 0x84	; 132
     664:	01 c0       	rjmp	.+2      	; 0x668 <DataflashManager_WriteBlocks+0x12c>
     666:	87 e8       	ldi	r24, 0x87	; 135
     668:	8e bd       	out	0x2e, r24	; 46
     66a:	0d b4       	in	r0, 0x2d	; 45
     66c:	07 fe       	sbrs	r0, 7
     66e:	fd cf       	rjmp	.-6      	; 0x66a <DataflashManager_WriteBlocks+0x12e>
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	37 df       	rcall	.-402    	; 0x4e8 <Dataflash_SendAddressBytes>
     67a:	91 2c       	mov	r9, r1
     67c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     680:	8e bd       	out	0x2e, r24	; 46
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <DataflashManager_WriteBlocks+0x146>
     688:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     68c:	8e bd       	out	0x2e, r24	; 46
     68e:	0d b4       	in	r0, 0x2d	; 45
     690:	07 fe       	sbrs	r0, 7
     692:	fd cf       	rjmp	.-6      	; 0x68e <DataflashManager_WriteBlocks+0x152>
     694:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     698:	8e bd       	out	0x2e, r24	; 46
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
     69e:	fd cf       	rjmp	.-6      	; 0x69a <DataflashManager_WriteBlocks+0x15e>
     6a0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6a4:	8e bd       	out	0x2e, r24	; 46
     6a6:	0d b4       	in	r0, 0x2d	; 45
     6a8:	07 fe       	sbrs	r0, 7
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <DataflashManager_WriteBlocks+0x16a>
     6ac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6b0:	8e bd       	out	0x2e, r24	; 46
     6b2:	0d b4       	in	r0, 0x2d	; 45
     6b4:	07 fe       	sbrs	r0, 7
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <DataflashManager_WriteBlocks+0x176>
     6b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6bc:	8e bd       	out	0x2e, r24	; 46
     6be:	0d b4       	in	r0, 0x2d	; 45
     6c0:	07 fe       	sbrs	r0, 7
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <DataflashManager_WriteBlocks+0x182>
     6c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6c8:	8e bd       	out	0x2e, r24	; 46
     6ca:	0d b4       	in	r0, 0x2d	; 45
     6cc:	07 fe       	sbrs	r0, 7
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <DataflashManager_WriteBlocks+0x18e>
     6d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6d4:	8e bd       	out	0x2e, r24	; 46
     6d6:	0d b4       	in	r0, 0x2d	; 45
     6d8:	07 fe       	sbrs	r0, 7
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <DataflashManager_WriteBlocks+0x19a>
     6dc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6e0:	8e bd       	out	0x2e, r24	; 46
     6e2:	0d b4       	in	r0, 0x2d	; 45
     6e4:	07 fe       	sbrs	r0, 7
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <DataflashManager_WriteBlocks+0x1a6>
     6e8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ec:	8e bd       	out	0x2e, r24	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <DataflashManager_WriteBlocks+0x1b2>
     6f4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6f8:	8e bd       	out	0x2e, r24	; 46
     6fa:	0d b4       	in	r0, 0x2d	; 45
     6fc:	07 fe       	sbrs	r0, 7
     6fe:	fd cf       	rjmp	.-6      	; 0x6fa <DataflashManager_WriteBlocks+0x1be>
     700:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     704:	8e bd       	out	0x2e, r24	; 46
     706:	0d b4       	in	r0, 0x2d	; 45
     708:	07 fe       	sbrs	r0, 7
     70a:	fd cf       	rjmp	.-6      	; 0x706 <DataflashManager_WriteBlocks+0x1ca>
     70c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     710:	8e bd       	out	0x2e, r24	; 46
     712:	0d b4       	in	r0, 0x2d	; 45
     714:	07 fe       	sbrs	r0, 7
     716:	fd cf       	rjmp	.-6      	; 0x712 <DataflashManager_WriteBlocks+0x1d6>
     718:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     71c:	8e bd       	out	0x2e, r24	; 46
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <DataflashManager_WriteBlocks+0x1e2>
     724:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     728:	8e bd       	out	0x2e, r24	; 46
     72a:	0d b4       	in	r0, 0x2d	; 45
     72c:	07 fe       	sbrs	r0, 7
     72e:	fd cf       	rjmp	.-6      	; 0x72a <DataflashManager_WriteBlocks+0x1ee>
     730:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     734:	8e bd       	out	0x2e, r24	; 46
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
     73a:	fd cf       	rjmp	.-6      	; 0x736 <DataflashManager_WriteBlocks+0x1fa>
     73c:	93 94       	inc	r9
     73e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     742:	81 11       	cpse	r24, r1
     744:	24 c0       	rjmp	.+72     	; 0x78e <DataflashManager_WriteBlocks+0x252>
     746:	7a 94       	dec	r7
     748:	71 10       	cpse	r7, r1
     74a:	4f cf       	rjmp	.-354    	; 0x5ea <DataflashManager_WriteBlocks+0xae>
     74c:	01 50       	subi	r16, 0x01	; 1
     74e:	11 09       	sbc	r17, r1
     750:	80 e2       	ldi	r24, 0x20	; 32
     752:	e8 1a       	sub	r14, r24
     754:	f1 08       	sbc	r15, r1
     756:	40 cf       	rjmp	.-384    	; 0x5d8 <DataflashManager_WriteBlocks+0x9c>
     758:	b9 de       	rcall	.-654    	; 0x4cc <Dataflash_WaitWhileBusy>
     75a:	81 10       	cpse	r8, r1
     75c:	02 c0       	rjmp	.+4      	; 0x762 <DataflashManager_WriteBlocks+0x226>
     75e:	83 e8       	ldi	r24, 0x83	; 131
     760:	01 c0       	rjmp	.+2      	; 0x764 <DataflashManager_WriteBlocks+0x228>
     762:	86 e8       	ldi	r24, 0x86	; 134
     764:	8e bd       	out	0x2e, r24	; 46
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_WriteBlocks+0x22a>
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	ce 01       	movw	r24, r28
     772:	ba de       	rcall	.-652    	; 0x4e8 <Dataflash_SendAddressBytes>
     774:	ab de       	rcall	.-682    	; 0x4cc <Dataflash_WaitWhileBusy>
     776:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     77a:	85 fd       	sbrc	r24, 5
     77c:	05 c0       	rjmp	.+10     	; 0x788 <DataflashManager_WriteBlocks+0x24c>
     77e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     782:	8b 77       	andi	r24, 0x7B	; 123
     784:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     788:	8e b1       	in	r24, 0x0e	; 14
     78a:	83 60       	ori	r24, 0x03	; 3
     78c:	8e b9       	out	0x0e, r24	; 14
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	9f 90       	pop	r9
     7a4:	8f 90       	pop	r8
     7a6:	7f 90       	pop	r7
     7a8:	08 95       	ret

000007aa <DataflashManager_ReadBlocks>:
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	8a 01       	movw	r16, r20
     7c0:	4b 01       	movw	r8, r22
     7c2:	5c 01       	movw	r10, r24
     7c4:	39 e0       	ldi	r19, 0x09	; 9
     7c6:	88 0c       	add	r8, r8
     7c8:	99 1c       	adc	r9, r9
     7ca:	aa 1c       	adc	r10, r10
     7cc:	bb 1c       	adc	r11, r11
     7ce:	3a 95       	dec	r19
     7d0:	d1 f7       	brne	.-12     	; 0x7c6 <DataflashManager_ReadBlocks+0x1c>
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	b6 94       	lsr	r11
     7d6:	a7 94       	ror	r10
     7d8:	97 94       	ror	r9
     7da:	87 94       	ror	r8
     7dc:	4a 95       	dec	r20
     7de:	d1 f7       	brne	.-12     	; 0x7d4 <DataflashManager_ReadBlocks+0x2a>
     7e0:	e4 01       	movw	r28, r8
     7e2:	76 2f       	mov	r23, r22
     7e4:	66 27       	eor	r22, r22
     7e6:	77 0f       	add	r23, r23
     7e8:	7b 01       	movw	r14, r22
     7ea:	ee 24       	eor	r14, r14
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	f8 22       	and	r15, r24
     7f0:	c4 01       	movw	r24, r8
     7f2:	93 de       	rcall	.-730    	; 0x51a <Dataflash_SelectChipFromPage>
     7f4:	82 ed       	ldi	r24, 0xD2	; 210
     7f6:	8e bd       	out	0x2e, r24	; 46
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_ReadBlocks+0x4e>
     7fe:	b7 01       	movw	r22, r14
     800:	c4 01       	movw	r24, r8
     802:	72 de       	rcall	.-796    	; 0x4e8 <Dataflash_SendAddressBytes>
     804:	1e bc       	out	0x2e, r1	; 46
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ReadBlocks+0x5c>
     80c:	1e bc       	out	0x2e, r1	; 46
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_ReadBlocks+0x64>
     814:	1e bc       	out	0x2e, r1	; 46
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ReadBlocks+0x6c>
     81c:	1e bc       	out	0x2e, r1	; 46
     81e:	0d b4       	in	r0, 0x2d	; 45
     820:	07 fe       	sbrs	r0, 7
     822:	fd cf       	rjmp	.-6      	; 0x81e <DataflashManager_ReadBlocks+0x74>
     824:	fa d2       	rcall	.+1524   	; 0xe1a <Endpoint_WaitUntilReady>
     826:	81 11       	cpse	r24, r1
     828:	c3 c0       	rjmp	.+390    	; 0x9b0 <DataflashManager_ReadBlocks+0x206>
     82a:	b7 01       	movw	r22, r14
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	76 95       	lsr	r23
     830:	67 95       	ror	r22
     832:	9a 95       	dec	r25
     834:	e1 f7       	brne	.-8      	; 0x82e <DataflashManager_ReadBlocks+0x84>
     836:	f6 2e       	mov	r15, r22
     838:	22 ed       	ldi	r18, 0xD2	; 210
     83a:	b2 2e       	mov	r11, r18
     83c:	01 15       	cp	r16, r1
     83e:	11 05       	cpc	r17, r1
     840:	09 f4       	brne	.+2      	; 0x844 <DataflashManager_ReadBlocks+0x9a>
     842:	aa c0       	rjmp	.+340    	; 0x998 <DataflashManager_ReadBlocks+0x1ee>
     844:	80 e2       	ldi	r24, 0x20	; 32
     846:	e8 2e       	mov	r14, r24
     848:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     84c:	85 ff       	sbrs	r24, 5
     84e:	08 c0       	rjmp	.+16     	; 0x860 <DataflashManager_ReadBlocks+0xb6>
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	f8 12       	cpse	r15, r24
     854:	26 c0       	rjmp	.+76     	; 0x8a2 <DataflashManager_ReadBlocks+0xf8>
     856:	21 96       	adiw	r28, 0x01	; 1
     858:	ce 01       	movw	r24, r28
     85a:	5f de       	rcall	.-834    	; 0x51a <Dataflash_SelectChipFromPage>
     85c:	be bc       	out	0x2e, r11	; 46
     85e:	09 c0       	rjmp	.+18     	; 0x872 <DataflashManager_ReadBlocks+0xc8>
     860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     864:	8e 77       	andi	r24, 0x7E	; 126
     866:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     86a:	d7 d2       	rcall	.+1454   	; 0xe1a <Endpoint_WaitUntilReady>
     86c:	88 23       	and	r24, r24
     86e:	81 f3       	breq	.-32     	; 0x850 <DataflashManager_ReadBlocks+0xa6>
     870:	9f c0       	rjmp	.+318    	; 0x9b0 <DataflashManager_ReadBlocks+0x206>
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
     876:	fd cf       	rjmp	.-6      	; 0x872 <DataflashManager_ReadBlocks+0xc8>
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	ce 01       	movw	r24, r28
     87e:	34 de       	rcall	.-920    	; 0x4e8 <Dataflash_SendAddressBytes>
     880:	1e bc       	out	0x2e, r1	; 46
     882:	0d b4       	in	r0, 0x2d	; 45
     884:	07 fe       	sbrs	r0, 7
     886:	fd cf       	rjmp	.-6      	; 0x882 <DataflashManager_ReadBlocks+0xd8>
     888:	1e bc       	out	0x2e, r1	; 46
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_ReadBlocks+0xe0>
     890:	1e bc       	out	0x2e, r1	; 46
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <DataflashManager_ReadBlocks+0xe8>
     898:	1e bc       	out	0x2e, r1	; 46
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fe       	sbrs	r0, 7
     89e:	fd cf       	rjmp	.-6      	; 0x89a <DataflashManager_ReadBlocks+0xf0>
     8a0:	f1 2c       	mov	r15, r1
     8a2:	1e bc       	out	0x2e, r1	; 46
     8a4:	0d b4       	in	r0, 0x2d	; 45
     8a6:	07 fe       	sbrs	r0, 7
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <DataflashManager_ReadBlocks+0xfa>
     8aa:	8e b5       	in	r24, 0x2e	; 46
     8ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b0:	1e bc       	out	0x2e, r1	; 46
     8b2:	0d b4       	in	r0, 0x2d	; 45
     8b4:	07 fe       	sbrs	r0, 7
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <DataflashManager_ReadBlocks+0x108>
     8b8:	8e b5       	in	r24, 0x2e	; 46
     8ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8be:	1e bc       	out	0x2e, r1	; 46
     8c0:	0d b4       	in	r0, 0x2d	; 45
     8c2:	07 fe       	sbrs	r0, 7
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <DataflashManager_ReadBlocks+0x116>
     8c6:	8e b5       	in	r24, 0x2e	; 46
     8c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8cc:	1e bc       	out	0x2e, r1	; 46
     8ce:	0d b4       	in	r0, 0x2d	; 45
     8d0:	07 fe       	sbrs	r0, 7
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <DataflashManager_ReadBlocks+0x124>
     8d4:	8e b5       	in	r24, 0x2e	; 46
     8d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8da:	1e bc       	out	0x2e, r1	; 46
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <DataflashManager_ReadBlocks+0x132>
     8e2:	8e b5       	in	r24, 0x2e	; 46
     8e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8e8:	1e bc       	out	0x2e, r1	; 46
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <DataflashManager_ReadBlocks+0x140>
     8f0:	8e b5       	in	r24, 0x2e	; 46
     8f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8f6:	1e bc       	out	0x2e, r1	; 46
     8f8:	0d b4       	in	r0, 0x2d	; 45
     8fa:	07 fe       	sbrs	r0, 7
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <DataflashManager_ReadBlocks+0x14e>
     8fe:	8e b5       	in	r24, 0x2e	; 46
     900:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     904:	1e bc       	out	0x2e, r1	; 46
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <DataflashManager_ReadBlocks+0x15c>
     90c:	8e b5       	in	r24, 0x2e	; 46
     90e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     912:	1e bc       	out	0x2e, r1	; 46
     914:	0d b4       	in	r0, 0x2d	; 45
     916:	07 fe       	sbrs	r0, 7
     918:	fd cf       	rjmp	.-6      	; 0x914 <DataflashManager_ReadBlocks+0x16a>
     91a:	8e b5       	in	r24, 0x2e	; 46
     91c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     920:	1e bc       	out	0x2e, r1	; 46
     922:	0d b4       	in	r0, 0x2d	; 45
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <DataflashManager_ReadBlocks+0x178>
     928:	8e b5       	in	r24, 0x2e	; 46
     92a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     92e:	1e bc       	out	0x2e, r1	; 46
     930:	0d b4       	in	r0, 0x2d	; 45
     932:	07 fe       	sbrs	r0, 7
     934:	fd cf       	rjmp	.-6      	; 0x930 <DataflashManager_ReadBlocks+0x186>
     936:	8e b5       	in	r24, 0x2e	; 46
     938:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     93c:	1e bc       	out	0x2e, r1	; 46
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
     942:	fd cf       	rjmp	.-6      	; 0x93e <DataflashManager_ReadBlocks+0x194>
     944:	8e b5       	in	r24, 0x2e	; 46
     946:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     94a:	1e bc       	out	0x2e, r1	; 46
     94c:	0d b4       	in	r0, 0x2d	; 45
     94e:	07 fe       	sbrs	r0, 7
     950:	fd cf       	rjmp	.-6      	; 0x94c <DataflashManager_ReadBlocks+0x1a2>
     952:	8e b5       	in	r24, 0x2e	; 46
     954:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     958:	1e bc       	out	0x2e, r1	; 46
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_ReadBlocks+0x1b0>
     960:	8e b5       	in	r24, 0x2e	; 46
     962:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     966:	1e bc       	out	0x2e, r1	; 46
     968:	0d b4       	in	r0, 0x2d	; 45
     96a:	07 fe       	sbrs	r0, 7
     96c:	fd cf       	rjmp	.-6      	; 0x968 <DataflashManager_ReadBlocks+0x1be>
     96e:	8e b5       	in	r24, 0x2e	; 46
     970:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     974:	1e bc       	out	0x2e, r1	; 46
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_ReadBlocks+0x1cc>
     97c:	8e b5       	in	r24, 0x2e	; 46
     97e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     982:	f3 94       	inc	r15
     984:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     988:	81 11       	cpse	r24, r1
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <DataflashManager_ReadBlocks+0x206>
     98c:	ea 94       	dec	r14
     98e:	e1 10       	cpse	r14, r1
     990:	5b cf       	rjmp	.-330    	; 0x848 <DataflashManager_ReadBlocks+0x9e>
     992:	01 50       	subi	r16, 0x01	; 1
     994:	11 09       	sbc	r17, r1
     996:	52 cf       	rjmp	.-348    	; 0x83c <DataflashManager_ReadBlocks+0x92>
     998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     99c:	85 fd       	sbrc	r24, 5
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <DataflashManager_ReadBlocks+0x200>
     9a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a4:	8e 77       	andi	r24, 0x7E	; 126
     9a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9aa:	8e b1       	in	r24, 0x0e	; 14
     9ac:	83 60       	ori	r24, 0x03	; 3
     9ae:	8e b9       	out	0x0e, r24	; 14
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	08 95       	ret

000009c6 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     9c6:	8e b1       	in	r24, 0x0e	; 14
     9c8:	8c 7f       	andi	r24, 0xFC	; 252
     9ca:	82 60       	ori	r24, 0x02	; 2
     9cc:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ce:	87 ed       	ldi	r24, 0xD7	; 215
     9d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9d2:	0d b4       	in	r0, 0x2d	; 45
     9d4:	07 fe       	sbrs	r0, 7
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9da:	0d b4       	in	r0, 0x2d	; 45
     9dc:	07 fe       	sbrs	r0, 7
     9de:	fd cf       	rjmp	.-6      	; 0x9da <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     9e0:	0e b4       	in	r0, 0x2e	; 46
     9e2:	01 fc       	sbrc	r0, 1
     9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <DataflashManager_ResetDataflashProtections+0x2e>
     9e6:	8e b1       	in	r24, 0x0e	; 14
     9e8:	8c 7f       	andi	r24, 0xFC	; 252
     9ea:	81 60       	ori	r24, 0x01	; 1
     9ec:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ee:	87 ed       	ldi	r24, 0xD7	; 215
     9f0:	8e bd       	out	0x2e, r24	; 46
     9f2:	16 c0       	rjmp	.+44     	; 0xa20 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     9f4:	61 dd       	rcall	.-1342   	; 0x4b8 <Dataflash_ToggleSelectedChipCS>
     9f6:	8d e3       	ldi	r24, 0x3D	; 61
     9f8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9fa:	0d b4       	in	r0, 0x2d	; 45
     9fc:	07 fe       	sbrs	r0, 7
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <DataflashManager_ResetDataflashProtections+0x34>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a00:	8a e2       	ldi	r24, 0x2A	; 42
     a02:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a04:	0d b4       	in	r0, 0x2d	; 45
     a06:	07 fe       	sbrs	r0, 7
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <DataflashManager_ResetDataflashProtections+0x3e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a0a:	8f e7       	ldi	r24, 0x7F	; 127
     a0c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <DataflashManager_ResetDataflashProtections+0x48>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a14:	8a e9       	ldi	r24, 0x9A	; 154
     a16:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <DataflashManager_ResetDataflashProtections+0x52>
     a1e:	e3 cf       	rjmp	.-58     	; 0x9e6 <DataflashManager_ResetDataflashProtections+0x20>
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <DataflashManager_ResetDataflashProtections+0x5a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a26:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a28:	0d b4       	in	r0, 0x2d	; 45
     a2a:	07 fe       	sbrs	r0, 7
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <DataflashManager_ResetDataflashProtections+0x62>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a2e:	0e b4       	in	r0, 0x2e	; 46
     a30:	01 fc       	sbrc	r0, 1
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <DataflashManager_ResetDataflashProtections+0x76>
     a34:	8e b1       	in	r24, 0x0e	; 14
     a36:	83 60       	ori	r24, 0x03	; 3
     a38:	8e b9       	out	0x0e, r24	; 14
	{
		Dataflash_ToggleSelectedChipCS();
     a3a:	08 95       	ret
     a3c:	3d dd       	rcall	.-1414   	; 0x4b8 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3e:	8d e3       	ldi	r24, 0x3D	; 61
     a40:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a42:	0d b4       	in	r0, 0x2d	; 45
     a44:	07 fe       	sbrs	r0, 7
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <DataflashManager_ResetDataflashProtections+0x7c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a48:	8a e2       	ldi	r24, 0x2A	; 42
     a4a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <DataflashManager_ResetDataflashProtections+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a52:	8f e7       	ldi	r24, 0x7F	; 127
     a54:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <DataflashManager_ResetDataflashProtections+0x90>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a5c:	8a e9       	ldi	r24, 0x9A	; 154
     a5e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a60:	0d b4       	in	r0, 0x2d	; 45
     a62:	07 fe       	sbrs	r0, 7
     a64:	fd cf       	rjmp	.-6      	; 0xa60 <DataflashManager_ResetDataflashProtections+0x9a>
     a66:	e6 cf       	rjmp	.-52     	; 0xa34 <DataflashManager_ResetDataflashProtections+0x6e>

00000a68 <DataflashManager_CheckDataflashOperation>:
     a68:	8e b1       	in	r24, 0x0e	; 14
     a6a:	8c 7f       	andi	r24, 0xFC	; 252
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a70:	8f e9       	ldi	r24, 0x9F	; 159
     a72:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a74:	0d b4       	in	r0, 0x2d	; 45
     a76:	07 fe       	sbrs	r0, 7
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a7a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a7c:	0d b4       	in	r0, 0x2d	; 45
     a7e:	07 fe       	sbrs	r0, 7
     a80:	fd cf       	rjmp	.-6      	; 0xa7c <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     a82:	9e b5       	in	r25, 0x2e	; 46
     a84:	8e b1       	in	r24, 0x0e	; 14
     a86:	83 60       	ori	r24, 0x03	; 3
     a88:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     a8a:	9f 31       	cpi	r25, 0x1F	; 31
     a8c:	a1 f4       	brne	.+40     	; 0xab6 <DataflashManager_CheckDataflashOperation+0x4e>
     a8e:	8e b1       	in	r24, 0x0e	; 14
     a90:	8c 7f       	andi	r24, 0xFC	; 252
     a92:	81 60       	ori	r24, 0x01	; 1
     a94:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a96:	8f e9       	ldi	r24, 0x9F	; 159
     a98:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a9a:	0d b4       	in	r0, 0x2d	; 45
     a9c:	07 fe       	sbrs	r0, 7
     a9e:	fd cf       	rjmp	.-6      	; 0xa9a <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aa0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     aa2:	0d b4       	in	r0, 0x2d	; 45
     aa4:	07 fe       	sbrs	r0, 7
     aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     aa8:	9e b5       	in	r25, 0x2e	; 46
     aaa:	8e b1       	in	r24, 0x0e	; 14
     aac:	83 60       	ori	r24, 0x03	; 3
     aae:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	9f 31       	cpi	r25, 0x1F	; 31
     ab4:	09 f0       	breq	.+2      	; 0xab8 <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     ab8:	08 95       	ret

00000aba <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	28 2f       	mov	r18, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ac0:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <CommandBlock+0x14>
     ac4:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <CommandBlock+0x13>
     ac8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <CommandBlock+0x12>
     acc:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <CommandBlock+0x11>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     ad0:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <CommandBlock+0x17>
     ad4:	c3 2f       	mov	r28, r19
     ad6:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <CommandBlock+0x16>
     ada:	d3 2f       	mov	r29, r19

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);
	
	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     adc:	61 15       	cp	r22, r1
     ade:	30 e8       	ldi	r19, 0x80	; 128
     ae0:	73 07       	cpc	r23, r19
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	68 f0       	brcs	.+26     	; 0xb02 <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ae8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     aec:	80 7f       	andi	r24, 0xF0	; 240
     aee:	85 60       	ori	r24, 0x05	; 5
     af0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     af4:	81 e2       	ldi	r24, 0x21	; 33
     af6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SenseData+0xc>
     afa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	25 c0       	rjmp	.+74     	; 0xb4c <SCSI_Command_ReadWrite_10+0x92>
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b02:	ae 01       	movw	r20, r28
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b04:	22 23       	and	r18, r18
     b06:	11 f0       	breq	.+4      	; 0xb0c <SCSI_Command_ReadWrite_10+0x52>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b08:	50 de       	rcall	.-864    	; 0x7aa <DataflashManager_ReadBlocks>
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <SCSI_Command_ReadWrite_10+0x54>
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b0c:	17 dd       	rcall	.-1490   	; 0x53c <DataflashManager_WriteBlocks>
     b0e:	ae 01       	movw	r20, r28

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	89 e0       	ldi	r24, 0x09	; 9
     b16:	44 0f       	add	r20, r20
     b18:	55 1f       	adc	r21, r21
     b1a:	66 1f       	adc	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	8a 95       	dec	r24
     b20:	d1 f7       	brne	.-12     	; 0xb16 <SCSI_Command_ReadWrite_10+0x5c>
     b22:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     b26:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     b2a:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     b2e:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     b32:	84 1b       	sub	r24, r20
     b34:	95 0b       	sbc	r25, r21
     b36:	a6 0b       	sbc	r26, r22
     b38:	b7 0b       	sbc	r27, r23
     b3a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CommandBlock+0x8>
     b3e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <CommandBlock+0x9>
     b42:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <CommandBlock+0xa>
     b46:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <CommandBlock+0xb>
     b4a:	81 e0       	ldi	r24, 0x01	; 1

	return true;
     b4c:	df 91       	pop	r29
}
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <SCSI_DecodeSCSICommand>:
     b52:	0f 93       	push	r16
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     b5a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <CommandBlock+0xf>
     b5e:	8d 31       	cpi	r24, 0x1D	; 29
     b60:	09 f4       	brne	.+2      	; 0xb64 <SCSI_DecodeSCSICommand+0x12>
     b62:	c2 c0       	rjmp	.+388    	; 0xce8 <SCSI_DecodeSCSICommand+0x196>
     b64:	30 f5       	brcc	.+76     	; 0xbb2 <SCSI_DecodeSCSICommand+0x60>
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	09 f4       	brne	.+2      	; 0xb6c <SCSI_DecodeSCSICommand+0x1a>
     b6a:	6f c0       	rjmp	.+222    	; 0xc4a <SCSI_DecodeSCSICommand+0xf8>
     b6c:	20 f4       	brcc	.+8      	; 0xb76 <SCSI_DecodeSCSICommand+0x24>
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <SCSI_DecodeSCSICommand+0x22>
     b72:	dc c0       	rjmp	.+440    	; 0xd2c <SCSI_DecodeSCSICommand+0x1da>
     b74:	e4 c0       	rjmp	.+456    	; 0xd3e <SCSI_DecodeSCSICommand+0x1ec>
     b76:	82 31       	cpi	r24, 0x12	; 18
     b78:	71 f1       	breq	.+92     	; 0xbd6 <SCSI_DecodeSCSICommand+0x84>
     b7a:	8a 31       	cpi	r24, 0x1A	; 26
     b7c:	09 f0       	breq	.+2      	; 0xb80 <SCSI_DecodeSCSICommand+0x2e>
     b7e:	df c0       	rjmp	.+446    	; 0xd3e <SCSI_DecodeSCSICommand+0x1ec>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b80:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b84:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b88:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b8c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b94:	8e 77       	andi	r24, 0x7E	; 126
     b96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     b9a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     b9e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     ba2:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     ba6:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     baa:	04 97       	sbiw	r24, 0x04	; 4
     bac:	a1 09       	sbc	r26, r1
     bae:	b1 09       	sbc	r27, r1
     bb0:	b4 c0       	rjmp	.+360    	; 0xd1a <SCSI_DecodeSCSICommand+0x1c8>
bool SCSI_DecodeSCSICommand(void)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     bb2:	88 32       	cpi	r24, 0x28	; 40
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <SCSI_DecodeSCSICommand+0x66>
     bb6:	ac c0       	rjmp	.+344    	; 0xd10 <SCSI_DecodeSCSICommand+0x1be>
     bb8:	38 f4       	brcc	.+14     	; 0xbc8 <SCSI_DecodeSCSICommand+0x76>
     bba:	8e 31       	cpi	r24, 0x1E	; 30
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <SCSI_DecodeSCSICommand+0x6e>
     bbe:	b6 c0       	rjmp	.+364    	; 0xd2c <SCSI_DecodeSCSICommand+0x1da>
     bc0:	85 32       	cpi	r24, 0x25	; 37
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <SCSI_DecodeSCSICommand+0x74>
     bc4:	69 c0       	rjmp	.+210    	; 0xc98 <SCSI_DecodeSCSICommand+0x146>
     bc6:	bb c0       	rjmp	.+374    	; 0xd3e <SCSI_DecodeSCSICommand+0x1ec>
     bc8:	8a 32       	cpi	r24, 0x2A	; 42
     bca:	09 f4       	brne	.+2      	; 0xbce <SCSI_DecodeSCSICommand+0x7c>
     bcc:	9f c0       	rjmp	.+318    	; 0xd0c <SCSI_DecodeSCSICommand+0x1ba>
     bce:	8f 32       	cpi	r24, 0x2F	; 47
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <SCSI_DecodeSCSICommand+0x82>
     bd2:	ac c0       	rjmp	.+344    	; 0xd2c <SCSI_DecodeSCSICommand+0x1da>
     bd4:	b4 c0       	rjmp	.+360    	; 0xd3e <SCSI_DecodeSCSICommand+0x1ec>
     bd6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <CommandBlock+0x13>
     bda:	c8 2f       	mov	r28, r24
     bdc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <CommandBlock+0x12>
     be0:	d8 2f       	mov	r29, r24
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     be2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <CommandBlock+0x10>
     be6:	83 70       	andi	r24, 0x03	; 3
     be8:	21 f4       	brne	.+8      	; 0xbf2 <SCSI_DecodeSCSICommand+0xa0>
     bea:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <CommandBlock+0x11>
     bee:	88 23       	and	r24, r24
     bf0:	41 f0       	breq	.+16     	; 0xc02 <SCSI_DecodeSCSICommand+0xb0>
	     CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bf2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     bf6:	80 7f       	andi	r24, 0xF0	; 240
     bf8:	85 60       	ori	r24, 0x05	; 5
     bfa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     bfe:	84 e2       	ldi	r24, 0x24	; 36
     c00:	a5 c0       	rjmp	.+330    	; 0xd4c <SCSI_DecodeSCSICommand+0x1fa>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     c02:	8e 01       	movw	r16, r28
     c04:	c5 32       	cpi	r28, 0x25	; 37
     c06:	d1 05       	cpc	r29, r1
     c08:	10 f0       	brcs	.+4      	; 0xc0e <SCSI_DecodeSCSICommand+0xbc>
     c0a:	04 e2       	ldi	r16, 0x24	; 36
     c0c:	10 e0       	ldi	r17, 0x00	; 0

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	b8 01       	movw	r22, r16
     c14:	8f e1       	ldi	r24, 0x1F	; 31
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	de d2       	rcall	.+1468   	; 0x11d6 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	ce 01       	movw	r24, r28
     c20:	80 1b       	sub	r24, r16
     c22:	91 0b       	sbc	r25, r17
     c24:	99 d2       	rcall	.+1330   	; 0x1158 <Endpoint_Null_Stream>
     c26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c2a:	8e 77       	andi	r24, 0x7E	; 126
     c2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c30:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     c34:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     c38:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     c3c:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     c40:	80 1b       	sub	r24, r16
     c42:	91 0b       	sbc	r25, r17
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	68 c0       	rjmp	.+208    	; 0xd1a <SCSI_DecodeSCSICommand+0x1c8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c4a:	c0 91 58 01 	lds	r28, 0x0158	; 0x800158 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c4e:	dc 2f       	mov	r29, r28
     c50:	c3 31       	cpi	r28, 0x13	; 19
     c52:	08 f0       	brcs	.+2      	; 0xc56 <SCSI_DecodeSCSICommand+0x104>
     c54:	d2 e1       	ldi	r29, 0x12	; 18

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c56:	0d 2f       	mov	r16, r29
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	b8 01       	movw	r22, r16
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	b8 d2       	rcall	.+1392   	; 0x11d6 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c66:	8c 2f       	mov	r24, r28
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	80 1b       	sub	r24, r16
     c70:	91 0b       	sbc	r25, r17
     c72:	72 d2       	rcall	.+1252   	; 0x1158 <Endpoint_Null_Stream>
     c74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c78:	8e 77       	andi	r24, 0x7E	; 126
     c7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c7e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     c82:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     c86:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     c8a:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     c8e:	8d 1b       	sub	r24, r29
     c90:	91 09       	sbc	r25, r1
     c92:	a1 09       	sbc	r26, r1
     c94:	b1 09       	sbc	r27, r1
     c96:	41 c0       	rjmp	.+130    	; 0xd1a <SCSI_DecodeSCSICommand+0x1c8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c98:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     c9c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     ca0:	8f e7       	ldi	r24, 0x7F	; 127
     ca2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     cac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     cb0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     cba:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     cbe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     cc2:	81 11       	cpse	r24, r1
     cc4:	46 c0       	rjmp	.+140    	; 0xd52 <SCSI_DecodeSCSICommand+0x200>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cca:	8e 77       	andi	r24, 0x7E	; 126
     ccc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     cd0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     cd4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     cd8:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     cdc:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     ce0:	08 97       	sbiw	r24, 0x08	; 8
     ce2:	a1 09       	sbc	r26, r1
     ce4:	b1 09       	sbc	r27, r1
     ce6:	19 c0       	rjmp	.+50     	; 0xd1a <SCSI_DecodeSCSICommand+0x1c8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     ce8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <CommandBlock+0x10>
     cec:	82 ff       	sbrs	r24, 2

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     cee:	81 cf       	rjmp	.-254    	; 0xbf2 <SCSI_DecodeSCSICommand+0xa0>
     cf0:	bb de       	rcall	.-650    	; 0xa68 <DataflashManager_CheckDataflashOperation>
     cf2:	81 11       	cpse	r24, r1
     cf4:	1b c0       	rjmp	.+54     	; 0xd2c <SCSI_DecodeSCSICommand+0x1da>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     cf6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     cfa:	80 7f       	andi	r24, 0xF0	; 240
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     d02:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SenseData+0xc>
     d06:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d0a:	23 c0       	rjmp	.+70     	; 0xd52 <SCSI_DecodeSCSICommand+0x200>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <SCSI_DecodeSCSICommand+0x1c0>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	d3 de       	rcall	.-602    	; 0xaba <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d14:	81 11       	cpse	r24, r1
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <SCSI_DecodeSCSICommand+0x204>
     d18:	1c c0       	rjmp	.+56     	; 0xd52 <SCSI_DecodeSCSICommand+0x200>
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     d1a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CommandBlock+0x8>
     d1e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <CommandBlock+0x9>
     d22:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <CommandBlock+0xa>
     d26:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <CommandBlock+0xb>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6();
			break;
     d2a:	15 c0       	rjmp	.+42     	; 0xd56 <SCSI_DecodeSCSICommand+0x204>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     d2c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <CommandBlock+0x8>
     d30:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <CommandBlock+0x9>
     d34:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <CommandBlock+0xa>
     d38:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <CommandBlock+0xb>
			break;
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <SCSI_DecodeSCSICommand+0x204>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d3e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     d42:	80 7f       	andi	r24, 0xF0	; 240
     d44:	85 60       	ori	r24, 0x05	; 5
     d46:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     d4a:	80 e2       	ldi	r24, 0x20	; 32
     d4c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SenseData+0xc>
     d50:	da cf       	rjmp	.-76     	; 0xd06 <SCSI_DecodeSCSICommand+0x1b4>
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
	}

	return false;
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0a c0       	rjmp	.+20     	; 0xd6a <SCSI_DecodeSCSICommand+0x218>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d56:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     d5a:	80 7f       	andi	r24, 0xF0	; 240
     d5c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     d60:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SenseData+0xc>
     d64:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     d68:	81 e0       	ldi	r24, 0x01	; 1
	}

	return false;
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     d74:	98 2f       	mov	r25, r24
     d76:	97 30       	cpi	r25, 0x07	; 7
     d78:	68 f5       	brcc	.+90     	; 0xdd4 <Endpoint_ConfigureEndpoint_Prv+0x60>
     d7a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d7e:	98 17       	cp	r25, r24
     d80:	39 f0       	breq	.+14     	; 0xd90 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     d82:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     d86:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     d8a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <Endpoint_ConfigureEndpoint_Prv+0x22>
     d90:	24 2f       	mov	r18, r20
     d92:	76 2f       	mov	r23, r22
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	21 fd       	sbrc	r18, 1
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <Endpoint_ConfigureEndpoint_Prv+0x2a>
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	ec cf       	rjmp	.-40     	; 0xd76 <Endpoint_ConfigureEndpoint_Prv+0x2>
     d9e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     da2:	3e 7f       	andi	r19, 0xFE	; 254
     da4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     da8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     dac:	3d 7f       	andi	r19, 0xFD	; 253
     dae:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     db2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     db6:	31 60       	ori	r19, 0x01	; 1
     db8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     dbc:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     dc0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     dc4:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     dc8:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     dcc:	27 fd       	sbrc	r18, 7
     dce:	e5 cf       	rjmp	.-54     	; 0xd9a <Endpoint_ConfigureEndpoint_Prv+0x26>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret
     dd4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	08 95       	ret

00000ddc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ddc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
     de0:	87 ff       	sbrs	r24, 7
     de2:	11 c0       	rjmp	.+34     	; 0xe06 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     de4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     de8:	82 fd       	sbrc	r24, 2
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dec:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     df0:	81 11       	cpse	r24, r1
     df2:	f8 cf       	rjmp	.-16     	; 0xde4 <Endpoint_ClearStatusStage+0x8>
     df4:	11 c0       	rjmp	.+34     	; 0xe18 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     df6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dfa:	8b 77       	andi	r24, 0x7B	; 123
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dfe:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     e02:	88 23       	and	r24, r24
     e04:	49 f0       	breq	.+18     	; 0xe18 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e0a:	80 ff       	sbrs	r24, 0
     e0c:	f8 cf       	rjmp	.-16     	; 0xdfe <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e12:	8e 77       	andi	r24, 0x7E	; 126
     e14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e18:	08 95       	ret

00000e1a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     e1a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     e1e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     e22:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e24:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e28:	84 2f       	mov	r24, r20
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	40 ff       	sbrs	r20, 0
     e2e:	23 c0       	rjmp	.+70     	; 0xe76 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     e34:	80 fd       	sbrc	r24, 0
     e36:	1d c0       	rjmp	.+58     	; 0xe72 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e38:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e3c:	88 23       	and	r24, r24
     e3e:	99 f0       	breq	.+38     	; 0xe66 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	99 f0       	breq	.+38     	; 0xe6a <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e44:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e48:	85 fd       	sbrc	r24, 5
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <Endpoint_WaitUntilReady+0x54>
     e4c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     e50:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e54:	24 17       	cp	r18, r20
     e56:	35 07       	cpc	r19, r21
     e58:	29 f3       	breq	.-54     	; 0xe24 <Endpoint_WaitUntilReady+0xa>
     e5a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e5c:	11 f0       	breq	.+4      	; 0xe62 <Endpoint_WaitUntilReady+0x48>
     e5e:	9a 01       	movw	r18, r20
     e60:	e1 cf       	rjmp	.-62     	; 0xe24 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e76:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e7a:	42 ff       	sbrs	r20, 2
     e7c:	dd cf       	rjmp	.-70     	; 0xe38 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e7e:	08 95       	ret

00000e80 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e88:	49 d0       	rcall	.+146    	; 0xf1c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e8a:	50 d0       	rcall	.+160    	; 0xf2c <USB_INT_ClearAllInterrupts>
     e8c:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	88 81       	ld	r24, Y
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	88 83       	st	Y, r24
     e96:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	88 83       	st	Y, r24
     e9c:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e9e:	8f 7d       	andi	r24, 0xDF	; 223
     ea0:	88 83       	st	Y, r24
     ea2:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	80 83       	st	Z, r24
     eac:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     eae:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     eb2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     eb6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     eba:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     ebe:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     ec0:	10 e0       	ldi	r17, 0x00	; 0
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 81       	ld	r24, Z
     ec6:	8b 7f       	andi	r24, 0xFB	; 251
     ec8:	80 83       	st	Z, r24
     eca:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	88 83       	st	Y, r24
     ed0:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	4e df       	rcall	.-356    	; 0xd74 <Endpoint_ConfigureEndpoint_Prv>
     ed8:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	80 83       	st	Z, r24
     ee2:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	80 83       	st	Z, r24
     eec:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	80 83       	st	Z, r24
     ef2:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ef4:	80 81       	ld	r24, Z
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
     ef8:	80 83       	st	Z, r24
     efa:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	88 83       	st	Y, r24
     f00:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <USB_Init>:
     f0a:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_IsInitialized>

	USB_ResetInterface();
     f1a:	b2 cf       	rjmp	.-156    	; 0xe80 <USB_ResetInterface>

00000f1c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f1c:	e8 ed       	ldi	r30, 0xD8	; 216
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8c 7f       	andi	r24, 0xFC	; 252
     f24:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f26:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f2a:	08 95       	ret

00000f2c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f2c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     f30:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f34:	08 95       	ret

00000f36 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f5c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f60:	82 ff       	sbrs	r24, 2
     f62:	0a c0       	rjmp	.+20     	; 0xf78 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f64:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f68:	82 ff       	sbrs	r24, 2
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f6c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f76:	c5 d3       	rcall	.+1930   	; 0x1702 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f78:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f7c:	80 ff       	sbrs	r24, 0
     f7e:	1d c0       	rjmp	.+58     	; 0xfba <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f80:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f84:	80 ff       	sbrs	r24, 0
     f86:	19 c0       	rjmp	.+50     	; 0xfba <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f88:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f92:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f96:	80 ff       	sbrs	r24, 0
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f9a:	8c e0       	ldi	r24, 0x0C	; 12
     f9c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f9e:	8e e0       	ldi	r24, 0x0E	; 14
     fa0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     fa2:	09 b4       	in	r0, 0x29	; 41
     fa4:	00 fe       	sbrs	r0, 0
     fa6:	fd cf       	rjmp	.-6      	; 0xfa2 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     fae:	14 d9       	rcall	.-3544   	; 0x1d8 <EVENT_USB_Device_Connect>
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fb2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     fb4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     fb8:	14 d9       	rcall	.-3544   	; 0x1e2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     fba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     fbe:	80 ff       	sbrs	r24, 0
     fc0:	18 c0       	rjmp	.+48     	; 0xff2 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     fc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fc6:	80 ff       	sbrs	r24, 0
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fce:	8e 7f       	andi	r24, 0xFE	; 254
     fd0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fd4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fd8:	80 61       	ori	r24, 0x10	; 16
     fda:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     fde:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     fe2:	80 62       	ori	r24, 0x20	; 32
     fe4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fe8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     fea:	85 e0       	ldi	r24, 0x05	; 5
     fec:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     ff0:	88 d3       	rcall	.+1808   	; 0x1702 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     ff2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ff6:	84 ff       	sbrs	r24, 4
     ff8:	2d c0       	rjmp	.+90     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ffa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ffe:	84 ff       	sbrs	r24, 4
    1000:	29 c0       	rjmp	.+82     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1002:	8c e0       	ldi	r24, 0x0C	; 12
    1004:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1006:	8e e0       	ldi	r24, 0x0E	; 14
    1008:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    100a:	09 b4       	in	r0, 0x29	; 41
    100c:	00 fe       	sbrs	r0, 0
    100e:	fd cf       	rjmp	.-6      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1010:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1014:	8f 7d       	andi	r24, 0xDF	; 223
    1016:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    101a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    101e:	8f 7e       	andi	r24, 0xEF	; 239
    1020:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1024:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1028:	8f 7e       	andi	r24, 0xEF	; 239
    102a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    102e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1038:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
    103c:	81 11       	cpse	r24, r1
    103e:	06 c0       	rjmp	.+12     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1040:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1044:	87 fd       	sbrc	r24, 7
    1046:	02 c0       	rjmp	.+4      	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	01 c0       	rjmp	.+2      	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1052:	57 d3       	rcall	.+1710   	; 0x1702 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1054:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1058:	83 ff       	sbrs	r24, 3
    105a:	27 c0       	rjmp	.+78     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    105c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1060:	83 ff       	sbrs	r24, 3
    1062:	23 c0       	rjmp	.+70     	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1064:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1068:	87 7f       	andi	r24, 0xF7	; 247
    106a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1074:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1078:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    107c:	8e 7f       	andi	r24, 0xFE	; 254
    107e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1082:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    108c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1090:	80 61       	ori	r24, 0x10	; 16
    1092:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1096:	42 e0       	ldi	r20, 0x02	; 2
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    109c:	6b de       	rcall	.-810    	; 0xd74 <Endpoint_ConfigureEndpoint_Prv>
    109e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    10a2:	88 60       	ori	r24, 0x08	; 8
    10a4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    10a8:	2c d3       	rcall	.+1624   	; 0x1702 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0b be       	out	0x3b, r0	; 59
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	0b b6       	in	r0, 0x3b	; 59
    10dc:	0f 92       	push	r0
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1100:	c9 ee       	ldi	r28, 0xE9	; 233
    1102:	d0 e0       	ldi	r29, 0x00	; 0
    1104:	88 81       	ld	r24, Y
    1106:	87 70       	andi	r24, 0x07	; 7
    1108:	f8 2e       	mov	r15, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    110a:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    110c:	00 ef       	ldi	r16, 0xF0	; 240
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	f8 01       	movw	r30, r16
    1112:	80 81       	ld	r24, Z
    1114:	87 7f       	andi	r24, 0xF7	; 247
    1116:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1118:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    111a:	a0 d1       	rcall	.+832    	; 0x145c <USB_Device_ProcessControlRequest>
    111c:	18 82       	st	Y, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	88 60       	ori	r24, 0x08	; 8
    1124:	80 83       	st	Z, r24
    1126:	f8 82       	st	Y, r15

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	0f 90       	pop	r0
    114c:	0b be       	out	0x3b, r0	; 59
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
    1166:	8b 01       	movw	r16, r22
    1168:	58 de       	rcall	.-848    	; 0xe1a <Endpoint_WaitUntilReady>
    116a:	81 11       	cpse	r24, r1
    116c:	2d c0       	rjmp	.+90     	; 0x11c8 <Endpoint_Null_Stream+0x70>
    116e:	01 15       	cp	r16, r1
    1170:	11 05       	cpc	r17, r1
    1172:	29 f0       	breq	.+10     	; 0x117e <Endpoint_Null_Stream+0x26>
    1174:	f8 01       	movw	r30, r16
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	c8 1b       	sub	r28, r24
    117c:	d9 0b       	sbc	r29, r25
    117e:	e1 2c       	mov	r14, r1
    1180:	f1 2c       	mov	r15, r1
    1182:	20 97       	sbiw	r28, 0x00	; 0
    1184:	01 f1       	breq	.+64     	; 0x11c6 <Endpoint_Null_Stream+0x6e>
    1186:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    118a:	85 fd       	sbrc	r24, 5
    118c:	15 c0       	rjmp	.+42     	; 0x11b8 <Endpoint_Null_Stream+0x60>
    118e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1192:	8e 77       	andi	r24, 0x7E	; 126
    1194:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1198:	01 15       	cp	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	49 f0       	breq	.+18     	; 0x11b0 <Endpoint_Null_Stream+0x58>
    119e:	f8 01       	movw	r30, r16
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	e8 0e       	add	r14, r24
    11a6:	f9 1e       	adc	r15, r25
    11a8:	f1 82       	std	Z+1, r15	; 0x01
    11aa:	e0 82       	st	Z, r14
    11ac:	85 e0       	ldi	r24, 0x05	; 5
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <Endpoint_Null_Stream+0x70>
    11b0:	34 de       	rcall	.-920    	; 0xe1a <Endpoint_WaitUntilReady>
    11b2:	88 23       	and	r24, r24
    11b4:	31 f3       	breq	.-52     	; 0x1182 <Endpoint_Null_Stream+0x2a>
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <Endpoint_Null_Stream+0x70>
    11b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11bc:	21 97       	sbiw	r28, 0x01	; 1
    11be:	ff ef       	ldi	r31, 0xFF	; 255
    11c0:	ef 1a       	sub	r14, r31
    11c2:	ff 0a       	sbc	r15, r31
    11c4:	de cf       	rjmp	.-68     	; 0x1182 <Endpoint_Null_Stream+0x2a>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	08 95       	ret

000011d6 <Endpoint_Write_Stream_LE>:
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	8b 01       	movw	r16, r22
    11ea:	7a 01       	movw	r14, r20
    11ec:	16 de       	rcall	.-980    	; 0xe1a <Endpoint_WaitUntilReady>
    11ee:	81 11       	cpse	r24, r1
    11f0:	32 c0       	rjmp	.+100    	; 0x1256 <Endpoint_Write_Stream_LE+0x80>
    11f2:	e1 14       	cp	r14, r1
    11f4:	f1 04       	cpc	r15, r1
    11f6:	39 f0       	breq	.+14     	; 0x1206 <Endpoint_Write_Stream_LE+0x30>
    11f8:	f7 01       	movw	r30, r14
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	08 1b       	sub	r16, r24
    1200:	19 0b       	sbc	r17, r25
    1202:	c8 0f       	add	r28, r24
    1204:	d9 1f       	adc	r29, r25
    1206:	c1 2c       	mov	r12, r1
    1208:	d1 2c       	mov	r13, r1
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
    120e:	11 f1       	breq	.+68     	; 0x1254 <Endpoint_Write_Stream_LE+0x7e>
    1210:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1214:	85 fd       	sbrc	r24, 5
    1216:	15 c0       	rjmp	.+42     	; 0x1242 <Endpoint_Write_Stream_LE+0x6c>
    1218:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    121c:	8e 77       	andi	r24, 0x7E	; 126
    121e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1222:	e1 14       	cp	r14, r1
    1224:	f1 04       	cpc	r15, r1
    1226:	49 f0       	breq	.+18     	; 0x123a <Endpoint_Write_Stream_LE+0x64>
    1228:	f7 01       	movw	r30, r14
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	c8 0e       	add	r12, r24
    1230:	d9 1e       	adc	r13, r25
    1232:	d1 82       	std	Z+1, r13	; 0x01
    1234:	c0 82       	st	Z, r12
    1236:	85 e0       	ldi	r24, 0x05	; 5
    1238:	0e c0       	rjmp	.+28     	; 0x1256 <Endpoint_Write_Stream_LE+0x80>
    123a:	ef dd       	rcall	.-1058   	; 0xe1a <Endpoint_WaitUntilReady>
    123c:	88 23       	and	r24, r24
    123e:	29 f3       	breq	.-54     	; 0x120a <Endpoint_Write_Stream_LE+0x34>
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <Endpoint_Write_Stream_LE+0x80>
    1242:	89 91       	ld	r24, Y+
    1244:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1248:	01 50       	subi	r16, 0x01	; 1
    124a:	11 09       	sbc	r17, r1
    124c:	ff ef       	ldi	r31, 0xFF	; 255
    124e:	cf 1a       	sub	r12, r31
    1250:	df 0a       	sbc	r13, r31
    1252:	db cf       	rjmp	.-74     	; 0x120a <Endpoint_Write_Stream_LE+0x34>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	08 95       	ret

00001268 <Endpoint_Read_Stream_LE>:
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
    127a:	8b 01       	movw	r16, r22
    127c:	7a 01       	movw	r14, r20
    127e:	cd dd       	rcall	.-1126   	; 0xe1a <Endpoint_WaitUntilReady>
    1280:	81 11       	cpse	r24, r1
    1282:	32 c0       	rjmp	.+100    	; 0x12e8 <Endpoint_Read_Stream_LE+0x80>
    1284:	e1 14       	cp	r14, r1
    1286:	f1 04       	cpc	r15, r1
    1288:	39 f0       	breq	.+14     	; 0x1298 <Endpoint_Read_Stream_LE+0x30>
    128a:	f7 01       	movw	r30, r14
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	08 1b       	sub	r16, r24
    1292:	19 0b       	sbc	r17, r25
    1294:	c8 0f       	add	r28, r24
    1296:	d9 1f       	adc	r29, r25
    1298:	c1 2c       	mov	r12, r1
    129a:	d1 2c       	mov	r13, r1
    129c:	01 15       	cp	r16, r1
    129e:	11 05       	cpc	r17, r1
    12a0:	11 f1       	breq	.+68     	; 0x12e6 <Endpoint_Read_Stream_LE+0x7e>
    12a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12a6:	85 fd       	sbrc	r24, 5
    12a8:	15 c0       	rjmp	.+42     	; 0x12d4 <Endpoint_Read_Stream_LE+0x6c>
    12aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ae:	8b 77       	andi	r24, 0x7B	; 123
    12b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12b4:	e1 14       	cp	r14, r1
    12b6:	f1 04       	cpc	r15, r1
    12b8:	49 f0       	breq	.+18     	; 0x12cc <Endpoint_Read_Stream_LE+0x64>
    12ba:	f7 01       	movw	r30, r14
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	c8 0e       	add	r12, r24
    12c2:	d9 1e       	adc	r13, r25
    12c4:	d1 82       	std	Z+1, r13	; 0x01
    12c6:	c0 82       	st	Z, r12
    12c8:	85 e0       	ldi	r24, 0x05	; 5
    12ca:	0e c0       	rjmp	.+28     	; 0x12e8 <Endpoint_Read_Stream_LE+0x80>
    12cc:	a6 dd       	rcall	.-1204   	; 0xe1a <Endpoint_WaitUntilReady>
    12ce:	88 23       	and	r24, r24
    12d0:	29 f3       	breq	.-54     	; 0x129c <Endpoint_Read_Stream_LE+0x34>
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <Endpoint_Read_Stream_LE+0x80>
    12d4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    12d8:	89 93       	st	Y+, r24
    12da:	01 50       	subi	r16, 0x01	; 1
    12dc:	11 09       	sbc	r17, r1
    12de:	ff ef       	ldi	r31, 0xFF	; 255
    12e0:	cf 1a       	sub	r12, r31
    12e2:	df 0a       	sbc	r13, r31
    12e4:	db cf       	rjmp	.-74     	; 0x129c <Endpoint_Read_Stream_LE+0x34>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	08 95       	ret

000012fa <Endpoint_Write_Control_Stream_LE>:
    12fa:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <USB_ControlRequest+0x6>
    12fe:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <USB_ControlRequest+0x7>
    1302:	26 17       	cp	r18, r22
    1304:	37 07       	cpc	r19, r23
    1306:	48 f0       	brcs	.+18     	; 0x131a <Endpoint_Write_Control_Stream_LE+0x20>
    1308:	61 15       	cp	r22, r1
    130a:	71 05       	cpc	r23, r1
    130c:	39 f4       	brne	.+14     	; 0x131c <Endpoint_Write_Control_Stream_LE+0x22>
    130e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1312:	2e 77       	andi	r18, 0x7E	; 126
    1314:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1318:	01 c0       	rjmp	.+2      	; 0x131c <Endpoint_Write_Control_Stream_LE+0x22>
    131a:	b9 01       	movw	r22, r18
    131c:	fc 01       	movw	r30, r24
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	61 15       	cp	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	69 f1       	breq	.+90     	; 0x1380 <Endpoint_Write_Control_Stream_LE+0x86>
    1326:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    132a:	88 23       	and	r24, r24
    132c:	d1 f1       	breq	.+116    	; 0x13a2 <Endpoint_Write_Control_Stream_LE+0xa8>
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	d1 f1       	breq	.+116    	; 0x13a6 <Endpoint_Write_Control_Stream_LE+0xac>
    1332:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1336:	83 fd       	sbrc	r24, 3
    1338:	32 c0       	rjmp	.+100    	; 0x139e <Endpoint_Write_Control_Stream_LE+0xa4>
    133a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    133e:	82 fd       	sbrc	r24, 2
    1340:	28 c0       	rjmp	.+80     	; 0x1392 <Endpoint_Write_Control_Stream_LE+0x98>
    1342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1346:	80 ff       	sbrs	r24, 0
    1348:	eb cf       	rjmp	.-42     	; 0x1320 <Endpoint_Write_Control_Stream_LE+0x26>
    134a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    134e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1352:	61 15       	cp	r22, r1
    1354:	71 05       	cpc	r23, r1
    1356:	51 f0       	breq	.+20     	; 0x136c <Endpoint_Write_Control_Stream_LE+0x72>
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	91 05       	cpc	r25, r1
    135c:	38 f4       	brcc	.+14     	; 0x136c <Endpoint_Write_Control_Stream_LE+0x72>
    135e:	21 91       	ld	r18, Z+
    1360:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1364:	61 50       	subi	r22, 0x01	; 1
    1366:	71 09       	sbc	r23, r1
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	f3 cf       	rjmp	.-26     	; 0x1352 <Endpoint_Write_Control_Stream_LE+0x58>
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	08 97       	sbiw	r24, 0x08	; 8
    1370:	09 f0       	breq	.+2      	; 0x1374 <Endpoint_Write_Control_Stream_LE+0x7a>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1378:	8e 77       	andi	r24, 0x7E	; 126
    137a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    137e:	d0 cf       	rjmp	.-96     	; 0x1320 <Endpoint_Write_Control_Stream_LE+0x26>
    1380:	21 11       	cpse	r18, r1
    1382:	d1 cf       	rjmp	.-94     	; 0x1326 <Endpoint_Write_Control_Stream_LE+0x2c>
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <Endpoint_Write_Control_Stream_LE+0x98>
    1386:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    138a:	88 23       	and	r24, r24
    138c:	51 f0       	breq	.+20     	; 0x13a2 <Endpoint_Write_Control_Stream_LE+0xa8>
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	51 f0       	breq	.+20     	; 0x13a6 <Endpoint_Write_Control_Stream_LE+0xac>
    1392:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1396:	82 ff       	sbrs	r24, 2
    1398:	f6 cf       	rjmp	.-20     	; 0x1386 <Endpoint_Write_Control_Stream_LE+0x8c>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	08 95       	ret
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	08 95       	ret
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	08 95       	ret
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	08 95       	ret

000013aa <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    13aa:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <USB_ControlRequest+0x6>
    13ae:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <USB_ControlRequest+0x7>
    13b2:	26 17       	cp	r18, r22
    13b4:	37 07       	cpc	r19, r23
    13b6:	48 f0       	brcs	.+18     	; 0x13ca <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    13b8:	61 15       	cp	r22, r1
    13ba:	71 05       	cpc	r23, r1
    13bc:	39 f4       	brne	.+14     	; 0x13cc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13be:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c2:	2e 77       	andi	r18, 0x7E	; 126
    13c4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <Endpoint_Write_Control_PStream_LE+0x22>
    13ca:	b9 01       	movw	r22, r18
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    13d0:	61 15       	cp	r22, r1
    13d2:	71 05       	cpc	r23, r1
    13d4:	71 f1       	breq	.+92     	; 0x1432 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13d6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13da:	88 23       	and	r24, r24
    13dc:	d9 f1       	breq	.+118    	; 0x1454 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13de:	85 30       	cpi	r24, 0x05	; 5
    13e0:	d9 f1       	breq	.+118    	; 0x1458 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    13e6:	83 fd       	sbrc	r24, 3
    13e8:	33 c0       	rjmp	.+102    	; 0x1450 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    13ee:	82 fd       	sbrc	r24, 2
    13f0:	29 c0       	rjmp	.+82     	; 0x1444 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    13f6:	80 ff       	sbrs	r24, 0
    13f8:	eb cf       	rjmp	.-42     	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    13fa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    13fe:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1402:	61 15       	cp	r22, r1
    1404:	71 05       	cpc	r23, r1
    1406:	59 f0       	breq	.+22     	; 0x141e <Endpoint_Write_Control_PStream_LE+0x74>
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	91 05       	cpc	r25, r1
    140c:	40 f4       	brcc	.+16     	; 0x141e <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    140e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1410:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1414:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1416:	61 50       	subi	r22, 0x01	; 1
    1418:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	f2 cf       	rjmp	.-28     	; 0x1402 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	08 97       	sbiw	r24, 0x08	; 8
    1422:	09 f0       	breq	.+2      	; 0x1426 <Endpoint_Write_Control_PStream_LE+0x7c>
    1424:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    142a:	8e 77       	andi	r24, 0x7E	; 126
    142c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1430:	cf cf       	rjmp	.-98     	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1432:	21 11       	cpse	r18, r1
    1434:	d0 cf       	rjmp	.-96     	; 0x13d6 <Endpoint_Write_Control_PStream_LE+0x2c>
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1438:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    143c:	88 23       	and	r24, r24
    143e:	51 f0       	breq	.+20     	; 0x1454 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1440:	85 30       	cpi	r24, 0x05	; 5
    1442:	51 f0       	breq	.+20     	; 0x1458 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1444:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1448:	82 ff       	sbrs	r24, 2
    144a:	f6 cf       	rjmp	.-20     	; 0x1438 <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1458:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    145a:	08 95       	ret

0000145c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	aa 97       	sbiw	r28, 0x2a	; 42
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	e9 e6       	ldi	r30, 0x69	; 105
    1476:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1478:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    147c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    147e:	21 e0       	ldi	r18, 0x01	; 1
    1480:	e1 37       	cpi	r30, 0x71	; 113
    1482:	f2 07       	cpc	r31, r18
    1484:	c9 f7       	brne	.-14     	; 0x1478 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1486:	0e 94 06 01 	call	0x20c	; 0x20c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    148a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    148e:	83 ff       	sbrs	r24, 3
    1490:	1f c1       	rjmp	.+574    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1492:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1496:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <USB_ControlRequest+0x1>
    149a:	49 2f       	mov	r20, r25
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	4a 30       	cpi	r20, 0x0A	; 10
    14a0:	51 05       	cpc	r21, r1
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <USB_Device_ProcessControlRequest+0x4a>
    14a4:	15 c1       	rjmp	.+554    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
    14a6:	fa 01       	movw	r30, r20
    14a8:	e4 5b       	subi	r30, 0xB4	; 180
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	3d c1       	rjmp	.+634    	; 0x1728 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14ae:	80 38       	cpi	r24, 0x80	; 128
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <USB_Device_ProcessControlRequest+0x76>
    14b2:	82 38       	cpi	r24, 0x82	; 130
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <USB_Device_ProcessControlRequest+0x5c>
    14b6:	0c c1       	rjmp	.+536    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14b8:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    14bc:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
    14c6:	85 fb       	bst	r24, 5
    14c8:	88 27       	eor	r24, r24
    14ca:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    14d2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    14d6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <USB_Device_RemoteWakeupEnabled>
    14da:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    14dc:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14de:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14e2:	97 7f       	andi	r25, 0xF7	; 247
    14e4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    14e8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    14ec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    14f0:	c6 c0       	rjmp	.+396    	; 0x167e <USB_Device_ProcessControlRequest+0x222>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14f2:	28 2f       	mov	r18, r24
    14f4:	2d 7f       	andi	r18, 0xFD	; 253
    14f6:	09 f0       	breq	.+2      	; 0x14fa <USB_Device_ProcessControlRequest+0x9e>
    14f8:	eb c0       	rjmp	.+470    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    14fa:	88 23       	and	r24, r24
    14fc:	19 f0       	breq	.+6      	; 0x1504 <USB_Device_ProcessControlRequest+0xa8>
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	61 f0       	breq	.+24     	; 0x151a <USB_Device_ProcessControlRequest+0xbe>
    1502:	e6 c0       	rjmp	.+460    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1504:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	09 f0       	breq	.+2      	; 0x150e <USB_Device_ProcessControlRequest+0xb2>
    150c:	e1 c0       	rjmp	.+450    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    150e:	93 30       	cpi	r25, 0x03	; 3
    1510:	09 f0       	breq	.+2      	; 0x1514 <USB_Device_ProcessControlRequest+0xb8>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <USB_Device_RemoteWakeupEnabled>
    1518:	2b c0       	rjmp	.+86     	; 0x1570 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    151a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    151e:	81 11       	cpse	r24, r1
    1520:	27 c0       	rjmp	.+78     	; 0x1570 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1522:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    1526:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1528:	09 f4       	brne	.+2      	; 0x152c <USB_Device_ProcessControlRequest+0xd0>
    152a:	d2 c0       	rjmp	.+420    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    152c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1530:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1534:	20 ff       	sbrs	r18, 0
    1536:	1c c0       	rjmp	.+56     	; 0x1570 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1538:	93 30       	cpi	r25, 0x03	; 3
    153a:	21 f4       	brne	.+8      	; 0x1544 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    153c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	14 c0       	rjmp	.+40     	; 0x156c <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1544:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1548:	90 61       	ori	r25, 0x10	; 16
    154a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <USB_Device_ProcessControlRequest+0xfe>
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <USB_Device_ProcessControlRequest+0xfa>
    155e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1562:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1566:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1570:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1574:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1578:	87 7f       	andi	r24, 0xF7	; 247
    157a:	84 c0       	rjmp	.+264    	; 0x1684 <USB_Device_ProcessControlRequest+0x228>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    157c:	81 11       	cpse	r24, r1
    157e:	a8 c0       	rjmp	.+336    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1580:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1584:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1586:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1588:	f8 94       	cli
    158a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1594:	23 dc       	rcall	.-1978   	; 0xddc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1596:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    159a:	80 ff       	sbrs	r24, 0
    159c:	fc cf       	rjmp	.-8      	; 0x1596 <USB_Device_ProcessControlRequest+0x13a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    159e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15a2:	80 78       	andi	r24, 0x80	; 128
    15a4:	81 2b       	or	r24, r17

				UDADDR = Temp;
    15a6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15b0:	11 11       	cpse	r17, r1
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <USB_Device_ProcessControlRequest+0x15c>
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <USB_Device_ProcessControlRequest+0x15e>
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    15be:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    15c0:	87 c0       	rjmp	.+270    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15c2:	80 58       	subi	r24, 0x80	; 128
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <USB_Device_ProcessControlRequest+0x16e>
    15c8:	83 c0       	rjmp	.+262    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15ca:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    15ce:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <USB_ControlRequest+0x3>
    15d2:	8c 3d       	cpi	r24, 0xDC	; 220
    15d4:	53 e0       	ldi	r21, 0x03	; 3
    15d6:	95 07       	cpc	r25, r21
    15d8:	71 f5       	brne	.+92     	; 0x1636 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    15de:	8a e2       	ldi	r24, 0x2A	; 42
    15e0:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    15e2:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    15e4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    15e6:	de 01       	movw	r26, r28
    15e8:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    15ea:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    15ec:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    15ee:	51 e2       	ldi	r21, 0x21	; 33
    15f0:	e3 2f       	mov	r30, r19
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    15f8:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    15fa:	20 ff       	sbrs	r18, 0
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    15fe:	e2 95       	swap	r30
    1600:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1602:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1604:	ef 70       	andi	r30, 0x0F	; 15
    1606:	8e 2f       	mov	r24, r30
    1608:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    160a:	ea 30       	cpi	r30, 0x0A	; 10
    160c:	10 f0       	brcs	.+4      	; 0x1612 <USB_Device_ProcessControlRequest+0x1b6>
    160e:	c7 96       	adiw	r24, 0x37	; 55
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <USB_Device_ProcessControlRequest+0x1b8>
    1612:	c0 96       	adiw	r24, 0x30	; 48
    1614:	8d 93       	st	X+, r24
    1616:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1618:	2f 5f       	subi	r18, 0xFF	; 255
    161a:	24 31       	cpi	r18, 0x14	; 20
    161c:	49 f7       	brne	.-46     	; 0x15f0 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    161e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1620:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1624:	87 7f       	andi	r24, 0xF7	; 247
    1626:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    162a:	6a e2       	ldi	r22, 0x2A	; 42
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	63 de       	rcall	.-826    	; 0x12fa <Endpoint_Write_Control_Stream_LE>
    1634:	13 c0       	rjmp	.+38     	; 0x165c <USB_Device_ProcessControlRequest+0x200>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1636:	ae 01       	movw	r20, r28
    1638:	4f 5f       	subi	r20, 0xFF	; 255
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    1640:	0e 94 2c 02 	call	0x458	; 0x458 <CALLBACK_USB_GetDescriptor>
    1644:	bc 01       	movw	r22, r24
    1646:	89 2b       	or	r24, r25
    1648:	09 f4       	brne	.+2      	; 0x164c <USB_Device_ProcessControlRequest+0x1f0>
    164a:	42 c0       	rjmp	.+132    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
    164c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1650:	97 7f       	andi	r25, 0xF7	; 247
    1652:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	a7 de       	rcall	.-690    	; 0x13aa <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    165c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1660:	8b 77       	andi	r24, 0x7B	; 123
    1662:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1666:	34 c0       	rjmp	.+104    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1668:	80 38       	cpi	r24, 0x80	; 128
    166a:	91 f5       	brne	.+100    	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    166c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1676:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    167a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    167e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1682:	8e 77       	andi	r24, 0x7E	; 126
    1684:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1688:	a9 db       	rcall	.-2222   	; 0xddc <Endpoint_ClearStatusStage>
    168a:	22 c0       	rjmp	.+68     	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    168c:	81 11       	cpse	r24, r1
    168e:	20 c0       	rjmp	.+64     	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1690:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1694:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <USB_ControlRequest+0x3>
    1698:	99 27       	eor	r25, r25
    169a:	02 97       	sbiw	r24, 0x02	; 2
    169c:	cc f4       	brge	.+50     	; 0x16d0 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    169e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16a2:	87 7f       	andi	r24, 0xF7	; 247
    16a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16a8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    16ac:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    16b0:	95 db       	rcall	.-2262   	; 0xddc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    16b2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
    16b6:	81 11       	cpse	r24, r1
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <USB_Device_ProcessControlRequest+0x26a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16ba:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16be:	87 fd       	sbrc	r24, 7
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <USB_Device_ProcessControlRequest+0x26a>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <USB_Device_ProcessControlRequest+0x26c>
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    16cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    16d4:	83 ff       	sbrs	r24, 3
    16d6:	0a c0       	rjmp	.+20     	; 0x16ec <USB_Device_ProcessControlRequest+0x290>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    16dc:	80 62       	ori	r24, 0x20	; 32
    16de:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    16ec:	aa 96       	adiw	r28, 0x2a	; 42
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1702:	08 95       	ret

00001704 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1704:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1706:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    170a:	88 23       	and	r24, r24
    170c:	59 f0       	breq	.+22     	; 0x1724 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    170e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1712:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1714:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1718:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    171c:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    171e:	9e de       	rcall	.-708    	; 0x145c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1720:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <__tablejump2__>:
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	00 24       	eor	r0, r0
    172e:	00 1c       	adc	r0, r0
    1730:	0b be       	out	0x3b, r0	; 59
    1732:	07 90       	elpm	r0, Z+
    1734:	f6 91       	elpm	r31, Z
    1736:	e0 2d       	mov	r30, r0
    1738:	09 94       	ijmp

0000173a <_exit>:
    173a:	f8 94       	cli

0000173c <__stop_program>:
    173c:	ff cf       	rjmp	.-2      	; 0x173c <__stop_program>
