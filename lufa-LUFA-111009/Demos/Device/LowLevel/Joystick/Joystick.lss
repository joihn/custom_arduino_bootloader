
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000c2e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e2c  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a41  00000000  00000000  00005cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3a  00000000  00000000  0000772d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000a268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002113  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba1  00000000  00000000  0000ca73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000f614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
   2:	00 00       	nop
   4:	ba c0       	rjmp	.+372    	; 0x17a <__bad_interrupt>
   6:	00 00       	nop
   8:	b8 c0       	rjmp	.+368    	; 0x17a <__bad_interrupt>
   a:	00 00       	nop
   c:	b6 c0       	rjmp	.+364    	; 0x17a <__bad_interrupt>
   e:	00 00       	nop
  10:	b4 c0       	rjmp	.+360    	; 0x17a <__bad_interrupt>
  12:	00 00       	nop
  14:	b2 c0       	rjmp	.+356    	; 0x17a <__bad_interrupt>
  16:	00 00       	nop
  18:	b0 c0       	rjmp	.+352    	; 0x17a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ae c0       	rjmp	.+348    	; 0x17a <__bad_interrupt>
  1e:	00 00       	nop
  20:	ac c0       	rjmp	.+344    	; 0x17a <__bad_interrupt>
  22:	00 00       	nop
  24:	aa c0       	rjmp	.+340    	; 0x17a <__bad_interrupt>
  26:	00 00       	nop
  28:	97 c2       	rjmp	.+1326   	; 0x558 <__vector_10>
  2a:	00 00       	nop
  2c:	a6 c0       	rjmp	.+332    	; 0x17a <__bad_interrupt>
  2e:	00 00       	nop
  30:	a4 c0       	rjmp	.+328    	; 0x17a <__bad_interrupt>
  32:	00 00       	nop
  34:	a2 c0       	rjmp	.+324    	; 0x17a <__bad_interrupt>
  36:	00 00       	nop
  38:	a0 c0       	rjmp	.+320    	; 0x17a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9e c0       	rjmp	.+316    	; 0x17a <__bad_interrupt>
  3e:	00 00       	nop
  40:	9c c0       	rjmp	.+312    	; 0x17a <__bad_interrupt>
  42:	00 00       	nop
  44:	9a c0       	rjmp	.+308    	; 0x17a <__bad_interrupt>
  46:	00 00       	nop
  48:	98 c0       	rjmp	.+304    	; 0x17a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	96 c0       	rjmp	.+300    	; 0x17a <__bad_interrupt>
  4e:	00 00       	nop
  50:	94 c0       	rjmp	.+296    	; 0x17a <__bad_interrupt>
  52:	00 00       	nop
  54:	92 c0       	rjmp	.+292    	; 0x17a <__bad_interrupt>
  56:	00 00       	nop
  58:	90 c0       	rjmp	.+288    	; 0x17a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8e c0       	rjmp	.+284    	; 0x17a <__bad_interrupt>
  5e:	00 00       	nop
  60:	8c c0       	rjmp	.+280    	; 0x17a <__bad_interrupt>
  62:	00 00       	nop
  64:	8a c0       	rjmp	.+276    	; 0x17a <__bad_interrupt>
  66:	00 00       	nop
  68:	88 c0       	rjmp	.+272    	; 0x17a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	86 c0       	rjmp	.+268    	; 0x17a <__bad_interrupt>
  6e:	00 00       	nop
  70:	84 c0       	rjmp	.+264    	; 0x17a <__bad_interrupt>
  72:	00 00       	nop
  74:	82 c0       	rjmp	.+260    	; 0x17a <__bad_interrupt>
  76:	00 00       	nop
  78:	80 c0       	rjmp	.+256    	; 0x17a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7e c0       	rjmp	.+252    	; 0x17a <__bad_interrupt>
  7e:	00 00       	nop
  80:	7c c0       	rjmp	.+248    	; 0x17a <__bad_interrupt>
  82:	00 00       	nop
  84:	7a c0       	rjmp	.+244    	; 0x17a <__bad_interrupt>
  86:	00 00       	nop
  88:	78 c0       	rjmp	.+240    	; 0x17a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	76 c0       	rjmp	.+236    	; 0x17a <__bad_interrupt>
  8e:	00 00       	nop
  90:	74 c0       	rjmp	.+232    	; 0x17a <__bad_interrupt>
  92:	00 00       	nop
  94:	72 c0       	rjmp	.+228    	; 0x17a <__bad_interrupt>
  96:	00 00       	nop
  98:	97 04       	cpc	r9, r7
  9a:	b9 04       	cpc	r11, r9
  9c:	a6 05       	cpc	r26, r6
  9e:	b9 04       	cpc	r11, r9
  a0:	a6 05       	cpc	r26, r6
  a2:	fe 04       	cpc	r15, r14
  a4:	21 05       	cpc	r18, r1
  a6:	a6 05       	cpc	r26, r6
  a8:	73 05       	cpc	r23, r3
  aa:	85 05       	cpc	r24, r5

000000ac <ProductString>:
  ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.
  bc:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 102:	00 00 09 21 11 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
 112:	00 01                                               ..

00000114 <DeviceDescriptor>:
 114:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
 124:	00 01                                               ..

00000126 <JoystickReport>:
 126:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 15 9c     ...........0.1..
 136:	25 64 35 ff 45 01 95 02 75 08 81 02 c0 05 09 19     %d5.E...u.......
 146:	01 29 02 15 00 25 01 75 01 95 02 81 02 75 06 95     .)...%.u.....u..
 156:	01 81 01 c0                                         ....

0000015a <__ctors_end>:
 15a:	11 24       	eor	r1, r1
 15c:	1f be       	out	0x3f, r1	; 63
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	d0 e2       	ldi	r29, 0x20	; 32
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_clear_bss>:
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
 16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
 170:	af 30       	cpi	r26, 0x0F	; 15
 172:	b2 07       	cpc	r27, r18
 174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
 176:	c7 d0       	rcall	.+398    	; 0x306 <main>
 178:	1e c5       	rjmp	.+2620   	; 0xbb6 <_exit>

0000017a <__bad_interrupt>:
 17a:	42 cf       	rjmp	.-380    	; 0x0 <__vectors>

0000017c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	9f 70       	andi	r25, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	8b b9       	out	0x0b, r24	; 11
 184:	08 95       	ret

00000186 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 186:	84 b7       	in	r24, 0x34	; 52
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	a8 95       	wdr
 192:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 196:	88 61       	ori	r24, 0x18	; 24
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 19c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1a0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1b2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	8f 71       	andi	r24, 0x1F	; 31
 1b8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 1ba:	8d b1       	in	r24, 0x0d	; 13
 1bc:	8f 7c       	andi	r24, 0xCF	; 207
 1be:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	80 6e       	ori	r24, 0xE0	; 224
 1c4:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	80 63       	ori	r24, 0x30	; 48
 1ca:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1cc:	8a b1       	in	r24, 0x0a	; 10
 1ce:	80 6f       	ori	r24, 0xF0	; 240
 1d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1d8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1da:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1dc:	a7 c1       	rjmp	.+846    	; 0x52c <USB_Init>

000001de <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1de:	80 ea       	ldi	r24, 0xA0	; 160
 1e0:	cd cf       	rjmp	.-102    	; 0x17c <LEDs_SetAllLEDs>

000001e2 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the USB management and joystick reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	cb cf       	rjmp	.-106    	; 0x17c <LEDs_SetAllLEDs>

000001e6 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	61 ec       	ldi	r22, 0xC1	; 193
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	d4 d0       	rcall	.+424    	; 0x396 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(JOYSTICK_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            JOYSTICK_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1ee:	81 11       	cpse	r24, r1
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <EVENT_USB_Device_ConfigurationChanged+0x10>
 1f2:	80 e9       	ldi	r24, 0x90	; 144
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <EVENT_USB_Device_ConfigurationChanged+0x12>
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	c1 cf       	rjmp	.-126    	; 0x17c <LEDs_SetAllLEDs>

000001fa <GetNextReport>:
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 *
 *  \return Boolean true if the new report differs from the last report, false otherwise
 */
bool GetNextReport(USB_JoystickReport_Data_t* const ReportData)
{
 1fa:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1fc:	93 b1       	in	r25, 0x03	; 3
 1fe:	8c b1       	in	r24, 0x0c	; 12
 200:	80 95       	com	r24
 202:	80 73       	andi	r24, 0x30	; 48
 204:	86 95       	lsr	r24
 206:	90 95       	com	r25
 208:	90 7e       	andi	r25, 0xE0	; 224
 20a:	98 2b       	or	r25, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 20c:	2c b1       	in	r18, 0x0c	; 12
 20e:	20 95       	com	r18
 210:	24 70       	andi	r18, 0x04	; 4
	uint8_t        JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t        ButtonStatus_LCL = Buttons_GetStatus();
	bool           InputChanged     = false;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_JoystickReport_Data_t));
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	df 01       	movw	r26, r30
 216:	1d 92       	st	X+, r1
 218:	8a 95       	dec	r24
 21a:	e9 f7       	brne	.-6      	; 0x216 <GetNextReport+0x1c>

	if (JoyStatus_LCL & JOY_UP)
 21c:	97 ff       	sbrs	r25, 7
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GetNextReport+0x2a>
	  ReportData->Y = -100;
 220:	8c e9       	ldi	r24, 0x9C	; 156
 222:	03 c0       	rjmp	.+6      	; 0x22a <GetNextReport+0x30>
	else if (JoyStatus_LCL & JOY_DOWN)
 224:	94 ff       	sbrs	r25, 4
 226:	02 c0       	rjmp	.+4      	; 0x22c <GetNextReport+0x32>
	  ReportData->Y =  100;
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_LEFT)
 22c:	96 ff       	sbrs	r25, 6
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GetNextReport+0x3a>
	  ReportData->X = -100;
 230:	8c e9       	ldi	r24, 0x9C	; 156
 232:	03 c0       	rjmp	.+6      	; 0x23a <GetNextReport+0x40>
	else if (JoyStatus_LCL & JOY_RIGHT)
 234:	93 ff       	sbrs	r25, 3
 236:	02 c0       	rjmp	.+4      	; 0x23c <GetNextReport+0x42>
	  ReportData->X =  100;
 238:	84 e6       	ldi	r24, 0x64	; 100
 23a:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_PRESS)
 23c:	95 ff       	sbrs	r25, 5
 23e:	03 c0       	rjmp	.+6      	; 0x246 <GetNextReport+0x4c>
	  ReportData->Button |= (1 << 1);
 240:	82 81       	ldd	r24, Z+2	; 0x02
 242:	82 60       	ori	r24, 0x02	; 2
 244:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 246:	22 23       	and	r18, r18
 248:	19 f0       	breq	.+6      	; 0x250 <GetNextReport+0x56>
	  ReportData->Button |= (1 << 0);
 24a:	82 81       	ldd	r24, Z+2	; 0x02
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	82 83       	std	Z+2, r24	; 0x02

	/* Check if the new report is different to the previous report */
	InputChanged = (uint8_t)(PrevJoyStatus ^ JoyStatus_LCL) | (uint8_t)(PrevButtonStatus ^ ButtonStatus_LCL);
 250:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <PrevJoyStatus.4111>
 254:	39 27       	eor	r19, r25
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	82 27       	eor	r24, r18
 25c:	38 2b       	or	r19, r24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	09 f4       	brne	.+2      	; 0x264 <GetNextReport+0x6a>
 262:	80 e0       	ldi	r24, 0x00	; 0

	/* Save the current joystick status for later comparison */
	PrevJoyStatus    = JoyStatus_LCL;
 264:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <PrevJoyStatus.4111>
	PrevButtonStatus = ButtonStatus_LCL;
 268:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>

	/* Return whether the new report is different to the previous report or not */
	return InputChanged;
}
 26c:	08 95       	ret

0000026e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <EVENT_USB_Device_ControlRequest+0x6>
 274:	1f 92       	push	r1
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 27a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x1>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	b1 f4       	brne	.+44     	; 0x2ae <EVENT_USB_Device_ControlRequest+0x40>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 282:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest>
 286:	81 3a       	cpi	r24, 0xA1	; 161
 288:	91 f4       	brne	.+36     	; 0x2ae <EVENT_USB_Device_ControlRequest+0x40>
			{
				USB_JoystickReport_Data_t JoystickReportData;

				/* Create the next HID report to send to the host */
				GetNextReport(&JoystickReportData);
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	b5 df       	rcall	.-150    	; 0x1fa <GetNextReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 290:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 294:	87 7f       	andi	r24, 0xF7	; 247
 296:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&JoystickReportData, sizeof(JoystickReportData));
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	6c d2       	rcall	.+1240   	; 0x77c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2a8:	8b 77       	andi	r24, 0x7B	; 123
 2aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <HID_Task>:
	return InputChanged;
}

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <HID_Task+0x6>
 2c0:	1f 92       	push	r1
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	b1 f4       	brne	.+44     	; 0x2fa <HID_Task+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPNUM);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady())
 2d8:	80 ff       	sbrs	r24, 0
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <HID_Task+0x40>
	{
		USB_JoystickReport_Data_t JoystickReportData;

		/* Create the next HID report to send to the host */
		GetNextReport(&JoystickReportData);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	8c df       	rcall	.-232    	; 0x1fa <GetNextReport>

		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&JoystickReportData, sizeof(JoystickReportData), NULL);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	fc d1       	rcall	.+1016   	; 0x6e8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2f4:	8e 77       	andi	r24, 0x7E	; 126
 2f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&JoystickReportData, 0, sizeof(JoystickReportData));
	}
}
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 306:	3f df       	rcall	.-386    	; 0x186 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	38 df       	rcall	.-400    	; 0x17c <LEDs_SetAllLEDs>
	sei();

	for (;;)
	{
		HID_Task();
 30c:	78 94       	sei
 30e:	d5 df       	rcall	.-86     	; 0x2ba <HID_Task>
		USB_USBTask();
 310:	37 d4       	rcall	.+2158   	; 0xb80 <USB_USBTask>
 312:	fd cf       	rjmp	.-6      	; 0x30e <main+0x8>

00000314 <CALLBACK_USB_GetDescriptor>:
 314:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 316:	33 27       	eor	r19, r19
 318:	23 30       	cpi	r18, 0x03	; 3
 31a:	31 05       	cpc	r19, r1
 31c:	e1 f0       	breq	.+56     	; 0x356 <CALLBACK_USB_GetDescriptor+0x42>
 31e:	58 f4       	brcc	.+22     	; 0x336 <CALLBACK_USB_GetDescriptor+0x22>
 320:	21 30       	cpi	r18, 0x01	; 1
 322:	31 05       	cpc	r19, r1
 324:	99 f0       	breq	.+38     	; 0x34c <CALLBACK_USB_GetDescriptor+0x38>
 326:	22 30       	cpi	r18, 0x02	; 2
 328:	31 05       	cpc	r19, r1
 32a:	69 f5       	brne	.+90     	; 0x386 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 330:	22 ef       	ldi	r18, 0xF2	; 242
 332:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 334:	2c c0       	rjmp	.+88     	; 0x38e <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 336:	21 32       	cpi	r18, 0x21	; 33
 338:	31 05       	cpc	r19, r1
 33a:	01 f1       	breq	.+64     	; 0x37c <CALLBACK_USB_GetDescriptor+0x68>
 33c:	22 32       	cpi	r18, 0x22	; 34
 33e:	31 05       	cpc	r19, r1
 340:	11 f5       	brne	.+68     	; 0x386 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 342:	84 e3       	ldi	r24, 0x34	; 52
 344:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 346:	26 e2       	ldi	r18, 0x26	; 38
 348:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 34a:	21 c0       	rjmp	.+66     	; 0x38e <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 34c:	82 e1       	ldi	r24, 0x12	; 18
 34e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 350:	24 e1       	ldi	r18, 0x14	; 20
 352:	31 e0       	ldi	r19, 0x01	; 1
 354:	1c c0       	rjmp	.+56     	; 0x38e <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 356:	99 27       	eor	r25, r25
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	91 05       	cpc	r25, r1
 35c:	49 f0       	breq	.+18     	; 0x370 <CALLBACK_USB_GetDescriptor+0x5c>
 35e:	28 f0       	brcs	.+10     	; 0x36a <CALLBACK_USB_GetDescriptor+0x56>
 360:	02 97       	sbiw	r24, 0x02	; 2
 362:	89 f4       	brne	.+34     	; 0x386 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 364:	ec ea       	ldi	r30, 0xAC	; 172
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	05 c0       	rjmp	.+10     	; 0x374 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 36a:	ee ee       	ldi	r30, 0xEE	; 238
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 370:	e4 ed       	ldi	r30, 0xD4	; 212
 372:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 374:	84 91       	lpm	r24, Z
 376:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
 378:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 37a:	09 c0       	rjmp	.+18     	; 0x38e <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 37c:	89 e0       	ldi	r24, 0x09	; 9
 37e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 380:	24 e0       	ldi	r18, 0x04	; 4
 382:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 384:	04 c0       	rjmp	.+8      	; 0x38e <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 38e:	fa 01       	movw	r30, r20
 390:	31 83       	std	Z+1, r19	; 0x01
 392:	20 83       	st	Z, r18
	return Size;
}
 394:	08 95       	ret

00000396 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 396:	98 2f       	mov	r25, r24
 398:	97 30       	cpi	r25, 0x07	; 7
 39a:	68 f5       	brcc	.+90     	; 0x3f6 <Endpoint_ConfigureEndpoint_Prv+0x60>
 39c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3a0:	98 17       	cp	r25, r24
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 3a4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3a8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3ac:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv+0x22>
 3b2:	24 2f       	mov	r18, r20
 3b4:	76 2f       	mov	r23, r22
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	21 fd       	sbrc	r18, 1
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 3bc:	9f 5f       	subi	r25, 0xFF	; 255
 3be:	ec cf       	rjmp	.-40     	; 0x398 <Endpoint_ConfigureEndpoint_Prv+0x2>
 3c0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3c4:	3e 7f       	andi	r19, 0xFE	; 254
 3c6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3ca:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3ce:	3d 7f       	andi	r19, 0xFD	; 253
 3d0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3d4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3d8:	31 60       	ori	r19, 0x01	; 1
 3da:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3de:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 3e2:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3e6:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3ea:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3ee:	27 fd       	sbrc	r18, 7
 3f0:	e5 cf       	rjmp	.-54     	; 0x3bc <Endpoint_ConfigureEndpoint_Prv+0x26>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret

000003fe <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest>
 402:	87 ff       	sbrs	r24, 7
 404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 406:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 40a:	82 fd       	sbrc	r24, 2
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 40e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 412:	81 11       	cpse	r24, r1
 414:	f8 cf       	rjmp	.-16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 416:	11 c0       	rjmp	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 418:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 41c:	8b 77       	andi	r24, 0x7B	; 123
 41e:	0b c0       	rjmp	.+22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 420:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 424:	88 23       	and	r24, r24
 426:	49 f0       	breq	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 42c:	80 ff       	sbrs	r24, 0
 42e:	f8 cf       	rjmp	.-16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 430:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 434:	8e 77       	andi	r24, 0x7E	; 126
 436:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 43a:	08 95       	ret

0000043c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 43c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 440:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 444:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 446:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 44a:	84 2f       	mov	r24, r20
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	40 ff       	sbrs	r20, 0
 450:	23 c0       	rjmp	.+70     	; 0x498 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 452:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 456:	80 fd       	sbrc	r24, 0
 458:	1d c0       	rjmp	.+58     	; 0x494 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 45a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 45e:	88 23       	and	r24, r24
 460:	99 f0       	breq	.+38     	; 0x488 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 462:	85 30       	cpi	r24, 0x05	; 5
 464:	99 f0       	breq	.+38     	; 0x48c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 466:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 46a:	85 fd       	sbrc	r24, 5
 46c:	11 c0       	rjmp	.+34     	; 0x490 <Endpoint_WaitUntilReady+0x54>
 46e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 472:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 476:	24 17       	cp	r18, r20
 478:	35 07       	cpc	r19, r21
 47a:	29 f3       	breq	.-54     	; 0x446 <Endpoint_WaitUntilReady+0xa>
 47c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 47e:	11 f0       	breq	.+4      	; 0x484 <Endpoint_WaitUntilReady+0x48>
 480:	9a 01       	movw	r18, r20
 482:	e1 cf       	rjmp	.-62     	; 0x446 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 498:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 49c:	42 ff       	sbrs	r20, 2
 49e:	dd cf       	rjmp	.-70     	; 0x45a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4a0:	08 95       	ret

000004a2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4aa:	49 d0       	rcall	.+146    	; 0x53e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4ac:	50 d0       	rcall	.+160    	; 0x54e <USB_INT_ClearAllInterrupts>
 4ae:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	88 81       	ld	r24, Y
 4b4:	8f 77       	andi	r24, 0x7F	; 127
 4b6:	88 83       	st	Y, r24
 4b8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 4ba:	80 68       	ori	r24, 0x80	; 128
 4bc:	88 83       	st	Y, r24
 4be:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4c0:	8f 7d       	andi	r24, 0xDF	; 223
 4c2:	88 83       	st	Y, r24
 4c4:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	80 83       	st	Z, r24
 4ce:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 4d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 4d8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 4dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 4e0:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	f8 01       	movw	r30, r16
 4e6:	80 81       	ld	r24, Z
 4e8:	8b 7f       	andi	r24, 0xFB	; 251
 4ea:	80 83       	st	Z, r24
 4ec:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	88 83       	st	Y, r24
 4f2:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	4e df       	rcall	.-356    	; 0x396 <Endpoint_ConfigureEndpoint_Prv>
 4fa:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	80 83       	st	Z, r24
 504:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	80 83       	st	Z, r24
 50e:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 510:	88 60       	ori	r24, 0x08	; 8
 512:	80 83       	st	Z, r24
 514:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 516:	80 81       	ld	r24, Z
 518:	8e 7f       	andi	r24, 0xFE	; 254
 51a:	80 83       	st	Z, r24
 51c:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 51e:	80 61       	ori	r24, 0x10	; 16
 520:	88 83       	st	Y, r24
 522:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	08 95       	ret

0000052c <USB_Init>:
 52c:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	81 60       	ori	r24, 0x01	; 1
 534:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_IsInitialized>

	USB_ResetInterface();
 53c:	b2 cf       	rjmp	.-156    	; 0x4a2 <USB_ResetInterface>

0000053e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 53e:	e8 ed       	ldi	r30, 0xD8	; 216
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	8c 7f       	andi	r24, 0xFC	; 252
 546:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 548:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 54c:	08 95       	ret

0000054e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 54e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 552:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 556:	08 95       	ret

00000558 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	0b b6       	in	r0, 0x3b	; 59
 564:	0f 92       	push	r0
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 57e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 582:	82 ff       	sbrs	r24, 2
 584:	0a c0       	rjmp	.+20     	; 0x59a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 586:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 58a:	82 ff       	sbrs	r24, 2
 58c:	06 c0       	rjmp	.+12     	; 0x59a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 58e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 592:	8b 7f       	andi	r24, 0xFB	; 251
 594:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 598:	f2 d2       	rcall	.+1508   	; 0xb7e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 59a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 59e:	80 ff       	sbrs	r24, 0
 5a0:	1d c0       	rjmp	.+58     	; 0x5dc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5a2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 5a6:	80 ff       	sbrs	r24, 0
 5a8:	19 c0       	rjmp	.+50     	; 0x5dc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5aa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5b4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5b8:	80 ff       	sbrs	r24, 0
 5ba:	0c c0       	rjmp	.+24     	; 0x5d4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5bc:	8c e0       	ldi	r24, 0x0C	; 12
 5be:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5c0:	8e e0       	ldi	r24, 0x0E	; 14
 5c2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5c4:	09 b4       	in	r0, 0x29	; 41
 5c6:	00 fe       	sbrs	r0, 0
 5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 5d0:	06 de       	rcall	.-1012   	; 0x1de <EVENT_USB_Device_Connect>
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5d4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5d6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 5da:	03 de       	rcall	.-1018   	; 0x1e2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5e0:	80 ff       	sbrs	r24, 0
 5e2:	18 c0       	rjmp	.+48     	; 0x614 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5e4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5e8:	80 ff       	sbrs	r24, 0
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 600:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 604:	80 62       	ori	r24, 0x20	; 32
 606:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 60a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 60c:	85 e0       	ldi	r24, 0x05	; 5
 60e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 612:	b5 d2       	rcall	.+1386   	; 0xb7e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 614:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 618:	84 ff       	sbrs	r24, 4
 61a:	2d c0       	rjmp	.+90     	; 0x676 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 61c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 620:	84 ff       	sbrs	r24, 4
 622:	29 c0       	rjmp	.+82     	; 0x676 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 624:	8c e0       	ldi	r24, 0x0C	; 12
 626:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 628:	8e e0       	ldi	r24, 0x0E	; 14
 62a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 62c:	09 b4       	in	r0, 0x29	; 41
 62e:	00 fe       	sbrs	r0, 0
 630:	fd cf       	rjmp	.-6      	; 0x62c <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 632:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 63c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 640:	8f 7e       	andi	r24, 0xEF	; 239
 642:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 646:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 64a:	8f 7e       	andi	r24, 0xEF	; 239
 64c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 650:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 654:	81 60       	ori	r24, 0x01	; 1
 656:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 65a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
 65e:	81 11       	cpse	r24, r1
 660:	06 c0       	rjmp	.+12     	; 0x66e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 662:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 666:	87 fd       	sbrc	r24, 7
 668:	02 c0       	rjmp	.+4      	; 0x66e <__vector_10+0x116>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	01 c0       	rjmp	.+2      	; 0x670 <__vector_10+0x118>
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 674:	84 d2       	rcall	.+1288   	; 0xb7e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 676:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 67a:	83 ff       	sbrs	r24, 3
 67c:	22 c0       	rjmp	.+68     	; 0x6c2 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 67e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 682:	83 ff       	sbrs	r24, 3
 684:	1e c0       	rjmp	.+60     	; 0x6c2 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 686:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 68a:	87 7f       	andi	r24, 0xF7	; 247
 68c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 696:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 69a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 69e:	8e 7f       	andi	r24, 0xFE	; 254
 6a0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6a8:	8e 7f       	andi	r24, 0xFE	; 254
 6aa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6ae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 6b2:	80 61       	ori	r24, 0x10	; 16
 6b4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6b8:	42 e0       	ldi	r20, 0x02	; 2
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	6b de       	rcall	.-810    	; 0x396 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6c0:	5e d2       	rcall	.+1212   	; 0xb7e <USB_Event_Stub>
 6c2:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0b be       	out	0x3b, r0	; 59
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <Endpoint_Write_Stream_LE>:
 6e8:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	ec 01       	movw	r28, r24
 6fa:	8b 01       	movw	r16, r22
 6fc:	7a 01       	movw	r14, r20
 6fe:	9e de       	rcall	.-708    	; 0x43c <Endpoint_WaitUntilReady>
 700:	81 11       	cpse	r24, r1
 702:	33 c0       	rjmp	.+102    	; 0x76a <Endpoint_Write_Stream_LE+0x82>
 704:	e1 14       	cp	r14, r1
 706:	f1 04       	cpc	r15, r1
 708:	39 f0       	breq	.+14     	; 0x718 <Endpoint_Write_Stream_LE+0x30>
 70a:	f7 01       	movw	r30, r14
 70c:	80 81       	ld	r24, Z
 70e:	91 81       	ldd	r25, Z+1	; 0x01
 710:	08 1b       	sub	r16, r24
 712:	19 0b       	sbc	r17, r25
 714:	c8 0f       	add	r28, r24
 716:	d9 1f       	adc	r29, r25
 718:	c1 2c       	mov	r12, r1
 71a:	d1 2c       	mov	r13, r1
 71c:	01 15       	cp	r16, r1
 71e:	11 05       	cpc	r17, r1
 720:	19 f1       	breq	.+70     	; 0x768 <Endpoint_Write_Stream_LE+0x80>
 722:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 726:	85 fd       	sbrc	r24, 5
 728:	16 c0       	rjmp	.+44     	; 0x756 <Endpoint_Write_Stream_LE+0x6e>
 72a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 72e:	8e 77       	andi	r24, 0x7E	; 126
 730:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 734:	25 d2       	rcall	.+1098   	; 0xb80 <USB_USBTask>
 736:	e1 14       	cp	r14, r1
 738:	f1 04       	cpc	r15, r1
 73a:	49 f0       	breq	.+18     	; 0x74e <Endpoint_Write_Stream_LE+0x66>
 73c:	f7 01       	movw	r30, r14
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	c8 0e       	add	r12, r24
 744:	d9 1e       	adc	r13, r25
 746:	d1 82       	std	Z+1, r13	; 0x01
 748:	c0 82       	st	Z, r12
 74a:	85 e0       	ldi	r24, 0x05	; 5
 74c:	0e c0       	rjmp	.+28     	; 0x76a <Endpoint_Write_Stream_LE+0x82>
 74e:	76 de       	rcall	.-788    	; 0x43c <Endpoint_WaitUntilReady>
 750:	88 23       	and	r24, r24
 752:	21 f3       	breq	.-56     	; 0x71c <Endpoint_Write_Stream_LE+0x34>
 754:	0a c0       	rjmp	.+20     	; 0x76a <Endpoint_Write_Stream_LE+0x82>
 756:	89 91       	ld	r24, Y+
 758:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 75c:	01 50       	subi	r16, 0x01	; 1
 75e:	11 09       	sbc	r17, r1
 760:	ff ef       	ldi	r31, 0xFF	; 255
 762:	cf 1a       	sub	r12, r31
 764:	df 0a       	sbc	r13, r31
 766:	da cf       	rjmp	.-76     	; 0x71c <Endpoint_Write_Stream_LE+0x34>
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	df 90       	pop	r13
 778:	cf 90       	pop	r12
 77a:	08 95       	ret

0000077c <Endpoint_Write_Control_Stream_LE>:
 77c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <USB_ControlRequest+0x6>
 780:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <USB_ControlRequest+0x7>
 784:	26 17       	cp	r18, r22
 786:	37 07       	cpc	r19, r23
 788:	48 f0       	brcs	.+18     	; 0x79c <Endpoint_Write_Control_Stream_LE+0x20>
 78a:	61 15       	cp	r22, r1
 78c:	71 05       	cpc	r23, r1
 78e:	39 f4       	brne	.+14     	; 0x79e <Endpoint_Write_Control_Stream_LE+0x22>
 790:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 794:	2e 77       	andi	r18, 0x7E	; 126
 796:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 79a:	01 c0       	rjmp	.+2      	; 0x79e <Endpoint_Write_Control_Stream_LE+0x22>
 79c:	b9 01       	movw	r22, r18
 79e:	fc 01       	movw	r30, r24
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	61 15       	cp	r22, r1
 7a4:	71 05       	cpc	r23, r1
 7a6:	69 f1       	breq	.+90     	; 0x802 <Endpoint_Write_Control_Stream_LE+0x86>
 7a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 7ac:	88 23       	and	r24, r24
 7ae:	d1 f1       	breq	.+116    	; 0x824 <Endpoint_Write_Control_Stream_LE+0xa8>
 7b0:	85 30       	cpi	r24, 0x05	; 5
 7b2:	d1 f1       	breq	.+116    	; 0x828 <Endpoint_Write_Control_Stream_LE+0xac>
 7b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7b8:	83 fd       	sbrc	r24, 3
 7ba:	32 c0       	rjmp	.+100    	; 0x820 <Endpoint_Write_Control_Stream_LE+0xa4>
 7bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c0:	82 fd       	sbrc	r24, 2
 7c2:	28 c0       	rjmp	.+80     	; 0x814 <Endpoint_Write_Control_Stream_LE+0x98>
 7c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c8:	80 ff       	sbrs	r24, 0
 7ca:	eb cf       	rjmp	.-42     	; 0x7a2 <Endpoint_Write_Control_Stream_LE+0x26>
 7cc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 7d0:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 7d4:	61 15       	cp	r22, r1
 7d6:	71 05       	cpc	r23, r1
 7d8:	51 f0       	breq	.+20     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x72>
 7da:	88 30       	cpi	r24, 0x08	; 8
 7dc:	91 05       	cpc	r25, r1
 7de:	38 f4       	brcc	.+14     	; 0x7ee <Endpoint_Write_Control_Stream_LE+0x72>
 7e0:	21 91       	ld	r18, Z+
 7e2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 7e6:	61 50       	subi	r22, 0x01	; 1
 7e8:	71 09       	sbc	r23, r1
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	f3 cf       	rjmp	.-26     	; 0x7d4 <Endpoint_Write_Control_Stream_LE+0x58>
 7ee:	21 e0       	ldi	r18, 0x01	; 1
 7f0:	08 97       	sbiw	r24, 0x08	; 8
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <Endpoint_Write_Control_Stream_LE+0x7a>
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7fa:	8e 77       	andi	r24, 0x7E	; 126
 7fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 800:	d0 cf       	rjmp	.-96     	; 0x7a2 <Endpoint_Write_Control_Stream_LE+0x26>
 802:	21 11       	cpse	r18, r1
 804:	d1 cf       	rjmp	.-94     	; 0x7a8 <Endpoint_Write_Control_Stream_LE+0x2c>
 806:	06 c0       	rjmp	.+12     	; 0x814 <Endpoint_Write_Control_Stream_LE+0x98>
 808:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 80c:	88 23       	and	r24, r24
 80e:	51 f0       	breq	.+20     	; 0x824 <Endpoint_Write_Control_Stream_LE+0xa8>
 810:	85 30       	cpi	r24, 0x05	; 5
 812:	51 f0       	breq	.+20     	; 0x828 <Endpoint_Write_Control_Stream_LE+0xac>
 814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 818:	82 ff       	sbrs	r24, 2
 81a:	f6 cf       	rjmp	.-20     	; 0x808 <Endpoint_Write_Control_Stream_LE+0x8c>
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	08 95       	ret
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	08 95       	ret
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	08 95       	ret
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	08 95       	ret

0000082c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 82c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <USB_ControlRequest+0x6>
 830:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <USB_ControlRequest+0x7>
 834:	26 17       	cp	r18, r22
 836:	37 07       	cpc	r19, r23
 838:	48 f0       	brcs	.+18     	; 0x84c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	39 f4       	brne	.+14     	; 0x84e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 840:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 844:	2e 77       	andi	r18, 0x7E	; 126
 846:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 84a:	01 c0       	rjmp	.+2      	; 0x84e <Endpoint_Write_Control_PStream_LE+0x22>
 84c:	b9 01       	movw	r22, r18
 84e:	fc 01       	movw	r30, r24
 850:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 852:	61 15       	cp	r22, r1
 854:	71 05       	cpc	r23, r1
 856:	71 f1       	breq	.+92     	; 0x8b4 <Endpoint_Write_Control_PStream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 858:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 85c:	88 23       	and	r24, r24
 85e:	d9 f1       	breq	.+118    	; 0x8d6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 860:	85 30       	cpi	r24, 0x05	; 5
 862:	d9 f1       	breq	.+118    	; 0x8da <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 864:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 868:	83 fd       	sbrc	r24, 3
 86a:	33 c0       	rjmp	.+102    	; 0x8d2 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 86c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 870:	82 fd       	sbrc	r24, 2
 872:	29 c0       	rjmp	.+82     	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 874:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 878:	80 ff       	sbrs	r24, 0
 87a:	eb cf       	rjmp	.-42     	; 0x852 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 87c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 880:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 884:	61 15       	cp	r22, r1
 886:	71 05       	cpc	r23, r1
 888:	59 f0       	breq	.+22     	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0x74>
 88a:	88 30       	cpi	r24, 0x08	; 8
 88c:	91 05       	cpc	r25, r1
 88e:	40 f4       	brcc	.+16     	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 890:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 892:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 896:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 898:	61 50       	subi	r22, 0x01	; 1
 89a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 89c:	01 96       	adiw	r24, 0x01	; 1
 89e:	f2 cf       	rjmp	.-28     	; 0x884 <Endpoint_Write_Control_PStream_LE+0x58>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 8a0:	21 e0       	ldi	r18, 0x01	; 1
 8a2:	08 97       	sbiw	r24, 0x08	; 8
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <Endpoint_Write_Control_PStream_LE+0x7c>
 8a6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8ac:	8e 77       	andi	r24, 0x7E	; 126
 8ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8b2:	cf cf       	rjmp	.-98     	; 0x852 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8b4:	21 11       	cpse	r18, r1
 8b6:	d0 cf       	rjmp	.-96     	; 0x858 <Endpoint_Write_Control_PStream_LE+0x2c>
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8be:	88 23       	and	r24, r24
 8c0:	51 f0       	breq	.+20     	; 0x8d6 <Endpoint_Write_Control_PStream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8c2:	85 30       	cpi	r24, 0x05	; 5
 8c4:	51 f0       	breq	.+20     	; 0x8da <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8ca:	82 ff       	sbrs	r24, 2
 8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 8da:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8dc:	08 95       	ret

000008de <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	aa 97       	sbiw	r28, 0x2a	; 42
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	e7 e0       	ldi	r30, 0x07	; 7
 8f8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8fa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8fe:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 900:	21 e0       	ldi	r18, 0x01	; 1
 902:	ef 30       	cpi	r30, 0x0F	; 15
 904:	f2 07       	cpc	r31, r18
 906:	c9 f7       	brne	.-14     	; 0x8fa <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 908:	b2 dc       	rcall	.-1692   	; 0x26e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 90a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 90e:	83 ff       	sbrs	r24, 3
 910:	1d c1       	rjmp	.+570    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 912:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 916:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x1>
 91a:	49 2f       	mov	r20, r25
 91c:	50 e0       	ldi	r21, 0x00	; 0
 91e:	4a 30       	cpi	r20, 0x0A	; 10
 920:	51 05       	cpc	r21, r1
 922:	08 f0       	brcs	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x48>
 924:	13 c1       	rjmp	.+550    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
 926:	fa 01       	movw	r30, r20
 928:	e4 5b       	subi	r30, 0xB4	; 180
 92a:	ff 4f       	sbci	r31, 0xFF	; 255
 92c:	3b c1       	rjmp	.+630    	; 0xba4 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 92e:	80 38       	cpi	r24, 0x80	; 128
 930:	81 f0       	breq	.+32     	; 0x952 <USB_Device_ProcessControlRequest+0x74>
 932:	82 38       	cpi	r24, 0x82	; 130
 934:	09 f0       	breq	.+2      	; 0x938 <USB_Device_ProcessControlRequest+0x5a>
 936:	0a c1       	rjmp	.+532    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 938:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_ControlRequest+0x4>
 93c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 93e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 942:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			CurrentStatus = Endpoint_IsStalled();
 946:	85 fb       	bst	r24, 5
 948:	88 27       	eor	r24, r24
 94a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 94c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 950:	06 c0       	rjmp	.+12     	; 0x95e <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 952:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 956:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <USB_Device_RemoteWakeupEnabled>
 95a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 95c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 95e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 962:	97 7f       	andi	r25, 0xF7	; 247
 964:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 968:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 96c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 970:	c5 c0       	rjmp	.+394    	; 0xafc <USB_Device_ProcessControlRequest+0x21e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 972:	28 2f       	mov	r18, r24
 974:	2d 7f       	andi	r18, 0xFD	; 253
 976:	09 f0       	breq	.+2      	; 0x97a <USB_Device_ProcessControlRequest+0x9c>
 978:	e9 c0       	rjmp	.+466    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 97a:	88 23       	and	r24, r24
 97c:	19 f0       	breq	.+6      	; 0x984 <USB_Device_ProcessControlRequest+0xa6>
 97e:	82 30       	cpi	r24, 0x02	; 2
 980:	61 f0       	breq	.+24     	; 0x99a <USB_Device_ProcessControlRequest+0xbc>
 982:	e4 c0       	rjmp	.+456    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 984:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	09 f0       	breq	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0xb0>
 98c:	df c0       	rjmp	.+446    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 98e:	93 30       	cpi	r25, 0x03	; 3
 990:	09 f0       	breq	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0xb6>
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_Device_RemoteWakeupEnabled>
 998:	2b c0       	rjmp	.+86     	; 0x9f0 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 99a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 99e:	81 11       	cpse	r24, r1
 9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_ControlRequest+0x4>
 9a6:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9a8:	09 f4       	brne	.+2      	; 0x9ac <USB_Device_ProcessControlRequest+0xce>
 9aa:	d0 c0       	rjmp	.+416    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9b0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9b4:	20 ff       	sbrs	r18, 0
 9b6:	1c c0       	rjmp	.+56     	; 0x9f0 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9b8:	93 30       	cpi	r25, 0x03	; 3
 9ba:	21 f4       	brne	.+8      	; 0x9c4 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9bc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9c0:	80 62       	ori	r24, 0x20	; 32
 9c2:	14 c0       	rjmp	.+40     	; 0x9ec <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9c4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9c8:	90 61       	ori	r25, 0x10	; 16
 9ca:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9ce:	21 e0       	ldi	r18, 0x01	; 1
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	a9 01       	movw	r20, r18
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <USB_Device_ProcessControlRequest+0xfc>
 9d6:	44 0f       	add	r20, r20
 9d8:	55 1f       	adc	r21, r21
 9da:	8a 95       	dec	r24
 9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <USB_Device_ProcessControlRequest+0xf8>
 9de:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 9e2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9e6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 9ea:	88 60       	ori	r24, 0x08	; 8
 9ec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9f0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 9f8:	87 7f       	andi	r24, 0xF7	; 247
 9fa:	83 c0       	rjmp	.+262    	; 0xb02 <USB_Device_ProcessControlRequest+0x224>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9fc:	81 11       	cpse	r24, r1
 9fe:	a6 c0       	rjmp	.+332    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 a00:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 a04:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a06:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a08:	f8 94       	cli
 a0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a0e:	87 7f       	andi	r24, 0xF7	; 247
 a10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a14:	f4 dc       	rcall	.-1560   	; 0x3fe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 a1a:	80 ff       	sbrs	r24, 0
 a1c:	fc cf       	rjmp	.-8      	; 0xa16 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a1e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a22:	80 78       	andi	r24, 0x80	; 128
 a24:	81 2b       	or	r24, r17

				UDADDR = Temp;
 a26:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
 a2a:	80 68       	ori	r24, 0x80	; 128
 a2c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a30:	11 11       	cpse	r17, r1
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <USB_Device_ProcessControlRequest+0x15a>
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0x15c>
 a38:	83 e0       	ldi	r24, 0x03	; 3
 a3a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a3e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 a40:	85 c0       	rjmp	.+266    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a42:	80 58       	subi	r24, 0x80	; 128
 a44:	82 30       	cpi	r24, 0x02	; 2
 a46:	08 f0       	brcs	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0x16c>
 a48:	81 c0       	rjmp	.+258    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a4a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 a4e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USB_ControlRequest+0x3>
 a52:	8c 3d       	cpi	r24, 0xDC	; 220
 a54:	53 e0       	ldi	r21, 0x03	; 3
 a56:	95 07       	cpc	r25, r21
 a58:	71 f5       	brne	.+92     	; 0xab6 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a5a:	83 e0       	ldi	r24, 0x03	; 3
 a5c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a5e:	8a e2       	ldi	r24, 0x2A	; 42
 a60:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a62:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a64:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a66:	de 01       	movw	r26, r28
 a68:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a6a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a6c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a6e:	51 e2       	ldi	r21, 0x21	; 33
 a70:	e3 2f       	mov	r30, r19
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 a78:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a7a:	20 ff       	sbrs	r18, 0
 a7c:	03 c0       	rjmp	.+6      	; 0xa84 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
 a7e:	e2 95       	swap	r30
 a80:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a82:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a84:	ef 70       	andi	r30, 0x0F	; 15
 a86:	8e 2f       	mov	r24, r30
 a88:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a8a:	ea 30       	cpi	r30, 0x0A	; 10
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <USB_Device_ProcessControlRequest+0x1b4>
 a8e:	c7 96       	adiw	r24, 0x37	; 55
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0x1b6>
 a92:	c0 96       	adiw	r24, 0x30	; 48
 a94:	8d 93       	st	X+, r24
 a96:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a98:	2f 5f       	subi	r18, 0xFF	; 255
 a9a:	24 31       	cpi	r18, 0x14	; 20
 a9c:	49 f7       	brne	.-46     	; 0xa70 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a9e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aa4:	87 7f       	andi	r24, 0xF7	; 247
 aa6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 aaa:	6a e2       	ldi	r22, 0x2A	; 42
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	ce 01       	movw	r24, r28
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	64 de       	rcall	.-824    	; 0x77c <Endpoint_Write_Control_Stream_LE>
 ab4:	12 c0       	rjmp	.+36     	; 0xada <USB_Device_ProcessControlRequest+0x1fc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ab6:	ae 01       	movw	r20, r28
 ab8:	4f 5f       	subi	r20, 0xFF	; 255
 aba:	5f 4f       	sbci	r21, 0xFF	; 255
 abc:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <USB_ControlRequest+0x4>
 ac0:	29 dc       	rcall	.-1966   	; 0x314 <CALLBACK_USB_GetDescriptor>
 ac2:	bc 01       	movw	r22, r24
 ac4:	89 2b       	or	r24, r25
 ac6:	09 f4       	brne	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x1ec>
 ac8:	41 c0       	rjmp	.+130    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
 aca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ace:	97 7f       	andi	r25, 0xF7	; 247
 ad0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ad4:	89 81       	ldd	r24, Y+1	; 0x01
 ad6:	9a 81       	ldd	r25, Y+2	; 0x02
 ad8:	a9 de       	rcall	.-686    	; 0x82c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ada:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ade:	8b 77       	andi	r24, 0x7B	; 123
 ae0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ae4:	33 c0       	rjmp	.+102    	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ae6:	80 38       	cpi	r24, 0x80	; 128
 ae8:	89 f5       	brne	.+98     	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 aee:	87 7f       	andi	r24, 0xF7	; 247
 af0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 af4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 af8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 afc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b00:	8e 77       	andi	r24, 0x7E	; 126
 b02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b06:	7b dc       	rcall	.-1802   	; 0x3fe <Endpoint_ClearStatusStage>
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b0a:	81 11       	cpse	r24, r1
 b0c:	1f c0       	rjmp	.+62     	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b0e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 b12:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USB_ControlRequest+0x3>
 b16:	99 27       	eor	r25, r25
 b18:	02 97       	sbiw	r24, 0x02	; 2
 b1a:	c4 f4       	brge	.+48     	; 0xb4c <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b20:	87 7f       	andi	r24, 0xF7	; 247
 b22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b26:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 b2a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 b2e:	67 dc       	rcall	.-1842   	; 0x3fe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b30:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
 b34:	81 11       	cpse	r24, r1
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b38:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b3c:	87 fd       	sbrc	r24, 7
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <USB_Device_ProcessControlRequest+0x266>
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x268>
 b44:	84 e0       	ldi	r24, 0x04	; 4
 b46:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 b4a:	4d db       	rcall	.-2406   	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b50:	83 ff       	sbrs	r24, 3
 b52:	0a c0       	rjmp	.+20     	; 0xb68 <USB_Device_ProcessControlRequest+0x28a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b58:	80 62       	ori	r24, 0x20	; 32
 b5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b62:	87 7f       	andi	r24, 0xF7	; 247
 b64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 b68:	aa 96       	adiw	r28, 0x2a	; 42
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	f8 94       	cli
 b6e:	de bf       	out	0x3e, r29	; 62
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	cd bf       	out	0x3d, r28	; 61
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	1f 91       	pop	r17
 b7a:	0f 91       	pop	r16
 b7c:	08 95       	ret

00000b7e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b7e:	08 95       	ret

00000b80 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b80:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b82:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 b86:	88 23       	and	r24, r24
 b88:	59 f0       	breq	.+22     	; 0xba0 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b8a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b8e:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b90:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b98:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 b9a:	a1 de       	rcall	.-702    	; 0x8de <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b9c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 ba0:	cf 91       	pop	r28
 ba2:	08 95       	ret

00000ba4 <__tablejump2__>:
 ba4:	ee 0f       	add	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	00 24       	eor	r0, r0
 baa:	00 1c       	adc	r0, r0
 bac:	0b be       	out	0x3b, r0	; 59
 bae:	07 90       	elpm	r0, Z+
 bb0:	f6 91       	elpm	r31, Z
 bb2:	e0 2d       	mov	r30, r0
 bb4:	09 94       	ijmp

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
